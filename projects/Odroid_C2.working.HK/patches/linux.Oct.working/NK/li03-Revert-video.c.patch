From 229faeca87a915527fe41ea8d2a16d29fef8a33f Mon Sep 17 00:00:00 2001
From: Jamie Coldhill <wrxtasy@amnet.net.au>
Date: Sun, 2 Oct 2016 22:36:16 +0800
Subject: [PATCH] Revert video.c

---
 drivers/amlogic/amports/video.c | 1576 +++++++++++++--------------------------
 1 file changed, 533 insertions(+), 1043 deletions(-)

diff --git a/drivers/amlogic/amports/video.c b/drivers/amlogic/amports/video.c
index 2d31e7c..ea23608 100644
--- a/drivers/amlogic/amports/video.c
+++ b/drivers/amlogic/amports/video.c
@@ -124,8 +124,6 @@ static u32 omx_pts;
 static int omx_pts_interval_upper = 11000;
 static int omx_pts_interval_lower = -5500;
 static bool bypass_pps;
-/*For 3D usage ----0:  mbx   1: tv */
-bool platform_type = 1;
 
 /* for bit depth setting. */
 int bit_depth_flag = 8;
@@ -322,7 +320,7 @@ static int video2_onoff_state = VIDEO_ENABLE_STATE_IDLE;
 		VIDEO_LAYER_ON(); \
 	} while (0)
 #endif
-#if 0  /*TV_3D_FUNCTION_OPEN*/
+#ifdef TV_3D_FUNCTION_OPEN
 #define EnableVideoLayer2()  \
 	do { \
 		VD2_MEM_POWER_ON(); \
@@ -372,7 +370,7 @@ static int video2_onoff_state = VIDEO_ENABLE_STATE_IDLE;
 #else
 #define DisableVideoLayer_NoDelay() DisableVideoLayer()
 #endif
-#if 0  /*TV_3D_FUNCTION_OPEN */
+#ifdef TV_3D_FUNCTION_OPEN
 #define DisableVideoLayer2() \
 	do { \
 		CLEAR_VCBUS_REG_MASK(VPP_MISC + cur_dev->vpp_off, \
@@ -459,7 +457,7 @@ static int vsync_rdma_line_max;
 #endif
 
 static unsigned int process_3d_type;
-static unsigned int last_process_3d_type;
+
 #ifdef TV_3D_FUNCTION_OPEN
 /* toggle_3d_fa_frame is for checking the vpts_expire  in 2 vsnyc */
 static int toggle_3d_fa_frame = 1;
@@ -701,13 +699,10 @@ static u32 disable_video = VIDEO_DISABLE_NONE;
 static u32 video_enabled __nosavedata;
 /* show first frame*/
 static bool show_first_frame_nosync;
-bool show_first_picture = false;
 /* static bool first_frame=false; */
 
 /* test screen*/
 static u32 test_screen;
-/* rgb screen*/
-static u32 rgb_screen;
 
 /* video frame repeat count */
 static u32 frame_repeat_count;
@@ -1345,32 +1340,6 @@ static inline struct vframe_s *video_vf_get(void)
 			process_3d_type &= (~MODE_3D_MVC);
 			mvc_flag = 0;
 		}
-		if ((process_3d_type & MODE_FORCE_3D_TO_2D_LR)
-		&& (!(vf->type & VIDTYPE_MVC))) {
-			vf->trans_fmt = TVIN_TFMT_3D_DET_LR;
-			vf->left_eye.start_x = 0;
-			vf->left_eye.start_y = 0;
-			vf->left_eye.width = vf->width / 2;
-			vf->left_eye.height = vf->height;
-
-			vf->right_eye.start_x = vf->width / 2;
-			vf->right_eye.start_y = 0;
-			vf->right_eye.width = vf->width / 2;
-		}
-		if ((process_3d_type & MODE_FORCE_3D_TO_2D_TB)
-		&& (!(vf->type & VIDTYPE_MVC))) {
-			vf->trans_fmt = TVIN_TFMT_3D_TB;
-			vf->left_eye.start_x = 0;
-			vf->left_eye.start_y = 0;
-			vf->left_eye.width = vf->width;
-			vf->left_eye.height = vf->height/2;
-
-			vf->right_eye.start_x = 0;
-			vf->right_eye.start_y = vf->height/2;
-			vf->right_eye.width = vf->width;
-			vf->right_eye.height = vf->height/2;
-		}
-
 #endif
 	}
 	return vf;
@@ -1448,9 +1417,9 @@ static void vpp_settings_h(struct vpp_frame_par_s *framePtr)
 {
 	struct vppfilter_mode_s *vpp_filter = &framePtr->vpp_filter;
 	u32 r1, r2, r3;
-
+#ifdef TV_3D_FUNCTION_OPEN
 	u32 x_lines;
-
+#endif
 	r1 = framePtr->VPP_hsc_linear_startp - framePtr->VPP_hsc_startp;
 	r2 = framePtr->VPP_hsc_linear_endp - framePtr->VPP_hsc_startp;
 	r3 = framePtr->VPP_hsc_endp - framePtr->VPP_hsc_startp;
@@ -1459,74 +1428,59 @@ static void vpp_settings_h(struct vpp_frame_par_s *framePtr)
 		(get_cpu_type() >= MESON_CPU_MAJOR_ID_GXTVBB))
 		r3 >>= framePtr->supsc1_hori_ratio;
 
-	if (platform_type == 1) {
-		x_lines = zoom_end_x_lines / (framePtr->hscale_skip_count + 1);
-		if (process_3d_type & MODE_3D_OUT_TB) {
-			/* vd1 and vd2 do pre blend */
-			VSYNC_WR_MPEG_REG(VPP_PREBLEND_VD1_H_START_END,
-			((zoom_start_x_lines & VPP_VD_SIZE_MASK) <<
-			VPP_VD1_START_BIT) | (((zoom_end_x_lines) &
-			VPP_VD_SIZE_MASK) << VPP_VD1_END_BIT));
-			VSYNC_WR_MPEG_REG(VPP_BLEND_VD2_H_START_END,
-			((zoom_start_x_lines & VPP_VD_SIZE_MASK) <<
-			VPP_VD1_START_BIT) | (((zoom_end_x_lines) &
-			VPP_VD_SIZE_MASK) << VPP_VD1_END_BIT));
-			VSYNC_WR_MPEG_REG(VPP_POSTBLEND_VD1_H_START_END +
-			cur_dev->vpp_off,
-			((framePtr->VPP_hsc_startp & VPP_VD_SIZE_MASK)
-			<< VPP_VD1_START_BIT) |
-			((framePtr->VPP_hsc_endp & VPP_VD_SIZE_MASK)
-			<< VPP_VD1_END_BIT));
-		} else if (process_3d_type & MODE_3D_OUT_LR) {
-			/* vd1 and vd2 do pre blend */
-			VSYNC_WR_MPEG_REG(VPP_PREBLEND_VD1_H_START_END,
-			((zoom_start_x_lines & VPP_VD_SIZE_MASK) <<
-			VPP_VD1_START_BIT) | (((x_lines >> 1) &
-			VPP_VD_SIZE_MASK) <<
-			VPP_VD1_END_BIT));
-			VSYNC_WR_MPEG_REG(VPP_BLEND_VD2_H_START_END,
-			((((x_lines + 1) >> 1) & VPP_VD_SIZE_MASK) <<
-			VPP_VD1_START_BIT) | ((x_lines &
-			VPP_VD_SIZE_MASK) << VPP_VD1_END_BIT));
-			VSYNC_WR_MPEG_REG(VPP_POSTBLEND_VD1_H_START_END +
-			cur_dev->vpp_off,
-			((framePtr->VPP_hsc_startp & VPP_VD_SIZE_MASK)
-			<< VPP_VD1_START_BIT) |
-			((framePtr->VPP_hsc_endp & VPP_VD_SIZE_MASK)
-			<< VPP_VD1_END_BIT));
-		} else{
-
-			VSYNC_WR_MPEG_REG(VPP_POSTBLEND_VD1_H_START_END +
-			cur_dev->vpp_off,
-			((framePtr->VPP_hsc_startp & VPP_VD_SIZE_MASK)
-			<< VPP_VD1_START_BIT) |
-			((framePtr->VPP_hsc_endp & VPP_VD_SIZE_MASK)
-			<< VPP_VD1_END_BIT));
+#ifdef TV_3D_FUNCTION_OPEN
+	x_lines = zoom_end_x_lines / (framePtr->hscale_skip_count + 1);
+	if (process_3d_type & MODE_3D_OUT_TB) {
+		/* vd1 and vd2 do pre blend */
+		VSYNC_WR_MPEG_REG(VPP_PREBLEND_VD1_H_START_END,
+				((zoom_start_x_lines & VPP_VD_SIZE_MASK) <<
+				VPP_VD1_START_BIT) | (((zoom_end_x_lines) &
+				VPP_VD_SIZE_MASK) << VPP_VD1_END_BIT));
+		VSYNC_WR_MPEG_REG(VPP_BLEND_VD2_H_START_END,
+				((zoom_start_x_lines & VPP_VD_SIZE_MASK) <<
+				VPP_VD1_START_BIT) | (((zoom_end_x_lines) &
+				VPP_VD_SIZE_MASK) << VPP_VD1_END_BIT));
+		VSYNC_WR_MPEG_REG(VPP_POSTBLEND_VD1_H_START_END +
+				cur_dev->vpp_off,
+				((framePtr->VPP_hsc_startp & VPP_VD_SIZE_MASK)
+				<< VPP_VD1_START_BIT) |
+				((framePtr->VPP_hsc_endp & VPP_VD_SIZE_MASK)
+				<< VPP_VD1_END_BIT));
+	} else if (process_3d_type & MODE_3D_OUT_LR) {
+		/* vd1 and vd2 do pre blend */
+		VSYNC_WR_MPEG_REG(VPP_PREBLEND_VD1_H_START_END,
+				((zoom_start_x_lines & VPP_VD_SIZE_MASK) <<
+				VPP_VD1_START_BIT) | (((x_lines >> 1) &
+				VPP_VD_SIZE_MASK) <<
+				VPP_VD1_END_BIT));
+		VSYNC_WR_MPEG_REG(VPP_BLEND_VD2_H_START_END,
+				((((x_lines + 1) >> 1) & VPP_VD_SIZE_MASK) <<
+				VPP_VD1_START_BIT) | ((x_lines &
+				VPP_VD_SIZE_MASK) << VPP_VD1_END_BIT));
+		VSYNC_WR_MPEG_REG(VPP_POSTBLEND_VD1_H_START_END +
+				cur_dev->vpp_off,
+				((framePtr->VPP_hsc_startp & VPP_VD_SIZE_MASK)
+				<< VPP_VD1_START_BIT) |
+				((framePtr->VPP_hsc_endp & VPP_VD_SIZE_MASK)
+				<< VPP_VD1_END_BIT));
+	} else
+#endif
+	{
 
-			VSYNC_WR_MPEG_REG(VPP_BLEND_VD2_H_START_END +
-			cur_dev->vpp_off,
-			((framePtr->VPP_hd_start_lines_ &
-			VPP_VD_SIZE_MASK) << VPP_VD1_START_BIT) |
-			((framePtr->VPP_hd_end_lines_ &
-			VPP_VD_SIZE_MASK) << VPP_VD1_END_BIT));
-		}
-	} else {
-			VSYNC_WR_MPEG_REG(VPP_POSTBLEND_VD1_H_START_END +
-			cur_dev->vpp_off,
-			((framePtr->VPP_hsc_startp & VPP_VD_SIZE_MASK)
-			<< VPP_VD1_START_BIT) |
-			((framePtr->VPP_hsc_endp & VPP_VD_SIZE_MASK)
-			<< VPP_VD1_END_BIT));
+		VSYNC_WR_MPEG_REG(VPP_POSTBLEND_VD1_H_START_END +
+				cur_dev->vpp_off,
+				((framePtr->VPP_hsc_startp & VPP_VD_SIZE_MASK)
+				<< VPP_VD1_START_BIT) |
+				((framePtr->VPP_hsc_endp & VPP_VD_SIZE_MASK)
+				<< VPP_VD1_END_BIT));
 
-			VSYNC_WR_MPEG_REG(VPP_BLEND_VD2_H_START_END +
-			cur_dev->vpp_off,
+		VSYNC_WR_MPEG_REG(VPP_BLEND_VD2_H_START_END + cur_dev->vpp_off,
 			((framePtr->VPP_hd_start_lines_ &
 			VPP_VD_SIZE_MASK) << VPP_VD1_START_BIT) |
 			((framePtr->VPP_hd_end_lines_ &
 			VPP_VD_SIZE_MASK) << VPP_VD1_END_BIT));
 	}
-	VSYNC_WR_MPEG_REG(VPP_HSC_REGION12_STARTP +
-			cur_dev->vpp_off,
+	VSYNC_WR_MPEG_REG(VPP_HSC_REGION12_STARTP + cur_dev->vpp_off,
 			(0 << VPP_REGION1_BIT) |
 			((r1 & VPP_REGION_MASK) << VPP_REGION2_BIT));
 
@@ -1554,7 +1508,9 @@ static void vpp_settings_v(struct vpp_frame_par_s *framePtr)
 {
 	struct vppfilter_mode_s *vpp_filter = &framePtr->vpp_filter;
 	u32 r, afbc_enble_flag;
+#ifdef TV_3D_FUNCTION_OPEN
 	u32 y_lines;
+#endif
 	r = framePtr->VPP_vsc_endp - framePtr->VPP_vsc_startp;
 	afbc_enble_flag = 0;
 	if (is_meson_gxbb_cpu())
@@ -1573,84 +1529,57 @@ static void vpp_settings_v(struct vpp_frame_par_s *framePtr)
 			| ((framePtr->VPP_vsc_endp & VPP_VD_SIZE_MASK) <<
 			VPP_VD1_END_BIT));
 
-	if (platform_type == 1) {
-		y_lines = zoom_end_y_lines / (framePtr->vscale_skip_count + 1);
-		if (process_3d_type & MODE_3D_OUT_TB) {
-			VSYNC_WR_MPEG_REG(VPP_PREBLEND_VD1_V_START_END,
-			((zoom_start_y_lines & VPP_VD_SIZE_MASK) <<
-			VPP_VD1_START_BIT) | (((y_lines >> 1) &
-			VPP_VD_SIZE_MASK) <<
-			VPP_VD1_END_BIT));
-			VSYNC_WR_MPEG_REG(
-			VPP_BLEND_VD2_V_START_END,
-			((((y_lines + 1) >> 1) & VPP_VD_SIZE_MASK) <<
-			VPP_VD1_START_BIT) |
-			((y_lines & VPP_VD_SIZE_MASK) <<
-			VPP_VD1_END_BIT));
-		} else if (process_3d_type & MODE_3D_OUT_LR) {
-			VSYNC_WR_MPEG_REG(VPP_PREBLEND_VD1_V_START_END,
-			((zoom_start_y_lines & VPP_VD_SIZE_MASK) <<
-			VPP_VD1_START_BIT) | ((zoom_end_y_lines &
-			VPP_VD_SIZE_MASK) << VPP_VD1_END_BIT));
-			VSYNC_WR_MPEG_REG(VPP_BLEND_VD2_V_START_END,
-			((zoom_start_y_lines & VPP_VD_SIZE_MASK) <<
-			VPP_VD1_START_BIT) | ((zoom_end_y_lines &
-			VPP_VD_SIZE_MASK) << VPP_VD1_END_BIT));
-		} else {
-			if ((framePtr->VPP_post_blend_vd_v_end_ -
-				framePtr->VPP_post_blend_vd_v_start_ + 1) >
-				VPP_PREBLEND_VD_V_END_LIMIT) {
-				VSYNC_WR_MPEG_REG(VPP_PREBLEND_VD1_V_START_END +
+#ifdef TV_3D_FUNCTION_OPEN
+	y_lines = zoom_end_y_lines / (framePtr->vscale_skip_count + 1);
+	if (process_3d_type & MODE_3D_OUT_TB) {
+		VSYNC_WR_MPEG_REG(VPP_PREBLEND_VD1_V_START_END,
+				((zoom_start_y_lines & VPP_VD_SIZE_MASK) <<
+				VPP_VD1_START_BIT) | (((y_lines >> 1) &
+				VPP_VD_SIZE_MASK) <<
+				VPP_VD1_END_BIT));
+		VSYNC_WR_MPEG_REG(
+				VPP_BLEND_VD2_V_START_END,
+				((((y_lines + 1) >> 1) & VPP_VD_SIZE_MASK) <<
+				VPP_VD1_START_BIT) |
+				((y_lines & VPP_VD_SIZE_MASK) <<
+				VPP_VD1_END_BIT));
+	} else if (process_3d_type & MODE_3D_OUT_LR) {
+		VSYNC_WR_MPEG_REG(VPP_PREBLEND_VD1_V_START_END,
+				((zoom_start_y_lines & VPP_VD_SIZE_MASK) <<
+				VPP_VD1_START_BIT) | ((zoom_end_y_lines &
+				VPP_VD_SIZE_MASK) << VPP_VD1_END_BIT));
+		VSYNC_WR_MPEG_REG(VPP_BLEND_VD2_V_START_END,
+				((zoom_start_y_lines & VPP_VD_SIZE_MASK) <<
+				VPP_VD1_START_BIT) | ((zoom_end_y_lines &
+				VPP_VD_SIZE_MASK) << VPP_VD1_END_BIT));
+	} else
+#endif
+	{
+		if ((framePtr->VPP_post_blend_vd_v_end_ -
+			framePtr->VPP_post_blend_vd_v_start_ + 1) >
+			VPP_PREBLEND_VD_V_END_LIMIT) {
+			VSYNC_WR_MPEG_REG(VPP_PREBLEND_VD1_V_START_END +
 				cur_dev->vpp_off,
 				((framePtr->VPP_post_blend_vd_v_start_
 				& VPP_VD_SIZE_MASK) <<
 				VPP_VD1_START_BIT) |
 				((framePtr->VPP_post_blend_vd_v_end_ &
-				VPP_VD_SIZE_MASK)
+					VPP_VD_SIZE_MASK)
 				<< VPP_VD1_END_BIT));
-			} else {
-				VSYNC_WR_MPEG_REG(VPP_PREBLEND_VD1_V_START_END +
+		} else {
+			VSYNC_WR_MPEG_REG(VPP_PREBLEND_VD1_V_START_END +
 				cur_dev->vpp_off,
 				((0 & VPP_VD_SIZE_MASK) <<
 				VPP_VD1_START_BIT) |
 				(((VPP_PREBLEND_VD_V_END_LIMIT - 1) &
 				VPP_VD_SIZE_MASK) <<
 				VPP_VD1_END_BIT));
-			}
-			VSYNC_WR_MPEG_REG(VPP_BLEND_VD2_V_START_END +
-			cur_dev->vpp_off,
-			(((framePtr->VPP_vd_end_lines_ / 2) &
-			VPP_VD_SIZE_MASK) << VPP_VD1_START_BIT) |
-			(((framePtr->VPP_vd_end_lines_) &
-			VPP_VD_SIZE_MASK) << VPP_VD1_END_BIT));
 		}
-	} else {
-			if ((framePtr->VPP_post_blend_vd_v_end_ -
-				framePtr->VPP_post_blend_vd_v_start_ + 1) >
-				VPP_PREBLEND_VD_V_END_LIMIT) {
-				VSYNC_WR_MPEG_REG(VPP_PREBLEND_VD1_V_START_END +
-				cur_dev->vpp_off,
-				((framePtr->VPP_post_blend_vd_v_start_
-				& VPP_VD_SIZE_MASK) <<
-				VPP_VD1_START_BIT) |
-				((framePtr->VPP_post_blend_vd_v_end_ &
-				VPP_VD_SIZE_MASK)
-				<< VPP_VD1_END_BIT));
-			} else {
-				VSYNC_WR_MPEG_REG(VPP_PREBLEND_VD1_V_START_END +
-					cur_dev->vpp_off,
-					((0 & VPP_VD_SIZE_MASK) <<
-					VPP_VD1_START_BIT) |
-					(((VPP_PREBLEND_VD_V_END_LIMIT - 1) &
-					VPP_VD_SIZE_MASK) <<
-					VPP_VD1_END_BIT));
-			}
-			VSYNC_WR_MPEG_REG(VPP_BLEND_VD2_V_START_END +
-			cur_dev->vpp_off,
-			((((framePtr->VPP_vd_end_lines_ + 1) / 2) &
-			VPP_VD_SIZE_MASK) << VPP_VD1_START_BIT) |
-			(((framePtr->VPP_vd_end_lines_) &
-			VPP_VD_SIZE_MASK) << VPP_VD1_END_BIT));
+		VSYNC_WR_MPEG_REG(VPP_BLEND_VD2_V_START_END + cur_dev->vpp_off,
+				(((framePtr->VPP_vd_end_lines_ / 2) &
+				VPP_VD_SIZE_MASK) << VPP_VD1_START_BIT) |
+				(((framePtr->VPP_vd_end_lines_) &
+				VPP_VD_SIZE_MASK) << VPP_VD1_END_BIT));
 	}
 	VSYNC_WR_MPEG_REG(VPP_VSC_REGION12_STARTP + cur_dev->vpp_off, 0);
 	VSYNC_WR_MPEG_REG(VPP_VSC_REGION34_STARTP + cur_dev->vpp_off,
@@ -1841,7 +1770,6 @@ static void zoom_get_vert_pos(struct vframe_s *vf, u32 vpp_3d_mode, u32 *ls,
 static void zoom_display_horz(int hscale)
 {
 	u32 ls, le, rs, re;
-	int content_w, content_l, content_r;
 #ifdef TV_3D_FUNCTION_OPEN
 	if (process_3d_type & MODE_3D_ENABLE) {
 		zoom_get_horz_pos(cur_dispbuf, cur_frame_par->vpp_3d_mode, &ls,
@@ -1879,13 +1807,12 @@ static void zoom_display_horz(int hscale)
 	if (get_cpu_type() >= MESON_CPU_MAJOR_ID_GXBB) {
 		int l_aligned;
 		int r_aligned;
-		if ((zoom_start_x_lines > 0) ||
-		(zoom_end_x_lines < ori_end_x_lines)) {
+		if (zoom_start_x_lines > 0) {
 			l_aligned = round_down(ori_start_x_lines, 32);
-			r_aligned = round_up(ori_end_x_lines + 1, 32);
+			r_aligned = round_up(ori_end_x_lines, 32);
 		} else {
 			l_aligned = round_down(zoom_start_x_lines, 32);
-			r_aligned = round_up(zoom_end_x_lines + 1, 32);
+			r_aligned = round_up(zoom_end_x_lines, 32);
 		}
 		VSYNC_WR_MPEG_REG(AFBC_VD_CFMT_W,
 			  ((r_aligned - l_aligned) << 16) |
@@ -1895,29 +1822,14 @@ static void zoom_display_horz(int hscale)
 			  ((l_aligned / 32) << 16) |
 			  ((r_aligned / 32) - 1));
 
-		if (get_cpu_type() >= MESON_CPU_MAJOR_ID_GXL) {
-			VSYNC_WR_MPEG_REG(AFBC_SIZE_OUT,
-				(VSYNC_RD_MPEG_REG(AFBC_SIZE_OUT) & 0xffff) |
-				((r_aligned - l_aligned) << 16));
-		}
-#ifdef TV_REVERSE
-		if (reverse) {
-			content_w = zoom_end_x_lines - zoom_start_x_lines + 1;
-			content_l = (r_aligned - zoom_end_x_lines - 1) +
-			(zoom_start_x_lines - l_aligned);
-			content_r = content_l + content_w - 1;
-			VSYNC_WR_MPEG_REG(AFBC_PIXEL_HOR_SCOPE,
-				  (content_l << 16) | content_r);
-		} else
-#endif
-		{
-			VSYNC_WR_MPEG_REG(AFBC_PIXEL_HOR_SCOPE,
-				  ((zoom_start_x_lines - l_aligned) << 16) |
-				  (zoom_end_x_lines - l_aligned));
-		}
+
+		VSYNC_WR_MPEG_REG(AFBC_PIXEL_HOR_SCOPE,
+			  ((zoom_start_x_lines - l_aligned) << 16) |
+			  (zoom_end_x_lines - l_aligned));
+
 		VSYNC_WR_MPEG_REG(AFBC_SIZE_IN,
-			 (VSYNC_RD_MPEG_REG(AFBC_SIZE_IN) & 0xffff) |
-			 ((r_aligned - l_aligned) << 16));
+			  (VSYNC_RD_MPEG_REG(AFBC_SIZE_IN) & 0xffff) |
+			  ((r_aligned - l_aligned) << 16));
 	}
 
 	VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_X0,
@@ -1947,42 +1859,37 @@ static void zoom_display_vert(void)
 {
 
 	u32 ls, le, rs, re;
-	if (platform_type == 1) {
-		if (process_3d_type & MODE_3D_ENABLE) {
-			zoom_get_vert_pos(cur_dispbuf,
-			cur_frame_par->vpp_3d_mode, &ls,
-					  &le, &rs, &re);
-		} else {
-			ls = rs = zoom_start_y_lines;
-			le = re = zoom_end_y_lines;
-		}
+#ifdef TV_3D_FUNCTION_OPEN
+
+	if (process_3d_type & MODE_3D_ENABLE) {
+		zoom_get_vert_pos(cur_dispbuf, cur_frame_par->vpp_3d_mode, &ls,
+				  &le, &rs, &re);
 	} else {
-		if (process_3d_type & MODE_3D_ENABLE) {
-			zoom_get_vert_pos(cur_dispbuf,
-			cur_frame_par->vpp_3d_mode, &ls,
-					  &le, &rs, &re);
-		} else {
-			ls = rs = zoom_start_y_lines;
-			le = re = zoom_end_y_lines;
-		}
+		ls = rs = zoom_start_y_lines;
+		le = re = zoom_end_y_lines;
 	}
+#else
+	ls = rs = zoom_start_y_lines;
+	le = re = zoom_end_y_lines;
+
+#endif
 
 	if ((cur_dispbuf) && (cur_dispbuf->type & VIDTYPE_MVC)) {
 		VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_Y0 + cur_dev->viu_off,
 				(ls * 2 << VDIF_PIC_START_BIT) |
-				((le * 2 - 1) << VDIF_PIC_END_BIT));
+				(le * 2 << VDIF_PIC_END_BIT));
 
 		VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_Y0 + cur_dev->viu_off,
 				((ls) << VDIF_PIC_START_BIT) |
-				((le - 1) << VDIF_PIC_END_BIT));
+				((le) << VDIF_PIC_END_BIT));
 
 		VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_Y0,
 				(ls * 2 << VDIF_PIC_START_BIT) |
-				((le * 2 - 1) << VDIF_PIC_END_BIT));
+				(le * 2 << VDIF_PIC_END_BIT));
 
 		VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_Y0,
 				((ls) << VDIF_PIC_START_BIT) |
-				((le - 1) << VDIF_PIC_END_BIT));
+				((le) << VDIF_PIC_END_BIT));
 	} else {
 		VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_Y0 + cur_dev->viu_off,
 				(ls << VDIF_PIC_START_BIT) |
@@ -1999,36 +1906,35 @@ static void zoom_display_vert(void)
 		VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_Y1 + cur_dev->viu_off,
 				((rs / 2) << VDIF_PIC_START_BIT) |
 				((re / 2) << VDIF_PIC_END_BIT));
-		if (platform_type == 1) {
-			/* vd2 */
-			VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_Y0,
-					(ls << VDIF_PIC_START_BIT) |
-					(le << VDIF_PIC_END_BIT));
-
-			VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_Y0,
-					((ls / 2) << VDIF_PIC_START_BIT) |
-					((le / 2) << VDIF_PIC_END_BIT));
-
-			VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_Y1,
-					(rs << VDIF_PIC_START_BIT) |
-					(re << VDIF_PIC_END_BIT));
-
-			VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_Y1,
-					((rs / 2) << VDIF_PIC_START_BIT) |
-					((re / 2) << VDIF_PIC_END_BIT));
-		}
+#ifdef TV_3D_FUNCTION_OPEN
+		/* vd2 */
+		VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_Y0,
+				(ls << VDIF_PIC_START_BIT) |
+				(le << VDIF_PIC_END_BIT));
+
+		VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_Y0,
+				((ls / 2) << VDIF_PIC_START_BIT) |
+				((le / 2) << VDIF_PIC_END_BIT));
+
+		VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_Y1,
+				(rs << VDIF_PIC_START_BIT) |
+				(re << VDIF_PIC_END_BIT));
+
+		VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_Y1,
+				((rs / 2) << VDIF_PIC_START_BIT) |
+				((re / 2) << VDIF_PIC_END_BIT));
+#endif
 	}
 
 	if (get_cpu_type() >= MESON_CPU_MAJOR_ID_GXBB) {
 		int t_aligned;
 		int b_aligned;
-		if ((zoom_start_y_lines > 0) ||
-		(zoom_end_y_lines < ori_end_y_lines)) {
-			t_aligned = round_down(ori_start_y_lines, 4);
-			b_aligned = round_up(ori_end_y_lines + 1, 4);
+		if (zoom_start_y_lines > 0) {
+			t_aligned = round_down(zoom_start_y_lines, 4);
+			b_aligned = round_up(zoom_end_y_lines, 4);
 		} else {
 			t_aligned = round_down(zoom_start_y_lines, 4);
-			b_aligned = round_up(zoom_end_y_lines + 1, 4);
+			b_aligned = round_up(zoom_end_y_lines, 4);
 		}
 		VSYNC_WR_MPEG_REG(AFBC_VD_CFMT_H,
 		    b_aligned - t_aligned);
@@ -2041,14 +1947,9 @@ static void zoom_display_vert(void)
 		    ((zoom_start_y_lines - t_aligned) << 16) |
 		    (zoom_end_y_lines - t_aligned));
 
-	VSYNC_WR_MPEG_REG(AFBC_SIZE_IN,
-		(VSYNC_RD_MPEG_REG(AFBC_SIZE_IN) & 0xffff0000) |
-		(b_aligned - t_aligned));
-	if (get_cpu_type() >= MESON_CPU_MAJOR_ID_GXL) {
-			VSYNC_WR_MPEG_REG(AFBC_SIZE_OUT,
-				(VSYNC_RD_MPEG_REG(AFBC_SIZE_OUT) & 0xffff0000)
-				| (b_aligned - t_aligned));
-		}
+		VSYNC_WR_MPEG_REG(AFBC_SIZE_IN,
+		    (VSYNC_RD_MPEG_REG(AFBC_SIZE_IN) & 0xffff0000) |
+		    (b_aligned - t_aligned));
 	}
 }
 
@@ -2104,11 +2005,9 @@ static void vsync_toggle_frame(struct vframe_s *vf)
 	unsigned long flags;
 	frame_count++;
 	ori_start_x_lines = 0;
-	ori_end_x_lines = ((vf->type & VIDTYPE_COMPRESS) ?
-		vf->compWidth : vf->width) - 1;
+	ori_end_x_lines = vf->width - 1;
 	ori_start_y_lines = 0;
-	ori_end_y_lines = ((vf->type & VIDTYPE_COMPRESS) ?
-		vf->compHeight : vf->height) - 1;
+	ori_end_y_lines = vf->height - 1;
 	if (debug_flag & DEBUG_FLAG_PRINT_TOGGLE_FRAME)
 		pr_info("%s()\n", __func__);
 
@@ -2213,10 +2112,11 @@ static void vsync_toggle_frame(struct vframe_s *vf)
 	}
 	/* switch buffer */
 	post_canvas = vf->canvas0Addr;
+
 	if ((get_cpu_type() >= MESON_CPU_MAJOR_ID_GXBB) &&
 		(vf->type & VIDTYPE_COMPRESS)) {
-		VSYNC_WR_MPEG_REG(AFBC_HEAD_BADDR, vf->compHeadAddr>>4);
-		VSYNC_WR_MPEG_REG(AFBC_BODY_BADDR, vf->compBodyAddr>>4);
+		VSYNC_WR_MPEG_REG(AFBC_HEAD_BADDR, vf->canvas0Addr>>4);
+		VSYNC_WR_MPEG_REG(AFBC_BODY_BADDR, vf->canvas1Addr>>4);
 	} else if ((VSYNC_RD_MPEG_REG(DI_IF1_GEN_REG) & 0x1) == 0) {
 #ifdef CONFIG_VSYNC_RDMA
 		canvas_copy(vf->canvas0Addr & 0xff,
@@ -2234,46 +2134,28 @@ static void vsync_toggle_frame(struct vframe_s *vf)
 
 		VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS0 + cur_dev->viu_off,
 				  disp_canvas[rdma_canvas_id][0]);
-		if (platform_type == 0) {
+#ifndef TV_3D_FUNCTION_OPEN
+		VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS1 + cur_dev->viu_off,
+				  disp_canvas[rdma_canvas_id][0]);
+		VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS0 + cur_dev->viu_off,
+				  disp_canvas[rdma_canvas_id][1]);
+		VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS1 + cur_dev->viu_off,
+				  disp_canvas[rdma_canvas_id][1]);
+#else
+		VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS0 + cur_dev->viu_off,
+				  disp_canvas[rdma_canvas_id][0]);
+		if (cur_frame_par && (cur_frame_par->vpp_2pic_mode == 1)) {
 			VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS1 + cur_dev->viu_off,
 					  disp_canvas[rdma_canvas_id][0]);
-			VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS0 + cur_dev->viu_off,
-					  disp_canvas[rdma_canvas_id][1]);
 			VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS1 + cur_dev->viu_off,
-					  disp_canvas[rdma_canvas_id][1]);
-		} else {
-			VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS0 + cur_dev->viu_off,
 					  disp_canvas[rdma_canvas_id][0]);
-			if (cur_frame_par &&
-			(cur_frame_par->vpp_2pic_mode == 1)) {
-				VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS1 +
-				cur_dev->viu_off,
-				disp_canvas[rdma_canvas_id][0]);
-				VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS1 +
-				cur_dev->viu_off,
-				disp_canvas[rdma_canvas_id][0]);
-			} else {
-				VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS1 +
-				cur_dev->viu_off,
-				disp_canvas[rdma_canvas_id][1]);
-				VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS1 +
-				cur_dev->viu_off,
-				disp_canvas[rdma_canvas_id][1]);
-			}
-		}
-		if (cur_frame_par
-		&& (process_3d_type & MODE_3D_ENABLE)
-		&& (process_3d_type & MODE_3D_TO_2D_R)
-		&& (cur_frame_par->vpp_2pic_mode == VPP_SELECT_PIC1)) {
-			VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS0 + cur_dev->viu_off,
-					  disp_canvas[rdma_canvas_id][1]);
+		} else {
 			VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS1 + cur_dev->viu_off,
 					  disp_canvas[rdma_canvas_id][1]);
-			VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS0 + cur_dev->viu_off,
-					  disp_canvas[rdma_canvas_id][1]);
 			VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS1 + cur_dev->viu_off,
 					  disp_canvas[rdma_canvas_id][1]);
 		}
+#endif
 		/* VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS1,
 		disp_canvas[rdma_canvas_id][1]); */
 		next_rdma_canvas_id = rdma_canvas_id ? 0 : 1;
@@ -2305,41 +2187,36 @@ static void vsync_toggle_frame(struct vframe_s *vf)
 			    disp_canvas_index[4]);
 		canvas_copy((vf->canvas1Addr >> 16) & 0xff,
 			    disp_canvas_index[5]);
-		if (platform_type == 0) {
-			VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS0 + cur_dev->viu_off,
-					  disp_canvas[0]);
+#ifndef TV_3D_FUNCTION_OPEN
+		VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS0 + cur_dev->viu_off,
+				  disp_canvas[0]);
+		VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS1 + cur_dev->viu_off,
+				  disp_canvas[0]);
+		VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS0 + cur_dev->viu_off,
+				  disp_canvas[1]);
+		VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS1 + cur_dev->viu_off,
+				  disp_canvas[1]);
+#else
+		VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS0 + cur_dev->viu_off,
+				  disp_canvas[0]);
+		VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS0 + cur_dev->viu_off,
+				  disp_canvas[0]);
+		if (cur_frame_par && (cur_frame_par->vpp_2pic_mode == 1)) {
 			VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS1 + cur_dev->viu_off,
 					  disp_canvas[0]);
-			VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS0 + cur_dev->viu_off,
+			VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS1 + cur_dev->viu_off,
+					  disp_canvas[0]);
+		} else {
+			VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS1 + cur_dev->viu_off,
 					  disp_canvas[1]);
 			VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS1 + cur_dev->viu_off,
 					  disp_canvas[1]);
-		} else {
-			VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS0 + cur_dev->viu_off,
-					  disp_canvas[0]);
-			VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS0 + cur_dev->viu_off,
-					  disp_canvas[0]);
-			if (cur_frame_par &&
-			(cur_frame_par->vpp_2pic_mode == 1)) {
-				VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS1 +
-				cur_dev->viu_off,
-				disp_canvas[0]);
-				VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS1 +
-				cur_dev->viu_off,
-				disp_canvas[0]);
-			} else {
-				VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS1 +
-				cur_dev->viu_off,
-				disp_canvas[1]);
-				VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS1 +
-				cur_dev->viu_off,
-				disp_canvas[1]);
-			}
-			/* VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS0 +
-			cur_dev->viu_off, disp_canvas[0]); */
-			/* VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS1 +
-			cur_dev->viu_off, disp_canvas[1]); */
 		}
+		/* VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS0 +
+		cur_dev->viu_off, disp_canvas[0]); */
+		/* VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS1 +
+		cur_dev->viu_off, disp_canvas[1]); */
+#endif
 #if HAS_VPU_PROT
 		if (has_vpu_prot()) {
 			if (use_prot) {
@@ -2399,9 +2276,10 @@ static void vsync_toggle_frame(struct vframe_s *vf)
 	    (cur_dispbuf->bufWidth != vf->bufWidth) ||
 	    (cur_dispbuf->width != vf->width) ||
 	    (cur_dispbuf->height != vf->height) ||
-	    (cur_dispbuf->bitdepth != vf->bitdepth) ||
-	     (cur_dispbuf->trans_fmt != vf->trans_fmt) ||
-	     (last_process_3d_type != process_3d_type) ||
+#ifdef TV_3D_FUNCTION_OPEN
+	    ((process_3d_type & MODE_3D_AUTO) &&
+	     (cur_dispbuf->trans_fmt != vf->trans_fmt)) ||
+#endif
 	    (cur_dispbuf->ratio_control != vf->ratio_control) ||
 	    ((cur_dispbuf->type_backup & VIDTYPE_INTERLACE) !=
 	     (vf->type_backup & VIDTYPE_INTERLACE)) ||
@@ -2411,7 +2289,6 @@ static void vsync_toggle_frame(struct vframe_s *vf)
 	    || video_prot.angle_changed
 #endif
 	    ) {
-	    last_process_3d_type = process_3d_type;
 		atomic_inc(&video_sizechange);
 		wake_up_interruptible(&amvideo_sizechange_wait);
 		amlog_mask(LOG_MASK_FRAMEINFO,
@@ -2540,10 +2417,7 @@ static void vsync_toggle_frame(struct vframe_s *vf)
 		/* #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8 */
 		if ((get_cpu_type() >= MESON_CPU_MAJOR_ID_M8)
 		    && !is_meson_mtvd_cpu()) {
-			if (((vf->width > 1920) && (vf->height > 1088)) ||
-				((vf->type & VIDTYPE_COMPRESS) &&
-				 (vf->compWidth > 1920) &&
-				 (vf->compHeight > 1080))) {
+			if ((vf->width > 1920) && (vf->height > 1088)) {
 				if (vpu_clk_level == 0) {
 					vpu_clk_level = 1;
 
@@ -2580,12 +2454,7 @@ static void vsync_toggle_frame(struct vframe_s *vf)
 				EnableVideoLayer2();
 		}
 	}
-	if (cur_dispbuf && (cur_dispbuf->type != vf->type)) {
-		if (vf->type & VIDTYPE_MVC)
-			EnableVideoLayer2();
-		else
-			DisableVideoLayer2();
-	}
+
 	cur_dispbuf = vf;
 	if (keep_video_on && cur_dispbuf != &vf_local) {
 		pr_info("toggle new frame after keep.\n");
@@ -2607,13 +2476,9 @@ static void viu_set_dcu(struct vpp_frame_par_s *frame_par, struct vframe_s *vf)
 	u32 pat, loop;
 	static const u32 vpat[] = { 0, 0x8, 0x9, 0xa, 0xb, 0xc };
 	u32 u, v;
-	u32 type = vf->type, bit_mode = 0;
 
 	if (get_cpu_type() >= MESON_CPU_MAJOR_ID_GXBB) {
-		if (frame_par->nocomp)
-			type &= ~VIDTYPE_COMPRESS;
-
-		if (type & VIDTYPE_COMPRESS) {
+		if (vf->type & VIDTYPE_COMPRESS) {
 			r = (3 << 24) |
 			    (17 << 16) |
 			    (1 << 14) | /*burst1 1*/
@@ -2639,60 +2504,19 @@ static void viu_set_dcu(struct vpp_frame_par_s *frame_par, struct vframe_s *vf)
 				0x80 << (u + 10) |
 				0x80 << v);
 			/* chroma formatter */
-#ifdef TV_REVERSE
-			if (reverse) {
-				VSYNC_WR_MPEG_REG(AFBC_VD_CFMT_CTRL,
-					/*HFORMATTER_RRT_PIXEL0 |*/
-					HFORMATTER_YC_RATIO_2_1 |
-					HFORMATTER_EN |
-					VFORMATTER_RPTLINE0_EN |
-					/*(0xa << VFORMATTER_INIPHASE_BIT) |*/
-					(0x8 << VFORMATTER_PHASE_BIT) |
-					VFORMATTER_EN);
-			} else
-#endif
-			{
-				VSYNC_WR_MPEG_REG(AFBC_VD_CFMT_CTRL,
-					HFORMATTER_RRT_PIXEL0 |
-					HFORMATTER_YC_RATIO_2_1 |
-					HFORMATTER_EN |
-					VFORMATTER_RPTLINE0_EN |
-					/*(0xa << VFORMATTER_INIPHASE_BIT) |*/
-					(0x8 << VFORMATTER_PHASE_BIT) |
-					VFORMATTER_EN);
-			}
-			if ((READ_VCBUS_REG(DI_POST_CTRL) & 0x100) == 0)
-				VSYNC_WR_MPEG_REG_BITS(VIU_MISC_CTRL0 +
-					cur_dev->viu_off, 0, 16, 3);
-
+			VSYNC_WR_MPEG_REG(AFBC_VD_CFMT_CTRL,
+				HFORMATTER_RRT_PIXEL0 |
+				HFORMATTER_YC_RATIO_2_1 |
+				HFORMATTER_EN |
+				VFORMATTER_RPTLINE0_EN |
+				/*(0xa << VFORMATTER_INIPHASE_BIT) |*/
+				(0x8 << VFORMATTER_PHASE_BIT) |
+				VFORMATTER_EN);
 			VSYNC_WR_MPEG_REG_BITS(VIU_MISC_CTRL0 +
 					cur_dev->viu_off, 1, 20, 1);
 			return;
 
 		} else {
-			if (vf->bitdepth & BITDEPTH_Y10) {
-				if (vf->type & VIDTYPE_VIU_444) {
-					bit_mode = 2;
-				} else {
-					if (vf->bitdepth & FULL_PACK_422_MODE)
-						bit_mode = 3;
-					else
-						bit_mode = 1;
-				}
-			} else {
-				bit_mode = 0;
-			}
-			VSYNC_WR_MPEG_REG_BITS(VD1_IF0_GEN_REG3,
-				(bit_mode&0x3), 8, 2);
-			VSYNC_WR_MPEG_REG_BITS(DI_IF1_GEN_REG3,
-				(bit_mode&0x3), 8, 2);
-			if (is_meson_txl_cpu())
-				VSYNC_WR_MPEG_REG_BITS(DI_IF2_GEN_REG3,
-				(bit_mode&0x3), 8, 2);
-			if ((READ_VCBUS_REG(DI_POST_CTRL) & 0x100) == 0)
-				VSYNC_WR_MPEG_REG_BITS(VIU_MISC_CTRL0 +
-					cur_dev->viu_off, 0, 16, 3);
-
 			VSYNC_WR_MPEG_REG_BITS(VIU_MISC_CTRL0 +
 					cur_dev->viu_off, 0, 20, 1);
 			VSYNC_WR_MPEG_REG(AFBC_ENABLE, 0);
@@ -2707,10 +2531,10 @@ static void viu_set_dcu(struct vpp_frame_par_s *frame_par, struct vframe_s *vf)
 	if (debug_flag & DEBUG_FLAG_GOFIELD_MANUL)
 		r |= 1<<7; /*for manul triggle gofiled.*/
 
-	if ((type & VIDTYPE_VIU_SINGLE_PLANE) == 0)
+	if ((vf->type & VIDTYPE_VIU_SINGLE_PLANE) == 0)
 		r |= VDIF_SEPARATE_EN;
 	else {
-		if (type & VIDTYPE_VIU_422)
+		if (vf->type & VIDTYPE_VIU_422)
 			r |= VDIF_FORMAT_422;
 		else {
 			r |= VDIF_FORMAT_RGB888_YUV444 |
@@ -2735,7 +2559,7 @@ static void viu_set_dcu(struct vpp_frame_par_s *frame_par, struct vframe_s *vf)
 
 	/* #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6 */
 	if (get_cpu_type() >= MESON_CPU_MAJOR_ID_M6) {
-		if (type & VIDTYPE_VIU_NV21) {
+		if (vf->type & VIDTYPE_VIU_NV21) {
 			VSYNC_WR_MPEG_REG_BITS(VD1_IF0_GEN_REG2 +
 				cur_dev->viu_off, 1, 0, 1);
 		} else {
@@ -2763,15 +2587,9 @@ static void viu_set_dcu(struct vpp_frame_par_s *frame_par, struct vframe_s *vf)
 		if (reverse) {
 			VSYNC_WR_MPEG_REG_BITS((VD1_IF0_GEN_REG2 +
 				cur_dev->viu_off), 0xf, 2, 4);
-			if (vf->type & VIDTYPE_MVC)
-				VSYNC_WR_MPEG_REG_BITS((VD2_IF0_GEN_REG2 +
-					cur_dev->viu_off), 0xf, 2, 4);
 		} else {
 			VSYNC_WR_MPEG_REG_BITS((VD1_IF0_GEN_REG2 +
 				cur_dev->viu_off), 0, 2, 4);
-			if (vf->type & VIDTYPE_MVC)
-				VSYNC_WR_MPEG_REG_BITS((VD2_IF0_GEN_REG2 +
-					cur_dev->viu_off), 0, 2, 4);
 		}
 #endif
 #endif
@@ -2779,20 +2597,20 @@ static void viu_set_dcu(struct vpp_frame_par_s *frame_par, struct vframe_s *vf)
 	/* #endif */
 
 	/* chroma formatter */
-	if (type & VIDTYPE_VIU_444) {
+	if (vf->type & VIDTYPE_VIU_444) {
 		VSYNC_WR_MPEG_REG(VIU_VD1_FMT_CTRL + cur_dev->viu_off,
 				  HFORMATTER_YC_RATIO_1_1);
 		VSYNC_WR_MPEG_REG(VIU_VD2_FMT_CTRL + cur_dev->viu_off,
 				  HFORMATTER_YC_RATIO_1_1);
-	} else if (type & VIDTYPE_VIU_FIELD) {
+	} else if (vf->type & VIDTYPE_VIU_FIELD) {
 		vini_phase = 0xc << VFORMATTER_INIPHASE_BIT;
 		vphase =
-		    ((type & VIDTYPE_VIU_422) ? 0x10 : 0x08) <<
+		    ((vf->type & VIDTYPE_VIU_422) ? 0x10 : 0x08) <<
 		    VFORMATTER_PHASE_BIT;
-	if (is_meson_gxtvbb_cpu() || is_meson_txl_cpu()) {
+	if (is_meson_gxtvbb_cpu()) {
 		if ((vf->width >= 3840) &&
 			(vf->height >= 2160) &&
-			(type & VIDTYPE_VIU_422)) {
+			(vf->type & VIDTYPE_VIU_422)) {
 			VSYNC_WR_MPEG_REG(VIU_VD1_FMT_CTRL + cur_dev->viu_off,
 			HFORMATTER_YC_RATIO_2_1 | HFORMATTER_EN |
 			VFORMATTER_RPTLINE0_EN | vini_phase | vphase);
@@ -2824,28 +2642,28 @@ static void viu_set_dcu(struct vpp_frame_par_s *frame_par, struct vframe_s *vf)
 				VFORMATTER_RPTLINE0_EN | vini_phase | vphase |
 				VFORMATTER_EN);
 		}
-	} else if (type & VIDTYPE_MVC) {
+	} else if (vf->type & VIDTYPE_MVC) {
 		VSYNC_WR_MPEG_REG(VIU_VD1_FMT_CTRL + cur_dev->viu_off,
 				HFORMATTER_YC_RATIO_2_1 |
 				HFORMATTER_EN |
 				VFORMATTER_RPTLINE0_EN |
 				(0xe << VFORMATTER_INIPHASE_BIT) |
-				(((type & VIDTYPE_VIU_422) ? 0x10 : 0x08)
+				(((vf->type & VIDTYPE_VIU_422) ? 0x10 : 0x08)
 				<< VFORMATTER_PHASE_BIT) | VFORMATTER_EN);
 		VSYNC_WR_MPEG_REG(VIU_VD2_FMT_CTRL + cur_dev->viu_off,
 				HFORMATTER_YC_RATIO_2_1 | HFORMATTER_EN |
 				VFORMATTER_RPTLINE0_EN | (0xa <<
 				VFORMATTER_INIPHASE_BIT) |
-				(((type & VIDTYPE_VIU_422) ? 0x10 : 0x08)
+				(((vf->type & VIDTYPE_VIU_422) ? 0x10 : 0x08)
 				<< VFORMATTER_PHASE_BIT) | VFORMATTER_EN);
-	} else if ((type & VIDTYPE_INTERLACE)
+	} else if ((vf->type & VIDTYPE_INTERLACE)
 		   &&
-		   (((type & VIDTYPE_TYPEMASK) == VIDTYPE_INTERLACE_TOP))) {
+		   (((vf->type & VIDTYPE_TYPEMASK) == VIDTYPE_INTERLACE_TOP))) {
 		VSYNC_WR_MPEG_REG(VIU_VD1_FMT_CTRL + cur_dev->viu_off,
 				HFORMATTER_YC_RATIO_2_1 | HFORMATTER_EN |
 				VFORMATTER_RPTLINE0_EN | (0xe <<
 				VFORMATTER_INIPHASE_BIT) |
-				(((type & VIDTYPE_VIU_422) ? 0x10 : 0x08)
+				(((vf->type & VIDTYPE_VIU_422) ? 0x10 : 0x08)
 				<< VFORMATTER_PHASE_BIT) | VFORMATTER_EN);
 
 		VSYNC_WR_MPEG_REG(VIU_VD2_FMT_CTRL + cur_dev->viu_off,
@@ -2853,7 +2671,7 @@ static void viu_set_dcu(struct vpp_frame_par_s *frame_par, struct vframe_s *vf)
 				HFORMATTER_EN |
 				VFORMATTER_RPTLINE0_EN |
 				(0xe << VFORMATTER_INIPHASE_BIT) |
-				(((type & VIDTYPE_VIU_422) ? 0x10 : 0x08)
+				(((vf->type & VIDTYPE_VIU_422) ? 0x10 : 0x08)
 				<< VFORMATTER_PHASE_BIT) | VFORMATTER_EN);
 	} else {
 		VSYNC_WR_MPEG_REG(VIU_VD1_FMT_CTRL + cur_dev->viu_off,
@@ -2861,7 +2679,7 @@ static void viu_set_dcu(struct vpp_frame_par_s *frame_par, struct vframe_s *vf)
 				  HFORMATTER_EN |
 				  VFORMATTER_RPTLINE0_EN |
 				  (0xa << VFORMATTER_INIPHASE_BIT) |
-				  (((type & VIDTYPE_VIU_422) ? 0x10 : 0x08)
+				  (((vf->type & VIDTYPE_VIU_422) ? 0x10 : 0x08)
 				   << VFORMATTER_PHASE_BIT) | VFORMATTER_EN);
 
 		VSYNC_WR_MPEG_REG(VIU_VD2_FMT_CTRL + cur_dev->viu_off,
@@ -2869,7 +2687,7 @@ static void viu_set_dcu(struct vpp_frame_par_s *frame_par, struct vframe_s *vf)
 				HFORMATTER_EN |
 				VFORMATTER_RPTLINE0_EN |
 				(0xa << VFORMATTER_INIPHASE_BIT) |
-				(((type & VIDTYPE_VIU_422) ? 0x10 : 0x08)
+				(((vf->type & VIDTYPE_VIU_422) ? 0x10 : 0x08)
 				<< VFORMATTER_PHASE_BIT) | VFORMATTER_EN);
 	}
 #if HAS_VPU_PROT
@@ -2888,15 +2706,15 @@ static void viu_set_dcu(struct vpp_frame_par_s *frame_par, struct vframe_s *vf)
 	/* LOOP/SKIP pattern */
 	pat = vpat[frame_par->vscale_skip_count];
 
-	if (type & VIDTYPE_VIU_FIELD) {
+	if (vf->type & VIDTYPE_VIU_FIELD) {
 		loop = 0;
 
-		if (type & VIDTYPE_INTERLACE)
+		if (vf->type & VIDTYPE_INTERLACE)
 			pat = vpat[frame_par->vscale_skip_count >> 1];
-	} else if (type & VIDTYPE_MVC) {
+	} else if (vf->type & VIDTYPE_MVC) {
 		loop = 0x11;
 		pat = 0x80;
-	} else if ((type & VIDTYPE_TYPEMASK) == VIDTYPE_INTERLACE_TOP) {
+	} else if ((vf->type & VIDTYPE_TYPEMASK) == VIDTYPE_INTERLACE_TOP) {
 		loop = 0x11;
 		pat <<= 4;
 	} else
@@ -2919,7 +2737,7 @@ static void viu_set_dcu(struct vpp_frame_par_s *frame_par, struct vframe_s *vf)
 	VSYNC_WR_MPEG_REG(VD1_IF0_LUMA1_RPT_PAT + cur_dev->viu_off, pat);
 	VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA1_RPT_PAT + cur_dev->viu_off, pat);
 
-	if (type & VIDTYPE_MVC)
+	if (vf->type & VIDTYPE_MVC)
 		pat = 0x88;
 
 	VSYNC_WR_MPEG_REG(VD2_IF0_LUMA0_RPT_PAT, pat);
@@ -2927,97 +2745,81 @@ static void viu_set_dcu(struct vpp_frame_par_s *frame_par, struct vframe_s *vf)
 	VSYNC_WR_MPEG_REG(VD2_IF0_LUMA1_RPT_PAT, pat);
 	VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA1_RPT_PAT, pat);
 
-	if (platform_type == 0) {
-		/* picture 0/1 control */
-		if (((type & VIDTYPE_INTERLACE) == 0) &&
-			((type & VIDTYPE_VIU_FIELD) == 0) &&
-			((type & VIDTYPE_MVC) == 0)) {
-			/* progressive frame in two pictures */
+#ifndef TV_3D_FUNCTION_OPEN
+	/* picture 0/1 control */
+	if (((vf->type & VIDTYPE_INTERLACE) == 0) &&
+	    ((vf->type & VIDTYPE_VIU_FIELD) == 0) &&
+	    ((vf->type & VIDTYPE_MVC) == 0)) {
+		/* progressive frame in two pictures */
+		VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL +
+		cur_dev->viu_off, (2 << 26) |	/* two pic mode */
+		(2 << 24) |	/* use own last line */
+		(2 << 8) |	/* toggle pic 0 and 1, use pic0 first */
+		(0x01));	/* loop pattern */
+		VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL + cur_dev->viu_off,
+		(2 << 26) |	/* two pic mode */
+		(2 << 24) |	/* use own last line */
+		(2 << 8) |	/* toggle pic 0 and 1, use pic0 first */
+		(0x01));	/* loop pattern */
+	} else {
+		VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL + cur_dev->viu_off, 0);
+		VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL + cur_dev->viu_off, 0);
+		VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_PSEL, 0);
+		VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_PSEL, 0);
+	}
+#else
+	/* picture 0/1 control */
+	if ((((vf->type & VIDTYPE_INTERLACE) == 0) &&
+	     ((vf->type & VIDTYPE_VIU_FIELD) == 0) &&
+	     ((vf->type & VIDTYPE_MVC) == 0)) ||
+	    (frame_par->vpp_2pic_mode & 0x3)) {
+		/* progressive frame in two pictures */
+		if (frame_par->vpp_2pic_mode & VPP_PIC1_FIRST) {
 			VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL +
 			cur_dev->viu_off, (2 << 26) |	/* two pic mode */
 			(2 << 24) |	/* use own last line */
-			(2 << 8) |	/* toggle pic 0 and 1, use pic0 first */
+			(1 << 8) |	/* toggle pic 0 and 1, use pic1 first*/
 			(0x01));	/* loop pattern */
 			VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL +
-			cur_dev->viu_off,
-			(2 << 26) |	/* two pic mode */
+			cur_dev->viu_off, (2 << 26) |	/* two pic mode */
 			(2 << 24) |	/* use own last line */
-			(2 << 8) |	/* toggle pic 0 and 1, use pic0 first */
+			(1 << 8) |	/* toggle pic 0 and 1,use pic1 first */
 			(0x01));	/* loop pattern */
 		} else {
 			VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL +
-			cur_dev->viu_off, 0);
+			cur_dev->viu_off, (2 << 26) |	/* two pic mode */
+			(2 << 24) |	/* use own last line */
+			(2 << 8) |	/* toggle pic 0 and 1, use pic0 first */
+			(0x01));	/* loop pattern */
 			VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL +
-			cur_dev->viu_off, 0);
-			VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_PSEL, 0);
-			VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_PSEL, 0);
+			cur_dev->viu_off, (2 << 26) |	/* two pic mode */
+			(2 << 24) |/* use own last line */
+			(2 << 8)  |/* toggle pic 0 and 1, use pic0 first */
+			(0x01));/* loop pattern */
+
 		}
 	} else {
-		/* picture 0/1 control */
-		if ((((type & VIDTYPE_INTERLACE) == 0) &&
-			 ((type & VIDTYPE_VIU_FIELD) == 0) &&
-			 ((type & VIDTYPE_MVC) == 0)) ||
-			(frame_par->vpp_2pic_mode & 0x3)) {
-			/* progressive frame in two pictures */
-			if (frame_par->vpp_2pic_mode & VPP_PIC1_FIRST) {
-				VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL +
-				cur_dev->viu_off, (2 << 26) |
-				/* two pic mode */
-				(2 << 24) |
-				/* use own last line */
-				(1 << 8) |
-				/* toggle pic 0 and 1, use pic1 first*/
-				(0x01));
-				/* loop pattern */
-				VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL +
-				cur_dev->viu_off, (2 << 26) |
-				/* two pic mode */
-				(2 << 24) |
-				/* use own last line */
-				(1 << 8) |
-				/* toggle pic 0 and 1,use pic1 first */
-				(0x01));
-				/* loop pattern */
-			} else {
-				VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL +
-				cur_dev->viu_off, (2 << 26) |
-				/* two pic mode */
-				(2 << 24) |
-				/* use own last line */
-				(2 << 8) |
-				/* toggle pic 0 and 1, use pic0 first */
-				(0x01));
-				/* loop pattern */
-				VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL +
-				cur_dev->viu_off, (2 << 26) |
-				/* two pic mode */
-				(2 << 24) |
-				/* use own last line */
-				(2 << 8) |
-				/* toggle pic 0 and 1, use pic0 first */
-				(0x01));
-				/* loop pattern */
-			}
+		if (frame_par->vpp_2pic_mode & VPP_SELECT_PIC1) {
+			VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL + cur_dev->viu_off,
+					  0x4000000);
+			VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL +
+					  cur_dev->viu_off, 0x4000000);
+			VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_PSEL + cur_dev->viu_off,
+					  0x4000000);
+			VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_PSEL +
+					  cur_dev->viu_off, 0x4000000);
 		} else {
-			if (frame_par->vpp_2pic_mode & VPP_SELECT_PIC1) {
-				VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL +
-				cur_dev->viu_off, 0);
-				VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL +
-				cur_dev->viu_off, 0);
-				VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_PSEL +
-				cur_dev->viu_off, 0);
-				VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_PSEL +
-				cur_dev->viu_off, 0);
-			} else {
-				VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL +
-				cur_dev->viu_off, 0);
-				VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL +
-						  cur_dev->viu_off, 0);
-				VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_PSEL, 0);
-				VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_PSEL, 0);
-			}
+			VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL + cur_dev->viu_off,
+					  0);
+			VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL +
+					  cur_dev->viu_off, 0);
+			VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_PSEL, 0);
+			VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_PSEL, 0);
 		}
 	}
+#endif
+
+
 }
 
 #if 1				/* MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6 */
@@ -3594,10 +3396,9 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
 	amvecm_on_vs(vf);
 #endif
 #ifdef CONFIG_TVIN_VDIN
-	/* patch for m8 4k2k wifidisplay bandwith bottleneck */
-	if (get_cpu_type() == MESON_CPU_MAJOR_ID_M8) {
+	if ((get_cpu_type() >= MESON_CPU_MAJOR_ID_M8) && !is_meson_mtvd_cpu()) {
 		vdin_ops = get_vdin_v4l2_ops();
-		if (vdin_ops && vdin_ops->tvin_vdin_func) {
+		if (vdin_ops) {
 			arg.cmd = VDIN_CMD_ISR;
 			vdin_ops->tvin_vdin_func(1, &arg);
 #ifdef CONFIG_AM_VIDEO2
@@ -3726,7 +3527,7 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
 						     (vf->pts) ? vf->pts :
 						     timestamp_vpts_get());
 
-			if (show_first_frame_nosync || show_first_picture)
+			if (show_first_frame_nosync)
 				show_nosync = true;
 
 			if (slowsync_repeat_enable)
@@ -3742,17 +3543,12 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
 					u32 cur_index =
 					    READ_VCBUS_REG(VD1_IF0_CANVAS0 +
 							   cur_dev->viu_off);
-					if ((get_cpu_type() >=
-					MESON_CPU_MAJOR_ID_GXBB) &&
-					(cur_dispbuf->type &
-					VIDTYPE_COMPRESS)) {
-						cur_dispbuf->compHeadAddr =
-						READ_VCBUS_REG(AFBC_HEAD_BADDR)
-						<< 4;
-					} else {
-						cur_dispbuf->canvas0Addr =
-						cur_index;
-					}
+					if (!((get_cpu_type() >=
+						MESON_CPU_MAJOR_ID_GXBB) &&
+						(cur_dispbuf->type &
+						  VIDTYPE_COMPRESS)))
+						cur_dispbuf->canvas0Addr
+							= cur_index;
 				}
 				vsync_toggle_frame(cur_dispbuf);
 			} else
@@ -3770,12 +3566,20 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
 
 	if (!vf)
 		underflow++;
-	if (platform_type == 1) {
-		/* toggle_3d_fa_frame
-		* determine the out frame is L or R or blank */
-		judge_3d_fa_out_mode();
+#ifdef TV_3D_FUNCTION_OPEN
+	/* toggle_3d_fa_frame  determine the out frame is L or R or blank */
+	judge_3d_fa_out_mode();
+#endif
+	if (vf) {
+		/* force set bitdepth to 8bit mode when src is 8bit */
+		if (is_meson_gxtvbb_cpu() && (bit_depth_flag == 8)
+			&& (vf->bitdepth != 10)) {
+			if (((READ_VCBUS_REG(VD1_IF0_GEN_REG3) >> 8)
+				& 0x1) == 1)
+				WRITE_VCBUS_REG_BITS(VD1_IF0_GEN_REG3,
+					0x0, 8, 2);
+		}
 	}
-
 	while (vf) {
 		if (vpts_expire(cur_dispbuf, vf) || show_nosync) {
 			amlog_mask(LOG_MASK_TIMESTAMP,
@@ -3788,7 +3592,7 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
 				      "skipped\n");
 
 #if defined(CONFIG_AM_VECM)
-			refresh_on_vs(vf);
+			amvecm_on_vs(vf);
 #endif
 
 			vf = video_vf_get();
@@ -3797,18 +3601,17 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
 			if (video_vf_dirty_put(vf))
 				break;
 			force_blackout = 0;
-			if ((platform_type == 1) ||
-			(platform_type == 0)) {
-				if (vf) {
-					if (last_mode_3d !=
-					vf->mode_3d_enable) {
-						last_mode_3d =
-						vf->mode_3d_enable;
-						mode_3d_changed = 1;
-					}
-					video_3d_format = vf->trans_fmt;
+#ifdef TV_3D_FUNCTION_OPEN
+
+			if (vf) {
+				if (last_mode_3d != vf->mode_3d_enable) {
+					last_mode_3d = vf->mode_3d_enable;
+					mode_3d_changed = 1;
 				}
+				video_3d_format = vf->trans_fmt;
 			}
+#endif
+
 			vsync_toggle_frame(vf);
 			if (trickmode_fffb == 1) {
 				trickmode_vpts = vf->pts;
@@ -3890,7 +3693,9 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
 				} else
 					vsync_toggle_frame(cur_dispbuf);
 			}
-
+#if defined(CONFIG_AM_VECM)
+			amvecm_on_vs(vf);
+#endif
 			break;
 		}
 
@@ -3917,12 +3722,13 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
 		cur_frame_par = next_frame_par;
 		frame_par_di_set = 1;
 	}
-	if ((platform_type == 1) || (platform_type == 0)) {
-		if (mode_3d_changed) {
-			mode_3d_changed = 0;
-			frame_par_force_to_set = 1;
-		}
+#ifdef TV_3D_FUNCTION_OPEN
+
+	if (mode_3d_changed) {
+		mode_3d_changed = 0;
+		frame_par_force_to_set = 1;
 	}
+#endif
 	if (cur_dispbuf) {
 		struct f2v_vphase_s *vphase;
 		u32 vin_type = cur_dispbuf->type & VIDTYPE_TYPEMASK;
@@ -3931,7 +3737,7 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
 			if (frame_par_ready_to_set)
 				viu_set_dcu(cur_frame_par, cur_dispbuf);
 		}
-		{
+
 #if 0
 		if (get_cpu_type() >= MESON_CPU_MAJOR_ID_GXBB) {
 			if (cur_dispbuf->type & VIDTYPE_COMPRESS) {
@@ -3948,158 +3754,150 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
 		}
 #endif
 
-		if (platform_type == 1) {
-			if ((cur_frame_par->hscale_skip_count)
-				&& (cur_dispbuf->type & VIDTYPE_VIU_FIELD)) {
-				VSYNC_WR_MPEG_REG_BITS(VIU_VD1_FMT_CTRL +
-					cur_dev->viu_off, 0, 20, 1);
-				/* HFORMATTER_EN */
-				VSYNC_WR_MPEG_REG_BITS(VIU_VD2_FMT_CTRL +
-					cur_dev->viu_off, 0, 20, 1);
-				/* HFORMATTER_EN */
-			}
-			if (process_3d_type & MODE_3D_OUT_FA_MASK) {
-				if (toggle_3d_fa_frame == OUT_FA_A_FRAME) {
-					VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
-						cur_dev->vpp_off, 1, 14, 1);
-					/* VPP_VD1_PREBLEND disable */
-					VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
-						cur_dev->vpp_off, 1, 10, 1);
-					/* VPP_VD1_POSTBLEND disable */
-					VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL +
-					cur_dev->viu_off, 0x4000000);
-					VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL +
-					cur_dev->viu_off, 0x4000000);
-					VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_PSEL +
-					cur_dev->viu_off, 0x4000000);
-					VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_PSEL +
-					cur_dev->viu_off, 0x4000000);
-				} else if (OUT_FA_B_FRAME ==
-				toggle_3d_fa_frame) {
-					VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
+#ifdef TV_3D_FUNCTION_OPEN
+		if ((cur_frame_par->hscale_skip_count)
+		    && (cur_dispbuf->type & VIDTYPE_VIU_FIELD)) {
+			VSYNC_WR_MPEG_REG_BITS(VIU_VD1_FMT_CTRL +
+				cur_dev->viu_off, 0, 20, 1);
+			/* HFORMATTER_EN */
+			VSYNC_WR_MPEG_REG_BITS(VIU_VD2_FMT_CTRL +
+				cur_dev->viu_off, 0, 20, 1);
+			/* HFORMATTER_EN */
+		}
+		if (process_3d_type & MODE_3D_OUT_FA_MASK) {
+			if (toggle_3d_fa_frame == OUT_FA_A_FRAME) {
+				VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
 					cur_dev->vpp_off, 1, 14, 1);
-					/* VPP_VD1_PREBLEND disable */
-					VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
+				/* VPP_VD1_PREBLEND disable */
+				VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
 					cur_dev->vpp_off, 1, 10, 1);
-					/* VPP_VD1_POSTBLEND disable */
-					VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL +
-					cur_dev->viu_off, 0);
-					VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL +
-					cur_dev->viu_off, 0);
-					VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_PSEL, 0);
-					VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_PSEL,
-					0);
-				} else if (toggle_3d_fa_frame ==
-				OUT_FA_BANK_FRAME) {
-					/* output a banking frame */
-					VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
-						cur_dev->vpp_off, 0, 14, 1);
-					/* VPP_VD1_PREBLEND disable */
-					VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
-					cur_dev->vpp_off, 0, 10, 1);
-					/* VPP_VD1_POSTBLEND disable */
-				}
+				/* VPP_VD1_POSTBLEND disable */
+				VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL +
+						  cur_dev->viu_off, 0x4000000);
+				VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL +
+						  cur_dev->viu_off, 0x4000000);
+				VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_PSEL +
+						  cur_dev->viu_off, 0x4000000);
+				VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_PSEL +
+						  cur_dev->viu_off, 0x4000000);
+			} else if (OUT_FA_B_FRAME == toggle_3d_fa_frame) {
+				VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
+					cur_dev->vpp_off, 1, 14, 1);
+				/* VPP_VD1_PREBLEND disable */
+				VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
+					cur_dev->vpp_off, 1, 10, 1);
+				/* VPP_VD1_POSTBLEND disable */
+				VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL +
+						  cur_dev->viu_off, 0);
+				VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL +
+						  cur_dev->viu_off, 0);
+				VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_PSEL, 0);
+				VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_PSEL, 0);
+
+			} else if (toggle_3d_fa_frame == OUT_FA_BANK_FRAME) {
+				/* output a banking frame */
+				VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
+					cur_dev->vpp_off, 0, 14, 1);
+				/* VPP_VD1_PREBLEND disable */
+				VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
+				cur_dev->vpp_off, 0, 10, 1);
+				/* VPP_VD1_POSTBLEND disable */
 			}
-			if ((process_3d_type & MODE_3D_OUT_TB)
-				|| (process_3d_type & MODE_3D_OUT_LR)) {
-				if (cur_frame_par->vpp_2pic_mode &
-				VPP_PIC1_FIRST) {
-					VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL +
-					cur_dev->viu_off, 0x4000000);
-					VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL +
-					cur_dev->viu_off, 0x4000000);
-					VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_PSEL +
-					cur_dev->viu_off, 0);
-					VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_PSEL +
-					cur_dev->viu_off, 0);
-				} else {
-					VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL +
-					cur_dev->viu_off, 0);
-					VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL +
-					cur_dev->viu_off, 0);
-					VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_PSEL +
-					cur_dev->viu_off, 0x4000000);
-					VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_PSEL +
-					cur_dev->viu_off, 0x4000000);
-				}
-/*
-VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
-cur_dev->vpp_off,1,15,1);//VPP_VD2_PREBLEND enable
-//VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
-cur_dev->vpp_off,1,11,1);//VPP_VD2_POSTBLEND enable
-VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
-cur_dev->vpp_off,1,6,1);//PREBLEND enable must be set!
-VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
-cur_dev->vpp_off,0x1ff,
-VPP_VD2_ALPHA_BIT,9);//vd2 alpha must set
-*/
+		}
+		if ((process_3d_type & MODE_3D_OUT_TB)
+		    || (process_3d_type & MODE_3D_OUT_LR)) {
+			if (cur_frame_par->vpp_2pic_mode & VPP_PIC1_FIRST) {
+				VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL +
+						  cur_dev->viu_off, 0x4000000);
+				VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL +
+						  cur_dev->viu_off, 0x4000000);
+				VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_PSEL +
+						  cur_dev->viu_off, 0);
+				VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_PSEL +
+						  cur_dev->viu_off, 0);
+			} else {
+				VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL +
+						  cur_dev->viu_off, 0);
+				VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL +
+						  cur_dev->viu_off, 0);
+				VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_PSEL +
+						  cur_dev->viu_off, 0x4000000);
+				VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_PSEL +
+						  cur_dev->viu_off, 0x4000000);
 			}
+			EnableVideoLayer2();
+			/*
+			VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
+			cur_dev->vpp_off,1,15,1);//VPP_VD2_PREBLEND enable
+			//VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
+			cur_dev->vpp_off,1,11,1);//VPP_VD2_POSTBLEND enable
+			VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
+			cur_dev->vpp_off,1,6,1);//PREBLEND enable must be set!
+			VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
+			cur_dev->vpp_off,0x1ff,
+			VPP_VD2_ALPHA_BIT,9);//vd2 alpha must set
+			*/
+		} else
+			DisableVideoLayer2();
+		/*
+		else{
+		VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
+		cur_dev->vpp_off,0,15,1);//VPP_VD2_PREBLEND enable
+		//VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
+		cur_dev->vpp_off,1,11,1);//VPP_VD2_POSTBLEND enable
+		VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
+		cur_dev->vpp_off,0,6,1);//PREBLEND enable
+		VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
+		cur_dev->vpp_off,0,VPP_VD2_ALPHA_BIT,9);//vd2 alpha must set
+		} */
+#endif
+		/* vertical phase */
+		vphase =
+		    &cur_frame_par->VPP_vf_ini_phase_[vpp_phase_table[vin_type]
+						      [vout_type]];
+		VSYNC_WR_MPEG_REG(VPP_VSC_INI_PHASE + cur_dev->vpp_off,
+				  ((u32) (vphase->phase) << 8));
 
-/*
-else{
-VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
-cur_dev->vpp_off,0,15,1);//VPP_VD2_PREBLEND enable
-//VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
-cur_dev->vpp_off,1,11,1);//VPP_VD2_POSTBLEND enable
-VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
-cur_dev->vpp_off,0,6,1);//PREBLEND enable
-VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
-cur_dev->vpp_off,0,VPP_VD2_ALPHA_BIT,9);//vd2 alpha must set
-} */
+		if (vphase->repeat_skip >= 0) {
+			/* skip lines */
+			VSYNC_WR_MPEG_REG_BITS(VPP_VSC_PHASE_CTRL +
+					       cur_dev->vpp_off,
+					       skip_tab[vphase->repeat_skip],
+					       VPP_PHASECTL_INIRCVNUMT_BIT,
+					       VPP_PHASECTL_INIRCVNUM_WID +
+					       VPP_PHASECTL_INIRPTNUM_WID);
+
+		} else {
+			/* repeat first line */
+			VSYNC_WR_MPEG_REG_BITS(VPP_VSC_PHASE_CTRL +
+					       cur_dev->vpp_off, 4,
+					       VPP_PHASECTL_INIRCVNUMT_BIT,
+					       VPP_PHASECTL_INIRCVNUM_WID);
+			VSYNC_WR_MPEG_REG_BITS(VPP_VSC_PHASE_CTRL +
+					       cur_dev->vpp_off,
+					       1 - vphase->repeat_skip,
+					       VPP_PHASECTL_INIRPTNUMT_BIT,
+					       VPP_PHASECTL_INIRPTNUM_WID);
 		}
-			/* vertical phase */
-			vphase =
-			&cur_frame_par->VPP_vf_ini_phase_
-			[vpp_phase_table[vin_type]
-			[vout_type]];
-			VSYNC_WR_MPEG_REG(VPP_VSC_INI_PHASE + cur_dev->vpp_off,
-					  ((u32) (vphase->phase) << 8));
-
-			if (vphase->repeat_skip >= 0) {
-				/* skip lines */
-				VSYNC_WR_MPEG_REG_BITS(VPP_VSC_PHASE_CTRL +
-				cur_dev->vpp_off,
-				skip_tab[vphase->repeat_skip],
-				VPP_PHASECTL_INIRCVNUMT_BIT,
-				VPP_PHASECTL_INIRCVNUM_WID +
-				VPP_PHASECTL_INIRPTNUM_WID);
+#ifdef TV_3D_FUNCTION_OPEN
 
-			} else {
-				/* repeat first line */
-				VSYNC_WR_MPEG_REG_BITS(VPP_VSC_PHASE_CTRL +
-				cur_dev->vpp_off, 4,
-				VPP_PHASECTL_INIRCVNUMT_BIT,
-				VPP_PHASECTL_INIRCVNUM_WID);
-				VSYNC_WR_MPEG_REG_BITS(VPP_VSC_PHASE_CTRL +
-				cur_dev->vpp_off,
-				1 - vphase->repeat_skip,
-				VPP_PHASECTL_INIRPTNUMT_BIT,
-				VPP_PHASECTL_INIRPTNUM_WID);
-			}
-			if (platform_type == 1) {
-				if (force_3d_scaler == 3 &&
-					cur_frame_par->vpp_3d_scale) {
-					VSYNC_WR_MPEG_REG_BITS(
-					VPP_VSC_PHASE_CTRL, 3,
-					VPP_PHASECTL_DOUBLELINE_BIT, 2);
-				} else if (force_3d_scaler == 1 &&
-					cur_frame_par->vpp_3d_scale) {
-					VSYNC_WR_MPEG_REG_BITS(
-					VPP_VSC_PHASE_CTRL, 1,
-					VPP_PHASECTL_DOUBLELINE_BIT,
-					VPP_PHASECTL_DOUBLELINE_WID);
-				} else if (force_3d_scaler == 2 &&
-					cur_frame_par->vpp_3d_scale) {
-					VSYNC_WR_MPEG_REG_BITS(
-					VPP_VSC_PHASE_CTRL, 2,
-					VPP_PHASECTL_DOUBLELINE_BIT, 2);
-				} else {
-					VSYNC_WR_MPEG_REG_BITS(
-					VPP_VSC_PHASE_CTRL, 0,
-					VPP_PHASECTL_DOUBLELINE_BIT, 2);
-				}
-			}
+		if (force_3d_scaler == 3 && cur_frame_par->vpp_3d_scale) {
+			VSYNC_WR_MPEG_REG_BITS(VPP_VSC_PHASE_CTRL, 3,
+					       VPP_PHASECTL_DOUBLELINE_BIT, 2);
+		} else if (force_3d_scaler == 1 &&
+				cur_frame_par->vpp_3d_scale) {
+			VSYNC_WR_MPEG_REG_BITS(VPP_VSC_PHASE_CTRL, 1,
+					       VPP_PHASECTL_DOUBLELINE_BIT,
+					       VPP_PHASECTL_DOUBLELINE_WID);
+		} else if (force_3d_scaler == 2 &&
+			cur_frame_par->vpp_3d_scale) {
+			VSYNC_WR_MPEG_REG_BITS(VPP_VSC_PHASE_CTRL, 2,
+					       VPP_PHASECTL_DOUBLELINE_BIT, 2);
+		} else {
+			VSYNC_WR_MPEG_REG_BITS(VPP_VSC_PHASE_CTRL, 0,
+					       VPP_PHASECTL_DOUBLELINE_BIT, 2);
 		}
+#endif
 	}
 
 	if (((frame_par_ready_to_set) || (frame_par_force_to_set)) &&
@@ -4116,8 +3914,8 @@ cur_dev->vpp_off,0,VPP_VD2_ALPHA_BIT,9);//vd2 alpha must set
 					cur_frame_par->VPP_vd_start_lines_
 					>> 1;
 					zoom_end_y =
-					((cur_frame_par->VPP_vd_end_lines_ + 1)
-					>> 1) - 1;
+					(cur_frame_par->VPP_vd_end_lines_ + 1)
+					>> 1;
 				} else {
 					zoom_start_y =
 					cur_frame_par->VPP_vd_start_lines_;
@@ -4135,8 +3933,8 @@ cur_dev->vpp_off,0,VPP_VD2_ALPHA_BIT,9);//vd2 alpha must set
 					cur_frame_par->VPP_vd_start_lines_
 					>> 1;
 					zoom_end_y =
-					((cur_frame_par->VPP_vd_end_lines_ +
-					1) >> 1) - 1;
+					(cur_frame_par->VPP_vd_end_lines_ +
+					1) >> 1;
 				}
 			}
 
@@ -4150,20 +3948,6 @@ cur_dev->vpp_off,0,VPP_VD2_ALPHA_BIT,9);//vd2 alpha must set
 			zoom_display_vert();
 		}
 
-		/* vpp super scaler */
-		if (get_cpu_type() >= MESON_CPU_MAJOR_ID_GXTVBB)
-			vpp_set_super_scaler_regs(cur_frame_par->supscl_path,
-				cur_frame_par->supsc0_enable,
-				cur_frame_par->spsc0_w_in,
-				cur_frame_par->spsc0_h_in,
-				cur_frame_par->supsc0_hori_ratio,
-				cur_frame_par->supsc0_vert_ratio,
-				cur_frame_par->supsc1_enable,
-				cur_frame_par->spsc1_w_in,
-				cur_frame_par->spsc1_h_in,
-				cur_frame_par->supsc1_hori_ratio,
-				cur_frame_par->supsc1_vert_ratio);
-
 		/* vpp filters */
 		/* SET_MPEG_REG_MASK(VPP_SC_MISC + cur_dev->vpp_off, */
 		/* VPP_SC_TOP_EN | VPP_SC_VERT_EN | VPP_SC_HORZ_EN); */
@@ -4189,23 +3973,22 @@ cur_dev->vpp_off,0,VPP_VD2_ALPHA_BIT,9);//vd2 alpha must set
 			bypass_pps)
 			VSYNC_WR_MPEG_REG_BITS(VPP_SC_MISC + cur_dev->vpp_off,
 				0, VPP_SC_TOP_EN_BIT, VPP_SC_TOP_EN_WID);
-	/*turn off vertical scaler when 3d display */
-	/* CLEAR_MPEG_REG_MASK(VPP_SC_MISC,VPP_SC_VERT_EN); */
-		if (platform_type == 1) {
-			if (last_mode_3d) {
-				VSYNC_WR_MPEG_REG(
-				VPP_SC_MISC + cur_dev->vpp_off,
-				READ_MPEG_REG(VPP_SC_MISC +
-				cur_dev->vpp_off) &
-				(~VPP_SC_VERT_EN));
-			}
+
+#ifdef TV_3D_FUNCTION_OPEN
+		if (last_mode_3d) {
+			/*turn off vertical scaler when 3d display */
+			/* CLEAR_MPEG_REG_MASK(VPP_SC_MISC,VPP_SC_VERT_EN); */
+			VSYNC_WR_MPEG_REG(VPP_SC_MISC + cur_dev->vpp_off,
+					  READ_MPEG_REG(VPP_SC_MISC +
+							cur_dev->vpp_off) &
+					  (~VPP_SC_VERT_EN));
 		}
+#endif
 		/* horitontal filter settings */
-		VSYNC_WR_MPEG_REG_BITS(
-		VPP_SC_MISC + cur_dev->vpp_off,
-		vpp_filter->vpp_horz_coeff[0],
-		VPP_SC_HBANK_LENGTH_BIT,
-		VPP_SC_BANK_LENGTH_WID);
+		VSYNC_WR_MPEG_REG_BITS(VPP_SC_MISC + cur_dev->vpp_off,
+				       vpp_filter->vpp_horz_coeff[0],
+				       VPP_SC_HBANK_LENGTH_BIT,
+				       VPP_SC_BANK_LENGTH_WID);
 
 		/* #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8 */
 		if ((get_cpu_type() >= MESON_CPU_MAJOR_ID_M8)
@@ -4245,58 +4028,28 @@ cur_dev->vpp_off,0,VPP_VD2_ALPHA_BIT,9);//vd2 alpha must set
 			VSYNC_WR_MPEG_REG(VPP_SCALE_COEF + cur_dev->vpp_off,
 					  vpp_filter->vpp_vert_coeff[i + 2]);
 		}
-
-		/* vertical chroma filter settings */
-		if (vpp_filter->vpp_vert_chroma_filter_en) {
-			const u32 *pCoeff = vpp_filter->vpp_vert_chroma_coeff;
-			VSYNC_WR_MPEG_REG(
-				VPP_SCALE_COEF_IDX + cur_dev->vpp_off,
-				VPP_COEF_VERT_CHROMA|VPP_COEF_SEP_EN);
-			for (i = 0; i < pCoeff[1]; i++)
-				VSYNC_WR_MPEG_REG(
-					VPP_SCALE_COEF + cur_dev->vpp_off,
-					pCoeff[i + 2]);
-		}
-
 #if (!HAS_VPU_PROT)
 		if (is_meson_gxbb_cpu()) {
-			if (cur_dispbuf->type & VIDTYPE_INTERLACE) {
-				cur_frame_par->VPP_pic_in_height_ =
-				zoom_end_y_lines - zoom_start_y_lines + 1;
-				cur_frame_par->VPP_line_in_length_ =
-				zoom_end_x_lines - zoom_start_x_lines + 1;
-			} else {
-				cur_frame_par->VPP_pic_in_height_ =
-				(zoom_end_y_lines - zoom_start_y_lines + 1) /
-				(cur_frame_par->vscale_skip_count + 1);
-				if (cur_dispbuf->type & VIDTYPE_MVC)
-					cur_frame_par->VPP_pic_in_height_ *= 2;
-				cur_frame_par->VPP_line_in_length_ =
-				(zoom_end_x_lines - zoom_start_x_lines + 1) /
-				(cur_frame_par->hscale_skip_count + 1);
-			}
+			cur_frame_par->VPP_pic_in_height_ = (zoom_end_y_lines -
+				zoom_start_y_lines + 1) /
+			(cur_frame_par->vscale_skip_count + 1);
+			if (cur_dispbuf->type & VIDTYPE_MVC)
+				cur_frame_par->VPP_pic_in_height_ *= 2;
+			cur_frame_par->VPP_line_in_length_ = (zoom_end_x_lines -
+				zoom_start_x_lines + 1) /
+			(cur_frame_par->hscale_skip_count + 1);
 		}
-		if (is_meson_gxtvbb_cpu() || is_meson_txl_cpu()) {
-			if (cur_dispbuf->type & VIDTYPE_INTERLACE) {
-				cur_frame_par->VPP_pic_in_height_ =
-				(zoom_end_y_lines - zoom_start_y_lines + 1)  <<
-				cur_frame_par->supsc0_vert_ratio;
-				cur_frame_par->VPP_line_in_length_ =
-				(zoom_end_x_lines - zoom_start_x_lines + 1) <<
-				cur_frame_par->supsc0_hori_ratio;
-			} else {
-				cur_frame_par->VPP_pic_in_height_ =
-				((zoom_end_y_lines - zoom_start_y_lines + 1) /
+		if (is_meson_gxtvbb_cpu()) {
+			cur_frame_par->VPP_pic_in_height_ = ((zoom_end_y_lines -
+				zoom_start_y_lines + 1) /
 				(cur_frame_par->vscale_skip_count + 1)) <<
 				cur_frame_par->supsc0_vert_ratio;
-				if (cur_dispbuf->type & VIDTYPE_MVC)
-					cur_frame_par->VPP_pic_in_height_ *= 2;
-				cur_frame_par->VPP_line_in_length_ =
-				((zoom_end_x_lines - zoom_start_x_lines + 1) /
+			if (cur_dispbuf->type & VIDTYPE_MVC)
+				cur_frame_par->VPP_pic_in_height_ *= 2;
+			cur_frame_par->VPP_line_in_length_ = ((zoom_end_x_lines
+				- zoom_start_x_lines + 1) /
 				(cur_frame_par->hscale_skip_count + 1)) <<
 				cur_frame_par->supsc0_hori_ratio;
-			}
-
 			VSYNC_WR_MPEG_REG(VPP_IN_H_V_SIZE,
 				(((cur_frame_par->VPP_line_in_length_ >>
 				cur_frame_par->supsc0_hori_ratio) & 0x1fff) <<
@@ -4392,7 +4145,7 @@ cur_dev->vpp_off,0,VPP_VD2_ALPHA_BIT,9);//vd2 alpha must set
 		if ((vpp_filter->vpp_hsc_start_phase_step != h_phase_step) ||
 		(vpp_filter->vpp_vsc_start_phase_step != v_phase_step)) {
 			video_property_changed = true;
-			/*pr_info("frame info register rdma write fail!\n");*/
+			pr_info("frame info register rdma write fail!\n");
 		}
 	}
 	if (likely(video_onoff_state != VIDEO_ENABLE_STATE_IDLE)) {
@@ -4768,14 +4521,11 @@ int get_curren_frame_para(int *top, int *left, int *bottom, int *right)
 
 int get_current_vscale_skip_count(struct vframe_s *vf)
 {
-	int ret = 0;
 	static struct vpp_frame_par_s frame_par;
 
 	vpp_set_filters(process_3d_type, wide_setting, vf, &frame_par, vinfo);
-	ret = frame_par.vscale_skip_count;
-	if (cur_frame_par && (process_3d_type & MODE_3D_ENABLE))
-		ret |= (cur_frame_par->vpp_3d_mode<<8);
-	return ret;
+
+	return frame_par.vscale_skip_count;
 }
 
 int query_video_status(int type, int *value)
@@ -4851,8 +4601,6 @@ static void video_vf_unreg_provider(void)
 #endif
 	atomic_set(&video_unreg_flag, 0);
 	enable_video_discontinue_report = 1;
-	show_first_picture = false;
-	show_first_frame_nosync = false;
 }
 
 static void video_vf_light_unreg_provider(void)
@@ -4891,41 +4639,6 @@ static void video_vf_light_unreg_provider(void)
 	spin_unlock_irqrestore(&lock, flags);
 }
 
-static int  get_display_info(void *data)
-{
-	s32 w, h, x, y;
-	struct vdisplay_info_s  *info_para = (struct vdisplay_info_s *)data;
-	const struct vinfo_s *info = get_current_vinfo();
-
-	if ((!cur_frame_par) || (!info))
-		return -1;
-	vpp_get_video_layer_position(&x, &y, &w, &h);
-	if ((w == 0) || (w  > info->width))
-		w =  info->width;
-	if ((h == 0) || (h  > info->height))
-		h =  info->height;
-
-	info_para->frame_hd_start_lines_ = cur_frame_par->VPP_hd_start_lines_;
-	info_para->frame_hd_end_lines_ = cur_frame_par->VPP_hd_end_lines_;
-	info_para->frame_vd_start_lines_ = cur_frame_par->VPP_vd_start_lines_;
-	info_para->frame_vd_end_lines_ = cur_frame_par->VPP_vd_end_lines_;
-	info_para->display_hsc_startp = cur_frame_par->VPP_hsc_startp - x;
-	info_para->display_hsc_endp =
-	cur_frame_par->VPP_hsc_endp + (info->width - x - w);
-	info_para->display_vsc_startp = cur_frame_par->VPP_vsc_startp - y;
-	info_para->display_vsc_endp =
-	cur_frame_par->VPP_vsc_endp + (info->height - y - h);
-	info_para->screen_vd_h_start_ =
-	cur_frame_par->VPP_post_blend_vd_h_start_;
-	info_para->screen_vd_h_end_ =
-	cur_frame_par->VPP_post_blend_vd_h_end_;
-	info_para->screen_vd_v_start_ =
-	cur_frame_par->VPP_post_blend_vd_v_start_;
-	info_para->screen_vd_v_end_ = cur_frame_par->VPP_post_blend_vd_v_end_;
-
-	return 0;
-}
-
 static int video_receiver_event_fun(int type, void *data, void *private_data)
 {
 #ifdef CONFIG_AM_VIDEO2
@@ -4952,15 +4665,21 @@ static int video_receiver_event_fun(int type, void *data, void *private_data)
 			set_clone_frame_rate(video_play_clone_rate, 100);
 		}
 #endif
-/*notify di 3d mode is frame
-alternative mode,passing two buffer in one frame */
-		if (platform_type == 1) {
-			if ((process_3d_type & MODE_3D_FA) &&
-			!cur_dispbuf->trans_fmt)
-				vf_notify_receiver_by_name("deinterlace",
-			VFRAME_EVENT_PROVIDER_SET_3D_VFRAME_INTERLEAVE,
+		/* if provider is not deinterlace, set bit depth to 8 */
+		if (strncmp((char *)data, "deinterlace", 11) != 0)
+			bit_depth_flag = 8;
+		else
+			bit_depth_flag = 10;
+		pr_info("set bit_depth_flag to %d\n", bit_depth_flag);
+#ifdef TV_3D_FUNCTION_OPEN
+
+		if ((process_3d_type & MODE_3D_FA) && !cur_dispbuf->trans_fmt)
+			/*notify di 3d mode is frame
+			alternative mode,passing two buffer in one frame */
+			vf_notify_receiver_by_name("deinterlace",
+				VFRAME_EVENT_PROVIDER_SET_3D_VFRAME_INTERLEAVE,
 				(void *)1);
-		}
+#endif
 
 		video_vf_light_unreg_provider();
 	} else if (type == VFRAME_EVENT_PROVIDER_FORCE_BLACKOUT) {
@@ -4978,8 +4697,6 @@ alternative mode,passing two buffer in one frame */
 #ifdef CONFIG_AM_VOUT
 		set_vframe_rate_end_hint();
 #endif
-	} else if (type == VFRAME_EVENT_PROVIDER_QUREY_DISPLAY_INFO) {
-		get_display_info(data);
 	}
 	return 0;
 }
@@ -4993,6 +4710,12 @@ static int video4osd_receiver_event_fun(int type, void *data,
 			pr_info("[video4osd] clear osd_prov\n");
 	} else if (type == VFRAME_EVENT_PROVIDER_REG) {
 		osd_prov = vf_get_provider(RECEIVER4OSD_NAME);
+		/* if provider is not deinterlace, set bit depth to 8 */
+		if (strncmp((char *)data, "deinterlace", 11) != 0)
+			bit_depth_flag = 8;
+		else
+			bit_depth_flag = 10;
+		pr_info("set bit_depth_flag to %d\n", bit_depth_flag);
 
 		if (debug_flag & DEBUG_FLAG_BLACKOUT)
 			pr_info("[video4osd] set osd_prov\n");
@@ -5080,7 +4803,6 @@ unsigned int vf_keep_current(void)
 	if (!keep_y_addr
 	    || (cur_dispbuf->type & VIDTYPE_VIU_422) == VIDTYPE_VIU_422) {
 		/* no support VIDTYPE_VIU_422... */
-		pr_info("%s:no support VIDTYPE_VIU_422\n", __func__);
 		return -1;
 	}
 
@@ -5307,8 +5029,6 @@ static void _set_video_window(int *p)
 {
 	int w, h;
 	int *parsed = p;
-	int last_x, last_y, last_w, last_h;
-	int new_x, new_y, new_w, new_h;
 #ifdef TV_REVERSE
 	int temp, temp1;
 	const struct vinfo_s *info = get_current_vinfo();
@@ -5325,7 +5045,6 @@ static void _set_video_window(int *p)
 		parsed[3] = info->height - temp1 - 1;
 	}
 #endif
-	vpp_get_video_layer_position(&last_x, &last_y, &last_w, &last_h);
 	if (parsed[0] < 0 && parsed[2] < 2) {
 		parsed[2] = 2;
 		parsed[0] = 0;
@@ -5364,11 +5083,7 @@ static void _set_video_window(int *p)
 						     h);
 		}
 	}
-	vpp_get_video_layer_position(&new_x, &new_y, &new_w, &new_h);
-	if ((last_x != new_x) || (last_y != new_y)
-	|| (last_w != new_w) || (last_h != new_h)) {
-		video_property_changed = true;
-	}
+	video_property_changed = true;
 }
 
 /*********************************************************
@@ -5647,7 +5362,7 @@ static long amvideo_ioctl(struct file *file, unsigned int cmd, ulong arg)
 		{
 #ifdef TV_3D_FUNCTION_OPEN
 			unsigned int set_3d =
-				VFRAME_EVENT_PROVIDER_SET_3D_VFRAME_INTERLEAVE;
+				VFRAME_EVENT_PROVIDER_SET_3D_VFRAME_INTERLEAVE,
 			unsigned int type = (unsigned int)arg;
 			if (type != process_3d_type) {
 				process_3d_type = type;
@@ -5678,20 +5393,6 @@ static long amvideo_ioctl(struct file *file, unsigned int cmd, ulong arg)
 
 #endif
 		break;
-	case AMSTREAM_IOC_GET_SOURCE_VIDEO_3D_TYPE:
-#ifdef TV_3D_FUNCTION_OPEN
-	{
-		int source_video_3d_type = VPP_3D_MODE_NULL;
-		if (!cur_frame_par)
-			source_video_3d_type =
-		VPP_3D_MODE_NULL;
-		else
-			get_vpp_3d_mode(cur_frame_par->trans_fmt,
-		&source_video_3d_type);
-		put_user(source_video_3d_type, (u32 __user *)argp);
-	}
-#endif
-		break;
 	case AMSTREAM_IOC_SET_VSYNC_UPINT:
 		vsync_pts_inc_upint = arg;
 		break;
@@ -5738,7 +5439,6 @@ static long amvideo_compat_ioctl(struct file *file, unsigned int cmd, ulong arg)
 	case AMSTREAM_IOC_SET_BLACKOUT_POLICY:
 	case AMSTREAM_IOC_GET_FREERUN_MODE:
 	case AMSTREAM_IOC_GET_3D_TYPE:
-	case AMSTREAM_IOC_GET_SOURCE_VIDEO_3D_TYPE:
 	case AMSTREAM_IOC_GET_VSYNC_SLOW_FACTOR:
 		arg = (unsigned long) compat_ptr(arg);
 	case AMSTREAM_IOC_TRICKMODE:
@@ -5975,42 +5675,6 @@ static ssize_t video_state_show(struct class *cla,
 	len +=
 	    sprintf(buf + len, "vscale filter coef %d.\n",
 		    vpp_filter->vpp_vert_filter);
-	len +=
-	    sprintf(buf + len, "post_blend_vd_h_start 0x%x.\n",
-		    cur_frame_par->VPP_post_blend_vd_h_start_);
-	len +=
-	    sprintf(buf + len, "post_blend_vd_h_end 0x%x.\n",
-		    cur_frame_par->VPP_post_blend_vd_h_end_);
-	len +=
-	    sprintf(buf + len, "post_blend_vd_v_start 0x%x.\n",
-		    cur_frame_par->VPP_post_blend_vd_v_start_);
-	len +=
-	    sprintf(buf + len, "post_blend_vd_v_end 0x%x.\n",
-		    cur_frame_par->VPP_post_blend_vd_v_end_);
-	len +=
-	    sprintf(buf + len, "VPP_hd_start_lines_ 0x%x.\n",
-		    cur_frame_par->VPP_hd_start_lines_);
-	len +=
-	    sprintf(buf + len, "VPP_hd_end_lines_ 0x%x.\n",
-		    cur_frame_par->VPP_hd_end_lines_);
-	len +=
-	    sprintf(buf + len, "VPP_vd_start_lines_ 0x%x.\n",
-		    cur_frame_par->VPP_vd_start_lines_);
-	len +=
-	    sprintf(buf + len, "VPP_vd_end_lines_ 0x%x.\n",
-		    cur_frame_par->VPP_vd_end_lines_);
-	len +=
-	    sprintf(buf + len, "VPP_hsc_startp 0x%x.\n",
-		    cur_frame_par->VPP_hsc_startp);
-	len +=
-	    sprintf(buf + len, "VPP_hsc_endp 0x%x.\n",
-		    cur_frame_par->VPP_hsc_endp);
-	len +=
-	    sprintf(buf + len, "VPP_vsc_startp 0x%x.\n",
-		    cur_frame_par->VPP_vsc_startp);
-	len +=
-	    sprintf(buf + len, "VPP_vsc_endp 0x%x.\n",
-		    cur_frame_par->VPP_vsc_endp);
 	return len;
 }
 
@@ -6344,11 +6008,6 @@ static ssize_t video_test_screen_show(struct class *cla,
 {
 	return sprintf(buf, "0x%x\n", test_screen);
 }
-static ssize_t video_rgb_screen_show(struct class *cla,
-				      struct class_attribute *attr, char *buf)
-{
-	return sprintf(buf, "0x%x\n", rgb_screen);
-}
 
 #define SCALE 6
 
@@ -6487,14 +6146,6 @@ static u32 yuv2rgb(u32 yuv)
 
 	return  (r << 16) | (g << 8) | b;
 }
-/* 8bit convert to 10bit */
-static u32 eight2ten(u32 yuv)
-{
-	int y = (yuv >> 16) & 0xff;
-	int cb = (yuv >> 8) & 0xff;
-	int cr = yuv & 0xff;
-	return  (y << 20) | (cb << 10) | cr;
-}
 
 static ssize_t video_test_screen_store(struct class *cla,
 				       struct class_attribute *attr,
@@ -6529,84 +6180,21 @@ static ssize_t video_test_screen_store(struct class *cla,
 	   data &= (~VPP_VD2_POSTBLEND);
 	 */
 	/* show test screen  YUV blend*/
-	if (is_meson_gxm_cpu()) {/* bit width change to 10bit in gxm */
-		if (READ_VCBUS_REG(VIU_OSD1_BLK0_CFG_W0) & 0x80)
-			WRITE_VCBUS_REG(VPP_DUMMY_DATA1,
-				eight2ten(test_screen & 0x00ffffff));
-		else /* RGB blend */
-			WRITE_VCBUS_REG(VPP_DUMMY_DATA1,
-				eight2ten(yuv2rgb(test_screen & 0x00ffffff)));
-	} else {
-		if (READ_VCBUS_REG(VIU_OSD1_BLK0_CFG_W0) & 0x80)
-			WRITE_VCBUS_REG(VPP_DUMMY_DATA1,
-				test_screen & 0x00ffffff);
-		else {/* RGB blend */
-			if (is_meson_txl_cpu())
-				WRITE_VCBUS_REG(VPP_DUMMY_DATA1,
-					test_screen & 0x00ffffff);
-			else
-				WRITE_VCBUS_REG(VPP_DUMMY_DATA1,
+	if (READ_VCBUS_REG(VIU_OSD1_BLK0_CFG_W0) & 0x80)
+		WRITE_VCBUS_REG(VPP_DUMMY_DATA1, test_screen & 0x00ffffff);
+	else /* RGB blend */
+		WRITE_VCBUS_REG(VPP_DUMMY_DATA1,
 				yuv2rgb(test_screen & 0x00ffffff));
-		}
-	}
-	WRITE_VCBUS_REG(VPP_MISC, data);
 
-	if (debug_flag & DEBUG_FLAG_BLACKOUT) {
-		pr_info("%s write(VPP_MISC,%x) write(VPP_DUMMY_DATA1, %x)\n",
-		       __func__, data, test_screen & 0x00ffffff);
-	}
-	return count;
-}
-
-static ssize_t video_rgb_screen_store(struct class *cla,
-				       struct class_attribute *attr,
-				       const char *buf, size_t count)
-{
-	size_t r;
-	unsigned data = 0x0;
-	r = sscanf(buf, "0x%x", &rgb_screen);
-	if (r != 1)
-		return -EINVAL;
-
-	/* vdin0 pre post blend enable or disabled */
-	data = READ_VCBUS_REG(VPP_MISC);
-	if (rgb_screen & 0x01000000)
-		data |= VPP_VD1_PREBLEND;
-	else
-		data &= (~VPP_VD1_PREBLEND);
-
-	if (rgb_screen & 0x02000000)
-		data |= VPP_VD1_POSTBLEND;
-	else
-		data &= (~VPP_VD1_POSTBLEND);
-	/*
-	   if (test_screen & 0x04000000)
-	   data |= VPP_VD2_PREBLEND;
-	   else
-	   data &= (~VPP_VD2_PREBLEND);
-
-	   if (test_screen & 0x08000000)
-	   data |= VPP_VD2_POSTBLEND;
-	   else
-	   data &= (~VPP_VD2_POSTBLEND);
-	 */
-	/* show test screen  YUV blend*/
-	if (is_meson_gxtvbb_cpu())   {
-		if (!(READ_VCBUS_REG(VIU_OSD1_BLK0_CFG_W0) & 0x80))
-			WRITE_VCBUS_REG(VPP_DUMMY_DATA1,
-				rgb_screen & 0x00ffffff);
-	}
 	WRITE_VCBUS_REG(VPP_MISC, data);
 
 	if (debug_flag & DEBUG_FLAG_BLACKOUT) {
 		pr_info("%s write(VPP_MISC,%x) write(VPP_DUMMY_DATA1, %x)\n",
-		       __func__, data, rgb_screen & 0x00ffffff);
+		       __func__, data, test_screen & 0x00ffffff);
 	}
 	return count;
 }
 
-
-
 static ssize_t video_nonlinear_factor_show(struct class *cla,
 					   struct class_attribute *attr,
 					   char *buf)
@@ -6806,12 +6394,8 @@ static ssize_t frame_width_show(struct class *cla,
 			struct class_attribute *attr,
 			char *buf)
 {
-	if (cur_dispbuf) {
-		if (cur_dispbuf->type & VIDTYPE_COMPRESS)
-			return sprintf(buf, "%d\n", cur_dispbuf->compWidth);
-		else
-			return sprintf(buf, "%d\n", cur_dispbuf->width);
-	}
+	if (cur_dispbuf)
+		return sprintf(buf, "%d\n", cur_dispbuf->width);
 
 	return sprintf(buf, "NA\n");
 }
@@ -6819,12 +6403,8 @@ static ssize_t frame_width_show(struct class *cla,
 static ssize_t frame_height_show(struct class *cla,
 				 struct class_attribute *attr, char *buf)
 {
-	if (cur_dispbuf) {
-		if (cur_dispbuf->type & VIDTYPE_COMPRESS)
-			return sprintf(buf, "%d\n", cur_dispbuf->compHeight);
-		else
-			return sprintf(buf, "%d\n", cur_dispbuf->height);
-	}
+	if (cur_dispbuf)
+		return sprintf(buf, "%d\n", cur_dispbuf->height);
 
 	return sprintf(buf, "NA\n");
 }
@@ -6832,22 +6412,15 @@ static ssize_t frame_height_show(struct class *cla,
 static ssize_t frame_format_show(struct class *cla,
 				 struct class_attribute *attr, char *buf)
 {
-	ssize_t ret = 0;
-
 	if (cur_dispbuf) {
 		if ((cur_dispbuf->type & VIDTYPE_TYPEMASK) ==
 		    VIDTYPE_INTERLACE_TOP)
-			ret = sprintf(buf, "interlace-top\n");
+			return sprintf(buf, "interlace-top\n");
 		else if ((cur_dispbuf->type & VIDTYPE_TYPEMASK) ==
 			 VIDTYPE_INTERLACE_BOTTOM)
-			ret = sprintf(buf, "interlace-bottom\n");
+			return sprintf(buf, "interlace-bottom\n");
 		else
-			ret = sprintf(buf, "progressive\n");
-
-		if (cur_dispbuf->type & VIDTYPE_COMPRESS)
-			ret += sprintf(buf + ret, "Compressed\n");
-
-		return ret;
+			return sprintf(buf, "progressive\n");
 	}
 
 	return sprintf(buf, "NA\n");
@@ -7229,26 +6802,6 @@ static ssize_t show_first_frame_nosync_store(struct class *cla,
 	return count;
 }
 
-static ssize_t show_first_picture_store(struct class *cla,
-				   struct class_attribute *attr,
-				   const char *buf, size_t count)
-{
-	size_t r;
-	int value;
-
-	r = sscanf(buf, "%d", &value);
-
-	if (r != 1)
-		return -EINVAL;
-
-	if (value == 0)
-		show_first_picture = false;
-	else
-		show_first_picture = true;
-
-	return count;
-}
-
 static ssize_t video_free_keep_buffer_store(struct class *cla,
 				   struct class_attribute *attr,
 				   const char *buf, size_t count)
@@ -7266,25 +6819,6 @@ static ssize_t video_free_keep_buffer_store(struct class *cla,
 }
 
 
-static ssize_t free_cma_buffer_store(struct class *cla,
-				   struct class_attribute *attr,
-				   const char *buf, size_t count)
-{
-	size_t r;
-	int val;
-	r = sscanf(buf, "%d", &val);
-	if (r != 1)
-		return -EINVAL;
-	if (val == 1) {
-		pr_info("start to free cma buffer\n");
-		vh265_free_cmabuf();
-		vh264_4k_free_cmabuf();
-		vdec_free_cmabuf();
-	}
-	return count;
-}
-
-
 static struct class_attribute amvideo_class_attrs[] = {
 	__ATTR(axis,
 	       S_IRUGO | S_IWUSR | S_IWGRP,
@@ -7342,10 +6876,6 @@ static struct class_attribute amvideo_class_attrs[] = {
 	       S_IRUGO | S_IWUSR,
 	       video_test_screen_show,
 	       video_test_screen_store),
-	__ATTR(rgb_screen,
-	       S_IRUGO | S_IWUSR,
-	       video_rgb_screen_show,
-	       video_rgb_screen_store),
 	__ATTR(file_name,
 	       S_IRUGO | S_IWUSR,
 	       video_filename_show,
@@ -7393,9 +6923,6 @@ static struct class_attribute amvideo_class_attrs[] = {
 	       S_IRUGO | S_IWUSR,
 	       show_first_frame_nosync_show,
 	       show_first_frame_nosync_store),
-	__ATTR(show_first_picture,
-	       S_IRUGO | S_IWUSR | S_IWGRP, NULL,
-	       show_first_picture_store),
 	__ATTR(slowsync_repeat_enable,
 	       S_IRUGO | S_IWUSR,
 	       slowsync_repeat_enable_show,
@@ -7403,9 +6930,6 @@ static struct class_attribute amvideo_class_attrs[] = {
 	__ATTR(free_keep_buffer,
 	       S_IRUGO | S_IWUSR | S_IWGRP, NULL,
 	       video_free_keep_buffer_store),
-	__ATTR(free_cma_buffer,
-	       S_IRUGO | S_IWUSR | S_IWGRP, NULL,
-	       free_cma_buffer_store),
 #ifdef CONFIG_AM_VOUT
 	__ATTR_RO(device_resolution),
 #endif
@@ -7795,32 +7319,18 @@ static int __init video_early_init(void)
 
 	if (get_logo_vmode() >= VMODE_MAX) {
 #if 1				/* MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6 */
-		if (is_meson_gxtvbb_cpu())
-			WRITE_VCBUS_REG_BITS(VPP_OFIFO_SIZE, 0xfff,
-				VPP_OFIFO_SIZE_BIT, VPP_OFIFO_SIZE_WID);
-		else
-			WRITE_VCBUS_REG_BITS(VPP_OFIFO_SIZE, 0x77f,
-				VPP_OFIFO_SIZE_BIT, VPP_OFIFO_SIZE_WID);
+		WRITE_VCBUS_REG_BITS(VPP_OFIFO_SIZE, 0x77f, VPP_OFIFO_SIZE_BIT,
+				     VPP_OFIFO_SIZE_WID);
 #if 0			/* MESON_CPU_TYPE >= MESON_CPU_TYPE_MESONG9TV */
 		WRITE_VCBUS_REG_BITS(VPP_OFIFO_SIZE, 0x800, VPP_OFIFO_SIZE_BIT,
 				     VPP_OFIFO_SIZE_WID);
 #endif
 #endif			/* MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6 */
-	} else {
-		if (is_meson_gxtvbb_cpu())
-			WRITE_VCBUS_REG_BITS(VPP_OFIFO_SIZE, 0xfff,
-				VPP_OFIFO_SIZE_BIT, VPP_OFIFO_SIZE_WID);
 	}
 #if 1			/* MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8 */
 	WRITE_VCBUS_REG(VPP_PREBLEND_VD1_H_START_END, 4096);
 	WRITE_VCBUS_REG(VPP_BLEND_VD2_H_START_END, 4096);
 #endif
-	if (is_meson_txl_cpu()) {
-		/* fifo max size on txl :128*3=384[0x180]  */
-		WRITE_VCBUS_REG(VD1_IF0_LUMA_FIFO_SIZE, 0x180);
-		WRITE_VCBUS_REG(VD2_IF0_LUMA_FIFO_SIZE, 0x180);
-	}
-
 	 /*fix S905 av out flicker black dot*/
 	if (is_meson_gxbb_cpu())
 		SET_VCBUS_REG_MASK(VPP_MISC, VPP_OUT_SATURATE);
@@ -7854,17 +7364,7 @@ static int __init video_early_init(void)
 	WRITE_VCBUS_REG_BITS(VPU_OSD3_MMC_CTRL, 2, 12, 2);
 	/* select vdin_mmc_arb for VIU2_OSD1 request */
 #endif
-	/* default 10bit setting for gxm */
-	if (is_meson_gxm_cpu()) {
-		WRITE_VCBUS_REG_BITS(VIU_MISC_CTRL1, 0xff, 16, 8);
-		WRITE_VCBUS_REG(VPP_DOLBY_CTRL, 0x20000);
-		/* default setting is black for dummy data1& dumy data0,
-		for dummy data1 the y/cb/cr data width is 10bit on gxm,
-		for dummy data the y/cb/cr data width is 8bit but
-		vpp_dummy_data will be left shift 2bit auto on gxm!!! */
-		WRITE_VCBUS_REG(VPP_DUMMY_DATA1, 0x1020080);
-		WRITE_VCBUS_REG(VPP_DUMMY_DATA, 0x42020);
-	}
+
 	/* temp: enable VPU arb mem */
 	if (get_cpu_type() >= MESON_CPU_MAJOR_ID_GXBB)
 		switch_vpu_mem_pd_vmod(VPU_VPU_ARB, VPU_MEM_POWER_ON);
@@ -7909,11 +7409,8 @@ static int __init video_init(void)
 	DisableVideoLayer();
 	DisableVideoLayer2();
 
-	/* check super scaler support status */
-	vpp_super_scaler_support();
-
 #ifndef CONFIG_AM_VIDEO2
-	/*DisableVPP2VideoLayer();*/
+	DisableVPP2VideoLayer();
 #endif
 
 	cur_dispbuf = NULL;
@@ -8179,13 +7676,6 @@ module_param(omx_pts_interval_lower, int, 0664);
 MODULE_PARM_DESC(bypass_pps, "\n pps_bypass\n");
 module_param(bypass_pps, bool, 0664);
 
-MODULE_PARM_DESC(platform_type, "\n platform_type\n");
-module_param(platform_type, bool, 0664);
-
-MODULE_PARM_DESC(process_3d_type, "\n process_3d_type\n");
-module_param(process_3d_type, uint, 0664);
-
-
 #ifdef TV_REVERSE
 module_param(reverse, bool, 0644);
 MODULE_PARM_DESC(reverse, "reverse /disable reverse");
-- 
1.9.1

