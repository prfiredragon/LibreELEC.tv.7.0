From e21e298bbc4926f139af1f93f31c51bce065eb96 Mon Sep 17 00:00:00 2001
From: Jamie Coldhill <wrxtasy@amnet.net.au>
Date: Sun, 2 Oct 2016 19:21:10 +0800
Subject: [PATCH 01/13] Update: ucode

---
 drivers/amlogic/amports/arch/ucode/Makefile        |    1 +
 drivers/amlogic/amports/arch/ucode/avs/avs_linux.h |  971 +++++----
 .../amports/arch/ucode/avs/avs_linux_debug.h       | 1020 +++++----
 .../amlogic/amports/arch/ucode/avs/avs_linux_old.h |  539 +++++
 .../amlogic/amports/arch/ucode/avs/txl_avs_linux.h |  540 +++++
 .../amports/arch/ucode/avs/txl_avs_linux_debug.h   |  546 +++++
 drivers/amlogic/amports/arch/ucode/avs/vavs_mc.c   |   15 +
 drivers/amlogic/amports/arch/ucode/firmware_def.h  |    4 +
 .../amports/arch/ucode/h264/gxm_h264c_linux.h      |  822 +++++++
 .../amports/arch/ucode/h264/gxm_h264data_linux.h   |  207 ++
 .../amports/arch/ucode/h264/gxm_h264header_linux.h |  207 ++
 .../amports/arch/ucode/h264/gxm_h264list_linux.h   |  207 ++
 .../amports/arch/ucode/h264/gxm_h264mmc_linux.h    |  207 ++
 .../amports/arch/ucode/h264/gxm_h264slice_linux.h  |  207 ++
 .../amports/arch/ucode/h264/gxtvbb_h264c_linux.h   |  822 +++++++
 .../arch/ucode/h264/gxtvbb_h264data_linux.h        |  207 ++
 .../arch/ucode/h264/gxtvbb_h264header_linux.h      |  207 ++
 .../arch/ucode/h264/gxtvbb_h264list_linux.h        |  207 ++
 .../amports/arch/ucode/h264/gxtvbb_h264mmc_linux.h |  207 ++
 .../arch/ucode/h264/gxtvbb_h264slice_linux.h       |  207 ++
 .../amlogic/amports/arch/ucode/h264/h264c_linux.h  |  497 ++---
 .../amports/arch/ucode/h264/h264data_linux.h       |  182 +-
 .../amports/arch/ucode/h264/h264header_linux.h     |  368 ++--
 .../amports/arch/ucode/h264/h264list_linux.h       |   18 -
 .../amports/arch/ucode/h264/h264mmc_linux.h        |  374 ++--
 .../amports/arch/ucode/h264/h264slice_linux.h      |  206 +-
 drivers/amlogic/amports/arch/ucode/h264/vh264_mc.c |   95 +-
 .../amports/arch/ucode/h264_enc/h264_enc_gx.h      |  798 +++----
 .../amports/arch/ucode/h264_enc/h264_enc_gxtv.h    |  468 ++++
 .../amports/arch/ucode/h264_enc/h264_enc_mc.c      |   32 +
 .../amports/arch/ucode/h264_enc/h264_enc_txl.h     |  465 ++++
 drivers/amlogic/amports/arch/ucode/h265/vh265_mc.c | 1868 +++++++++++-----
 .../amlogic/amports/arch/ucode/mpeg4/vmpeg4_mc.c   | 2304 ++++++++++----------
 .../amlogic/amports/arch/ucode/vc1/vc1_vc1_linux.h | 1539 ++++++-------
 drivers/amlogic/amports/arch/ucode/vp9/Makefile    |    2 +
 drivers/amlogic/amports/arch/ucode/vp9/vvp9_mc.c   |  500 +++++
 36 files changed, 12314 insertions(+), 4752 deletions(-)
 create mode 100644 drivers/amlogic/amports/arch/ucode/avs/avs_linux_old.h
 create mode 100644 drivers/amlogic/amports/arch/ucode/avs/txl_avs_linux.h
 create mode 100644 drivers/amlogic/amports/arch/ucode/avs/txl_avs_linux_debug.h
 create mode 100644 drivers/amlogic/amports/arch/ucode/h264/gxm_h264c_linux.h
 create mode 100644 drivers/amlogic/amports/arch/ucode/h264/gxm_h264data_linux.h
 create mode 100644 drivers/amlogic/amports/arch/ucode/h264/gxm_h264header_linux.h
 create mode 100644 drivers/amlogic/amports/arch/ucode/h264/gxm_h264list_linux.h
 create mode 100644 drivers/amlogic/amports/arch/ucode/h264/gxm_h264mmc_linux.h
 create mode 100644 drivers/amlogic/amports/arch/ucode/h264/gxm_h264slice_linux.h
 create mode 100644 drivers/amlogic/amports/arch/ucode/h264/gxtvbb_h264c_linux.h
 create mode 100644 drivers/amlogic/amports/arch/ucode/h264/gxtvbb_h264data_linux.h
 create mode 100644 drivers/amlogic/amports/arch/ucode/h264/gxtvbb_h264header_linux.h
 create mode 100644 drivers/amlogic/amports/arch/ucode/h264/gxtvbb_h264list_linux.h
 create mode 100644 drivers/amlogic/amports/arch/ucode/h264/gxtvbb_h264mmc_linux.h
 create mode 100644 drivers/amlogic/amports/arch/ucode/h264/gxtvbb_h264slice_linux.h
 create mode 100644 drivers/amlogic/amports/arch/ucode/h264_enc/h264_enc_gxtv.h
 create mode 100644 drivers/amlogic/amports/arch/ucode/h264_enc/h264_enc_txl.h
 create mode 100644 drivers/amlogic/amports/arch/ucode/vp9/Makefile
 create mode 100644 drivers/amlogic/amports/arch/ucode/vp9/vvp9_mc.c

diff --git a/drivers/amlogic/amports/arch/ucode/Makefile b/drivers/amlogic/amports/arch/ucode/Makefile
index 5e242c5..e9d9d99 100644
--- a/drivers/amlogic/amports/arch/ucode/Makefile
+++ b/drivers/amlogic/amports/arch/ucode/Makefile
@@ -12,3 +12,4 @@ obj-$(CONFIG_AM_VDEC_H264_4K2K) += h264_4k2k/
 obj-$(CONFIG_AM_ENCODER) += h264_enc/
 obj-$(CONFIG_AM_JPEG_ENCODER) += jpegenc/
 obj-$(CONFIG_AM_VDEC_AVS) += avs/
+obj-$(CONFIG_AM_VDEC_VP9) += vp9/
diff --git a/drivers/amlogic/amports/arch/ucode/avs/avs_linux.h b/drivers/amlogic/amports/arch/ucode/avs/avs_linux.h
index e2e2d79..75becf8 100644
--- a/drivers/amlogic/amports/arch/ucode/avs/avs_linux.h
+++ b/drivers/amlogic/amports/arch/ucode/avs/avs_linux.h
@@ -16,66 +16,80 @@
 */
 
 static const u32 MicroCode[] __initconst = {
-	0x06807801, 0x06800000, 0x0d000001, 0x07400040, 0x0c014340,
+	0x06807801, 0x06800000, 0x0d000001, 0x07400040, 0x0c018200,
 	0x00000000, 0x00000000, 0x00000000, 0x080c0002, 0x06932000,
 	0x09800580, 0x060c1e00, 0x06bfdac0, 0x07c017c0, 0x06030400,
-	0x00400000, 0x0c015580, 0x00000000, 0x00000000, 0x00000000,
+	0x00400000, 0x0c019740, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x0c7ffec0, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x0cc00000, 0x00400000, 0x0cc00000,
-	0x00400000, 0x0c780500, 0x064c0007, 0x0c795b80, 0x00000000,
-	0x0c796580, 0x00000000, 0x0cc00000, 0x00400000, 0x0cc00000,
-	0x00400000, 0x0c796400, 0x00000000, 0x0cc00000, 0x00400000,
-	0x06800009, 0x07c01fc9, 0x00800000, 0x078017c9, 0x0c7ffe80,
-	0x06030409, 0x06bfd9c9, 0x06030409, 0x00400000, 0x0a2dc047,
-	0x07801509, 0x0aa14009, 0x0a608049, 0x0c78f4c0, 0x0a608089,
-	0x0c78e980, 0x0a22c807, 0x0c786100, 0x00000000, 0x0c019fc0,
-	0x080c0a00, 0x0c01a300, 0x00000000, 0x0c01b5c0, 0x00000000,
-	0x0c792d80, 0x00000000, 0x0bedd007, 0x078043c8, 0x0aa0c008,
-	0x0a208207, 0x0c792c00, 0x078003c7, 0x0a6fc007, 0x078043c7,
-	0x0a63c007, 0x064c2907, 0x0be2c407, 0x07800007, 0x0a62c007,
-	0x00000000, 0x064c2907, 0x091c11c7, 0x0a61c047, 0x00000000,
-	0x064c0607, 0x0900f1c7, 0x0ae0c047, 0x0c7927c0, 0x00000000,
-	0x0cb8002c, 0x00000000, 0x068fdfca, 0x064e0408, 0x02808288,
-	0x02c08748, 0x060e0408, 0x060c071e, 0x064c0324, 0x064c0325,
-	0x064c2728, 0x09210268, 0x07800007, 0x0a618007, 0x07801c08,
-	0x06c00008, 0x060c0208, 0x080c0200, 0x06bfffc9, 0x060c0320,
-	0x060c0321, 0x07801c48, 0x09610209, 0x060c2708, 0x07801847,
-	0x0a6fc007, 0x07800147, 0x07c01b87, 0x06800347, 0x07c00147,
-	0x060c2507, 0x080c2602, 0x080c260f, 0x080c2603, 0x04c001c7,
-	0x09807207, 0x060c2107, 0x07801907, 0x0aa14007, 0x06a01008,
-	0x0aa0c047, 0x06a22008, 0x06a40008, 0x06c00108, 0x060e0508,
-	0x07801b08, 0x06801809, 0x09502248, 0x060c2109, 0x080c260e,
-	0x06800088, 0x07c01947, 0x0ba0c087, 0x040011c7, 0x06800007,
-	0x07c01907, 0x07800007, 0x07c01b47, 0x07801b87, 0x07c01bc7,
-	0x07c01848, 0x08030580, 0x07801d47, 0x0aa1472f, 0x040011c7,
-	0x078016c8, 0x0a20c048, 0x00000000, 0x07c01d47, 0x0683ffc8,
-	0x064c2307, 0x093041c7, 0x0aa0c008, 0x0a6f4007, 0x04401208,
-	0x07801c8d, 0x0ba13fcd, 0x06800008, 0x0c781100, 0x07c01c88,
-	0x06808008, 0x0ba1070d, 0x0400024d, 0x0441c249, 0x0680c008,
-	0x05403289, 0x0200a24a, 0x02008288, 0x07400228, 0x04001208,
-	0x092102e4, 0x0740020b, 0x04001208, 0x07400224, 0x04001208,
-	0x07400225, 0x04001208, 0x092102e5, 0x0740020b, 0x04001208,
-	0x07400226, 0x04001208, 0x092102e6, 0x0740020b, 0x04001208,
-	0x07400227, 0x04001208, 0x092102e7, 0x0740020b, 0x07800988,
-	0x0ac07bc8, 0x0780000a, 0x0aa3872f, 0x040002ca, 0x078016ca,
-	0x0c7802c0, 0x0942f28b, 0x0a61000a, 0x0aa1472f, 0x078016ca,
-	0x0a20c04a, 0x0a6146c9, 0x0400128d, 0x0b60c70d, 0x0680000a,
-	0x0680070a, 0x07c01c8a, 0x0b013bc8, 0x0aa0800a, 0x0a64470a,
-	0x07801cca, 0x0a20c04a, 0x06a0800b, 0x06a0c00b, 0x06b80009,
-	0x07801d0c, 0x0540928c, 0x0200a24a, 0x06c0748a, 0x0200ac0a,
-	0x0603510a, 0x06803f0a, 0x0603520a, 0x0603500b, 0x0c01b040,
-	0x00000000, 0x07800007, 0x040011c7, 0x07c00007, 0x09c1d39d,
-	0x07800988, 0x0b405207, 0x040011c7, 0x0b833207, 0x0c780c80,
-	0x0981d1dd, 0x06800007, 0x07c00007, 0x0981d39d, 0x09c1d3dd,
-	0x09c1d1dd, 0x078016c8, 0x04001208, 0x07801dc9, 0x0b828248,
-	0x07c016c8, 0x07801847, 0x0a6fc007, 0x00000000, 0x06430507,
-	0x0a2f0107, 0x06a00007, 0x060c3d07, 0x07800147, 0x0aa24007,
-	0x06803fcb, 0x07801a88, 0x064e0c09, 0x09010249, 0x0b804248,
-	0x0aa0c00b, 0x0c7ffec0, 0x044012cb, 0x07804147, 0x0aa280c7,
-	0x07800347, 0x07801dc8, 0x0b407207, 0x0c01c240, 0x07c00348,
-	0x06800048, 0x07c00308, 0x0c789500, 0x07c00388, 0x06800008,
-	0x07c00308, 0x07c00388, 0x0c78f600, 0x064c0007, 0x0b60c709,
+	0x00400000, 0x0c780540, 0x064c0007, 0x0c799fc0, 0x00000000,
+	0x0c79a9c0, 0x00000000, 0x0cc00000, 0x00400000, 0x0cc00000,
+	0x00400000, 0x0c79a840, 0x00000000, 0x0cc00000, 0x00400000,
+	0x06800009, 0x07c01fc9, 0x07c00409, 0x00800000, 0x078017c9,
+	0x0c7ffe40, 0x06030409, 0x06bfd9c9, 0x06030409, 0x00400000,
+	0x0a2d8047, 0x07801509, 0x0aa14009, 0x0a608049, 0x0c792a40,
+	0x0a608089, 0x0c7915c0, 0x0a23c807, 0x0c787e40, 0x00000000,
+	0x0649d008, 0x0aa0c008, 0x0809c701, 0x0c780000, 0x0c01e2c0,
+	0x080c0a00, 0x0c01e600, 0x00000000, 0x0c01f8c0, 0x00000000,
+	0x0c796b00, 0x00000000, 0x0becd007, 0x078043c8, 0x0aa24008,
+	0x0a220207, 0x06900007, 0x0c02c780, 0x06c00c87, 0x064c4407,
+	0x09807047, 0x060c4407, 0x0c796800, 0x078003c7, 0x0a6fc007,
+	0x078043c7, 0x0a63c007, 0x064c2907, 0x0be2c407, 0x07800007,
+	0x0a62c007, 0x00000000, 0x064c2907, 0x091c11c7, 0x0a61c047,
+	0x00000000, 0x064c0607, 0x0900f1c7, 0x0ae0c047, 0x0c7963c0,
+	0x00000000, 0x0cb8002d, 0x00000000, 0x068fdfca, 0x064e0408,
+	0x02808288, 0x02c08748, 0x060e0408, 0x060c071e, 0x064c0324,
+	0x064c0325, 0x064c2728, 0x09210268, 0x07800007, 0x0a618007,
+	0x07801c08, 0x06c00008, 0x060c0208, 0x080c0200, 0x06bfffc9,
+	0x060c0320, 0x060c0321, 0x07801c48, 0x09610209, 0x060c2708,
+	0x07801847, 0x0a6fc007, 0x07800147, 0x07c01b87, 0x06800347,
+	0x07c00147, 0x06803e88, 0x060c1a08, 0x060c2507, 0x080c2602,
+	0x080c260f, 0x080c2603, 0x078043c7, 0x0aa60007, 0x07804407,
+	0x0a658007, 0x064c2607, 0x0a6fc007, 0x00000000, 0x064c2307,
+	0x093041c7, 0x0a6ec007, 0x00000000, 0x064c1a07, 0x0ae34007,
+	0x0c02a080, 0x00000000, 0x0649d407, 0x0a6fc007, 0x06910007,
+	0x0c02c140, 0x06c00c87, 0x080c2800, 0x080c0002, 0x06800047,
+	0x0c7fe200, 0x07c04407, 0x07800147, 0x04c001c7, 0x09807207,
+	0x060c2107, 0x07801907, 0x0aa14007, 0x06a01008, 0x0aa0c047,
+	0x06a22008, 0x06a40008, 0x06c00108, 0x060e0508, 0x07801b08,
+	0x06801809, 0x09502248, 0x060c2109, 0x080c260e, 0x06800088,
+	0x07c01947, 0x0ba0c087, 0x040011c7, 0x06800007, 0x07c01907,
+	0x07800007, 0x07c01b47, 0x07801b87, 0x07c01bc7, 0x07c01848,
+	0x08030580, 0x07801d47, 0x0aa1472f, 0x040011c7, 0x078016c8,
+	0x0a20c048, 0x00000000, 0x07c01d47, 0x0683ffc8, 0x064c2307,
+	0x093041c7, 0x0aa0c008, 0x0a6f4007, 0x04401208, 0x07801c8d,
+	0x0ba13fcd, 0x06800008, 0x0c781100, 0x07c01c88, 0x06808008,
+	0x0ba1070d, 0x0400024d, 0x0441c249, 0x0680c008, 0x05403289,
+	0x0200a24a, 0x02008288, 0x07400228, 0x04001208, 0x092102e4,
+	0x0740020b, 0x04001208, 0x07400224, 0x04001208, 0x07400225,
+	0x04001208, 0x092102e5, 0x0740020b, 0x04001208, 0x07400226,
+	0x04001208, 0x092102e6, 0x0740020b, 0x04001208, 0x07400227,
+	0x04001208, 0x092102e7, 0x0740020b, 0x07800988, 0x0ac07bc8,
+	0x0780000a, 0x0aa3872f, 0x040002ca, 0x078016ca, 0x0c7802c0,
+	0x0942f28b, 0x0a61000a, 0x0aa1472f, 0x078016ca, 0x0a20c04a,
+	0x0a6146c9, 0x0400128d, 0x0b60c70d, 0x0680000a, 0x0680070a,
+	0x07c01c8a, 0x0b013bc8, 0x0aa0800a, 0x0a64470a, 0x07801cca,
+	0x0a20c04a, 0x06a0800b, 0x06a0c00b, 0x06b80009, 0x07801d0c,
+	0x0540928c, 0x0200a24a, 0x06c00c8a, 0x0200ac0a, 0x0603510a,
+	0x06803f0a, 0x0603520a, 0x0603500b, 0x0c01eac0, 0x00000000,
+	0x07800007, 0x040011c7, 0x07c00007, 0x09c1d39d, 0x07800988,
+	0x0b405207, 0x040011c7, 0x0b852207, 0x0c781440, 0x0981d1dd,
+	0x06800007, 0x07c00007, 0x0981d39d, 0x09c1d3dd, 0x09c1d1dd,
+	0x078016c8, 0x04001208, 0x07801dc9, 0x0b847248, 0x07c016c8,
+	0x07801847, 0x0a6fc007, 0x00000000, 0x07804447, 0x0a60c007,
+	0x06430507, 0x0a2e8107, 0x06a00007, 0x060c3d07, 0x078043c7,
+	0x0aa1c007, 0x06900007, 0x0c028e00, 0x06c00c87, 0x064c4407,
+	0x09807047, 0x060c4407, 0x07800147, 0x0aa24007, 0x06803fcb,
+	0x07801a88, 0x064e0c09, 0x09010249, 0x0b804248, 0x0aa0c00b,
+	0x0c7ffec0, 0x044012cb, 0x07804147, 0x0aa600c7, 0x07800347,
+	0x07801dc8, 0x0b415207, 0x0c01fa40, 0x07c00348, 0x06800048,
+	0x07c00308, 0x0a62001a, 0x07804407, 0x0a618007, 0x078043c7,
+	0x0aa10007, 0x064c0007, 0x0be08207, 0x0c7fd100, 0x07804407,
+	0x0aa14007, 0x07c00388, 0x06900007, 0x0c029240, 0x06c00c87,
+	0x0c78afc0, 0x00000000, 0x06800008, 0x07c00308, 0x07c00388,
+	0x07804407, 0x0aa18007, 0x06900007, 0x0c028fc0, 0x06c00c87,
+	0x06800007, 0x07c04407, 0x0c792340, 0x064c0007, 0x0b60c709,
 	0x06808008, 0x0680c008, 0x0c780400, 0x06800007, 0x07800007,
 	0x09508787, 0x078016c9, 0x09408789, 0x07800989, 0x0b009bc9,
 	0x06808008, 0x0aad0007, 0x07801c89, 0x040011c9, 0x0ba10707,
@@ -84,7 +98,7 @@ static const u32 MicroCode[] __initconst = {
 	0x04001208, 0x07000220, 0x09610809, 0x04001208, 0x07000221,
 	0x04001208, 0x07000209, 0x09610849, 0x04001208, 0x07000222,
 	0x04001208, 0x07000209, 0x09610889, 0x04001208, 0x07000223,
-	0x04001208, 0x07000209, 0x096108c9, 0x0c7fb6c0, 0x00000000,
+	0x04001208, 0x07000209, 0x096108c9, 0x0c7fa540, 0x00000000,
 	0x068fdfca, 0x064e0408, 0x02808288, 0x02c08748, 0x060e0408,
 	0x060c071e, 0x064c0324, 0x064c0325, 0x064c0326, 0x064c0327,
 	0x064c2728, 0x060c071e, 0x09210268, 0x07800007, 0x0a638007,
@@ -92,78 +106,95 @@ static const u32 MicroCode[] __initconst = {
 	0x060c0208, 0x06800008, 0x06c00008, 0x060c0208, 0x06800008,
 	0x06c00008, 0x060c0208, 0x06bfffc9, 0x060c0320, 0x060c0321,
 	0x060c0322, 0x060c0323, 0x07801c48, 0x09610209, 0x060c2708,
-	0x07804287, 0x054031c7, 0x04c301c7, 0x07801f8a, 0x095011ca,
-	0x060c2507, 0x0780184a, 0x0a6fc00a, 0x07800147, 0x07c01b87,
-	0x064c2307, 0x09304207, 0x0a6f8008, 0x090a1207, 0x090241c7,
-	0x095211c8, 0x064c0609, 0x09010249, 0x0aa10009, 0x00000000,
-	0x06800007, 0x06800008, 0x07c00147, 0x0aa60347, 0x060c2507,
-	0x0aa60287, 0x0aa18048, 0x0a60c007, 0x0c780200, 0x00000000,
-	0x080c2605, 0x080c2606, 0x080c2607, 0x080c2602, 0x080c260f,
-	0x080c2603, 0x07801ac8, 0x0aa100c8, 0x06800089, 0x0c7fb8c0,
+	0x06803e88, 0x060c1a08, 0x07804287, 0x054031c7, 0x04c301c7,
+	0x07801f8a, 0x095011ca, 0x060c2507, 0x0780184a, 0x0a6fc00a,
+	0x07800147, 0x07c01b87, 0x064c2307, 0x09304207, 0x0a6f8008,
+	0x090a1207, 0x090241c7, 0x095211c8, 0x064c0609, 0x09010249,
+	0x0aa10009, 0x00000000, 0x06800007, 0x06800008, 0x07c00147,
+	0x0aa40347, 0x060c2507, 0x0aa3c287, 0x0aa48048, 0x0a63c007,
+	0x078043c7, 0x0aa1c007, 0x00000000, 0x064c1a07, 0x0ae10007,
+	0x06800047, 0x0c7fd2c0, 0x07c04447, 0x07800147, 0x0c7806c0,
+	0x00000000, 0x0c780900, 0x0c780940, 0x00000000, 0x080c2605,
+	0x080c2606, 0x080c2607, 0x080c2602, 0x080c260f, 0x080c2603,
+	0x078043c7, 0x0aa38007, 0x0a63409a, 0x064c2607, 0x0a6fc007,
+	0x00000000, 0x064c2307, 0x093041c7, 0x0a6ec007, 0x00000000,
+	0x064c1a07, 0x0ae10007, 0x06800047, 0x0c7fcc00, 0x07c04447,
+	0x07800147, 0x07801ac8, 0x0aa100c8, 0x06800089, 0x0c7fa980,
 	0x07c01ac9, 0x0780184b, 0x0a6fc00b, 0x00000000, 0x07c01b08,
-	0x0c7fb740, 0x07c01ac9, 0x080c2602, 0x080c260f, 0x080c2603,
-	0x07801ac8, 0x0aa48088, 0x068000c9, 0x07800008, 0x0aa0c008,
-	0x0c7fb4c0, 0x07c01ac9, 0x06803fcb, 0x07801a88, 0x064e0c09,
-	0x09010249, 0x0b804248, 0x0aa0c00b, 0x0c7ffec0, 0x044012cb,
-	0x06800088, 0x068000c9, 0x0680180b, 0x060c210b, 0x0780184b,
-	0x0a6fc00b, 0x00000000, 0x07c01b08, 0x0c7fb040, 0x07c01ac9,
-	0x0a265007, 0x0c013f00, 0x080c0a00, 0x0c014240, 0x00000000,
-	0x0c015040, 0x00000000, 0x064c000a, 0x09c0a18a, 0x0980a20a,
+	0x0c7fa800, 0x07c01ac9, 0x080c2602, 0x080c260f, 0x080c2603,
+	0x078043c7, 0x0aa40007, 0x064c2607, 0x0a6fc007, 0x00000000,
+	0x064c2307, 0x093041c7, 0x0a6ec007, 0x00000000, 0x064c1a07,
+	0x0ae1c007, 0x0a60c05a, 0x068000c7, 0x07c04487, 0x06800047,
+	0x0c7fc400, 0x07c04447, 0x07800147, 0x07801ac8, 0x0aa48088,
+	0x068000c9, 0x07800008, 0x0aa0c008, 0x0c7fa100, 0x07c01ac9,
+	0x06803fcb, 0x07801a88, 0x064e0c09, 0x09010249, 0x0b804248,
+	0x0aa0c00b, 0x0c7ffec0, 0x044012cb, 0x06800088, 0x068000c9,
+	0x0680180b, 0x060c210b, 0x0780184b, 0x0a6fc00b, 0x00000000,
+	0x07c01b08, 0x0c7f9c80, 0x07c01ac9, 0x0be0d007, 0x0c780a80,
+	0x00000000, 0x0c016540, 0x080c0a00, 0x0c016880, 0x00000000,
+	0x0c017680, 0x00000000, 0x064c000a, 0x09c0a18a, 0x0980a20a,
 	0x0980a00a, 0x060c000a, 0x080c2300, 0x064c1e08, 0x09c081c8,
 	0x09808008, 0x060c1e08, 0x098081c8, 0x09c08008, 0x060c1e08,
-	0x064c080a, 0x0980a34a, 0x060c080a, 0x0c014400, 0x00000000,
-	0x064c1a07, 0x0aa10007, 0x06800008, 0x0c78c780, 0x00000000,
-	0x064c1e0a, 0x0980a60a, 0x060c1e0a, 0x06809009, 0x060c0809,
-	0x0fc08280, 0x0aa3ec0a, 0x0649c108, 0x0aa2c008, 0x0aa12cca,
-	0x0aa1ad8a, 0x0ae22bca, 0x0c78a5c0, 0x06800007, 0x0c780980,
-	0x07c00387, 0x06800007, 0x0c781ec0, 0x07c00387, 0x0c78c240,
-	0x00000000, 0x0fc08280, 0x07c0400a, 0x0609c40a, 0x0fc08280,
-	0x0fc01280, 0x0500128a, 0x07c0404a, 0x0fc0e1c0, 0x07c04087,
-	0x0609c107, 0x0fc0e1c0, 0x07c040c7, 0x0609c207, 0x0fc021c0,
-	0x0fc031c0, 0x0fc041c0, 0x0609c007, 0x0fc041c0, 0x0609c307,
-	0x0fc091c0, 0x0fc091c0, 0x0fc011c0, 0x0fc0c1c0, 0x0fc011c0,
-	0x07c04107, 0x0fc011c0, 0x0fc091c0, 0x0fc091c0, 0x0fc031c0,
-	0x0c78ba80, 0x00000000, 0x06800007, 0x07c01f87, 0x07804007,
-	0x0a611207, 0x0fc101c0, 0x0fc011c0, 0x0fc071c0, 0x0fc011c0,
-	0x0aa10007, 0x00000000, 0x0fc0c1c0, 0x0fc0c1c0, 0x0fc011c0,
-	0x07802047, 0x07c02007, 0x07802087, 0x07c02047, 0x0fc081c0,
-	0x07c02087, 0x07804107, 0x0aa10007, 0x0c0167c0, 0x080c2301,
-	0x07c01f47, 0x0fc011c0, 0x07802088, 0x095c1207, 0x07c02088,
-	0x050011c7, 0x07c01807, 0x0aa30007, 0x068000c8, 0x0fc011c0,
-	0x0a624007, 0x068000c8, 0x0fc011c0, 0x07c04187, 0x0a60c007,
-	0x06800048, 0x06800088, 0x0c780140, 0x07c04148, 0x07c04148,
-	0x0fc011c0, 0x07c04187, 0x0fc011c0, 0x07c041c7, 0x0fc011c0,
-	0x07c04207, 0x0fc061c0, 0x07c04247, 0x06800087, 0x07c00087,
-	0x06800808, 0x060c2108, 0x07801807, 0x0aa18007, 0x06800008,
-	0x07804147, 0x0aa0c0c7, 0x00000000, 0x0fc01200, 0x07c04288,
-	0x0fc041c0, 0x0fc011c0, 0x07c042c7, 0x0a648007, 0x06800008,
-	0x0fc011c0, 0x0aa34007, 0x06800009, 0x0c015b40, 0x080c2301,
-	0x0c015bc0, 0x00000000, 0x07c04307, 0x0c015a00, 0x080c2301,
-	0x0c015a80, 0x00000000, 0x0c780100, 0x07c04347, 0x07c04308,
-	0x07c04349, 0x06800007, 0x07c00107, 0x0c782a00, 0x0680001a,
+	0x064c080a, 0x0980a34a, 0x060c080a, 0x0c016a40, 0x00000000,
+	0x064c1807, 0x09807207, 0x060c1807, 0x09c07207, 0x060c1807,
+	0x078043c7, 0x0aa14007, 0x07804407, 0x0a60c007, 0x0a60801a,
+	0x0c7f8f80, 0x00000000, 0x0649d00a, 0x0aa0c00a, 0x0809c701,
+	0x0c780000, 0x064c1e0a, 0x0980a60a, 0x060c1e0a, 0x06809009,
+	0x060c0809, 0x0fc08280, 0x0aa3ec0a, 0x0649c108, 0x0aa2c008,
+	0x0aa12cca, 0x0aa1ad8a, 0x0ae22bca, 0x0c78bb80, 0x06800007,
+	0x0c780980, 0x07c00387, 0x06800007, 0x0c7821c0, 0x07c00387,
+	0x0c78e040, 0x00000000, 0x0fc08280, 0x07c0400a, 0x0609c40a,
+	0x0fc08280, 0x0fc01280, 0x0500128a, 0x07c0404a, 0x0fc0e1c0,
+	0x07c04087, 0x0609c107, 0x0fc0e1c0, 0x07c040c7, 0x0609c207,
+	0x0fc021c0, 0x0fc031c0, 0x0fc041c0, 0x0609c007, 0x0fc041c0,
+	0x0609c307, 0x0fc091c0, 0x0fc091c0, 0x0fc011c0, 0x0fc0c1c0,
+	0x0fc011c0, 0x07c04107, 0x0fc011c0, 0x0fc091c0, 0x0fc091c0,
+	0x0fc031c0, 0x0c78d880, 0x00000000, 0x0a63001a, 0x07800007,
+	0x0a614007, 0x078016c7, 0x07801dc8, 0x0b407207, 0x0a806287,
+	0x07804407, 0x0a610007, 0x078043c7, 0x0aa08007, 0x0c7f7e40,
+	0x06800007, 0x07c01f87, 0x07804007, 0x0a611207, 0x0fc101c0,
+	0x0fc011c0, 0x0fc071c0, 0x0fc011c0, 0x0aa10007, 0x00000000,
+	0x0fc0c1c0, 0x0fc0c1c0, 0x0fc011c0, 0x07800a47, 0x07c00a07,
+	0x07800a87, 0x07c00a47, 0x0fc081c0, 0x07c00a87, 0x07804107,
+	0x0aa10007, 0x0c018840, 0x080c2301, 0x07c01f47, 0x0fc011c0,
+	0x07800a88, 0x095c1207, 0x07c00a88, 0x050011c7, 0x07c01807,
+	0x0aa30007, 0x068000c8, 0x0fc011c0, 0x0a624007, 0x068000c8,
+	0x0fc011c0, 0x07c04187, 0x0a60c007, 0x06800048, 0x06800088,
+	0x0c780140, 0x07c04148, 0x07c04148, 0x0fc011c0, 0x07c04187,
+	0x0fc011c0, 0x07c041c7, 0x0fc011c0, 0x07c04207, 0x0fc061c0,
+	0x07c04247, 0x06800087, 0x07c00087, 0x06800808, 0x060c2108,
+	0x07801807, 0x0aa18007, 0x06800008, 0x07804147, 0x0aa0c0c7,
+	0x00000000, 0x0fc01200, 0x07c04288, 0x0fc041c0, 0x0fc011c0,
+	0x07c042c7, 0x0a648007, 0x06800008, 0x0fc011c0, 0x0aa34007,
+	0x06800009, 0x0c017bc0, 0x080c2301, 0x0c017c40, 0x00000000,
+	0x07c04307, 0x0c017a80, 0x080c2301, 0x0c017b00, 0x00000000,
+	0x0c780100, 0x07c04347, 0x07c04308, 0x07c04349, 0x06800007,
+	0x07c00107, 0x0c782d00, 0x0680001a, 0x0a63001a, 0x07800007,
+	0x0a614007, 0x078016c7, 0x07801dc8, 0x0b407207, 0x0a806287,
+	0x07804407, 0x0a610007, 0x078043c7, 0x0aa08007, 0x0c7f6540,
 	0x07804007, 0x0a611207, 0x0fc101c0, 0x0fc011c0, 0x0fc071c0,
 	0x0fc021c0, 0x0a60c047, 0x0c780180, 0x0680005a, 0x0fc081c0,
-	0x07c020c7, 0x0c780240, 0x0680009a, 0x07802047, 0x07c02007,
-	0x07802087, 0x07c02047, 0x0fc081c0, 0x07c02087, 0x07c020c7,
-	0x07804107, 0x0aa10007, 0x0c015180, 0x080c2301, 0x07c01f47,
-	0x0fc011c0, 0x078020c8, 0x095c1207, 0x0aa0c09a, 0x07c020c8,
-	0x07c02088, 0x050011c7, 0x07c01807, 0x0aa34007, 0x068000c8,
+	0x07c00ac7, 0x0c780240, 0x0680009a, 0x07800a47, 0x07c00a07,
+	0x07800a87, 0x07c00a47, 0x0fc081c0, 0x07c00a87, 0x07c00ac7,
+	0x07804107, 0x0aa10007, 0x0c016f00, 0x080c2301, 0x07c01f47,
+	0x0fc011c0, 0x07800ac8, 0x095c1207, 0x0aa0c09a, 0x07c00ac8,
+	0x07c00a88, 0x050011c7, 0x07c01807, 0x0aa34007, 0x068000c8,
 	0x0fc011c0, 0x0a628007, 0x068000c8, 0x0fc011c0, 0x0fc011c0,
 	0x07c04187, 0x0a60c007, 0x06800048, 0x06800088, 0x0c780140,
 	0x07c04148, 0x07c04148, 0x0fc011c0, 0x07c04187, 0x0fc011c0,
 	0x07c041c7, 0x0fc011c0, 0x07c04207, 0x0fc061c0, 0x07c04247,
-	0x078020c7, 0x048ff207, 0x07c01f08, 0x091c11c7, 0x0aa5c007,
-	0x07802007, 0x091c1207, 0x0a610008, 0x048ff1c7, 0x054011c7,
-	0x048ff1c7, 0x07c01e47, 0x07802047, 0x091c1207, 0x0a610008,
-	0x048ff1c7, 0x054011c7, 0x048ff1c7, 0x07c01e87, 0x07802087,
+	0x07800ac7, 0x048ff207, 0x07c01f08, 0x091c11c7, 0x0aa5c007,
+	0x07800a07, 0x091c1207, 0x0a610008, 0x048ff1c7, 0x054011c7,
+	0x048ff1c7, 0x07c01e47, 0x07800a47, 0x091c1207, 0x0a610008,
+	0x048ff1c7, 0x054011c7, 0x048ff1c7, 0x07c01e87, 0x07800a87,
 	0x091c1207, 0x0a610008, 0x048ff1c7, 0x054011c7, 0x048ff1c7,
-	0x0c780b40, 0x07c01ec7, 0x07802007, 0x091c1207, 0x0aa2c008,
+	0x0c780b40, 0x07c01ec7, 0x07800a07, 0x091c1207, 0x0aa2c008,
 	0x048ff1c7, 0x058011c7, 0x07801f08, 0x0b4031c8, 0x06804009,
 	0x02008248, 0x024091c8, 0x0ba0e009, 0x0c7fff80, 0x040801c7,
-	0x07c01e47, 0x07802047, 0x091c1207, 0x0aa2c008, 0x048ff1c7,
+	0x07c01e47, 0x07800a47, 0x091c1207, 0x0aa2c008, 0x048ff1c7,
 	0x058011c7, 0x07801f08, 0x0b4031c8, 0x06804009, 0x02008248,
 	0x024091c8, 0x0ba0e009, 0x0c7fff80, 0x040801c7, 0x07c01e87,
-	0x07802087, 0x091c1207, 0x0aa2c008, 0x048ff1c7, 0x058011c7,
+	0x07800a87, 0x091c1207, 0x0aa2c008, 0x048ff1c7, 0x058011c7,
 	0x07801f08, 0x0b0031c8, 0x06804009, 0x02408248, 0x02409207,
 	0x0ba0e009, 0x0c7fff80, 0x044801c7, 0x048ff1c7, 0x07c01ec7,
 	0x0a61409a, 0x07804147, 0x0a60c0c7, 0x0c780240, 0x06800808,
@@ -171,34 +202,37 @@ static const u32 MicroCode[] __initconst = {
 	0x09505207, 0x09605207, 0x060c2108, 0x0fc011c0, 0x0fc011c0,
 	0x07c01f87, 0x0fc021c0, 0x0fc011c0, 0x07c04287, 0x0fc011c0,
 	0x07c042c7, 0x0a648007, 0x06800008, 0x0fc011c0, 0x0aa34007,
-	0x06800009, 0x0c013140, 0x080c2301, 0x0c0131c0, 0x00000000,
-	0x07c04307, 0x0c013000, 0x080c2301, 0x0c013080, 0x00000000,
+	0x06800009, 0x0c014ec0, 0x080c2301, 0x0c014f40, 0x00000000,
+	0x07c04307, 0x0c014d80, 0x080c2301, 0x0c014e00, 0x00000000,
 	0x0c780100, 0x07c04347, 0x07c04308, 0x07c04349, 0x06800007,
 	0x07c00107, 0x07804007, 0x0aa25207, 0x00000000, 0x06802007,
-	0x06c02007, 0x060e1907, 0x060e1a07, 0x060e1b07, 0x0c781640,
+	0x06c02007, 0x060e1907, 0x060e1a07, 0x060e1b07, 0x0c781a00,
 	0x00000000, 0x0fc011c0, 0x064e1c09, 0x097e1247, 0x0aa20047,
 	0x060e1c09, 0x06802007, 0x06c02007, 0x060e1907, 0x060e1a07,
-	0x0c781200, 0x060e1b07, 0x0fc011c0, 0x0fc011c0, 0x06800009,
-	0x07c01009, 0x0a630007, 0x07c01049, 0x0c0126c0, 0x080c2301,
-	0x0c012740, 0x00000000, 0x07c01007, 0x0c012580, 0x080c2301,
-	0x0c012600, 0x00000000, 0x07c01047, 0x0fc021c0, 0x0fc02200,
-	0x064e1c09, 0x09602248, 0x07801008, 0x09405248, 0x07801048,
-	0x09505248, 0x060e1c09, 0x0aa30047, 0x06802008, 0x07c01088,
-	0x06801888, 0x07c010c8, 0x06801a88, 0x07c01108, 0x06801d08,
-	0x07c01148, 0x07c01188, 0x0c7802c0, 0x06802008, 0x068021c8,
-	0x07c01088, 0x068023c8, 0x07c010c8, 0x07c01108, 0x06802808,
-	0x07c01148, 0x07c01188, 0x06803548, 0x07c011c8, 0x0aa2c007,
-	0x06801089, 0x0c011c00, 0x080c2301, 0x0c011c80, 0x00000000,
-	0x07000248, 0x020081c8, 0x07400248, 0x0bae51c9, 0x04001249,
-	0x07801088, 0x078010c9, 0x09609209, 0x060e1908, 0x07801108,
-	0x07801149, 0x09609209, 0x060e1a08, 0x07801188, 0x078011c9,
-	0x09609209, 0x060e1b08, 0x0fc011c0, 0x07c043c7, 0x0aa0c007,
+	0x0c7813c0, 0x060e1b07, 0x0fc011c0, 0x0fc011c0, 0x06800009,
+	0x07c01109, 0x0a630007, 0x07c01149, 0x0c014440, 0x080c2301,
+	0x0c0144c0, 0x00000000, 0x07c01107, 0x0c014300, 0x080c2301,
+	0x0c014380, 0x00000000, 0x07c01147, 0x0fc021c0, 0x0fc02200,
+	0x064e1c09, 0x09602248, 0x07801108, 0x09405248, 0x07801148,
+	0x09505248, 0x060e1c09, 0x0aa30047, 0x06802008, 0x07c01188,
+	0x06801888, 0x07c011c8, 0x06801a88, 0x07c01208, 0x06801d08,
+	0x07c01248, 0x07c01288, 0x0c7802c0, 0x06802008, 0x068021c8,
+	0x07c01188, 0x068023c8, 0x07c011c8, 0x07c01208, 0x06802808,
+	0x07c01248, 0x07c01288, 0x06803548, 0x07c012c8, 0x0a61c0c7,
+	0x06802008, 0x06c02008, 0x060e1908, 0x060e1a08, 0x0c780640,
+	0x060e1b08, 0x0aa2c007, 0x06801189, 0x0c0137c0, 0x080c2301,
+	0x0c013840, 0x00000000, 0x07000248, 0x020081c8, 0x07400248,
+	0x0bae52c9, 0x04001249, 0x07801188, 0x078011c9, 0x09609209,
+	0x060e1908, 0x07801208, 0x07801249, 0x09609209, 0x060e1a08,
+	0x07801288, 0x078012c9, 0x09609209, 0x060e1b08, 0x0fc011c0,
+	0x07c043c7, 0x06800009, 0x0aa0c007, 0x06c04049, 0x06800009,
+	0x060c0d09, 0x0aa18007, 0x06800007, 0x07804407, 0x0a60c007,
 	0x06800007, 0x0687ffc7, 0x07c01c07, 0x064c510a, 0x064c4607,
-	0x07801308, 0x05410208, 0x078012c9, 0x02008248, 0x05802208,
+	0x07800888, 0x05410208, 0x07800849, 0x02008248, 0x05802208,
 	0x0e000288, 0x00000000, 0x00000000, 0x00000000, 0x0f000200,
 	0x0f010280, 0x0970820a, 0x05402208, 0x020081c8, 0x064c430a,
-	0x02408288, 0x064c400a, 0x02408288, 0x07c01348, 0x05810208,
-	0x07c01388, 0x0c012dc0, 0x00000000, 0x0680001e, 0x07c0001e,
+	0x02408288, 0x064c400a, 0x02408288, 0x07c008c8, 0x05810208,
+	0x07c00908, 0x0c014780, 0x00000000, 0x0680001e, 0x07c0001e,
 	0x07c016de, 0x0981d39e, 0x0981d3dd, 0x09c1d1dd, 0x07804087,
 	0x0400f1c7, 0x058041c7, 0x060c0907, 0x07c00987, 0x04401247,
 	0x07c00609, 0x09708789, 0x05404287, 0x078040c8, 0x0400f208,
@@ -207,329 +241,378 @@ static const u32 MicroCode[] __initconst = {
 	0x04401248, 0x09608789, 0x04000248, 0x09610247, 0x06095209,
 	0x05404208, 0x0780408a, 0x0400f28a, 0x0580428a, 0x0540428a,
 	0x078040c8, 0x0400f208, 0x05804208, 0x05404208, 0x0961020a,
-	0x06090808, 0x0c005b00, 0x07c013da, 0x06a00007, 0x060c3d07,
-	0x064c3d08, 0x09161208, 0x0a6f8008, 0x06800008, 0x06c06c08,
+	0x06090808, 0x0c007240, 0x07c0095a, 0x06a00007, 0x060c3d07,
+	0x064c3d08, 0x09161208, 0x0a6f8008, 0x06800008, 0x06c00408,
 	0x0aa1009a, 0x02008c08, 0x0c780400, 0x060c3808, 0x05803208,
 	0x07804147, 0x0aa200c7, 0x06800109, 0x0aa18047, 0x06800009,
 	0x07801f87, 0x0aa0c007, 0x068000c9, 0x06800009, 0x097a3209,
-	0x060c3908, 0x06bfffc8, 0x060c3808, 0x0c00bb40, 0x00000000,
-	0x0c00be80, 0x00000000, 0x0c00cc80, 0x00000000, 0x069898c8,
-	0x06d81848, 0x06800707, 0x0d000007, 0x060c2208, 0x07800387,
-	0x0aa10007, 0x06800007, 0x0c7f1340, 0x07c00387, 0x0649c909,
-	0x0aa10009, 0x06800087, 0x0c7f1200, 0x07c01507, 0x07801487,
-	0x0a608007, 0x0c780900, 0x044011c7, 0x0aa0c087, 0x07801549,
-	0x078015c9, 0x0ae7c0c9, 0x040301c9, 0x070001c7, 0x054101c7,
-	0x04034209, 0x07000208, 0x094101c8, 0x0609cb07, 0x040381c9,
-	0x070001c7, 0x07800fc8, 0x020081c8, 0x0609ca08, 0x07c00fd9,
-	0x040941c9, 0x070001c7, 0x054101c7, 0x04090209, 0x07000208,
-	0x094101c8, 0x0609cc07, 0x04029209, 0x04001249, 0x07000208,
+	0x060c3908, 0x06bfffc8, 0x060c3808, 0x0c00d500, 0x00000000,
+	0x0c00d840, 0x00000000, 0x0c00e640, 0x00000000, 0x069898c8,
+	0x06d81848, 0x06800707, 0x0d000007, 0x060c2208, 0x07804409,
+	0x06800007, 0x07c04407, 0x07800387, 0x0aa24007, 0x06800007,
+	0x07c00387, 0x0a610009, 0x07804449, 0x0a608009, 0x0c7ee700,
+	0x0c785940, 0x00000000, 0x0649c909, 0x0aa10009, 0x06800087,
+	0x0c7ee580, 0x07c01507, 0x07801487, 0x0a608007, 0x0c781240,
+	0x044011c7, 0x0aa0c087, 0x07801549, 0x078015c9, 0x0780148b,
+	0x044012cb, 0x0aa1008b, 0x0680008a, 0x078044ca, 0x07c044cb,
+	0x07804487, 0x0aa34007, 0x0a6100c7, 0x0680008b, 0x0c780500,
+	0x07c0448b, 0x0a614047, 0x0aa2408a, 0x06800007, 0x0c780140,
+	0x07c04487, 0x0a61400a, 0x06800047, 0x07c04487, 0x07804447,
+	0x0aa2c007, 0x06800048, 0x03408248, 0x06bfffc7, 0x030081c8,
+	0x078014c7, 0x02807207, 0x07c014c7, 0x06803fc9, 0x06800007,
+	0x07c04447, 0x07800807, 0x044011c7, 0x0b0021c9, 0x0c780840,
+	0x040801c9, 0x070001c7, 0x054101c7, 0x040a0209, 0x07000208,
+	0x094101c8, 0x0609cb07, 0x040b01c9, 0x070001c7, 0x078010c8,
+	0x020081c8, 0x0609ca08, 0x07c010d9, 0x040d01c9, 0x070001c7,
+	0x054101c7, 0x040c0209, 0x07000208, 0x094101c8, 0x0609cc07,
+	0x04090209, 0x04001249, 0x058031c9, 0x09502247, 0x07000208,
 	0x09464248, 0x07801808, 0x094e1248, 0x0609c909, 0x08007401,
 	0x06800009, 0x07c01489, 0x06800009, 0x07c01509, 0x078014c7,
-	0x02c07247, 0x04000295, 0x0a238047, 0x06800008, 0x04000296,
-	0x0a22c087, 0x06800048, 0x04000297, 0x0a220107, 0x06800088,
-	0x04000298, 0x0a214207, 0x068000c8, 0x06800047, 0x0c7f03c0,
-	0x07c01507, 0x07801607, 0x090041c7, 0x0a8051c8, 0x0aa2001a,
-	0x07801607, 0x090841c7, 0x0a4051c8, 0x06800047, 0x03407207,
-	0x0c7ff980, 0x02c091c9, 0x07801347, 0x04090248, 0x07400247,
-	0x07801387, 0x04004249, 0x07400247, 0x07804187, 0x054031c7,
-	0x02c07687, 0x04029248, 0x07400247, 0x040301c8, 0x07800f49,
-	0x074001c9, 0x040341c8, 0x07800f09, 0x0a60c05a, 0x074001c9,
-	0x040006c8, 0x0a62009a, 0x040381c8, 0x074001d9, 0x07000709,
-	0x0aa1c009, 0x04401249, 0x0c780140, 0x07400709, 0x07800f89,
-	0x074001c9, 0x04000707, 0x07c00f99, 0x06800047, 0x03407207,
-	0x078014c9, 0x02c091c9, 0x07c014c9, 0x0609b20a, 0x0609b00a,
-	0x0609b10a, 0x068000c9, 0x0400125a, 0x07c01489, 0x0a60809a,
-	0x0c780340, 0x07801587, 0x07c015c7, 0x07c01588, 0x04000185,
-	0x04000144, 0x07801609, 0x05404249, 0x09404248, 0x07c01609,
-	0x0400010a, 0x0c7800c0, 0x00000000, 0x07c01548, 0x0649c108,
-	0x0aa2c008, 0x07800187, 0x0b61c087, 0x06800048, 0x0aa1c09a,
-	0x0aa0801a, 0x0aa14007, 0x040011c7, 0x07c00187, 0x0c780180,
-	0x07c001c8, 0x06800008, 0x07c001c8, 0x0c782280, 0x00000000,
-	0x0aa0c01a, 0x068019ac, 0x0680566c, 0x0c004740, 0x00000000,
-	0x0c008840, 0x00000000, 0x0c015900, 0x00000000, 0x0c004b80,
-	0x00000000, 0x0c781f40, 0x00000000, 0x0c781ec0, 0x00000000,
-	0x078001c7, 0x0aaf4007, 0x00000000, 0x0400024a, 0x07800107,
-	0x0b4031c9, 0x0c781cc0, 0x00000000, 0x07c00109, 0x078040c7,
-	0x0682bc08, 0x0b004207, 0x00000000, 0x0fc031c0, 0x094e3247,
-	0x07c00349, 0x07804148, 0x0aa200c8, 0x07801dc8, 0x0b806209,
-	0x00000000, 0x07800307, 0x0a608007, 0x0c781880, 0x02409209,
-	0x078016c8, 0x0a805209, 0x07c016c9, 0x0680001e, 0x07c0001e,
-	0x09408789, 0x0981d39d, 0x0981d3dd, 0x09c1d1dd, 0x0c003bc0,
-	0x00000000, 0x0c007cc0, 0x00000000, 0x0c014d80, 0x00000000,
-	0x0c004000, 0x00000000, 0x07804208, 0x0a610008, 0x07804247,
-	0x0fc01200, 0x0fc061c0, 0x07c00207, 0x094e11c8, 0x060c0a07,
-	0x0a61001a, 0x06800007, 0x0c7808c0, 0x07c01e07, 0x0fc011c0,
-	0x07c01e07, 0x08094200, 0x0a60c007, 0x0c780740, 0x00000000,
-	0x06815448, 0x06094208, 0x0680c008, 0x06094008, 0x07800087,
-	0x0aa18087, 0x06800047, 0x07804147, 0x0aa0c0c7, 0x06800087,
-	0x06800107, 0x0fc08200, 0x0fc08240, 0x09509248, 0x06094109,
-	0x0fc01200, 0x0fc08200, 0x0fc08240, 0x09509248, 0x06094109,
-	0x06094109, 0x0fc01200, 0x0aed4047, 0x044011c7, 0x0fc01200,
-	0x07c00048, 0x08094000, 0x078043c7, 0x0a60c007, 0x0c780540,
-	0x00000000, 0x0fc071c0, 0x080c2940, 0x07800207, 0x07804208,
-	0x094e11c8, 0x09807187, 0x098073c7, 0x060c0a07, 0x09c073c7,
-	0x09807387, 0x060c0a07, 0x0c009480, 0x080c0600, 0x064c0a07,
-	0x091c21c7, 0x0a6f8007, 0x00000000, 0x0c780100, 0x00000000,
-	0x0c009280, 0x080c0600, 0x07801e07, 0x0aa14007, 0x07800048,
-	0x094211c8, 0x05001208, 0x094411c8, 0x060c1807, 0x0cb8002c,
-	0x00000000, 0x064c0007, 0x0a2fc047, 0x00000000, 0x064c3a07,
-	0x090061c7, 0x0aaec647, 0x00000000, 0x080c0a00, 0x080c2300,
-	0x064c1e07, 0x09807547, 0x060c1e07, 0x080c2800, 0x080c0002,
-	0x0c7ec8c0, 0x00000000, 0x0649c015, 0x0649c116, 0x0649c217,
-	0x0649c318, 0x0809c000, 0x0809c100, 0x0809c200, 0x0809c300,
-	0x06804004, 0x06814105, 0x06824206, 0x0c000a40, 0x00000000,
-	0x08002501, 0x08002605, 0x08002708, 0x0800290d, 0x08002815,
-	0x08002c14, 0x06800000, 0x07c01c00, 0x0cc00000, 0x00000000,
-	0x06800007, 0x07c01907, 0x07c01987, 0x07c019c7, 0x07800607,
-	0x040011c7, 0x07c01887, 0x06800047, 0x060e0c07, 0x07c01a87,
-	0x07c018c7, 0x068003c7, 0x07c00147, 0x06805c07, 0x060c2107,
-	0x080c2170, 0x06800087, 0x07c01ac7, 0x0680001f, 0x07804148,
-	0x05406208, 0x0940321a, 0x07800387, 0x09461207, 0x060c0408,
-	0x06868008, 0x07c01a48, 0x0cc00000, 0x00000000, 0x0649cf30,
-	0x064c4002, 0x064c4203, 0x02403083, 0x040080c3, 0x07c012c3,
-	0x058100c3, 0x07c01303, 0x06800019, 0x07c01499, 0x07c014d9,
-	0x07c01519, 0x064c0919, 0x0680001a, 0x07c0019a, 0x07c001da,
-	0x068000c2, 0x07c04142, 0x06803fc2, 0x07c01542, 0x07c01582,
-	0x07c015c2, 0x07c01602, 0x060c0919, 0x060c1a19, 0x06932002,
-	0x060c1e02, 0x06800002, 0x060c0c02, 0x06c04042, 0x060c0d02,
-	0x0cc00000, 0x00000000, 0x0649c803, 0x0aa14003, 0x078014c2,
-	0x028020c2, 0x07c014c2, 0x0809c800, 0x07801502, 0x0aa0c002,
-	0x06800102, 0x06030502, 0x064c0003, 0x0a2100c3, 0x06800002,
-	0x0c780780, 0x00000000, 0x064c3a03, 0x090060c3, 0x0aa68ac3,
-	0x07804143, 0x0a6600c3, 0x064c4403, 0x091210c3, 0x0aa54003,
-	0x068fffc3, 0x07801fc2, 0x04001082, 0x0b8120c2, 0x07c01fc2,
-	0x064c0003, 0x09803203, 0x09803183, 0x09803003, 0x060c0003,
-	0x06800002, 0x064c1803, 0x095860c2, 0x09803483, 0x060c1803,
-	0x09c03483, 0x060c1803, 0x06800103, 0x06030503, 0x06800002,
-	0x07c01fc2, 0x0cc00000, 0x00000000, 0x064c442e, 0x09121bae,
-	0x0aaf802e, 0x0c7ea640, 0x00000000, 0x0c004ac0, 0x00000000,
-	0x06818109, 0x06c34749, 0x06090709, 0x06490b09, 0x09809009,
-	0x098090c9, 0x06090b09, 0x09c09009, 0x09c090c9, 0x0962225a,
-	0x06090b09, 0x06800009, 0x06c07489, 0x02009c09, 0x06094409,
-	0x06880009, 0x06c07489, 0x02009c09, 0x06094509, 0x0cc00000,
-	0x00000000, 0x07804149, 0x0a60c0c9, 0x0cc00000, 0x00000000,
-	0x06490707, 0x09807087, 0x098070c7, 0x06090707, 0x06495107,
-	0x098073c7, 0x0cc00000, 0x06095107, 0x0cc00000, 0x00400000,
-	0x064e1210, 0x091e1410, 0x0bef0050, 0x00000000, 0x0649d910,
-	0x0900c410, 0x0aef8190, 0x07801850, 0x0aa3c090, 0x0c7821c0,
-	0x06800011, 0x06c04011, 0x060e1211, 0x078016d1, 0x0a20c051,
-	0x0680001f, 0x0688001f, 0x06c0749f, 0x0201fc1f, 0x06800010,
-	0x07c01b10, 0x0c7813c0, 0x06800110, 0x07801b11, 0x0aa08091,
-	0x0c780f00, 0x07801892, 0x0aebc092, 0x0aa3c72f, 0x07801b50,
-	0x05406410, 0x078016d1, 0x05801451, 0x0be0c051, 0x06800011,
-	0x06880011, 0x06c07491, 0x02011c11, 0x02010450, 0x04440410,
-	0x060e1310, 0x0c780340, 0x040c07d0, 0x05405410, 0x078016d1,
-	0x0be0c051, 0x06800011, 0x06880011, 0x06c07491, 0x02011c11,
-	0x02010450, 0x04420410, 0x060e1310, 0x040607d0, 0x07801952,
-	0x0aa14012, 0x06a2c211, 0x0aa0c052, 0x06a2c011, 0x06a2c111,
-	0x06c04011, 0x060e1211, 0x06800010, 0x07c01b10, 0x06800110,
-	0x0c7816c0, 0x07c01850, 0x07801991, 0x06800192, 0x02411491,
-	0x02411491, 0x02411491, 0x07801a50, 0x05409410, 0x02010450,
-	0x05403450, 0x02011c11, 0x060e1311, 0x07801952, 0x0aa34012,
-	0x06a44211, 0x0aa2c052, 0x06a44011, 0x0c780240, 0x06a44111,
-	0x0a63c0d1, 0x07801a90, 0x064e0c12, 0x09010492, 0x0b8ea490,
-	0x0cc00000, 0x00400000, 0x06c0c011, 0x060e1211, 0x0680001f,
-	0x06800010, 0x07c01b10, 0x06800150, 0x0c780e80, 0x07c01850,
-	0x078018d1, 0x0aa1c011, 0x04401451, 0x07c018d1, 0x07801891,
-	0x04401451, 0x0c780b00, 0x07c01891, 0x078019d1, 0x07c01a11,
-	0x07801a50, 0x05409410, 0x02010450, 0x06800192, 0x02011491,
-	0x07c019d1, 0x05403450, 0x02011c11, 0x060e1311, 0x07801952,
-	0x0aa14012, 0x06a16211, 0x0aa0c052, 0x06a16011, 0x06a16111,
-	0x07801bd2, 0x0aa28012, 0x07801a90, 0x064e0c12, 0x09010492,
-	0x0b804490, 0x07801a12, 0x0c7fde80, 0x07c019d2, 0x04001410,
-	0x07c01a90, 0x07c01d91, 0x06c00011, 0x060e1211, 0x06800050,
-	0x0c780400, 0x07c01850, 0x0ba30110, 0x0c7ff540, 0x0a6f8050,
-	0x07801891, 0x0aa74011, 0x04401451, 0x0b26c051, 0x07c01891,
-	0x07801ad0, 0x0aa0c0d0, 0x00000000, 0x080c2170, 0x06800010,
-	0x07c01850, 0x0cc00000, 0x00400000, 0x0aa0c010, 0x0688001f,
-	0x0680001f, 0x06c0749f, 0x0c780a40, 0x0201fc1f, 0x0aa0c72f,
-	0x090a841f, 0x090c741f, 0x07800992, 0x0b823490, 0x0a8f5490,
-	0x091a141f, 0x0aa20010, 0x0688001f, 0x0c780180, 0x0680001f,
-	0x0aa7001f, 0x07801991, 0x0c7ffcc0, 0x00000000, 0x06c0749f,
-	0x0201fc1f, 0x07801a50, 0x05409410, 0x06800192, 0x02411491,
-	0x02010450, 0x05403450, 0x02011c11, 0x060e1311, 0x07801d90,
-	0x09004450, 0x0aa14011, 0x06a14210, 0x0aa0c111, 0x06a14010,
-	0x06a14110, 0x06c08010, 0x060e0d1f, 0x0aa0c72f, 0x040207df,
-	0x040207df, 0x0c7ff4c0, 0x060e1210, 0x07801a50, 0x05409410,
-	0x02010450, 0x06800192, 0x02011491, 0x07c01991, 0x05403450,
-	0x02011c11, 0x060e1311, 0x07801d90, 0x0a61801f, 0x09c101d0,
-	0x060e1210, 0x068000d0, 0x0c7ff0c0, 0x07c01850, 0x06c08010,
-	0x060e0d1f, 0x0aae872f, 0x040207df, 0x0c7ffe00, 0x040207df,
-	0x0c000d00, 0x00000000, 0x08095007, 0x08095000, 0x07804347,
-	0x07804308, 0x094a51c8, 0x078042c8, 0x095411c8, 0x06096e07,
-	0x0aa0c008, 0x06800088, 0x06800048, 0x060c3108, 0x06800048,
-	0x0780098a, 0x068002c9, 0x0b00324a, 0x00000000, 0x06800008,
-	0x06498e0a, 0x097c1288, 0x06098e0a, 0x06497f08, 0x068000ca,
-	0x0970220a, 0x06097f08, 0x06820988, 0x06c00208, 0x0968221a,
-	0x0780098a, 0x0b20c2ca, 0x068004ca, 0x06800c0a, 0x0970620a,
-	0x0cc00000, 0x06095108, 0x0683ffc8, 0x06490909, 0x0a210049,
-	0x0aa0c008, 0x0c7fff40, 0x04401208, 0x06490b09, 0x09809009,
-	0x098090c9, 0x06090b09, 0x09c09009, 0x09c090c9, 0x06090b09,
-	0x0cc00000, 0x00000000, 0x0683ffc9, 0x0649bb08, 0x0920c208,
-	0x0649530a, 0x0900128a, 0x02008288, 0x0aa10008, 0x0aa0c009,
-	0x0c7ffe40, 0x04401249, 0x0cc00000, 0x00000000, 0x064e1209,
-	0x091e1249, 0x0bef8049, 0x064e0009, 0x064e0e0b, 0x064e0c0c,
-	0x083f0040, 0x083f0000, 0x0680020d, 0x0d00000d, 0x00000000,
-	0x060e0009, 0x060e0e0b, 0x0cc00000, 0x060e0c0c, 0x0c07fc40,
-	0x00000000, 0x06490b09, 0x09809009, 0x09809089, 0x06090b09,
-	0x09c09009, 0x09c09089, 0x06090b09, 0x08095007, 0x08095000,
-	0x0c000500, 0x00000000, 0x06800007, 0x07c00307, 0x06800007,
-	0x07c01907, 0x07c01987, 0x07c019c7, 0x07800607, 0x040011c7,
-	0x07c01887, 0x06800047, 0x060e0c07, 0x07c01a87, 0x07c018c7,
-	0x068003c7, 0x07c00147, 0x06800007, 0x0cc00000, 0x07c01847,
-	0x0683ffc9, 0x06498f0a, 0x0aa0c009, 0x0a6f800a, 0x04401249,
-	0x064c3d0a, 0x0580a28a, 0x0bef80ca, 0x00000000, 0x06498e0a,
-	0x0980a00a, 0x06800fc9, 0x09706289, 0x06098e0a, 0x06800009,
-	0x09706289, 0x09c0a00a, 0x0cc00000, 0x06098e0a, 0x064c3a08,
-	0x09006208, 0x064c0809, 0x064c090a, 0x064c1e0b, 0x064c380c,
-	0x06800407, 0x063f0007, 0x06800007, 0x063f0007, 0x00000000,
-	0x00000000, 0x00000000, 0x00000000, 0x060c0809, 0x060c090a,
-	0x060c1e0b, 0x060c380c, 0x0c07ef00, 0x00000000, 0x06800009,
-	0x060c0c09, 0x06c04049, 0x060c0d09, 0x064c1809, 0x09586248,
-	0x09809489, 0x060c1809, 0x09c09489, 0x060c1809, 0x0cc00000,
-	0x080c0a01, 0x0680072f, 0x06bfffcb, 0x06800024, 0x07801c20,
-	0x06800021, 0x06800025, 0x06800022, 0x06800026, 0x06800023,
-	0x06800027, 0x0680800a, 0x0680070e, 0x0740028b, 0x0400128a,
-	0x074002a4, 0x0400128a, 0x074002a0, 0x0400128a, 0x074002a1,
-	0x0400128a, 0x074002a5, 0x0400128a, 0x074002a2, 0x0400128a,
-	0x074002a6, 0x0400128a, 0x074002a3, 0x0400128a, 0x074002a7,
-	0x0d07fbce, 0x0400128a, 0x07c01c4b, 0x096102cb, 0x080c0700,
-	0x060c270b, 0x09610824, 0x060c0220, 0x09610865, 0x0aa1801a,
-	0x060c0221, 0x096108a6, 0x060c0222, 0x096108e7, 0x060c0223,
-	0x0780098e, 0x0b009bce, 0x06b80007, 0x06c07487, 0x02007c07,
-	0x06035107, 0x06803f07, 0x06035207, 0x06a08007, 0x06035007,
-	0x07800007, 0x0a60c007, 0x06803fc7, 0x07c01c87, 0x06800007,
-	0x07c01d47, 0x0ac0bbce, 0x07801c87, 0x0b613fc7, 0x0ba0c707,
-	0x0441c1c7, 0x07c01c87, 0x06435007, 0x0580f1c7, 0x0bef8047,
-	0x0cc00000, 0x00000000, 0x06435007, 0x0580f1c7, 0x0bef8047,
-	0x00000000, 0x06435307, 0x0900c1c7, 0x0a6f8007, 0x00000000,
-	0x06b80007, 0x06c07487, 0x02007c07, 0x06035107, 0x06803f07,
-	0x06035207, 0x06b0c007, 0x06035007, 0x054011ef, 0x0ac051ce,
-	0x06800087, 0x07c01cc7, 0x0c7ff880, 0x07c01d07, 0x06b90008,
-	0x06c07488, 0x02008c08, 0x0540126f, 0x02009bc9, 0x0680008a,
-	0x07c01cca, 0x068000ca, 0x06435007, 0x0580f1c7, 0x0bef8047,
-	0x06803f07, 0x06035108, 0x06035207, 0x06a08007, 0x06035007,
-	0x0ac0324e, 0x0c7ff3c0, 0x07c01d0a, 0x06808007, 0x020081c8,
-	0x02009bc9, 0x0c7ffc80, 0x0400128a, 0x0400130c, 0x0480f30c,
-	0x07c01d0c, 0x0980b38b, 0x07801ccc, 0x0540928c, 0x0200a24a,
-	0x0400130c, 0x0480f30c, 0x07c01ccc, 0x0643500c, 0x0580f30c,
-	0x06c0748a, 0x0bef404c, 0x0200ac0a, 0x0643530c, 0x0900c30c,
-	0x0a6f800c, 0x00000000, 0x0603510a, 0x06803f0a, 0x0603520a,
-	0x0c7fedc0, 0x0603500b, 0x064c2307, 0x0befc047, 0x0cc00000,
-	0x064c2007, 0x040011c7, 0x06800008, 0x0a20c047, 0x058011c7,
-	0x024071c8, 0x0cc00000, 0x00000000, 0x02409247, 0x048ff249,
-	0x05401249, 0x02407207, 0x048ff1c7, 0x054011c7, 0x0680000a,
+	0x02c07247, 0x0680004b, 0x06800008, 0x0280a2c7, 0x0aa2000a,
+	0x054012cb, 0x04001208, 0x0780080a, 0x0b8fb288, 0x0680004a,
+	0x0c7ecf00, 0x07c0150a, 0x078007cb, 0x05401288, 0x0200a2ca,
+	0x040012ca, 0x0950828b, 0x0c780080, 0x0960828b, 0x07801607,
+	0x090041c7, 0x0a8051c8, 0x0aa2001a, 0x07801607, 0x090841c7,
+	0x0a4051c8, 0x06800047, 0x03407207, 0x0c7ff8c0, 0x02c091c9,
+	0x078008c7, 0x040c0248, 0x07400247, 0x07800907, 0x04004249,
+	0x07400247, 0x07804187, 0x054031c7, 0x02c07687, 0x04090248,
+	0x07400247, 0x040801c8, 0x07801049, 0x074001c9, 0x040a01c8,
+	0x07801009, 0x0a60c05a, 0x074001c9, 0x040006c8, 0x0a62009a,
+	0x040b01c8, 0x074001d9, 0x07000709, 0x0aa1c009, 0x04401249,
+	0x0c780140, 0x07400709, 0x07801089, 0x074001c9, 0x04000707,
+	0x07c01099, 0x06800047, 0x03407207, 0x078014c9, 0x02c091c9,
+	0x07c014c9, 0x0609b20a, 0x0609b00a, 0x0609b10a, 0x068000c9,
+	0x0400125a, 0x07c01489, 0x0a60809a, 0x0c780340, 0x07801587,
+	0x07c015c7, 0x07c01588, 0x04000185, 0x04000144, 0x07801609,
+	0x05404249, 0x09404248, 0x07c01609, 0x0400010a, 0x0c7800c0,
+	0x00000000, 0x07c01548, 0x0649c108, 0x0aa2c008, 0x07800187,
+	0x0b61c087, 0x06800048, 0x0aa1c09a, 0x0aa0801a, 0x0aa14007,
+	0x040011c7, 0x07c00187, 0x0c780180, 0x07c001c8, 0x06800008,
+	0x07c001c8, 0x0c782ac0, 0x00000000, 0x0aa0c01a, 0x06801c6d,
+	0x068067ed, 0x0c005500, 0x00000000, 0x0c009600, 0x00000000,
+	0x0c0166c0, 0x00000000, 0x0c005940, 0x00000000, 0x0c782780,
+	0x00000000, 0x0c782700, 0x00000000, 0x0a62c01a, 0x07800007,
+	0x0a610007, 0x078016c7, 0x0aa1c007, 0x0a806287, 0x07804407,
+	0x0a610007, 0x078043c7, 0x0aa08007, 0x0c7ecd00, 0x07804407,
+	0x0a670007, 0x0400024a, 0x06810007, 0x06298407, 0x064c4607,
+	0x060c5307, 0x064c4807, 0x09807187, 0x060c4807, 0x064c4107,
+	0x0609d107, 0x078043c7, 0x0aa1c007, 0x06900007, 0x0c0179c0,
+	0x06c00c87, 0x064c4407, 0x09807047, 0x060c4407, 0x078001c7,
+	0x0a608007, 0x0c7ff740, 0x0400024a, 0x07800107, 0x0b4031c9,
+	0x0c781d40, 0x00000000, 0x07c00109, 0x078040c7, 0x0682bc08,
+	0x0b004207, 0x00000000, 0x0fc031c0, 0x094e3247, 0x07c00349,
+	0x07804148, 0x0aa200c8, 0x07801dc8, 0x0b806209, 0x00000000,
+	0x07800307, 0x0a608007, 0x0c781900, 0x02409209, 0x078016c8,
+	0x0a805209, 0x07c016c9, 0x0680001e, 0x07c0001e, 0x09408789,
+	0x0981d39d, 0x0981d3dd, 0x09c1d1dd, 0x0c0041c0, 0x00000000,
+	0x0c0082c0, 0x00000000, 0x0c015380, 0x00000000, 0x0c004600,
+	0x00000000, 0x07804208, 0x0a610008, 0x07804247, 0x0fc01200,
+	0x0fc061c0, 0x07c00207, 0x094e11c8, 0x060c0a07, 0x0a61001a,
+	0x06800007, 0x0c7808c0, 0x07c01e07, 0x0fc011c0, 0x07c01e07,
+	0x08094200, 0x0a60c007, 0x0c780740, 0x00000000, 0x06815448,
+	0x06094208, 0x0680c008, 0x06094008, 0x07800087, 0x0aa18087,
+	0x06800047, 0x07804147, 0x0aa0c0c7, 0x06800087, 0x06800107,
+	0x0fc08200, 0x0fc08240, 0x09509248, 0x06094109, 0x0fc01200,
+	0x0fc08200, 0x0fc08240, 0x09509248, 0x06094109, 0x06094109,
+	0x0fc01200, 0x0aed4047, 0x044011c7, 0x0fc01200, 0x07c00048,
+	0x08094000, 0x07804407, 0x0a60c007, 0x078043c7, 0x0a60c007,
+	0x0c780540, 0x00000000, 0x0fc071c0, 0x080c2940, 0x07800207,
+	0x07804208, 0x094e11c8, 0x09807187, 0x098073c7, 0x060c0a07,
+	0x09c073c7, 0x09807387, 0x060c0a07, 0x0c009a00, 0x080c0600,
+	0x064c0a07, 0x091c21c7, 0x0a6f8007, 0x00000000, 0x0c780100,
+	0x00000000, 0x0c009800, 0x080c0600, 0x07801e07, 0x0aa14007,
+	0x07800048, 0x094211c8, 0x05001208, 0x094411c8, 0x060c1807,
+	0x0cb8002d, 0x00000000, 0x064c0007, 0x0a2fc047, 0x00000000,
+	0x064c3a07, 0x090061c7, 0x0aaec647, 0x00000000, 0x080c0a00,
+	0x080c2300, 0x064c1e07, 0x09807547, 0x060c1e07, 0x080c2800,
+	0x080c0002, 0x0c7e8a00, 0x00000000, 0x0649cf30, 0x06900007,
+	0x0c015540, 0x06c00c87, 0x0c015dc0, 0x00000000, 0x06910007,
+	0x0c015400, 0x06c00c87, 0x06900007, 0x0c0157c0, 0x06c00c87,
+	0x064c4407, 0x09807047, 0x060c4407, 0x0649c107, 0x07c00807,
+	0x0649c007, 0x07c007c7, 0x080c0800, 0x06804004, 0x0680c085,
+	0x06814106, 0x0c000a40, 0x00000000, 0x08002501, 0x08002605,
+	0x08002708, 0x0800290d, 0x08002815, 0x08002c14, 0x06800000,
+	0x07c01c00, 0x0cc00000, 0x00000000, 0x06800007, 0x07c01907,
+	0x07c01987, 0x07c019c7, 0x07800607, 0x040011c7, 0x07c01887,
+	0x06800047, 0x060e0c07, 0x07c01a87, 0x07c018c7, 0x068003c7,
+	0x07c00147, 0x06805c07, 0x060c2107, 0x080c2170, 0x06800087,
+	0x07c01ac7, 0x0680001f, 0x07804148, 0x05406208, 0x0940321a,
+	0x07800387, 0x09461207, 0x060c0408, 0x06800008, 0x07c01a48,
+	0x0cc00000, 0x00000000, 0x0649cf30, 0x064c4002, 0x064c4203,
+	0x02403083, 0x040080c3, 0x07c00843, 0x058100c3, 0x07c00883,
+	0x06800019, 0x07c01499, 0x07c014d9, 0x07c01519, 0x064c0919,
+	0x0680001a, 0x07c0019a, 0x07c001da, 0x068000c2, 0x07c04142,
+	0x06803fc2, 0x07c01542, 0x07c01582, 0x07c015c2, 0x07c01602,
+	0x060c0919, 0x060c1a19, 0x06932002, 0x060c1e02, 0x06800002,
+	0x060c0c02, 0x06c04042, 0x060c0d02, 0x0cc00000, 0x00000000,
+	0x0649c803, 0x0aa14003, 0x078014c2, 0x028020c2, 0x07c014c2,
+	0x0809c800, 0x07801502, 0x0aa0c002, 0x06800102, 0x06030502,
+	0x064c0003, 0x0a2100c3, 0x06800002, 0x0c7809c0, 0x00000000,
+	0x064c3a03, 0x090060c3, 0x0a60cac3, 0x0c780880, 0x00000000,
+	0x07804143, 0x0aa080c3, 0x0c780780, 0x064c4403, 0x091210c3,
+	0x0aa6c003, 0x068fffc3, 0x07801fc2, 0x04001082, 0x0b8190c2,
+	0x07c01fc2, 0x06800002, 0x07c01fc2, 0x07800402, 0x04001082,
+	0x0b8130c2, 0x07c00402, 0x064c0003, 0x09803203, 0x09803183,
+	0x09803003, 0x060c0003, 0x06800002, 0x064c1803, 0x095860c2,
+	0x09803483, 0x060c1803, 0x09c03483, 0x060c1803, 0x06800103,
+	0x06030503, 0x06800002, 0x07c01fc2, 0x07c00402, 0x0cc00000,
+	0x00000000, 0x064c442e, 0x09121bae, 0x0aaf802e, 0x0c7e6200,
+	0x00000000, 0x0c004ac0, 0x00000000, 0x06818109, 0x06c34749,
+	0x06090709, 0x06490b09, 0x09809009, 0x098090c9, 0x06090b09,
+	0x09c09009, 0x09c090c9, 0x0962225a, 0x06090b09, 0x06800009,
+	0x06c00c89, 0x02009c09, 0x06094409, 0x06880009, 0x06c00c89,
+	0x02009c09, 0x06094509, 0x0cc00000, 0x00000000, 0x07804149,
+	0x0a60c0c9, 0x0cc00000, 0x00000000, 0x06490707, 0x09807087,
+	0x098070c7, 0x06090707, 0x06495107, 0x098073c7, 0x0cc00000,
+	0x06095107, 0x0cc00000, 0x00400000, 0x064e1210, 0x091e1410,
+	0x0bef0050, 0x00000000, 0x0649d910, 0x0900c410, 0x0aef8190,
+	0x07801850, 0x0aa3c090, 0x0c7821c0, 0x06800011, 0x06c04011,
+	0x060e1211, 0x078016d1, 0x0a20c051, 0x0680001f, 0x0688001f,
+	0x06c00c9f, 0x0201fc1f, 0x06800010, 0x07c01b10, 0x0c7813c0,
+	0x06800110, 0x07801b11, 0x0aa08091, 0x0c780f00, 0x07801892,
+	0x0aebc092, 0x0aa3c72f, 0x07801b50, 0x05406410, 0x078016d1,
+	0x05801451, 0x0be0c051, 0x06800011, 0x06880011, 0x06c00c91,
+	0x02011c11, 0x02010450, 0x04440410, 0x060e1310, 0x0c780340,
+	0x040c07d0, 0x05405410, 0x078016d1, 0x0be0c051, 0x06800011,
+	0x06880011, 0x06c00c91, 0x02011c11, 0x02010450, 0x04420410,
+	0x060e1310, 0x040607d0, 0x07801952, 0x0aa14012, 0x06a2c211,
+	0x0aa0c052, 0x06a2c011, 0x06a2c111, 0x06c04011, 0x060e1211,
+	0x06800010, 0x07c01b10, 0x06800110, 0x0c7816c0, 0x07c01850,
+	0x07801991, 0x06800192, 0x02411491, 0x02411491, 0x02411491,
+	0x07801a50, 0x05409410, 0x02010450, 0x05403450, 0x02011c11,
+	0x060e1311, 0x07801952, 0x0aa34012, 0x06a44211, 0x0aa2c052,
+	0x06a44011, 0x0c780240, 0x06a44111, 0x0a63c0d1, 0x07801a90,
+	0x064e0c12, 0x09010492, 0x0b8ea490, 0x0cc00000, 0x00400000,
+	0x06c0c011, 0x060e1211, 0x0680001f, 0x06800010, 0x07c01b10,
+	0x06800150, 0x0c780e80, 0x07c01850, 0x078018d1, 0x0aa1c011,
+	0x04401451, 0x07c018d1, 0x07801891, 0x04401451, 0x0c780b00,
+	0x07c01891, 0x078019d1, 0x07c01a11, 0x07801a50, 0x05409410,
+	0x02010450, 0x06800192, 0x02011491, 0x07c019d1, 0x05403450,
+	0x02011c11, 0x060e1311, 0x07801952, 0x0aa14012, 0x06a16211,
+	0x0aa0c052, 0x06a16011, 0x06a16111, 0x07801bd2, 0x0aa28012,
+	0x07801a90, 0x064e0c12, 0x09010492, 0x0b804490, 0x07801a12,
+	0x0c7fde80, 0x07c019d2, 0x04001410, 0x07c01a90, 0x07c01d91,
+	0x06c00011, 0x060e1211, 0x06800050, 0x0c780400, 0x07c01850,
+	0x0ba30110, 0x0c7ff540, 0x0a6f8050, 0x07801891, 0x0aa74011,
+	0x04401451, 0x0b26c051, 0x07c01891, 0x07801ad0, 0x0aa0c0d0,
+	0x00000000, 0x080c2170, 0x06800010, 0x07c01850, 0x0cc00000,
+	0x00400000, 0x0aa0c010, 0x0688001f, 0x0680001f, 0x06c00c9f,
+	0x0c780a40, 0x0201fc1f, 0x0aa0c72f, 0x090a841f, 0x090c741f,
+	0x07800992, 0x0b823490, 0x0a8f5490, 0x091a141f, 0x0aa20010,
+	0x0688001f, 0x0c780180, 0x0680001f, 0x0aa7001f, 0x07801991,
+	0x0c7ffcc0, 0x00000000, 0x06c00c9f, 0x0201fc1f, 0x07801a50,
+	0x05409410, 0x06800192, 0x02411491, 0x02010450, 0x05403450,
+	0x02011c11, 0x060e1311, 0x07801d90, 0x09004450, 0x0aa14011,
+	0x06a14210, 0x0aa0c111, 0x06a14010, 0x06a14110, 0x06c08010,
+	0x060e0d1f, 0x0aa0c72f, 0x040207df, 0x040207df, 0x0c7ff4c0,
+	0x060e1210, 0x07801a50, 0x05409410, 0x02010450, 0x06800192,
+	0x02011491, 0x07c01991, 0x05403450, 0x02011c11, 0x060e1311,
+	0x07801d90, 0x0a61801f, 0x09c101d0, 0x060e1210, 0x068000d0,
+	0x0c7ff0c0, 0x07c01850, 0x06c08010, 0x060e0d1f, 0x0aae872f,
+	0x040207df, 0x0c7ffe00, 0x040207df, 0x0c000d00, 0x00000000,
+	0x08095007, 0x08095000, 0x07804347, 0x07804308, 0x094a51c8,
+	0x078042c8, 0x095411c8, 0x06096e07, 0x0aa0c008, 0x06800088,
+	0x06800048, 0x060c3108, 0x06800048, 0x0780098a, 0x068002c9,
+	0x0b00324a, 0x00000000, 0x06800008, 0x06498e0a, 0x097c1288,
+	0x06098e0a, 0x06497f08, 0x068000ca, 0x0970220a, 0x06097f08,
+	0x06820988, 0x06c00208, 0x0968221a, 0x0780098a, 0x0b20c2ca,
+	0x068004ca, 0x06800c0a, 0x0970620a, 0x0cc00000, 0x06095108,
+	0x0683ffc8, 0x06490909, 0x0a210049, 0x0aa0c008, 0x0c7fff40,
+	0x04401208, 0x06490b09, 0x09809009, 0x098090c9, 0x06090b09,
+	0x09c09009, 0x09c090c9, 0x06090b09, 0x0cc00000, 0x00000000,
+	0x0683ffc9, 0x0649bb08, 0x0920c208, 0x0649530a, 0x0900128a,
+	0x02008288, 0x0aa10008, 0x0aa0c009, 0x0c7ffe40, 0x04401249,
+	0x0cc00000, 0x00000000, 0x064e1209, 0x091e1249, 0x0bef8049,
+	0x064e0009, 0x064e0e0b, 0x064e0c0c, 0x083f0040, 0x083f0000,
+	0x0680020d, 0x0d00000d, 0x00000000, 0x060e0009, 0x060e0e0b,
+	0x0cc00000, 0x060e0c0c, 0x0c07fc40, 0x00000000, 0x06490b09,
+	0x09809009, 0x09809089, 0x06090b09, 0x09c09009, 0x09c09089,
+	0x06090b09, 0x08095007, 0x08095000, 0x0c000500, 0x00000000,
+	0x06800007, 0x07c00307, 0x06800007, 0x07c01907, 0x07c01987,
+	0x07c019c7, 0x07800607, 0x040011c7, 0x07c01887, 0x06800047,
+	0x060e0c07, 0x07c01a87, 0x07c018c7, 0x068003c7, 0x07c00147,
+	0x06800007, 0x0cc00000, 0x07c01847, 0x0683ffc9, 0x06498f0a,
+	0x0aa0c009, 0x0a6f800a, 0x04401249, 0x064c3d0a, 0x0580a28a,
+	0x0bef80ca, 0x00000000, 0x06498e0a, 0x0980a00a, 0x06800fc9,
+	0x09706289, 0x06098e0a, 0x06800009, 0x09706289, 0x09c0a00a,
+	0x0cc00000, 0x06098e0a, 0x064c3a08, 0x09006208, 0x064c0809,
+	0x064c090a, 0x064c1e0b, 0x064c380c, 0x06800407, 0x063f0007,
+	0x06800007, 0x063f0007, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x060c0809, 0x060c090a, 0x060c1e0b, 0x060c380c,
+	0x0c07ef00, 0x00000000, 0x06800009, 0x060c0c09, 0x06c04049,
+	0x060c0d09, 0x064c1809, 0x09586248, 0x09809489, 0x060c1809,
+	0x09c09489, 0x060c1809, 0x0cc00000, 0x080c0a01, 0x0680072f,
+	0x06bfffcb, 0x06800024, 0x07801c20, 0x06800021, 0x06800025,
+	0x06800022, 0x06800026, 0x06800023, 0x06800027, 0x0680800a,
+	0x0680070e, 0x0740028b, 0x0400128a, 0x074002a4, 0x0400128a,
+	0x074002a0, 0x0400128a, 0x074002a1, 0x0400128a, 0x074002a5,
+	0x0400128a, 0x074002a2, 0x0400128a, 0x074002a6, 0x0400128a,
+	0x074002a3, 0x0400128a, 0x074002a7, 0x0d07fbce, 0x0400128a,
+	0x07c01c4b, 0x096102cb, 0x080c0700, 0x060c270b, 0x09610824,
+	0x060c0220, 0x09610865, 0x0aa1801a, 0x060c0221, 0x096108a6,
+	0x060c0222, 0x096108e7, 0x060c0223, 0x0780098e, 0x0b009bce,
+	0x06b80007, 0x06c00c87, 0x02007c07, 0x06035107, 0x06803f07,
+	0x06035207, 0x06a08007, 0x06035007, 0x07800007, 0x0a60c007,
+	0x06803fc7, 0x07c01c87, 0x06800007, 0x07c01d47, 0x0ac0bbce,
+	0x07801c87, 0x0b613fc7, 0x0ba0c707, 0x0441c1c7, 0x07c01c87,
+	0x06435007, 0x0580f1c7, 0x0bef8047, 0x0cc00000, 0x00000000,
+	0x06435007, 0x0580f1c7, 0x0bef8047, 0x00000000, 0x06435307,
+	0x0900c1c7, 0x0a6f8007, 0x00000000, 0x06b80007, 0x06c00c87,
+	0x02007c07, 0x06035107, 0x06803f07, 0x06035207, 0x06b0c007,
+	0x06035007, 0x054011ef, 0x0ac051ce, 0x06800087, 0x07c01cc7,
+	0x0c7ff880, 0x07c01d07, 0x06b90008, 0x06c00c88, 0x02008c08,
+	0x0540126f, 0x02009bc9, 0x0680008a, 0x07c01cca, 0x068000ca,
+	0x06435007, 0x0580f1c7, 0x0bef8047, 0x06803f07, 0x06035108,
+	0x06035207, 0x06a08007, 0x06035007, 0x0ac0324e, 0x0c7ff3c0,
+	0x07c01d0a, 0x06808007, 0x020081c8, 0x02009bc9, 0x0c7ffc80,
+	0x0400128a, 0x0400130c, 0x0480f30c, 0x07c01d0c, 0x0980b38b,
+	0x07801ccc, 0x0540928c, 0x0200a24a, 0x0400130c, 0x0480f30c,
+	0x07c01ccc, 0x0643500c, 0x0580f30c, 0x06c00c8a, 0x0bef404c,
+	0x0200ac0a, 0x0643530c, 0x0900c30c, 0x0a6f800c, 0x00000000,
+	0x0603510a, 0x06803f0a, 0x0603520a, 0x0c7fedc0, 0x0603500b,
+	0x064c2307, 0x0befc047, 0x0cc00000, 0x064c2007, 0x040011c7,
+	0x06800008, 0x0a20c047, 0x058011c7, 0x024071c8, 0x0cc00000,
+	0x00000000, 0x02409247, 0x048ff249, 0x05401249, 0x02407207,
+	0x048ff1c7, 0x054011c7, 0x0680000a, 0x0680000b, 0x06800048,
+	0x0b8041c8, 0x054012cb, 0x0980b04b, 0x024081c8, 0x05401208,
+	0x0b2ec20a, 0x0400128a, 0x058012cb, 0x0e0002c9, 0x00000000,
+	0x00000000, 0x0cc00000, 0x0f000240, 0x02409247, 0x06807fca,
+	0x02809289, 0x02407207, 0x06807fca, 0x02807287, 0x0680000a,
 	0x0680000b, 0x06800048, 0x0b8041c8, 0x054012cb, 0x0980b04b,
 	0x024081c8, 0x05401208, 0x0b2ec20a, 0x0400128a, 0x058012cb,
 	0x0e0002c9, 0x00000000, 0x00000000, 0x0cc00000, 0x0f000240,
-	0x02409247, 0x06807fca, 0x02809289, 0x02407207, 0x06807fca,
+	0x024091c9, 0x06807fca, 0x02809289, 0x024071c8, 0x06807fca,
 	0x02807287, 0x0680000a, 0x0680000b, 0x06800048, 0x0b8041c8,
 	0x054012cb, 0x0980b04b, 0x024081c8, 0x05401208, 0x0b2ec20a,
 	0x0400128a, 0x058012cb, 0x0e0002c9, 0x00000000, 0x00000000,
-	0x0cc00000, 0x0f000240, 0x024091c9, 0x06807fca, 0x02809289,
-	0x024071c8, 0x06807fca, 0x02807287, 0x0680000a, 0x0680000b,
-	0x06800048, 0x0b8041c8, 0x054012cb, 0x0980b04b, 0x024081c8,
-	0x05401208, 0x0b2ec20a, 0x0400128a, 0x058012cb, 0x0e0002c9,
-	0x00000000, 0x00000000, 0x0cc00000, 0x0f000240, 0x02407207,
-	0x06807fca, 0x02807287, 0x0680000a, 0x0680000b, 0x06800048,
-	0x0b8041c8, 0x054012cb, 0x0980b04b, 0x024081c8, 0x05401208,
-	0x0b2ec34a, 0x0400128a, 0x0cc00000, 0x0580124b, 0x07804187,
-	0x0a60c007, 0x06800088, 0x06800048, 0x07c04148, 0x0a60c01a,
-	0x0680566c, 0x0680005a, 0x0cc00000, 0x00000000, 0x024091c9,
-	0x06807fc8, 0x02809209, 0x0680000a, 0x0680000b, 0x06800048,
-	0x0b8041c8, 0x054012cb, 0x0980b04b, 0x024081c8, 0x05401208,
-	0x0b2ec20a, 0x0400128a, 0x058012cb, 0x0e0002c9, 0x00000000,
-	0x00000000, 0x0cc00000, 0x0f000240, 0x0aa1409a, 0x0aa0801a,
-	0x0c784cc0, 0x0cc00000, 0x00000000, 0x07801ec7, 0x07801e88,
-	0x02407207, 0x048ff1c7, 0x054011c7, 0x07c00447, 0x07801f07,
-	0x07801e88, 0x02407207, 0x048ff1c7, 0x054011c7, 0x07c00487,
-	0x07804149, 0x0aa140c9, 0x07800389, 0x0a60c009, 0x00000000,
-	0x044011c7, 0x0c07f580, 0x07800449, 0x06800f88, 0x09646248,
-	0x060c3009, 0x07800487, 0x07804149, 0x0aa280c9, 0x07800389,
-	0x0aa0c009, 0x00000000, 0x040011c7, 0x0c07f280, 0x07800449,
-	0x06800fc8, 0x09646248, 0x060c3009, 0x07804147, 0x0aa080c7,
-	0x0c780bc0, 0x07801e88, 0x05401208, 0x07801ec7, 0x0c07e980,
-	0x054011c7, 0x06800c08, 0x09646248, 0x060c3009, 0x07801e48,
-	0x05401208, 0x07801ec7, 0x0c07e780, 0x054011c7, 0x06800c48,
-	0x09646248, 0x060c3009, 0x07801f07, 0x07801e88, 0x02407207,
-	0x048ff1c7, 0x05401247, 0x07801ec7, 0x07801f08, 0x02407207,
-	0x048ff1c7, 0x054011c7, 0x09529247, 0x06800d08, 0x09646248,
-	0x060c3009, 0x07801f07, 0x07801e88, 0x0c07d1c0, 0x07801e89,
-	0x06800808, 0x09646248, 0x060c3009, 0x07801ec7, 0x07801f08,
-	0x0c07d000, 0x07801f09, 0x06800888, 0x09646248, 0x060c3009,
-	0x0cc00000, 0x00000000, 0x07801f8c, 0x0aa0c00c, 0x0780038c,
-	0x0680000c, 0x0a61c00c, 0x07801ec7, 0x054011c7, 0x07801e88,
-	0x05401208, 0x0c780180, 0x04001208, 0x07801ec7, 0x054011c7,
-	0x040011c7, 0x04401207, 0x0c07db00, 0x00000000, 0x06800c08,
-	0x09646248, 0x0a60c00c, 0x00000000, 0x098093c9, 0x060c3009,
-	0x0a61800c, 0x07801ec7, 0x054011c7, 0x07801e88, 0x0c780200,
-	0x05401208, 0x07801ec7, 0x054011c7, 0x040011c7, 0x07801e88,
-	0x05401208, 0x04001208, 0x0c07d600, 0x00000000, 0x06800c48,
-	0x09646248, 0x0aa0c00c, 0x00000000, 0x098093c9, 0x060c3009,
-	0x0a61c00c, 0x07801ec7, 0x054011c7, 0x07801e48, 0x05401208,
-	0x0c7801c0, 0x04001208, 0x07801ec7, 0x054011c7, 0x040011c7,
-	0x07801e88, 0x05401208, 0x0c07d100, 0x00000000, 0x06800c88,
-	0x09646248, 0x060c3009, 0x0a61800c, 0x07801ec7, 0x054011c7,
-	0x07801e48, 0x0c780200, 0x05401208, 0x07801ec7, 0x054011c7,
-	0x040011c7, 0x07801e48, 0x05401208, 0x04001208, 0x0c07ccc0,
-	0x00000000, 0x06800cc8, 0x09646248, 0x060c3009, 0x0780038c,
-	0x07801f07, 0x0aa0c00c, 0x054011c7, 0x040011c7, 0x07801e88,
-	0x05401208, 0x02407207, 0x06807fca, 0x02809287, 0x07801ec7,
+	0x0cc00000, 0x0f000240, 0x02407207, 0x06807fca, 0x02807287,
+	0x0680000a, 0x0680000b, 0x06800048, 0x0b8041c8, 0x054012cb,
+	0x0980b04b, 0x024081c8, 0x05401208, 0x0b2ec34a, 0x0400128a,
+	0x0cc00000, 0x0580124b, 0x07804187, 0x0a60c007, 0x06800088,
+	0x06800048, 0x07c04148, 0x0a60c01a, 0x068067ed, 0x0680005a,
+	0x0cc00000, 0x00000000, 0x024091c9, 0x06807fc8, 0x02809209,
+	0x0680000a, 0x0680000b, 0x06800048, 0x0b8041c8, 0x054012cb,
+	0x0980b04b, 0x024081c8, 0x05401208, 0x0b2ec20a, 0x0400128a,
+	0x058012cb, 0x0e0002c9, 0x00000000, 0x00000000, 0x0cc00000,
+	0x0f000240, 0x0aa1409a, 0x0aa0801a, 0x0c784cc0, 0x0cc00000,
+	0x00000000, 0x07801ec7, 0x07801e88, 0x02407207, 0x048ff1c7,
+	0x054011c7, 0x07c00447, 0x07801f07, 0x07801e88, 0x02407207,
+	0x048ff1c7, 0x054011c7, 0x07c00487, 0x07804149, 0x0aa140c9,
+	0x07800389, 0x0a60c009, 0x00000000, 0x044011c7, 0x0c07f580,
+	0x07800449, 0x06800f88, 0x09646248, 0x060c3009, 0x07800487,
+	0x07804149, 0x0aa280c9, 0x07800389, 0x0aa0c009, 0x00000000,
+	0x040011c7, 0x0c07f280, 0x07800449, 0x06800fc8, 0x09646248,
+	0x060c3009, 0x07804147, 0x0aa080c7, 0x0c780bc0, 0x07801e88,
+	0x05401208, 0x07801ec7, 0x0c07e980, 0x054011c7, 0x06800c08,
+	0x09646248, 0x060c3009, 0x07801e48, 0x05401208, 0x07801ec7,
+	0x0c07e780, 0x054011c7, 0x06800c48, 0x09646248, 0x060c3009,
+	0x07801f07, 0x07801e88, 0x02407207, 0x048ff1c7, 0x05401247,
+	0x07801ec7, 0x07801f08, 0x02407207, 0x048ff1c7, 0x054011c7,
+	0x09529247, 0x06800d08, 0x09646248, 0x060c3009, 0x07801f07,
+	0x07801e88, 0x0c07d1c0, 0x07801e89, 0x06800808, 0x09646248,
+	0x060c3009, 0x07801ec7, 0x07801f08, 0x0c07d000, 0x07801f09,
+	0x06800888, 0x09646248, 0x060c3009, 0x0cc00000, 0x00000000,
+	0x07801f8c, 0x0aa0c00c, 0x0780038c, 0x0680000c, 0x0a61c00c,
+	0x07801ec7, 0x054011c7, 0x07801e88, 0x05401208, 0x0c780180,
+	0x04001208, 0x07801ec7, 0x054011c7, 0x040011c7, 0x04401207,
+	0x0c07db00, 0x00000000, 0x06800c08, 0x09646248, 0x0a60c00c,
+	0x00000000, 0x098093c9, 0x060c3009, 0x0a61800c, 0x07801ec7,
+	0x054011c7, 0x07801e88, 0x0c780200, 0x05401208, 0x07801ec7,
+	0x054011c7, 0x040011c7, 0x07801e88, 0x05401208, 0x04001208,
+	0x0c07d600, 0x00000000, 0x06800c48, 0x09646248, 0x0aa0c00c,
+	0x00000000, 0x098093c9, 0x060c3009, 0x0a61c00c, 0x07801ec7,
+	0x054011c7, 0x07801e48, 0x05401208, 0x0c7801c0, 0x04001208,
+	0x07801ec7, 0x054011c7, 0x040011c7, 0x07801e88, 0x05401208,
+	0x0c07d100, 0x00000000, 0x06800c88, 0x09646248, 0x060c3009,
+	0x0a61800c, 0x07801ec7, 0x054011c7, 0x07801e48, 0x0c780200,
+	0x05401208, 0x07801ec7, 0x054011c7, 0x040011c7, 0x07801e48,
+	0x05401208, 0x04001208, 0x0c07ccc0, 0x00000000, 0x06800cc8,
+	0x09646248, 0x060c3009, 0x0780038c, 0x07801f07, 0x0aa0c00c,
+	0x054011c7, 0x040011c7, 0x07801e88, 0x05401208, 0x02407207,
+	0x06807fca, 0x02809287, 0x07801ec7, 0x0aa1800c, 0x054011c7,
+	0x07801f88, 0x0a60c008, 0x00000000, 0x040011c7, 0x07801f08,
+	0x0aa0c00c, 0x05401208, 0x04001208, 0x02407207, 0x02807287,
+	0x09529247, 0x06800d08, 0x09646248, 0x060c3009, 0x07801f07,
+	0x0aa0c00c, 0x054011c7, 0x040011c7, 0x07801e88, 0x05401208,
+	0x04001208, 0x02407207, 0x06807fca, 0x02809287, 0x07801ec7,
 	0x0aa1800c, 0x054011c7, 0x07801f88, 0x0a60c008, 0x00000000,
 	0x040011c7, 0x07801f08, 0x0aa0c00c, 0x05401208, 0x04001208,
-	0x02407207, 0x02807287, 0x09529247, 0x06800d08, 0x09646248,
-	0x060c3009, 0x07801f07, 0x0aa0c00c, 0x054011c7, 0x040011c7,
-	0x07801e88, 0x05401208, 0x04001208, 0x02407207, 0x06807fca,
-	0x02809287, 0x07801ec7, 0x0aa1800c, 0x054011c7, 0x07801f88,
-	0x0a60c008, 0x00000000, 0x040011c7, 0x07801f08, 0x0aa0c00c,
-	0x05401208, 0x04001208, 0x02407207, 0x02807287, 0x09529247,
-	0x06800d48, 0x09646248, 0x060c3009, 0x0aa0c00c, 0x0680000c,
-	0x0680004c, 0x07801f07, 0x054011c7, 0x02007307, 0x07801e88,
-	0x05401208, 0x04001208, 0x0c07b0c0, 0x04000248, 0x06800808,
+	0x02407207, 0x02807287, 0x09529247, 0x06800d48, 0x09646248,
+	0x060c3009, 0x0aa0c00c, 0x0680000c, 0x0680004c, 0x07801f07,
+	0x054011c7, 0x02007307, 0x07801e88, 0x05401208, 0x04001208,
+	0x0c07b0c0, 0x04000248, 0x06800808, 0x09646248, 0x060c3009,
+	0x07801f07, 0x054011c7, 0x02007307, 0x07801e88, 0x05401208,
+	0x0c07ae40, 0x04001248, 0x06800848, 0x09646248, 0x060c3009,
+	0x07801f07, 0x054011c7, 0x02007307, 0x07801ec8, 0x05401208,
+	0x0c07b140, 0x04000248, 0x06800888, 0x09646248, 0x060c3009,
+	0x07801f07, 0x054011c7, 0x02007307, 0x07801ec8, 0x05401208,
+	0x04001208, 0x0c07ae80, 0x04401248, 0x068008c8, 0x09646248,
+	0x060c3009, 0x07801f07, 0x054011c7, 0x02007307, 0x07801e88,
+	0x05401208, 0x04001208, 0x0c07a640, 0x04401248, 0x06800908,
 	0x09646248, 0x060c3009, 0x07801f07, 0x054011c7, 0x02007307,
-	0x07801e88, 0x05401208, 0x0c07ae40, 0x04001248, 0x06800848,
+	0x07801e88, 0x05401208, 0x0c07a3c0, 0x04000248, 0x06800948,
 	0x09646248, 0x060c3009, 0x07801f07, 0x054011c7, 0x02007307,
-	0x07801ec8, 0x05401208, 0x0c07b140, 0x04000248, 0x06800888,
+	0x07801ec8, 0x05401208, 0x0c07a6c0, 0x04001248, 0x06800988,
 	0x09646248, 0x060c3009, 0x07801f07, 0x054011c7, 0x02007307,
-	0x07801ec8, 0x05401208, 0x04001208, 0x0c07ae80, 0x04401248,
-	0x068008c8, 0x09646248, 0x060c3009, 0x07801f07, 0x054011c7,
-	0x02007307, 0x07801e88, 0x05401208, 0x04001208, 0x0c07a640,
-	0x04401248, 0x06800908, 0x09646248, 0x060c3009, 0x07801f07,
-	0x054011c7, 0x02007307, 0x07801e88, 0x05401208, 0x0c07a3c0,
-	0x04000248, 0x06800948, 0x09646248, 0x060c3009, 0x07801f07,
-	0x054011c7, 0x02007307, 0x07801ec8, 0x05401208, 0x0c07a6c0,
-	0x04001248, 0x06800988, 0x09646248, 0x060c3009, 0x07801f07,
-	0x054011c7, 0x02007307, 0x07801ec8, 0x05401208, 0x04001208,
-	0x0c07a400, 0x04400248, 0x068009c8, 0x09646248, 0x060c3009,
-	0x0cc00000, 0x00000000, 0x07804147, 0x0aa080c7, 0x0c7807c0,
-	0x07801f07, 0x07801e88, 0x0c079600, 0x07801e89, 0x06800808,
-	0x09646248, 0x060c3009, 0x07801ec7, 0x07801e48, 0x0c079440,
-	0x07801e89, 0x06800848, 0x09646248, 0x060c3009, 0x07801ec7,
-	0x07801e88, 0x0c079280, 0x07801e49, 0x06800908, 0x09646248,
-	0x060c3009, 0x07801ec7, 0x07801e48, 0x0c0790c0, 0x07801e49,
-	0x06800948, 0x09646248, 0x060c3009, 0x0cc00000, 0x00000000,
-	0x0780038c, 0x0aa0800c, 0x0c780880, 0x0680080d, 0x07801f07,
-	0x054011c7, 0x0900230d, 0x07801e88, 0x05401208, 0x0aa2004c,
-	0x0aa1c00c, 0x04001208, 0x07801e48, 0x05401208, 0x0aa0c0cc,
-	0x00000000, 0x04001208, 0x0904230d, 0x07801e89, 0x05401249,
-	0x0aa2004c, 0x0aa1c00c, 0x04001249, 0x07801e49, 0x05401249,
-	0x0aa0c0cc, 0x00000000, 0x04001249, 0x0c078d80, 0x00000000,
-	0x0964624d, 0x060c3009, 0x0ba90bcd, 0x0400134d, 0x0cc00000,
-	0x00000000, 0x0680080d, 0x07801f07, 0x054011c7, 0x040011c7,
-	0x0900230d, 0x07801f08, 0x0aa2800c, 0x05401208, 0x07801e88,
-	0x05401208, 0x0aa1808c, 0x0aa1404c, 0x04001208, 0x07801e48,
-	0x05401208, 0x04001208, 0x0904230d, 0x07801f09, 0x0aa2800c,
-	0x05401249, 0x07801e89, 0x05401249, 0x0aa1808c, 0x0aa1404c,
-	0x04001249, 0x07801e49, 0x05401249, 0x04001249, 0x0c078480,
-	0x00000000, 0x0964624d, 0x060c3009, 0x0ba84bcd, 0x0400134d,
-	0x0cc00000, 0x00000000, 0x07804147, 0x0a6140c7, 0x06099004,
-	0x06099105, 0x0c780240, 0x06099206, 0x06099004, 0x06099104,
-	0x06099205, 0x06099305, 0x06099406, 0x0c780080, 0x06099506,
-	0x0aa3c09a, 0x0aa0805a, 0x0cc00000, 0x07804147, 0x0698d908,
-	0x0aa1c0c7, 0x06d85888, 0x0688d108, 0x0aa10087, 0x06c85088,
-	0x06910948, 0x06d088c8, 0x080c2400, 0x0cc00000, 0x060c2208,
-	0x07804147, 0x0698d908, 0x0aa100c7, 0x06d85888, 0x06800008,
-	0x06d088c8, 0x080c2400, 0x060c2208, 0x07804147, 0x069898c8,
-	0x0aa100c7, 0x06d81848, 0x06800008, 0x06c85008, 0x080c2408,
-	0x0cc00000, 0x060c2208
+	0x07801ec8, 0x05401208, 0x04001208, 0x0c07a400, 0x04400248,
+	0x068009c8, 0x09646248, 0x060c3009, 0x0cc00000, 0x00000000,
+	0x07804147, 0x0aa080c7, 0x0c7807c0, 0x07801f07, 0x07801e88,
+	0x0c079600, 0x07801e89, 0x06800808, 0x09646248, 0x060c3009,
+	0x07801ec7, 0x07801e48, 0x0c079440, 0x07801e89, 0x06800848,
+	0x09646248, 0x060c3009, 0x07801ec7, 0x07801e88, 0x0c079280,
+	0x07801e49, 0x06800908, 0x09646248, 0x060c3009, 0x07801ec7,
+	0x07801e48, 0x0c0790c0, 0x07801e49, 0x06800948, 0x09646248,
+	0x060c3009, 0x0cc00000, 0x00000000, 0x0780038c, 0x0aa0800c,
+	0x0c780880, 0x0680080d, 0x07801f07, 0x054011c7, 0x0900230d,
+	0x07801e88, 0x05401208, 0x0aa2004c, 0x0aa1c00c, 0x04001208,
+	0x07801e48, 0x05401208, 0x0aa0c0cc, 0x00000000, 0x04001208,
+	0x0904230d, 0x07801e89, 0x05401249, 0x0aa2004c, 0x0aa1c00c,
+	0x04001249, 0x07801e49, 0x05401249, 0x0aa0c0cc, 0x00000000,
+	0x04001249, 0x0c078d80, 0x00000000, 0x0964624d, 0x060c3009,
+	0x0ba90bcd, 0x0400134d, 0x0cc00000, 0x00000000, 0x0680080d,
+	0x07801f07, 0x054011c7, 0x040011c7, 0x0900230d, 0x07801f08,
+	0x0aa2800c, 0x05401208, 0x07801e88, 0x05401208, 0x0aa1808c,
+	0x0aa1404c, 0x04001208, 0x07801e48, 0x05401208, 0x04001208,
+	0x0904230d, 0x07801f09, 0x0aa2800c, 0x05401249, 0x07801e89,
+	0x05401249, 0x0aa1808c, 0x0aa1404c, 0x04001249, 0x07801e49,
+	0x05401249, 0x04001249, 0x0c078480, 0x00000000, 0x0964624d,
+	0x060c3009, 0x0ba84bcd, 0x0400134d, 0x0cc00000, 0x00000000,
+	0x07804147, 0x0a6140c7, 0x06099004, 0x06099105, 0x0c780240,
+	0x06099206, 0x06099004, 0x06099104, 0x06099205, 0x06099305,
+	0x06099406, 0x0c780080, 0x06099506, 0x0aa3c09a, 0x0aa0805a,
+	0x0cc00000, 0x07804147, 0x0698d908, 0x0aa1c0c7, 0x06d85888,
+	0x0688d108, 0x0aa10087, 0x06c85088, 0x06910948, 0x06d088c8,
+	0x080c2400, 0x0cc00000, 0x060c2208, 0x07804147, 0x0698d908,
+	0x0aa100c7, 0x06d85888, 0x06800008, 0x06d088c8, 0x080c2400,
+	0x060c2208, 0x07804147, 0x069898c8, 0x0aa100c7, 0x06d81848,
+	0x06800008, 0x06c85008, 0x080c2408, 0x0cc00000, 0x060c2208,
+	0x06435007, 0x0580f1c7, 0x0bef8047, 0x06919607, 0x06c00c87,
+	0x02007c07, 0x06035107, 0x06800207, 0x06035207, 0x06b04807,
+	0x06035007, 0x06435007, 0x0580f1c7, 0x0bef8047, 0x00000000,
+	0x064c5307, 0x07c04847, 0x092101c7, 0x07c04807, 0x064c5407,
+	0x07c048c7, 0x092101c7, 0x07c04887, 0x06919607, 0x06c00c87,
+	0x02007c07, 0x06035107, 0x06800207, 0x06035207, 0x06a04807,
+	0x06035007, 0x06435007, 0x0580f1c7, 0x0bef8047, 0x00000000,
+	0x06435307, 0x0900c1c7, 0x0a6f8007, 0x00000000, 0x07804087,
+	0x078040c8, 0x096101c8, 0x0609d307, 0x06800047, 0x07804048,
+	0x05001208, 0x094211c8, 0x07804208, 0x094411c8, 0x07804148,
+	0x0a60c0c8, 0x06800048, 0x094611c8, 0x0aa1401a, 0x06800088,
+	0x0aa0c05a, 0x06800008, 0x06800048, 0x094821c8, 0x07804288,
+	0x094c11c8, 0x0609d407, 0x08007401, 0x0cc00000, 0x00000000,
+	0x02007c07, 0x060c5507, 0x064c4407, 0x09c07047, 0x060c4407,
+	0x00000000, 0x00000000, 0x064c4407, 0x091011c7, 0x0a6f8007,
+	0x00000000, 0x080c5603, 0x064c5607, 0x090e11c7, 0x0a6f8007,
+	0x00000000, 0x0cc00000, 0x080c5600, 0x02007c07, 0x060c5507,
+	0x064c4407, 0x09c07047, 0x060c4407, 0x00000000, 0x00000000,
+	0x064c4407, 0x091011c7, 0x0a6f8007, 0x00000000, 0x080c5601,
+	0x064c5607, 0x090e11c7, 0x0a6f8007, 0x00000000, 0x0cc00000,
+	0x080c5600, 0x06959e07, 0x06c48d07, 0x060c5307, 0x0690c847,
+	0x06e1d947, 0x060c5407, 0x06800e07, 0x060c4407, 0x0649d207,
+	0x060c4007, 0x06bffe07, 0x06c7ffc7, 0x060c4207, 0x0649d207,
+	0x060c4107, 0x06800087, 0x060c4807, 0x06bffe07, 0x06c7ffc7,
+	0x060c4507, 0x06810e07, 0x060c4407, 0x06810e47, 0x060c4407,
+	0x06810e07, 0x060c4407, 0x068000c7, 0x060c4807, 0x06803087,
+	0x060c4807, 0x06810f07, 0x06c00447, 0x060c4407, 0x0cc00000,
+	0x00000000, 0x00800000, 0x0c07f280, 0x00000000, 0x064c4407,
+	0x09807047, 0x060c4407, 0x0cc00000, 0x00400000
 };
diff --git a/drivers/amlogic/amports/arch/ucode/avs/avs_linux_debug.h b/drivers/amlogic/amports/arch/ucode/avs/avs_linux_debug.h
index 76f8f4a..06993a3 100644
--- a/drivers/amlogic/amports/arch/ucode/avs/avs_linux_debug.h
+++ b/drivers/amlogic/amports/arch/ucode/avs/avs_linux_debug.h
@@ -16,67 +16,81 @@
 */
 
 static const u32 MicroCode[] __initconst = {
-	0x06807801, 0x06800000, 0x0d000001, 0x07400040, 0x0c014880,
+	0x06807801, 0x06800000, 0x0d000001, 0x07400040, 0x0c018740,
 	0x00000000, 0x00000000, 0x00000000, 0x080c0002, 0x06932000,
 	0x09800580, 0x060c1e00, 0x06bfdac0, 0x07c017c0, 0x06030400,
-	0x00400000, 0x0c015ac0, 0x00000000, 0x00000000, 0x00000000,
+	0x00400000, 0x0c019c80, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x0c7ffec0, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x0cc00000, 0x00400000, 0x0cc00000,
-	0x00400000, 0x0c780500, 0x064c0007, 0x0c796180, 0x00000000,
-	0x0c796b80, 0x00000000, 0x0cc00000, 0x00400000, 0x0cc00000,
-	0x00400000, 0x0c796a00, 0x00000000, 0x0cc00000, 0x00400000,
-	0x06800009, 0x07c01fc9, 0x00800000, 0x078017c9, 0x0c7ffe80,
-	0x06030409, 0x06bfd9c9, 0x06030409, 0x00400000, 0x0a2dc047,
-	0x07801509, 0x0aa14009, 0x0a608049, 0x0c78f880, 0x0a608089,
-	0x0c78ed40, 0x0a22c807, 0x0c786280, 0x00000000, 0x0c01a5c0,
-	0x080c0a00, 0x0c01a900, 0x00000000, 0x0c01bbc0, 0x00000000,
-	0x0c7932c0, 0x00000000, 0x0bedd007, 0x078043c8, 0x0aa0c008,
-	0x0a208207, 0x0c793140, 0x078003c7, 0x0a6fc007, 0x078043c7,
-	0x0a648007, 0x064c2907, 0x0be2c407, 0x07800007, 0x0a638007,
-	0x00000000, 0x064c2907, 0x091c11c7, 0x0a628047, 0x00000000,
-	0x064c0607, 0x0900f1c7, 0x0ae18047, 0x068025f1, 0x0c027180,
-	0x078025f2, 0x0c792c40, 0x00000000, 0x0cb8002c, 0x00000000,
-	0x068fdfca, 0x064e0408, 0x02808288, 0x02c08748, 0x060e0408,
-	0x060c071e, 0x064c0324, 0x064c0325, 0x064c2728, 0x09210268,
-	0x07800007, 0x0a618007, 0x07801c08, 0x06c00008, 0x060c0208,
-	0x080c0200, 0x06bfffc9, 0x060c0320, 0x060c0321, 0x07801c48,
-	0x09610209, 0x060c2708, 0x07801847, 0x0a6fc007, 0x07800147,
-	0x07c01b87, 0x06800347, 0x07c00147, 0x060c2507, 0x080c2602,
-	0x080c260f, 0x080c2603, 0x04c001c7, 0x09807207, 0x060c2107,
-	0x07801907, 0x0aa14007, 0x06a01008, 0x0aa0c047, 0x06a22008,
-	0x06a40008, 0x06c00108, 0x060e0508, 0x07801b08, 0x06801809,
-	0x09502248, 0x060c2109, 0x080c260e, 0x06800088, 0x07c01947,
-	0x0ba0c087, 0x040011c7, 0x06800007, 0x07c01907, 0x07800007,
-	0x07c01b47, 0x07801b87, 0x07c01bc7, 0x07c01848, 0x08030580,
-	0x07801d47, 0x0aa1472f, 0x040011c7, 0x078016c8, 0x0a20c048,
-	0x00000000, 0x07c01d47, 0x0683ffc8, 0x064c2307, 0x093041c7,
-	0x0aa0c008, 0x0a6f4007, 0x04401208, 0x07801c8d, 0x0ba13fcd,
-	0x06800008, 0x0c781100, 0x07c01c88, 0x06808008, 0x0ba1070d,
-	0x0400024d, 0x0441c249, 0x0680c008, 0x05403289, 0x0200a24a,
-	0x02008288, 0x07400228, 0x04001208, 0x092102e4, 0x0740020b,
-	0x04001208, 0x07400224, 0x04001208, 0x07400225, 0x04001208,
-	0x092102e5, 0x0740020b, 0x04001208, 0x07400226, 0x04001208,
-	0x092102e6, 0x0740020b, 0x04001208, 0x07400227, 0x04001208,
-	0x092102e7, 0x0740020b, 0x07800988, 0x0ac07bc8, 0x0780000a,
-	0x0aa3872f, 0x040002ca, 0x078016ca, 0x0c7802c0, 0x0942f28b,
-	0x0a61000a, 0x0aa1472f, 0x078016ca, 0x0a20c04a, 0x0a6146c9,
-	0x0400128d, 0x0b60c70d, 0x0680000a, 0x0680070a, 0x07c01c8a,
-	0x0b013bc8, 0x0aa0800a, 0x0a64470a, 0x07801cca, 0x0a20c04a,
-	0x06a0800b, 0x06a0c00b, 0x06b80009, 0x07801d0c, 0x0540928c,
-	0x0200a24a, 0x06c0748a, 0x0200ac0a, 0x0603510a, 0x06803f0a,
-	0x0603520a, 0x0603500b, 0x0c01b580, 0x00000000, 0x07800007,
-	0x040011c7, 0x07c00007, 0x09c1d39d, 0x07800988, 0x0b405207,
-	0x040011c7, 0x0b836207, 0x0c780d40, 0x0981d1dd, 0x06800007,
-	0x07c00007, 0x0981d39d, 0x09c1d3dd, 0x09c1d1dd, 0x078016c8,
-	0x04001208, 0x068000b1, 0x0c024780, 0x04000c88, 0x07801dc9,
-	0x0b828248, 0x07c016c8, 0x07801847, 0x0a6fc007, 0x00000000,
-	0x06430507, 0x0a2f0107, 0x06a00007, 0x060c3d07, 0x07800147,
-	0x0aa24007, 0x06803fcb, 0x07801a88, 0x064e0c09, 0x09010249,
-	0x0b804248, 0x0aa0c00b, 0x0c7ffec0, 0x044012cb, 0x07804147,
-	0x0aa280c7, 0x07800347, 0x07801dc8, 0x0b407207, 0x0c01c6c0,
-	0x07c00348, 0x06800048, 0x07c00308, 0x0c789740, 0x07c00388,
-	0x06800008, 0x07c00308, 0x07c00388, 0x0c78f9c0, 0x064c0007,
+	0x00400000, 0x0c780540, 0x064c0007, 0x0c79a5c0, 0x00000000,
+	0x0c79afc0, 0x00000000, 0x0cc00000, 0x00400000, 0x0cc00000,
+	0x00400000, 0x0c79ae40, 0x00000000, 0x0cc00000, 0x00400000,
+	0x06800009, 0x07c01fc9, 0x07c00409, 0x00800000, 0x078017c9,
+	0x0c7ffe40, 0x06030409, 0x06bfd9c9, 0x06030409, 0x00400000,
+	0x0a2d8047, 0x07801509, 0x0aa14009, 0x0a608049, 0x0c792d40,
+	0x0a608089, 0x0c7918c0, 0x0a23c807, 0x0c787fc0, 0x00000000,
+	0x0649d008, 0x0aa0c008, 0x0809c701, 0x0c780000, 0x0c01e8c0,
+	0x080c0a00, 0x0c01ec00, 0x00000000, 0x0c01fec0, 0x00000000,
+	0x0c797040, 0x00000000, 0x0becd007, 0x078043c8, 0x0aa24008,
+	0x0a220207, 0x06900007, 0x0c02cd80, 0x06c00c87, 0x064c4407,
+	0x09807047, 0x060c4407, 0x0c796d40, 0x078003c7, 0x0a6fc007,
+	0x078043c7, 0x0a648007, 0x064c2907, 0x0be2c407, 0x07800007,
+	0x0a638007, 0x00000000, 0x064c2907, 0x091c11c7, 0x0a628047,
+	0x00000000, 0x064c0607, 0x0900f1c7, 0x0ae18047, 0x068025f1,
+	0x0c02d700, 0x078025f2, 0x0c796840, 0x00000000, 0x0cb8002d,
+	0x00000000, 0x068fdfca, 0x064e0408, 0x02808288, 0x02c08748,
+	0x060e0408, 0x060c071e, 0x064c0324, 0x064c0325, 0x064c2728,
+	0x09210268, 0x07800007, 0x0a618007, 0x07801c08, 0x06c00008,
+	0x060c0208, 0x080c0200, 0x06bfffc9, 0x060c0320, 0x060c0321,
+	0x07801c48, 0x09610209, 0x060c2708, 0x07801847, 0x0a6fc007,
+	0x07800147, 0x07c01b87, 0x06800347, 0x07c00147, 0x06803e88,
+	0x060c1a08, 0x060c2507, 0x080c2602, 0x080c260f, 0x080c2603,
+	0x078043c7, 0x0aa60007, 0x07804407, 0x0a658007, 0x064c2607,
+	0x0a6fc007, 0x00000000, 0x064c2307, 0x093041c7, 0x0a6ec007,
+	0x00000000, 0x064c1a07, 0x0ae34007, 0x0c02a5c0, 0x00000000,
+	0x0649d407, 0x0a6fc007, 0x06910007, 0x0c02c680, 0x06c00c87,
+	0x080c2800, 0x080c0002, 0x06800047, 0x0c7fe140, 0x07c04407,
+	0x07800147, 0x04c001c7, 0x09807207, 0x060c2107, 0x07801907,
+	0x0aa14007, 0x06a01008, 0x0aa0c047, 0x06a22008, 0x06a40008,
+	0x06c00108, 0x060e0508, 0x07801b08, 0x06801809, 0x09502248,
+	0x060c2109, 0x080c260e, 0x06800088, 0x07c01947, 0x0ba0c087,
+	0x040011c7, 0x06800007, 0x07c01907, 0x07800007, 0x07c01b47,
+	0x07801b87, 0x07c01bc7, 0x07c01848, 0x08030580, 0x07801d47,
+	0x0aa1472f, 0x040011c7, 0x078016c8, 0x0a20c048, 0x00000000,
+	0x07c01d47, 0x0683ffc8, 0x064c2307, 0x093041c7, 0x0aa0c008,
+	0x0a6f4007, 0x04401208, 0x07801c8d, 0x0ba13fcd, 0x06800008,
+	0x0c781100, 0x07c01c88, 0x06808008, 0x0ba1070d, 0x0400024d,
+	0x0441c249, 0x0680c008, 0x05403289, 0x0200a24a, 0x02008288,
+	0x07400228, 0x04001208, 0x092102e4, 0x0740020b, 0x04001208,
+	0x07400224, 0x04001208, 0x07400225, 0x04001208, 0x092102e5,
+	0x0740020b, 0x04001208, 0x07400226, 0x04001208, 0x092102e6,
+	0x0740020b, 0x04001208, 0x07400227, 0x04001208, 0x092102e7,
+	0x0740020b, 0x07800988, 0x0ac07bc8, 0x0780000a, 0x0aa3872f,
+	0x040002ca, 0x078016ca, 0x0c7802c0, 0x0942f28b, 0x0a61000a,
+	0x0aa1472f, 0x078016ca, 0x0a20c04a, 0x0a6146c9, 0x0400128d,
+	0x0b60c70d, 0x0680000a, 0x0680070a, 0x07c01c8a, 0x0b013bc8,
+	0x0aa0800a, 0x0a64470a, 0x07801cca, 0x0a20c04a, 0x06a0800b,
+	0x06a0c00b, 0x06b80009, 0x07801d0c, 0x0540928c, 0x0200a24a,
+	0x06c00c8a, 0x0200ac0a, 0x0603510a, 0x06803f0a, 0x0603520a,
+	0x0603500b, 0x0c01f000, 0x00000000, 0x07800007, 0x040011c7,
+	0x07c00007, 0x09c1d39d, 0x07800988, 0x0b405207, 0x040011c7,
+	0x0b855207, 0x0c781500, 0x0981d1dd, 0x06800007, 0x07c00007,
+	0x0981d39d, 0x09c1d3dd, 0x09c1d1dd, 0x078016c8, 0x04001208,
+	0x068000b1, 0x0c02a600, 0x04000c88, 0x07801dc9, 0x0b847248,
+	0x07c016c8, 0x07801847, 0x0a6fc007, 0x00000000, 0x07804447,
+	0x0a60c007, 0x06430507, 0x0a2e8107, 0x06a00007, 0x060c3d07,
+	0x078043c7, 0x0aa1c007, 0x06900007, 0x0c029280, 0x06c00c87,
+	0x064c4407, 0x09807047, 0x060c4407, 0x07800147, 0x0aa24007,
+	0x06803fcb, 0x07801a88, 0x064e0c09, 0x09010249, 0x0b804248,
+	0x0aa0c00b, 0x0c7ffec0, 0x044012cb, 0x07804147, 0x0aa600c7,
+	0x07800347, 0x07801dc8, 0x0b415207, 0x0c01fec0, 0x07c00348,
+	0x06800048, 0x07c00308, 0x0a62001a, 0x07804407, 0x0a618007,
+	0x078043c7, 0x0aa10007, 0x064c0007, 0x0be08207, 0x0c7fd040,
+	0x07804407, 0x0aa14007, 0x07c00388, 0x06900007, 0x0c0296c0,
+	0x06c00c87, 0x0c78b140, 0x00000000, 0x06800008, 0x07c00308,
+	0x07c00388, 0x07804407, 0x0aa18007, 0x06900007, 0x0c029440,
+	0x06c00c87, 0x06800007, 0x07c04407, 0x0c792700, 0x064c0007,
 	0x0b60c709, 0x06808008, 0x0680c008, 0x0c780400, 0x06800007,
 	0x07800007, 0x09508787, 0x078016c9, 0x09408789, 0x07800989,
 	0x0b009bc9, 0x06808008, 0x0aad0007, 0x07801c89, 0x040011c9,
@@ -85,7 +99,7 @@ static const u32 MicroCode[] __initconst = {
 	0x07000209, 0x04001208, 0x07000220, 0x09610809, 0x04001208,
 	0x07000221, 0x04001208, 0x07000209, 0x09610849, 0x04001208,
 	0x07000222, 0x04001208, 0x07000209, 0x09610889, 0x04001208,
-	0x07000223, 0x04001208, 0x07000209, 0x096108c9, 0x0c7fb540,
+	0x07000223, 0x04001208, 0x07000209, 0x096108c9, 0x0c7fa3c0,
 	0x00000000, 0x068fdfca, 0x064e0408, 0x02808288, 0x02c08748,
 	0x060e0408, 0x060c071e, 0x064c0324, 0x064c0325, 0x064c0326,
 	0x064c0327, 0x064c2728, 0x060c071e, 0x09210268, 0x07800007,
@@ -93,45 +107,59 @@ static const u32 MicroCode[] __initconst = {
 	0x06c00008, 0x060c0208, 0x06800008, 0x06c00008, 0x060c0208,
 	0x06800008, 0x06c00008, 0x060c0208, 0x06bfffc9, 0x060c0320,
 	0x060c0321, 0x060c0322, 0x060c0323, 0x07801c48, 0x09610209,
-	0x060c2708, 0x07804287, 0x054031c7, 0x04c301c7, 0x07801f8a,
-	0x095011ca, 0x060c2507, 0x0780184a, 0x0a6fc00a, 0x07800147,
-	0x07c01b87, 0x064c2307, 0x09304207, 0x0a6f8008, 0x090a1207,
-	0x090241c7, 0x095211c8, 0x064c0609, 0x09010249, 0x0aa10009,
-	0x00000000, 0x06800007, 0x06800008, 0x07c00147, 0x0aa60347,
-	0x060c2507, 0x0aa60287, 0x0aa18048, 0x0a60c007, 0x0c780200,
-	0x00000000, 0x080c2605, 0x080c2606, 0x080c2607, 0x080c2602,
-	0x080c260f, 0x080c2603, 0x07801ac8, 0x0aa100c8, 0x06800089,
-	0x0c7fb800, 0x07c01ac9, 0x0780184b, 0x0a6fc00b, 0x00000000,
-	0x07c01b08, 0x0c7fb680, 0x07c01ac9, 0x080c2602, 0x080c260f,
-	0x080c2603, 0x07801ac8, 0x0aa48088, 0x068000c9, 0x07800008,
-	0x0aa0c008, 0x0c7fb400, 0x07c01ac9, 0x06803fcb, 0x07801a88,
-	0x064e0c09, 0x09010249, 0x0b804248, 0x0aa0c00b, 0x0c7ffec0,
-	0x044012cb, 0x06800088, 0x068000c9, 0x0680180b, 0x060c210b,
-	0x0780184b, 0x0a6fc00b, 0x00000000, 0x07c01b08, 0x0c7faf80,
-	0x07c01ac9, 0x0a271007, 0x06802631, 0x0c021680, 0x07802632,
-	0x0c0142c0, 0x080c0a00, 0x0c014600, 0x00000000, 0x0c015400,
-	0x00000000, 0x064c000a, 0x09c0a18a, 0x0980a20a, 0x0980a00a,
-	0x060c000a, 0x080c2300, 0x064c1e08, 0x09c081c8, 0x09808008,
-	0x060c1e08, 0x098081c8, 0x09c08008, 0x060c1e08, 0x064c080a,
-	0x0980a34a, 0x060c080a, 0x0c0147c0, 0x00000000, 0x064c1a07,
-	0x0aa10007, 0x06800008, 0x0c78ca80, 0x00000000, 0x064c1e0a,
-	0x0980a60a, 0x060c1e0a, 0x06809009, 0x060c0809, 0x0fc08280,
-	0x06800071, 0x0c020d00, 0x04000c8a, 0x0aa3ec0a, 0x0649c108,
-	0x0aa2c008, 0x0aa12cca, 0x0aa1ad8a, 0x0ae22bca, 0x0c78a800,
-	0x06800007, 0x0c780980, 0x07c00387, 0x06800007, 0x0c781ec0,
-	0x07c00387, 0x0c78c480, 0x00000000, 0x0fc08280, 0x07c0400a,
-	0x0609c40a, 0x0fc08280, 0x0fc01280, 0x0500128a, 0x07c0404a,
-	0x0fc0e1c0, 0x07c04087, 0x0609c107, 0x0fc0e1c0, 0x07c040c7,
-	0x0609c207, 0x0fc021c0, 0x0fc031c0, 0x0fc041c0, 0x0609c007,
-	0x0fc041c0, 0x0609c307, 0x0fc091c0, 0x0fc091c0, 0x0fc011c0,
-	0x0fc0c1c0, 0x0fc011c0, 0x07c04107, 0x0fc011c0, 0x0fc091c0,
-	0x0fc091c0, 0x0fc031c0, 0x0c78bcc0, 0x00000000, 0x06800007,
+	0x060c2708, 0x06803e88, 0x060c1a08, 0x07804287, 0x054031c7,
+	0x04c301c7, 0x07801f8a, 0x095011ca, 0x060c2507, 0x0780184a,
+	0x0a6fc00a, 0x07800147, 0x07c01b87, 0x064c2307, 0x09304207,
+	0x0a6f8008, 0x090a1207, 0x090241c7, 0x095211c8, 0x064c0609,
+	0x09010249, 0x0aa10009, 0x00000000, 0x06800007, 0x06800008,
+	0x07c00147, 0x0aa40347, 0x060c2507, 0x0aa3c287, 0x0aa48048,
+	0x0a63c007, 0x078043c7, 0x0aa1c007, 0x00000000, 0x064c1a07,
+	0x0ae10007, 0x06800047, 0x0c7fd2c0, 0x07c04447, 0x07800147,
+	0x0c7806c0, 0x00000000, 0x0c780900, 0x0c780940, 0x00000000,
+	0x080c2605, 0x080c2606, 0x080c2607, 0x080c2602, 0x080c260f,
+	0x080c2603, 0x078043c7, 0x0aa38007, 0x0a63409a, 0x064c2607,
+	0x0a6fc007, 0x00000000, 0x064c2307, 0x093041c7, 0x0a6ec007,
+	0x00000000, 0x064c1a07, 0x0ae10007, 0x06800047, 0x0c7fcc00,
+	0x07c04447, 0x07800147, 0x07801ac8, 0x0aa100c8, 0x06800089,
+	0x0c7fa8c0, 0x07c01ac9, 0x0780184b, 0x0a6fc00b, 0x00000000,
+	0x07c01b08, 0x0c7fa740, 0x07c01ac9, 0x080c2602, 0x080c260f,
+	0x080c2603, 0x078043c7, 0x0aa40007, 0x064c2607, 0x0a6fc007,
+	0x00000000, 0x064c2307, 0x093041c7, 0x0a6ec007, 0x00000000,
+	0x064c1a07, 0x0ae1c007, 0x0a60c05a, 0x068000c7, 0x07c04487,
+	0x06800047, 0x0c7fc400, 0x07c04447, 0x07800147, 0x07801ac8,
+	0x0aa48088, 0x068000c9, 0x07800008, 0x0aa0c008, 0x0c7fa040,
+	0x07c01ac9, 0x06803fcb, 0x07801a88, 0x064e0c09, 0x09010249,
+	0x0b804248, 0x0aa0c00b, 0x0c7ffec0, 0x044012cb, 0x06800088,
+	0x068000c9, 0x0680180b, 0x060c210b, 0x0780184b, 0x0a6fc00b,
+	0x00000000, 0x07c01b08, 0x0c7f9bc0, 0x07c01ac9, 0x0be0d007,
+	0x0c780a80, 0x00000000, 0x0c0169c0, 0x080c0a00, 0x0c016d00,
+	0x00000000, 0x0c017b00, 0x00000000, 0x064c000a, 0x09c0a18a,
+	0x0980a20a, 0x0980a00a, 0x060c000a, 0x080c2300, 0x064c1e08,
+	0x09c081c8, 0x09808008, 0x060c1e08, 0x098081c8, 0x09c08008,
+	0x060c1e08, 0x064c080a, 0x0980a34a, 0x060c080a, 0x0c016ec0,
+	0x00000000, 0x064c1807, 0x09807207, 0x060c1807, 0x09c07207,
+	0x060c1807, 0x078043c7, 0x0aa14007, 0x07804407, 0x0a60c007,
+	0x0a60801a, 0x0c7f8ec0, 0x00000000, 0x0649d00a, 0x0aa0c00a,
+	0x0809c701, 0x0c780000, 0x064c1e0a, 0x0980a60a, 0x060c1e0a,
+	0x06809009, 0x060c0809, 0x0fc08280, 0x06800071, 0x0c025540,
+	0x04000c8a, 0x0aa3ec0a, 0x0649c108, 0x0aa2c008, 0x0aa12cca,
+	0x0aa1ad8a, 0x0ae22bca, 0x0c78bdc0, 0x06800007, 0x0c780980,
+	0x07c00387, 0x06800007, 0x0c7821c0, 0x07c00387, 0x0c78e340,
+	0x00000000, 0x0fc08280, 0x07c0400a, 0x0609c40a, 0x0fc08280,
+	0x0fc01280, 0x0500128a, 0x07c0404a, 0x0fc0e1c0, 0x07c04087,
+	0x0609c107, 0x0fc0e1c0, 0x07c040c7, 0x0609c207, 0x0fc021c0,
+	0x0fc031c0, 0x0fc041c0, 0x0609c007, 0x0fc041c0, 0x0609c307,
+	0x0fc091c0, 0x0fc091c0, 0x0fc011c0, 0x0fc0c1c0, 0x0fc011c0,
+	0x07c04107, 0x0fc011c0, 0x0fc091c0, 0x0fc091c0, 0x0fc031c0,
+	0x0c78db80, 0x00000000, 0x0a63001a, 0x07800007, 0x0a614007,
+	0x078016c7, 0x07801dc8, 0x0b407207, 0x0a806287, 0x07804407,
+	0x0a610007, 0x078043c7, 0x0aa08007, 0x0c7f7cc0, 0x06800007,
 	0x07c01f87, 0x07804007, 0x0a611207, 0x0fc101c0, 0x0fc011c0,
 	0x0fc071c0, 0x0fc011c0, 0x0aa10007, 0x00000000, 0x0fc0c1c0,
-	0x0fc0c1c0, 0x0fc011c0, 0x07802047, 0x07c02007, 0x07802087,
-	0x07c02047, 0x0fc081c0, 0x07c02087, 0x07804107, 0x0aa10007,
-	0x0c016ac0, 0x080c2301, 0x07c01f47, 0x0fc011c0, 0x07802088,
-	0x095c1207, 0x07c02088, 0x050011c7, 0x07c01807, 0x0aa30007,
+	0x0fc0c1c0, 0x0fc011c0, 0x07800a47, 0x07c00a07, 0x07800a87,
+	0x07c00a47, 0x0fc081c0, 0x07c00a87, 0x07804107, 0x0aa10007,
+	0x0c018c00, 0x080c2301, 0x07c01f47, 0x0fc011c0, 0x07800a88,
+	0x095c1207, 0x07c00a88, 0x050011c7, 0x07c01807, 0x0aa30007,
 	0x068000c8, 0x0fc011c0, 0x0a624007, 0x068000c8, 0x0fc011c0,
 	0x07c04187, 0x0a60c007, 0x06800048, 0x06800088, 0x0c780140,
 	0x07c04148, 0x07c04148, 0x0fc011c0, 0x07c04187, 0x0fc011c0,
@@ -140,106 +168,121 @@ static const u32 MicroCode[] __initconst = {
 	0x0aa18007, 0x06800008, 0x07804147, 0x0aa0c0c7, 0x00000000,
 	0x0fc01200, 0x07c04288, 0x0fc041c0, 0x0fc011c0, 0x07c042c7,
 	0x0a648007, 0x06800008, 0x0fc011c0, 0x0aa34007, 0x06800009,
-	0x0c015e40, 0x080c2301, 0x0c015ec0, 0x00000000, 0x07c04307,
-	0x0c015d00, 0x080c2301, 0x0c015d80, 0x00000000, 0x0c780100,
+	0x0c017f80, 0x080c2301, 0x0c018000, 0x00000000, 0x07c04307,
+	0x0c017e40, 0x080c2301, 0x0c017ec0, 0x00000000, 0x0c780100,
 	0x07c04347, 0x07c04308, 0x07c04349, 0x06800007, 0x07c00107,
-	0x0c782ac0, 0x0680001a, 0x07804007, 0x0a611207, 0x0fc101c0,
-	0x0fc011c0, 0x0fc071c0, 0x0fc021c0, 0x0a60c047, 0x0c780180,
-	0x0680005a, 0x0fc081c0, 0x07c020c7, 0x0c780240, 0x0680009a,
-	0x07802047, 0x07c02007, 0x07802087, 0x07c02047, 0x0fc081c0,
-	0x07c02087, 0x07c020c7, 0x06800271, 0x0c01e5c0, 0x04000c9a,
-	0x07804107, 0x0aa10007, 0x0c0153c0, 0x080c2301, 0x07c01f47,
-	0x0fc011c0, 0x078020c8, 0x095c1207, 0x0aa0c09a, 0x07c020c8,
-	0x07c02088, 0x050011c7, 0x07c01807, 0x0aa34007, 0x068000c8,
-	0x0fc011c0, 0x0a628007, 0x068000c8, 0x0fc011c0, 0x0fc011c0,
-	0x07c04187, 0x0a60c007, 0x06800048, 0x06800088, 0x0c780140,
-	0x07c04148, 0x07c04148, 0x0fc011c0, 0x07c04187, 0x0fc011c0,
-	0x07c041c7, 0x0fc011c0, 0x07c04207, 0x0fc061c0, 0x07c04247,
-	0x078020c7, 0x048ff207, 0x07c01f08, 0x091c11c7, 0x0aa5c007,
-	0x07802007, 0x091c1207, 0x0a610008, 0x048ff1c7, 0x054011c7,
-	0x048ff1c7, 0x07c01e47, 0x07802047, 0x091c1207, 0x0a610008,
-	0x048ff1c7, 0x054011c7, 0x048ff1c7, 0x07c01e87, 0x07802087,
+	0x0c782dc0, 0x0680001a, 0x0a63001a, 0x07800007, 0x0a614007,
+	0x078016c7, 0x07801dc8, 0x0b407207, 0x0a806287, 0x07804407,
+	0x0a610007, 0x078043c7, 0x0aa08007, 0x0c7f63c0, 0x07804007,
+	0x0a611207, 0x0fc101c0, 0x0fc011c0, 0x0fc071c0, 0x0fc021c0,
+	0x0a60c047, 0x0c780180, 0x0680005a, 0x0fc081c0, 0x07c00ac7,
+	0x0c780240, 0x0680009a, 0x07800a47, 0x07c00a07, 0x07800a87,
+	0x07c00a47, 0x0fc081c0, 0x07c00a87, 0x07c00ac7, 0x06800271,
+	0x0c022800, 0x04000c9a, 0x07804107, 0x0aa10007, 0x0c017200,
+	0x080c2301, 0x07c01f47, 0x0fc011c0, 0x07800ac8, 0x095c1207,
+	0x0aa0c09a, 0x07c00ac8, 0x07c00a88, 0x050011c7, 0x07c01807,
+	0x0aa34007, 0x068000c8, 0x0fc011c0, 0x0a628007, 0x068000c8,
+	0x0fc011c0, 0x0fc011c0, 0x07c04187, 0x0a60c007, 0x06800048,
+	0x06800088, 0x0c780140, 0x07c04148, 0x07c04148, 0x0fc011c0,
+	0x07c04187, 0x0fc011c0, 0x07c041c7, 0x0fc011c0, 0x07c04207,
+	0x0fc061c0, 0x07c04247, 0x07800ac7, 0x048ff207, 0x07c01f08,
+	0x091c11c7, 0x0aa5c007, 0x07800a07, 0x091c1207, 0x0a610008,
+	0x048ff1c7, 0x054011c7, 0x048ff1c7, 0x07c01e47, 0x07800a47,
 	0x091c1207, 0x0a610008, 0x048ff1c7, 0x054011c7, 0x048ff1c7,
-	0x0c780b40, 0x07c01ec7, 0x07802007, 0x091c1207, 0x0aa2c008,
-	0x048ff1c7, 0x058011c7, 0x07801f08, 0x0b4031c8, 0x06804009,
-	0x02008248, 0x024091c8, 0x0ba0e009, 0x0c7fff80, 0x040801c7,
-	0x07c01e47, 0x07802047, 0x091c1207, 0x0aa2c008, 0x048ff1c7,
-	0x058011c7, 0x07801f08, 0x0b4031c8, 0x06804009, 0x02008248,
-	0x024091c8, 0x0ba0e009, 0x0c7fff80, 0x040801c7, 0x07c01e87,
-	0x07802087, 0x091c1207, 0x0aa2c008, 0x048ff1c7, 0x058011c7,
-	0x07801f08, 0x0b0031c8, 0x06804009, 0x02408248, 0x02409207,
-	0x0ba0e009, 0x0c7fff80, 0x044801c7, 0x048ff1c7, 0x07c01ec7,
-	0x0a61409a, 0x07804147, 0x0a60c0c7, 0x0c780240, 0x06800808,
-	0x0fc011c0, 0x07c00087, 0x0a6f0007, 0x06800808, 0x06800047,
-	0x09505207, 0x09605207, 0x060c2108, 0x0fc011c0, 0x0fc011c0,
-	0x07c01f87, 0x0fc021c0, 0x0fc011c0, 0x07c04287, 0x0fc011c0,
-	0x07c042c7, 0x0a648007, 0x06800008, 0x0fc011c0, 0x0aa34007,
-	0x06800009, 0x0c013380, 0x080c2301, 0x0c013400, 0x00000000,
-	0x07c04307, 0x0c013240, 0x080c2301, 0x0c0132c0, 0x00000000,
-	0x0c780100, 0x07c04347, 0x07c04308, 0x07c04349, 0x06800007,
-	0x07c00107, 0x07804007, 0x0aa25207, 0x00000000, 0x06802007,
-	0x06c02007, 0x060e1907, 0x060e1a07, 0x060e1b07, 0x0c781640,
-	0x00000000, 0x0fc011c0, 0x064e1c09, 0x097e1247, 0x0aa20047,
-	0x060e1c09, 0x06802007, 0x06c02007, 0x060e1907, 0x060e1a07,
-	0x0c781200, 0x060e1b07, 0x0fc011c0, 0x0fc011c0, 0x06800009,
-	0x07c01009, 0x0a630007, 0x07c01049, 0x0c012900, 0x080c2301,
-	0x0c012980, 0x00000000, 0x07c01007, 0x0c0127c0, 0x080c2301,
-	0x0c012840, 0x00000000, 0x07c01047, 0x0fc021c0, 0x0fc02200,
-	0x064e1c09, 0x09602248, 0x07801008, 0x09405248, 0x07801048,
-	0x09505248, 0x060e1c09, 0x0aa30047, 0x06802008, 0x07c01088,
-	0x06801888, 0x07c010c8, 0x06801a88, 0x07c01108, 0x06801d08,
-	0x07c01148, 0x07c01188, 0x0c7802c0, 0x06802008, 0x068021c8,
-	0x07c01088, 0x068023c8, 0x07c010c8, 0x07c01108, 0x06802808,
-	0x07c01148, 0x07c01188, 0x06803548, 0x07c011c8, 0x0aa2c007,
-	0x06801089, 0x0c011e40, 0x080c2301, 0x0c011ec0, 0x00000000,
-	0x07000248, 0x020081c8, 0x07400248, 0x0bae51c9, 0x04001249,
-	0x07801088, 0x078010c9, 0x09609209, 0x060e1908, 0x07801108,
-	0x07801149, 0x09609209, 0x060e1a08, 0x07801188, 0x078011c9,
-	0x09609209, 0x060e1b08, 0x0fc011c0, 0x07c043c7, 0x0aa0c007,
-	0x06800007, 0x0687ffc7, 0x07c01c07, 0x064c510a, 0x064c4607,
-	0x07801308, 0x05410208, 0x078012c9, 0x02008248, 0x05802208,
-	0x0e000288, 0x00000000, 0x00000000, 0x00000000, 0x0f000200,
-	0x0f010280, 0x0970820a, 0x05402208, 0x020081c8, 0x064c430a,
-	0x02408288, 0x064c400a, 0x02408288, 0x07c01348, 0x05810208,
-	0x07c01388, 0x0c013000, 0x00000000, 0x0680001e, 0x07c0001e,
-	0x07c016de, 0x0981d39e, 0x0981d3dd, 0x09c1d1dd, 0x07804087,
-	0x0400f1c7, 0x058041c7, 0x060c0907, 0x07c00987, 0x04401247,
-	0x07c00609, 0x09708789, 0x05404287, 0x078040c8, 0x0400f208,
-	0x05804208, 0x05404248, 0x04401249, 0x05402249, 0x07c009c8,
-	0x07804149, 0x0aa0c0c9, 0x04000248, 0x05801249, 0x07c01dc9,
-	0x04401248, 0x09608789, 0x04000248, 0x09610247, 0x06095209,
-	0x05404208, 0x0780408a, 0x0400f28a, 0x0580428a, 0x0540428a,
-	0x078040c8, 0x0400f208, 0x05804208, 0x05404208, 0x0961020a,
-	0x06090808, 0x0c005c80, 0x07c013da, 0x06a00007, 0x060c3d07,
-	0x064c3d08, 0x09161208, 0x0a6f8008, 0x06800008, 0x06c06c08,
-	0x0aa1009a, 0x02008c08, 0x0c780400, 0x060c3808, 0x05803208,
-	0x07804147, 0x0aa200c7, 0x06800109, 0x0aa18047, 0x06800009,
-	0x07801f87, 0x0aa0c007, 0x068000c9, 0x06800009, 0x097a3209,
-	0x060c3908, 0x06bfffc8, 0x060c3808, 0x0c00bd80, 0x00000000,
-	0x0c00c0c0, 0x00000000, 0x0c00cec0, 0x00000000, 0x069898c8,
-	0x06d81848, 0x06800707, 0x0d000007, 0x060c2208, 0x07800387,
-	0x0aa10007, 0x06800007, 0x0c7f0f80, 0x07c00387, 0x0649c909,
-	0x0aa10009, 0x06800087, 0x0c7f0e40, 0x07c01507, 0x07801487,
-	0x0a608007, 0x0c780900, 0x044011c7, 0x0aa0c087, 0x07801549,
-	0x078015c9, 0x0ae7c0c9, 0x040301c9, 0x070001c7, 0x054101c7,
-	0x04034209, 0x07000208, 0x094101c8, 0x0609cb07, 0x040381c9,
-	0x070001c7, 0x07800fc8, 0x020081c8, 0x0609ca08, 0x07c00fd9,
-	0x040941c9, 0x070001c7, 0x054101c7, 0x04090209, 0x07000208,
-	0x094101c8, 0x0609cc07, 0x04029209, 0x04001249, 0x07000208,
-	0x09464248, 0x07801808, 0x094e1248, 0x0609c909, 0x08007401,
-	0x06800009, 0x07c01489, 0x06800009, 0x07c01509, 0x078014c7,
-	0x02c07247, 0x04000295, 0x0a238047, 0x06800008, 0x04000296,
-	0x0a22c087, 0x06800048, 0x04000297, 0x0a220107, 0x06800088,
-	0x04000298, 0x0a214207, 0x068000c8, 0x06800047, 0x0c7f0000,
-	0x07c01507, 0x07801607, 0x090041c7, 0x0a8051c8, 0x0aa2001a,
+	0x07c01e87, 0x07800a87, 0x091c1207, 0x0a610008, 0x048ff1c7,
+	0x054011c7, 0x048ff1c7, 0x0c780b40, 0x07c01ec7, 0x07800a07,
+	0x091c1207, 0x0aa2c008, 0x048ff1c7, 0x058011c7, 0x07801f08,
+	0x0b4031c8, 0x06804009, 0x02008248, 0x024091c8, 0x0ba0e009,
+	0x0c7fff80, 0x040801c7, 0x07c01e47, 0x07800a47, 0x091c1207,
+	0x0aa2c008, 0x048ff1c7, 0x058011c7, 0x07801f08, 0x0b4031c8,
+	0x06804009, 0x02008248, 0x024091c8, 0x0ba0e009, 0x0c7fff80,
+	0x040801c7, 0x07c01e87, 0x07800a87, 0x091c1207, 0x0aa2c008,
+	0x048ff1c7, 0x058011c7, 0x07801f08, 0x0b0031c8, 0x06804009,
+	0x02408248, 0x02409207, 0x0ba0e009, 0x0c7fff80, 0x044801c7,
+	0x048ff1c7, 0x07c01ec7, 0x0a61409a, 0x07804147, 0x0a60c0c7,
+	0x0c780240, 0x06800808, 0x0fc011c0, 0x07c00087, 0x0a6f0007,
+	0x06800808, 0x06800047, 0x09505207, 0x09605207, 0x060c2108,
+	0x0fc011c0, 0x0fc011c0, 0x07c01f87, 0x0fc021c0, 0x0fc011c0,
+	0x07c04287, 0x0fc011c0, 0x07c042c7, 0x0a648007, 0x06800008,
+	0x0fc011c0, 0x0aa34007, 0x06800009, 0x0c0151c0, 0x080c2301,
+	0x0c015240, 0x00000000, 0x07c04307, 0x0c015080, 0x080c2301,
+	0x0c015100, 0x00000000, 0x0c780100, 0x07c04347, 0x07c04308,
+	0x07c04349, 0x06800007, 0x07c00107, 0x07804007, 0x0aa25207,
+	0x00000000, 0x06802007, 0x06c02007, 0x060e1907, 0x060e1a07,
+	0x060e1b07, 0x0c781a00, 0x00000000, 0x0fc011c0, 0x064e1c09,
+	0x097e1247, 0x0aa20047, 0x060e1c09, 0x06802007, 0x06c02007,
+	0x060e1907, 0x060e1a07, 0x0c7813c0, 0x060e1b07, 0x0fc011c0,
+	0x0fc011c0, 0x06800009, 0x07c01109, 0x0a630007, 0x07c01149,
+	0x0c014740, 0x080c2301, 0x0c0147c0, 0x00000000, 0x07c01107,
+	0x0c014600, 0x080c2301, 0x0c014680, 0x00000000, 0x07c01147,
+	0x0fc021c0, 0x0fc02200, 0x064e1c09, 0x09602248, 0x07801108,
+	0x09405248, 0x07801148, 0x09505248, 0x060e1c09, 0x0aa30047,
+	0x06802008, 0x07c01188, 0x06801888, 0x07c011c8, 0x06801a88,
+	0x07c01208, 0x06801d08, 0x07c01248, 0x07c01288, 0x0c7802c0,
+	0x06802008, 0x068021c8, 0x07c01188, 0x068023c8, 0x07c011c8,
+	0x07c01208, 0x06802808, 0x07c01248, 0x07c01288, 0x06803548,
+	0x07c012c8, 0x0a61c0c7, 0x06802008, 0x06c02008, 0x060e1908,
+	0x060e1a08, 0x0c780640, 0x060e1b08, 0x0aa2c007, 0x06801189,
+	0x0c013ac0, 0x080c2301, 0x0c013b40, 0x00000000, 0x07000248,
+	0x020081c8, 0x07400248, 0x0bae52c9, 0x04001249, 0x07801188,
+	0x078011c9, 0x09609209, 0x060e1908, 0x07801208, 0x07801249,
+	0x09609209, 0x060e1a08, 0x07801288, 0x078012c9, 0x09609209,
+	0x060e1b08, 0x0fc011c0, 0x07c043c7, 0x06800009, 0x0aa0c007,
+	0x06c04049, 0x06800009, 0x060c0d09, 0x0aa18007, 0x06800007,
+	0x07804407, 0x0a60c007, 0x06800007, 0x0687ffc7, 0x07c01c07,
+	0x064c510a, 0x064c4607, 0x07800888, 0x05410208, 0x07800849,
+	0x02008248, 0x05802208, 0x0e000288, 0x00000000, 0x00000000,
+	0x00000000, 0x0f000200, 0x0f010280, 0x0970820a, 0x05402208,
+	0x020081c8, 0x064c430a, 0x02408288, 0x064c400a, 0x02408288,
+	0x07c008c8, 0x05810208, 0x07c00908, 0x0c014a80, 0x00000000,
+	0x0680001e, 0x07c0001e, 0x07c016de, 0x0981d39e, 0x0981d3dd,
+	0x09c1d1dd, 0x07804087, 0x0400f1c7, 0x058041c7, 0x060c0907,
+	0x07c00987, 0x04401247, 0x07c00609, 0x09708789, 0x05404287,
+	0x078040c8, 0x0400f208, 0x05804208, 0x05404248, 0x04401249,
+	0x05402249, 0x07c009c8, 0x07804149, 0x0aa0c0c9, 0x04000248,
+	0x05801249, 0x07c01dc9, 0x04401248, 0x09608789, 0x04000248,
+	0x09610247, 0x06095209, 0x05404208, 0x0780408a, 0x0400f28a,
+	0x0580428a, 0x0540428a, 0x078040c8, 0x0400f208, 0x05804208,
+	0x05404208, 0x0961020a, 0x06090808, 0x0c007480, 0x07c0095a,
+	0x06a00007, 0x060c3d07, 0x064c3d08, 0x09161208, 0x0a6f8008,
+	0x06800008, 0x06c00408, 0x0aa1009a, 0x02008c08, 0x0c780400,
+	0x060c3808, 0x05803208, 0x07804147, 0x0aa200c7, 0x06800109,
+	0x0aa18047, 0x06800009, 0x07801f87, 0x0aa0c007, 0x068000c9,
+	0x06800009, 0x097a3209, 0x060c3908, 0x06bfffc8, 0x060c3808,
+	0x0c00d800, 0x00000000, 0x0c00db40, 0x00000000, 0x0c00e940,
+	0x00000000, 0x069898c8, 0x06d81848, 0x06800707, 0x0d000007,
+	0x060c2208, 0x07804409, 0x06800007, 0x07c04407, 0x07800387,
+	0x0aa24007, 0x06800007, 0x07c00387, 0x0a610009, 0x07804449,
+	0x0a608009, 0x0c7ee400, 0x0c785b80, 0x00000000, 0x0649c909,
+	0x0aa10009, 0x06800087, 0x0c7ee280, 0x07c01507, 0x07801487,
+	0x0a608007, 0x0c781240, 0x044011c7, 0x0aa0c087, 0x07801549,
+	0x078015c9, 0x0780148b, 0x044012cb, 0x0aa1008b, 0x0680008a,
+	0x078044ca, 0x07c044cb, 0x07804487, 0x0aa34007, 0x0a6100c7,
+	0x0680008b, 0x0c780500, 0x07c0448b, 0x0a614047, 0x0aa2408a,
+	0x06800007, 0x0c780140, 0x07c04487, 0x0a61400a, 0x06800047,
+	0x07c04487, 0x07804447, 0x0aa2c007, 0x06800048, 0x03408248,
+	0x06bfffc7, 0x030081c8, 0x078014c7, 0x02807207, 0x07c014c7,
+	0x06803fc9, 0x06800007, 0x07c04447, 0x07800807, 0x044011c7,
+	0x0b0021c9, 0x0c780840, 0x040801c9, 0x070001c7, 0x054101c7,
+	0x040a0209, 0x07000208, 0x094101c8, 0x0609cb07, 0x040b01c9,
+	0x070001c7, 0x078010c8, 0x020081c8, 0x0609ca08, 0x07c010d9,
+	0x040d01c9, 0x070001c7, 0x054101c7, 0x040c0209, 0x07000208,
+	0x094101c8, 0x0609cc07, 0x04090209, 0x04001249, 0x058031c9,
+	0x09502247, 0x07000208, 0x09464248, 0x07801808, 0x094e1248,
+	0x0609c909, 0x08007401, 0x06800009, 0x07c01489, 0x06800009,
+	0x07c01509, 0x078014c7, 0x02c07247, 0x0680004b, 0x06800008,
+	0x0280a2c7, 0x0aa2000a, 0x054012cb, 0x04001208, 0x0780080a,
+	0x0b8fb288, 0x0680004a, 0x0c7ecc00, 0x07c0150a, 0x078007cb,
+	0x05401288, 0x0200a2ca, 0x040012ca, 0x0950828b, 0x0c780080,
+	0x0960828b, 0x07801607, 0x090041c7, 0x0a8051c8, 0x0aa2001a,
 	0x07801607, 0x090841c7, 0x0a4051c8, 0x06800047, 0x03407207,
-	0x0c7ff980, 0x02c091c9, 0x07801347, 0x04090248, 0x07400247,
-	0x07801387, 0x04004249, 0x07400247, 0x07804187, 0x054031c7,
-	0x02c07687, 0x04029248, 0x07400247, 0x040301c8, 0x07800f49,
-	0x074001c9, 0x040341c8, 0x07800f09, 0x0a60c05a, 0x074001c9,
-	0x040006c8, 0x0a62009a, 0x040381c8, 0x074001d9, 0x07000709,
-	0x0aa1c009, 0x04401249, 0x0c780140, 0x07400709, 0x07800f89,
-	0x074001c9, 0x04000707, 0x07c00f99, 0x06800231, 0x0c017280,
+	0x0c7ff8c0, 0x02c091c9, 0x078008c7, 0x040c0248, 0x07400247,
+	0x07800907, 0x04004249, 0x07400247, 0x07804187, 0x054031c7,
+	0x02c07687, 0x04090248, 0x07400247, 0x040801c8, 0x07801049,
+	0x074001c9, 0x040a01c8, 0x07801009, 0x0a60c05a, 0x074001c9,
+	0x040006c8, 0x0a62009a, 0x040b01c8, 0x074001d9, 0x07000709,
+	0x0aa1c009, 0x04401249, 0x0c780140, 0x07400709, 0x07801089,
+	0x074001c9, 0x04000707, 0x07c01099, 0x06800231, 0x0c01a500,
 	0x04000c88, 0x06800047, 0x03407207, 0x078014c9, 0x02c091c9,
 	0x07c014c9, 0x0609b20a, 0x0609b00a, 0x0609b10a, 0x068000c9,
 	0x0400125a, 0x07c01489, 0x0a60809a, 0x0c780340, 0x07801587,
@@ -248,294 +291,335 @@ static const u32 MicroCode[] __initconst = {
 	0x00000000, 0x07c01548, 0x0649c108, 0x0aa2c008, 0x07800187,
 	0x0b61c087, 0x06800048, 0x0aa1c09a, 0x0aa0801a, 0x0aa14007,
 	0x040011c7, 0x07c00187, 0x0c780180, 0x07c001c8, 0x06800008,
-	0x07c001c8, 0x0c782340, 0x00000000, 0x06800131, 0x0c016740,
-	0x04000c9a, 0x0aa0c01a, 0x06801a6c, 0x068057ec, 0x0c004800,
-	0x00000000, 0x0c008900, 0x00000000, 0x0c0159c0, 0x00000000,
-	0x0c004c40, 0x00000000, 0x0c781f40, 0x00000000, 0x0c781ec0,
-	0x00000000, 0x078001c7, 0x0aaf4007, 0x00000000, 0x0400024a,
-	0x07800107, 0x0b4031c9, 0x0c781cc0, 0x00000000, 0x07c00109,
-	0x078040c7, 0x0682bc08, 0x0b004207, 0x00000000, 0x0fc031c0,
-	0x094e3247, 0x07c00349, 0x07804148, 0x0aa200c8, 0x07801dc8,
-	0x0b806209, 0x00000000, 0x07800307, 0x0a608007, 0x0c781880,
-	0x02409209, 0x078016c8, 0x0a805209, 0x07c016c9, 0x0680001e,
-	0x07c0001e, 0x09408789, 0x0981d39d, 0x0981d3dd, 0x09c1d1dd,
-	0x0c003c80, 0x00000000, 0x0c007d80, 0x00000000, 0x0c014e40,
-	0x00000000, 0x0c0040c0, 0x00000000, 0x07804208, 0x0a610008,
-	0x07804247, 0x0fc01200, 0x0fc061c0, 0x07c00207, 0x094e11c8,
-	0x060c0a07, 0x0a61001a, 0x06800007, 0x0c7808c0, 0x07c01e07,
-	0x0fc011c0, 0x07c01e07, 0x08094200, 0x0a60c007, 0x0c780740,
-	0x00000000, 0x06815448, 0x06094208, 0x0680c008, 0x06094008,
-	0x07800087, 0x0aa18087, 0x06800047, 0x07804147, 0x0aa0c0c7,
-	0x06800087, 0x06800107, 0x0fc08200, 0x0fc08240, 0x09509248,
-	0x06094109, 0x0fc01200, 0x0fc08200, 0x0fc08240, 0x09509248,
-	0x06094109, 0x06094109, 0x0fc01200, 0x0aed4047, 0x044011c7,
-	0x0fc01200, 0x07c00048, 0x08094000, 0x078043c7, 0x0a60c007,
-	0x0c780540, 0x00000000, 0x0fc071c0, 0x080c2940, 0x07800207,
-	0x07804208, 0x094e11c8, 0x09807187, 0x098073c7, 0x060c0a07,
-	0x09c073c7, 0x09807387, 0x060c0a07, 0x0c009540, 0x080c0600,
-	0x064c0a07, 0x091c21c7, 0x0a6f8007, 0x00000000, 0x0c780100,
-	0x00000000, 0x0c009340, 0x080c0600, 0x07801e07, 0x0aa14007,
-	0x07800048, 0x094211c8, 0x05001208, 0x094411c8, 0x060c1807,
-	0x0cb8002c, 0x00000000, 0x064c0007, 0x0a2fc047, 0x00000000,
-	0x064c3a07, 0x090061c7, 0x0aaec647, 0x00000000, 0x080c0a00,
-	0x080c2300, 0x064c1e07, 0x09807547, 0x060c1e07, 0x080c2800,
-	0x080c0002, 0x0c7ec380, 0x00000000, 0x0649c015, 0x0649c116,
-	0x0649c217, 0x0649c318, 0x0809c000, 0x0809c100, 0x0809c200,
-	0x0809c300, 0x06804004, 0x06814105, 0x06824206, 0x0c000a40,
-	0x00000000, 0x08002501, 0x08002605, 0x08002708, 0x0800290d,
-	0x08002815, 0x08002c14, 0x06800000, 0x07c01c00, 0x0cc00000,
-	0x00000000, 0x06800007, 0x07c01907, 0x07c01987, 0x07c019c7,
+	0x07c001c8, 0x0c782c40, 0x00000000, 0x06800131, 0x0c0199c0,
+	0x04000c9a, 0x0aa0c01a, 0x06801d2d, 0x0680696d, 0x0c005680,
+	0x00000000, 0x0c009780, 0x00000000, 0x0c016840, 0x00000000,
+	0x0c005ac0, 0x00000000, 0x0c782840, 0x00000000, 0x0c7827c0,
+	0x00000000, 0x0a62c01a, 0x07800007, 0x0a610007, 0x078016c7,
+	0x0aa1c007, 0x0a806287, 0x07804407, 0x0a610007, 0x078043c7,
+	0x0aa08007, 0x0c7ec940, 0x07804407, 0x0a67c007, 0x0400024a,
+	0x06808031, 0x0c0191c0, 0x06698432, 0x06810007, 0x06298407,
+	0x064c4607, 0x060c5307, 0x064c4807, 0x09807187, 0x060c4807,
+	0x064c4107, 0x0609d107, 0x078043c7, 0x0aa1c007, 0x06900007,
+	0x0c017a80, 0x06c00c87, 0x064c4407, 0x09807047, 0x060c4407,
+	0x078001c7, 0x0a608007, 0x0c7ff680, 0x0400024a, 0x07800107,
+	0x0b4031c9, 0x0c781d40, 0x00000000, 0x07c00109, 0x078040c7,
+	0x0682bc08, 0x0b004207, 0x00000000, 0x0fc031c0, 0x094e3247,
+	0x07c00349, 0x07804148, 0x0aa200c8, 0x07801dc8, 0x0b806209,
+	0x00000000, 0x07800307, 0x0a608007, 0x0c781900, 0x02409209,
+	0x078016c8, 0x0a805209, 0x07c016c9, 0x0680001e, 0x07c0001e,
+	0x09408789, 0x0981d39d, 0x0981d3dd, 0x09c1d1dd, 0x0c004280,
+	0x00000000, 0x0c008380, 0x00000000, 0x0c015440, 0x00000000,
+	0x0c0046c0, 0x00000000, 0x07804208, 0x0a610008, 0x07804247,
+	0x0fc01200, 0x0fc061c0, 0x07c00207, 0x094e11c8, 0x060c0a07,
+	0x0a61001a, 0x06800007, 0x0c7808c0, 0x07c01e07, 0x0fc011c0,
+	0x07c01e07, 0x08094200, 0x0a60c007, 0x0c780740, 0x00000000,
+	0x06815448, 0x06094208, 0x0680c008, 0x06094008, 0x07800087,
+	0x0aa18087, 0x06800047, 0x07804147, 0x0aa0c0c7, 0x06800087,
+	0x06800107, 0x0fc08200, 0x0fc08240, 0x09509248, 0x06094109,
+	0x0fc01200, 0x0fc08200, 0x0fc08240, 0x09509248, 0x06094109,
+	0x06094109, 0x0fc01200, 0x0aed4047, 0x044011c7, 0x0fc01200,
+	0x07c00048, 0x08094000, 0x07804407, 0x0a60c007, 0x078043c7,
+	0x0a60c007, 0x0c780540, 0x00000000, 0x0fc071c0, 0x080c2940,
+	0x07800207, 0x07804208, 0x094e11c8, 0x09807187, 0x098073c7,
+	0x060c0a07, 0x09c073c7, 0x09807387, 0x060c0a07, 0x0c009ac0,
+	0x080c0600, 0x064c0a07, 0x091c21c7, 0x0a6f8007, 0x00000000,
+	0x0c780100, 0x00000000, 0x0c0098c0, 0x080c0600, 0x07801e07,
+	0x0aa14007, 0x07800048, 0x094211c8, 0x05001208, 0x094411c8,
+	0x060c1807, 0x0cb8002d, 0x00000000, 0x064c0007, 0x0a2fc047,
+	0x00000000, 0x064c3a07, 0x090061c7, 0x0aaec647, 0x00000000,
+	0x080c0a00, 0x080c2300, 0x064c1e07, 0x09807547, 0x060c1e07,
+	0x080c2800, 0x080c0002, 0x0c7e84c0, 0x00000000, 0x0649cf30,
+	0x06900007, 0x0c015600, 0x06c00c87, 0x0c015e80, 0x00000000,
+	0x06910007, 0x0c0154c0, 0x06c00c87, 0x06900007, 0x0c015880,
+	0x06c00c87, 0x064c4407, 0x09807047, 0x060c4407, 0x0649c107,
+	0x07c00807, 0x0649c007, 0x07c007c7, 0x080c0800, 0x06804004,
+	0x0680c085, 0x06814106, 0x0c000a40, 0x00000000, 0x08002501,
+	0x08002605, 0x08002708, 0x0800290d, 0x08002815, 0x08002c14,
+	0x06800000, 0x07c01c00, 0x0cc00000, 0x00000000, 0x06800007,
+	0x07c01907, 0x07c01987, 0x07c019c7, 0x07800607, 0x040011c7,
+	0x07c01887, 0x06800047, 0x060e0c07, 0x07c01a87, 0x07c018c7,
+	0x068003c7, 0x07c00147, 0x06805c07, 0x060c2107, 0x080c2170,
+	0x06800087, 0x07c01ac7, 0x0680001f, 0x07804148, 0x05406208,
+	0x0940321a, 0x07800387, 0x09461207, 0x060c0408, 0x06800008,
+	0x07c01a48, 0x0cc00000, 0x00000000, 0x0649cf30, 0x064c4002,
+	0x064c4203, 0x02403083, 0x040080c3, 0x07c00843, 0x058100c3,
+	0x07c00883, 0x06800019, 0x07c01499, 0x07c014d9, 0x07c01519,
+	0x064c0919, 0x0680001a, 0x07c0019a, 0x07c001da, 0x068000c2,
+	0x07c04142, 0x06803fc2, 0x07c01542, 0x07c01582, 0x07c015c2,
+	0x07c01602, 0x060c0919, 0x060c1a19, 0x06932002, 0x060c1e02,
+	0x06800002, 0x060c0c02, 0x06c04042, 0x060c0d02, 0x0cc00000,
+	0x00000000, 0x0649c803, 0x0aa14003, 0x078014c2, 0x028020c2,
+	0x07c014c2, 0x0809c800, 0x07801502, 0x0aa0c002, 0x06800102,
+	0x06030502, 0x064c0003, 0x0a2100c3, 0x06800002, 0x0c780a80,
+	0x00000000, 0x064c3a03, 0x090060c3, 0x0a60cac3, 0x0c780940,
+	0x00000000, 0x07804143, 0x0aa080c3, 0x0c780840, 0x064c4403,
+	0x091210c3, 0x0aa78003, 0x068fffc3, 0x07801fc2, 0x04001082,
+	0x0b81c0c2, 0x07c01fc2, 0x06800002, 0x07c01fc2, 0x07800402,
+	0x04001082, 0x0b8160c2, 0x07c00402, 0x064c0003, 0x09803203,
+	0x09803183, 0x09803003, 0x060c0003, 0x06802671, 0x0c014740,
+	0x07802672, 0x06800002, 0x064c1803, 0x095860c2, 0x09803483,
+	0x060c1803, 0x09c03483, 0x060c1803, 0x06800103, 0x06030503,
+	0x06800002, 0x07c01fc2, 0x07c00402, 0x0cc00000, 0x00000000,
+	0x064c442e, 0x09121bae, 0x0aaf802e, 0x0c7e5c00, 0x00000000,
+	0x0c004ac0, 0x00000000, 0x06818109, 0x06c34749, 0x06090709,
+	0x06490b09, 0x09809009, 0x098090c9, 0x06090b09, 0x09c09009,
+	0x09c090c9, 0x0962225a, 0x06090b09, 0x06800009, 0x06c00c89,
+	0x02009c09, 0x06094409, 0x06880009, 0x06c00c89, 0x02009c09,
+	0x06094509, 0x0cc00000, 0x00000000, 0x07804149, 0x0a60c0c9,
+	0x0cc00000, 0x00000000, 0x06490707, 0x09807087, 0x098070c7,
+	0x06090707, 0x06495107, 0x098073c7, 0x0cc00000, 0x06095107,
+	0x0cc00000, 0x00400000, 0x064e1210, 0x091e1410, 0x0bef0050,
+	0x00000000, 0x0649d910, 0x0900c410, 0x0aef8190, 0x07801850,
+	0x0aa3c090, 0x0c7821c0, 0x06800011, 0x06c04011, 0x060e1211,
+	0x078016d1, 0x0a20c051, 0x0680001f, 0x0688001f, 0x06c00c9f,
+	0x0201fc1f, 0x06800010, 0x07c01b10, 0x0c7813c0, 0x06800110,
+	0x07801b11, 0x0aa08091, 0x0c780f00, 0x07801892, 0x0aebc092,
+	0x0aa3c72f, 0x07801b50, 0x05406410, 0x078016d1, 0x05801451,
+	0x0be0c051, 0x06800011, 0x06880011, 0x06c00c91, 0x02011c11,
+	0x02010450, 0x04440410, 0x060e1310, 0x0c780340, 0x040c07d0,
+	0x05405410, 0x078016d1, 0x0be0c051, 0x06800011, 0x06880011,
+	0x06c00c91, 0x02011c11, 0x02010450, 0x04420410, 0x060e1310,
+	0x040607d0, 0x07801952, 0x0aa14012, 0x06a2c211, 0x0aa0c052,
+	0x06a2c011, 0x06a2c111, 0x06c04011, 0x060e1211, 0x06800010,
+	0x07c01b10, 0x06800110, 0x0c7816c0, 0x07c01850, 0x07801991,
+	0x06800192, 0x02411491, 0x02411491, 0x02411491, 0x07801a50,
+	0x05409410, 0x02010450, 0x05403450, 0x02011c11, 0x060e1311,
+	0x07801952, 0x0aa34012, 0x06a44211, 0x0aa2c052, 0x06a44011,
+	0x0c780240, 0x06a44111, 0x0a63c0d1, 0x07801a90, 0x064e0c12,
+	0x09010492, 0x0b8ea490, 0x0cc00000, 0x00400000, 0x06c0c011,
+	0x060e1211, 0x0680001f, 0x06800010, 0x07c01b10, 0x06800150,
+	0x0c780e80, 0x07c01850, 0x078018d1, 0x0aa1c011, 0x04401451,
+	0x07c018d1, 0x07801891, 0x04401451, 0x0c780b00, 0x07c01891,
+	0x078019d1, 0x07c01a11, 0x07801a50, 0x05409410, 0x02010450,
+	0x06800192, 0x02011491, 0x07c019d1, 0x05403450, 0x02011c11,
+	0x060e1311, 0x07801952, 0x0aa14012, 0x06a16211, 0x0aa0c052,
+	0x06a16011, 0x06a16111, 0x07801bd2, 0x0aa28012, 0x07801a90,
+	0x064e0c12, 0x09010492, 0x0b804490, 0x07801a12, 0x0c7fde80,
+	0x07c019d2, 0x04001410, 0x07c01a90, 0x07c01d91, 0x06c00011,
+	0x060e1211, 0x06800050, 0x0c780400, 0x07c01850, 0x0ba30110,
+	0x0c7ff540, 0x0a6f8050, 0x07801891, 0x0aa74011, 0x04401451,
+	0x0b26c051, 0x07c01891, 0x07801ad0, 0x0aa0c0d0, 0x00000000,
+	0x080c2170, 0x06800010, 0x07c01850, 0x0cc00000, 0x00400000,
+	0x0aa0c010, 0x0688001f, 0x0680001f, 0x06c00c9f, 0x0c780a40,
+	0x0201fc1f, 0x0aa0c72f, 0x090a841f, 0x090c741f, 0x07800992,
+	0x0b823490, 0x0a8f5490, 0x091a141f, 0x0aa20010, 0x0688001f,
+	0x0c780180, 0x0680001f, 0x0aa7001f, 0x07801991, 0x0c7ffcc0,
+	0x00000000, 0x06c00c9f, 0x0201fc1f, 0x07801a50, 0x05409410,
+	0x06800192, 0x02411491, 0x02010450, 0x05403450, 0x02011c11,
+	0x060e1311, 0x07801d90, 0x09004450, 0x0aa14011, 0x06a14210,
+	0x0aa0c111, 0x06a14010, 0x06a14110, 0x06c08010, 0x060e0d1f,
+	0x0aa0c72f, 0x040207df, 0x040207df, 0x0c7ff4c0, 0x060e1210,
+	0x07801a50, 0x05409410, 0x02010450, 0x06800192, 0x02011491,
+	0x07c01991, 0x05403450, 0x02011c11, 0x060e1311, 0x07801d90,
+	0x0a61801f, 0x09c101d0, 0x060e1210, 0x068000d0, 0x0c7ff0c0,
+	0x07c01850, 0x06c08010, 0x060e0d1f, 0x0aae872f, 0x040207df,
+	0x0c7ffe00, 0x040207df, 0x0c000d00, 0x00000000, 0x08095007,
+	0x08095000, 0x07804347, 0x07804308, 0x094a51c8, 0x078042c8,
+	0x095411c8, 0x06096e07, 0x0aa0c008, 0x06800088, 0x06800048,
+	0x060c3108, 0x06800048, 0x0780098a, 0x068002c9, 0x0b00324a,
+	0x00000000, 0x06800008, 0x06498e0a, 0x097c1288, 0x06098e0a,
+	0x06497f08, 0x068000ca, 0x0970220a, 0x06097f08, 0x06820988,
+	0x06c00208, 0x0968221a, 0x0780098a, 0x0b20c2ca, 0x068004ca,
+	0x06800c0a, 0x0970620a, 0x0cc00000, 0x06095108, 0x0683ffc8,
+	0x06490909, 0x0a210049, 0x0aa0c008, 0x0c7fff40, 0x04401208,
+	0x06490b09, 0x09809009, 0x098090c9, 0x06090b09, 0x09c09009,
+	0x09c090c9, 0x06090b09, 0x0cc00000, 0x00000000, 0x0683ffc9,
+	0x0649bb08, 0x0920c208, 0x0649530a, 0x0900128a, 0x02008288,
+	0x0aa10008, 0x0aa0c009, 0x0c7ffe40, 0x04401249, 0x0cc00000,
+	0x00000000, 0x064e1209, 0x091e1249, 0x0bef8049, 0x064e0009,
+	0x064e0e0b, 0x064e0c0c, 0x083f0040, 0x083f0000, 0x0680020d,
+	0x0d00000d, 0x00000000, 0x060e0009, 0x060e0e0b, 0x0cc00000,
+	0x060e0c0c, 0x0c07fc40, 0x00000000, 0x06490b09, 0x09809009,
+	0x09809089, 0x06090b09, 0x09c09009, 0x09c09089, 0x06090b09,
+	0x08095007, 0x08095000, 0x0c000500, 0x00000000, 0x06800007,
+	0x07c00307, 0x06800007, 0x07c01907, 0x07c01987, 0x07c019c7,
 	0x07800607, 0x040011c7, 0x07c01887, 0x06800047, 0x060e0c07,
-	0x07c01a87, 0x07c018c7, 0x068003c7, 0x07c00147, 0x06805c07,
-	0x060c2107, 0x080c2170, 0x06800087, 0x07c01ac7, 0x0680001f,
-	0x07804148, 0x05406208, 0x0940321a, 0x07800387, 0x09461207,
-	0x060c0408, 0x06868008, 0x07c01a48, 0x0cc00000, 0x00000000,
-	0x0649cf30, 0x064c4002, 0x064c4203, 0x02403083, 0x040080c3,
-	0x07c012c3, 0x058100c3, 0x07c01303, 0x06800019, 0x07c01499,
-	0x07c014d9, 0x07c01519, 0x064c0919, 0x0680001a, 0x07c0019a,
-	0x07c001da, 0x068000c2, 0x07c04142, 0x06803fc2, 0x07c01542,
-	0x07c01582, 0x07c015c2, 0x07c01602, 0x060c0919, 0x060c1a19,
-	0x06932002, 0x060c1e02, 0x06800002, 0x060c0c02, 0x06c04042,
-	0x060c0d02, 0x0cc00000, 0x00000000, 0x0649c803, 0x0aa14003,
-	0x078014c2, 0x028020c2, 0x07c014c2, 0x0809c800, 0x07801502,
-	0x0aa0c002, 0x06800102, 0x06030502, 0x064c0003, 0x0a2100c3,
-	0x06800002, 0x0c780840, 0x00000000, 0x064c3a03, 0x090060c3,
-	0x0aa74ac3, 0x07804143, 0x0a66c0c3, 0x064c4403, 0x091210c3,
-	0x0aa60003, 0x068fffc3, 0x07801fc2, 0x04001082, 0x0b8150c2,
-	0x07c01fc2, 0x064c0003, 0x09803203, 0x09803183, 0x09803003,
-	0x060c0003, 0x06802671, 0x0c012300, 0x07802672, 0x06800002,
-	0x064c1803, 0x095860c2, 0x09803483, 0x060c1803, 0x09c03483,
-	0x060c1803, 0x06800103, 0x06030503, 0x06800002, 0x07c01fc2,
-	0x0cc00000, 0x00000000, 0x064c442e, 0x09121bae, 0x0aaf802e,
-	0x0c7ea040, 0x00000000, 0x0c004ac0, 0x00000000, 0x06818109,
-	0x06c34749, 0x06090709, 0x06490b09, 0x09809009, 0x098090c9,
-	0x06090b09, 0x09c09009, 0x09c090c9, 0x0962225a, 0x06090b09,
-	0x06800009, 0x06c07489, 0x02009c09, 0x06094409, 0x06880009,
-	0x06c07489, 0x02009c09, 0x06094509, 0x0cc00000, 0x00000000,
-	0x07804149, 0x0a60c0c9, 0x0cc00000, 0x00000000, 0x06490707,
-	0x09807087, 0x098070c7, 0x06090707, 0x06495107, 0x098073c7,
-	0x0cc00000, 0x06095107, 0x0cc00000, 0x00400000, 0x064e1210,
-	0x091e1410, 0x0bef0050, 0x00000000, 0x0649d910, 0x0900c410,
-	0x0aef8190, 0x07801850, 0x0aa3c090, 0x0c7821c0, 0x06800011,
-	0x06c04011, 0x060e1211, 0x078016d1, 0x0a20c051, 0x0680001f,
-	0x0688001f, 0x06c0749f, 0x0201fc1f, 0x06800010, 0x07c01b10,
-	0x0c7813c0, 0x06800110, 0x07801b11, 0x0aa08091, 0x0c780f00,
-	0x07801892, 0x0aebc092, 0x0aa3c72f, 0x07801b50, 0x05406410,
-	0x078016d1, 0x05801451, 0x0be0c051, 0x06800011, 0x06880011,
-	0x06c07491, 0x02011c11, 0x02010450, 0x04440410, 0x060e1310,
-	0x0c780340, 0x040c07d0, 0x05405410, 0x078016d1, 0x0be0c051,
-	0x06800011, 0x06880011, 0x06c07491, 0x02011c11, 0x02010450,
-	0x04420410, 0x060e1310, 0x040607d0, 0x07801952, 0x0aa14012,
-	0x06a2c211, 0x0aa0c052, 0x06a2c011, 0x06a2c111, 0x06c04011,
-	0x060e1211, 0x06800010, 0x07c01b10, 0x06800110, 0x0c7816c0,
-	0x07c01850, 0x07801991, 0x06800192, 0x02411491, 0x02411491,
-	0x02411491, 0x07801a50, 0x05409410, 0x02010450, 0x05403450,
-	0x02011c11, 0x060e1311, 0x07801952, 0x0aa34012, 0x06a44211,
-	0x0aa2c052, 0x06a44011, 0x0c780240, 0x06a44111, 0x0a63c0d1,
-	0x07801a90, 0x064e0c12, 0x09010492, 0x0b8ea490, 0x0cc00000,
-	0x00400000, 0x06c0c011, 0x060e1211, 0x0680001f, 0x06800010,
-	0x07c01b10, 0x06800150, 0x0c780e80, 0x07c01850, 0x078018d1,
-	0x0aa1c011, 0x04401451, 0x07c018d1, 0x07801891, 0x04401451,
-	0x0c780b00, 0x07c01891, 0x078019d1, 0x07c01a11, 0x07801a50,
-	0x05409410, 0x02010450, 0x06800192, 0x02011491, 0x07c019d1,
-	0x05403450, 0x02011c11, 0x060e1311, 0x07801952, 0x0aa14012,
-	0x06a16211, 0x0aa0c052, 0x06a16011, 0x06a16111, 0x07801bd2,
-	0x0aa28012, 0x07801a90, 0x064e0c12, 0x09010492, 0x0b804490,
-	0x07801a12, 0x0c7fde80, 0x07c019d2, 0x04001410, 0x07c01a90,
-	0x07c01d91, 0x06c00011, 0x060e1211, 0x06800050, 0x0c780400,
-	0x07c01850, 0x0ba30110, 0x0c7ff540, 0x0a6f8050, 0x07801891,
-	0x0aa74011, 0x04401451, 0x0b26c051, 0x07c01891, 0x07801ad0,
-	0x0aa0c0d0, 0x00000000, 0x080c2170, 0x06800010, 0x07c01850,
-	0x0cc00000, 0x00400000, 0x0aa0c010, 0x0688001f, 0x0680001f,
-	0x06c0749f, 0x0c780a40, 0x0201fc1f, 0x0aa0c72f, 0x090a841f,
-	0x090c741f, 0x07800992, 0x0b823490, 0x0a8f5490, 0x091a141f,
-	0x0aa20010, 0x0688001f, 0x0c780180, 0x0680001f, 0x0aa7001f,
-	0x07801991, 0x0c7ffcc0, 0x00000000, 0x06c0749f, 0x0201fc1f,
-	0x07801a50, 0x05409410, 0x06800192, 0x02411491, 0x02010450,
-	0x05403450, 0x02011c11, 0x060e1311, 0x07801d90, 0x09004450,
-	0x0aa14011, 0x06a14210, 0x0aa0c111, 0x06a14010, 0x06a14110,
-	0x06c08010, 0x060e0d1f, 0x0aa0c72f, 0x040207df, 0x040207df,
-	0x0c7ff4c0, 0x060e1210, 0x07801a50, 0x05409410, 0x02010450,
-	0x06800192, 0x02011491, 0x07c01991, 0x05403450, 0x02011c11,
-	0x060e1311, 0x07801d90, 0x0a61801f, 0x09c101d0, 0x060e1210,
-	0x068000d0, 0x0c7ff0c0, 0x07c01850, 0x06c08010, 0x060e0d1f,
-	0x0aae872f, 0x040207df, 0x0c7ffe00, 0x040207df, 0x0c000d00,
-	0x00000000, 0x08095007, 0x08095000, 0x07804347, 0x07804308,
-	0x094a51c8, 0x078042c8, 0x095411c8, 0x06096e07, 0x0aa0c008,
-	0x06800088, 0x06800048, 0x060c3108, 0x06800048, 0x0780098a,
-	0x068002c9, 0x0b00324a, 0x00000000, 0x06800008, 0x06498e0a,
-	0x097c1288, 0x06098e0a, 0x06497f08, 0x068000ca, 0x0970220a,
-	0x06097f08, 0x06820988, 0x06c00208, 0x0968221a, 0x0780098a,
-	0x0b20c2ca, 0x068004ca, 0x06800c0a, 0x0970620a, 0x0cc00000,
-	0x06095108, 0x0683ffc8, 0x06490909, 0x0a210049, 0x0aa0c008,
-	0x0c7fff40, 0x04401208, 0x06490b09, 0x09809009, 0x098090c9,
-	0x06090b09, 0x09c09009, 0x09c090c9, 0x06090b09, 0x0cc00000,
-	0x00000000, 0x0683ffc9, 0x0649bb08, 0x0920c208, 0x0649530a,
-	0x0900128a, 0x02008288, 0x0aa10008, 0x0aa0c009, 0x0c7ffe40,
-	0x04401249, 0x0cc00000, 0x00000000, 0x064e1209, 0x091e1249,
-	0x0bef8049, 0x064e0009, 0x064e0e0b, 0x064e0c0c, 0x083f0040,
-	0x083f0000, 0x0680020d, 0x0d00000d, 0x00000000, 0x060e0009,
-	0x060e0e0b, 0x0cc00000, 0x060e0c0c, 0x0c07fc40, 0x00000000,
-	0x06490b09, 0x09809009, 0x09809089, 0x06090b09, 0x09c09009,
-	0x09c09089, 0x06090b09, 0x08095007, 0x08095000, 0x0c000500,
-	0x00000000, 0x06800007, 0x07c00307, 0x06800007, 0x07c01907,
-	0x07c01987, 0x07c019c7, 0x07800607, 0x040011c7, 0x07c01887,
-	0x06800047, 0x060e0c07, 0x07c01a87, 0x07c018c7, 0x068003c7,
-	0x07c00147, 0x06800007, 0x0cc00000, 0x07c01847, 0x0683ffc9,
-	0x06498f0a, 0x0aa0c009, 0x0a6f800a, 0x04401249, 0x064c3d0a,
-	0x0580a28a, 0x0bef80ca, 0x00000000, 0x06498e0a, 0x0980a00a,
-	0x06800fc9, 0x09706289, 0x06098e0a, 0x06800009, 0x09706289,
-	0x09c0a00a, 0x0cc00000, 0x06098e0a, 0x064c3a08, 0x09006208,
-	0x064c0809, 0x064c090a, 0x064c1e0b, 0x064c380c, 0x06800407,
-	0x063f0007, 0x06800007, 0x063f0007, 0x00000000, 0x00000000,
-	0x00000000, 0x00000000, 0x060c0809, 0x060c090a, 0x060c1e0b,
-	0x060c380c, 0x0c07ef00, 0x00000000, 0x06800009, 0x060c0c09,
-	0x06c04049, 0x060c0d09, 0x064c1809, 0x09586248, 0x09809489,
-	0x060c1809, 0x09c09489, 0x060c1809, 0x0cc00000, 0x080c0a01,
-	0x0680072f, 0x06bfffcb, 0x06800024, 0x07801c20, 0x06800021,
-	0x06800025, 0x06800022, 0x06800026, 0x06800023, 0x06800027,
-	0x0680800a, 0x0680070e, 0x0740028b, 0x0400128a, 0x074002a4,
-	0x0400128a, 0x074002a0, 0x0400128a, 0x074002a1, 0x0400128a,
-	0x074002a5, 0x0400128a, 0x074002a2, 0x0400128a, 0x074002a6,
-	0x0400128a, 0x074002a3, 0x0400128a, 0x074002a7, 0x0d07fbce,
-	0x0400128a, 0x07c01c4b, 0x096102cb, 0x080c0700, 0x060c270b,
-	0x09610824, 0x060c0220, 0x09610865, 0x0aa1801a, 0x060c0221,
-	0x096108a6, 0x060c0222, 0x096108e7, 0x060c0223, 0x0780098e,
-	0x0b009bce, 0x06b80007, 0x06c07487, 0x02007c07, 0x06035107,
-	0x06803f07, 0x06035207, 0x06a08007, 0x06035007, 0x07800007,
-	0x0a60c007, 0x06803fc7, 0x07c01c87, 0x06800007, 0x07c01d47,
-	0x0ac0bbce, 0x07801c87, 0x0b613fc7, 0x0ba0c707, 0x0441c1c7,
-	0x07c01c87, 0x06435007, 0x0580f1c7, 0x0bef8047, 0x0cc00000,
-	0x00000000, 0x06435007, 0x0580f1c7, 0x0bef8047, 0x00000000,
-	0x06435307, 0x0900c1c7, 0x0a6f8007, 0x00000000, 0x06b80007,
-	0x06c07487, 0x02007c07, 0x06035107, 0x06803f07, 0x06035207,
-	0x06b0c007, 0x06035007, 0x054011ef, 0x0ac051ce, 0x06800087,
-	0x07c01cc7, 0x0c7ff880, 0x07c01d07, 0x06b90008, 0x06c07488,
-	0x02008c08, 0x0540126f, 0x02009bc9, 0x0680008a, 0x07c01cca,
-	0x068000ca, 0x06435007, 0x0580f1c7, 0x0bef8047, 0x06803f07,
-	0x06035108, 0x06035207, 0x06a08007, 0x06035007, 0x0ac0324e,
-	0x0c7ff3c0, 0x07c01d0a, 0x06808007, 0x020081c8, 0x02009bc9,
-	0x0c7ffc80, 0x0400128a, 0x0400130c, 0x0480f30c, 0x07c01d0c,
-	0x0980b38b, 0x07801ccc, 0x0540928c, 0x0200a24a, 0x0400130c,
-	0x0480f30c, 0x07c01ccc, 0x0643500c, 0x0580f30c, 0x06c0748a,
-	0x0bef404c, 0x0200ac0a, 0x0643530c, 0x0900c30c, 0x0a6f800c,
-	0x00000000, 0x0603510a, 0x06803f0a, 0x0603520a, 0x0c7fedc0,
-	0x0603500b, 0x064c2307, 0x0befc047, 0x0cc00000, 0x064c2007,
-	0x040011c7, 0x06800008, 0x0a20c047, 0x058011c7, 0x024071c8,
-	0x0cc00000, 0x00000000, 0x02409247, 0x048ff249, 0x05401249,
-	0x02407207, 0x048ff1c7, 0x054011c7, 0x0680000a, 0x0680000b,
+	0x07c01a87, 0x07c018c7, 0x068003c7, 0x07c00147, 0x06800007,
+	0x0cc00000, 0x07c01847, 0x0683ffc9, 0x06498f0a, 0x0aa0c009,
+	0x0a6f800a, 0x04401249, 0x064c3d0a, 0x0580a28a, 0x0bef80ca,
+	0x00000000, 0x06498e0a, 0x0980a00a, 0x06800fc9, 0x09706289,
+	0x06098e0a, 0x06800009, 0x09706289, 0x09c0a00a, 0x0cc00000,
+	0x06098e0a, 0x064c3a08, 0x09006208, 0x064c0809, 0x064c090a,
+	0x064c1e0b, 0x064c380c, 0x06800407, 0x063f0007, 0x06800007,
+	0x063f0007, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x060c0809, 0x060c090a, 0x060c1e0b, 0x060c380c, 0x0c07ef00,
+	0x00000000, 0x06800009, 0x060c0c09, 0x06c04049, 0x060c0d09,
+	0x064c1809, 0x09586248, 0x09809489, 0x060c1809, 0x09c09489,
+	0x060c1809, 0x0cc00000, 0x080c0a01, 0x0680072f, 0x06bfffcb,
+	0x06800024, 0x07801c20, 0x06800021, 0x06800025, 0x06800022,
+	0x06800026, 0x06800023, 0x06800027, 0x0680800a, 0x0680070e,
+	0x0740028b, 0x0400128a, 0x074002a4, 0x0400128a, 0x074002a0,
+	0x0400128a, 0x074002a1, 0x0400128a, 0x074002a5, 0x0400128a,
+	0x074002a2, 0x0400128a, 0x074002a6, 0x0400128a, 0x074002a3,
+	0x0400128a, 0x074002a7, 0x0d07fbce, 0x0400128a, 0x07c01c4b,
+	0x096102cb, 0x080c0700, 0x060c270b, 0x09610824, 0x060c0220,
+	0x09610865, 0x0aa1801a, 0x060c0221, 0x096108a6, 0x060c0222,
+	0x096108e7, 0x060c0223, 0x0780098e, 0x0b009bce, 0x06b80007,
+	0x06c00c87, 0x02007c07, 0x06035107, 0x06803f07, 0x06035207,
+	0x06a08007, 0x06035007, 0x07800007, 0x0a60c007, 0x06803fc7,
+	0x07c01c87, 0x06800007, 0x07c01d47, 0x0ac0bbce, 0x07801c87,
+	0x0b613fc7, 0x0ba0c707, 0x0441c1c7, 0x07c01c87, 0x06435007,
+	0x0580f1c7, 0x0bef8047, 0x0cc00000, 0x00000000, 0x06435007,
+	0x0580f1c7, 0x0bef8047, 0x00000000, 0x06435307, 0x0900c1c7,
+	0x0a6f8007, 0x00000000, 0x06b80007, 0x06c00c87, 0x02007c07,
+	0x06035107, 0x06803f07, 0x06035207, 0x06b0c007, 0x06035007,
+	0x054011ef, 0x0ac051ce, 0x06800087, 0x07c01cc7, 0x0c7ff880,
+	0x07c01d07, 0x06b90008, 0x06c00c88, 0x02008c08, 0x0540126f,
+	0x02009bc9, 0x0680008a, 0x07c01cca, 0x068000ca, 0x06435007,
+	0x0580f1c7, 0x0bef8047, 0x06803f07, 0x06035108, 0x06035207,
+	0x06a08007, 0x06035007, 0x0ac0324e, 0x0c7ff3c0, 0x07c01d0a,
+	0x06808007, 0x020081c8, 0x02009bc9, 0x0c7ffc80, 0x0400128a,
+	0x0400130c, 0x0480f30c, 0x07c01d0c, 0x0980b38b, 0x07801ccc,
+	0x0540928c, 0x0200a24a, 0x0400130c, 0x0480f30c, 0x07c01ccc,
+	0x0643500c, 0x0580f30c, 0x06c00c8a, 0x0bef404c, 0x0200ac0a,
+	0x0643530c, 0x0900c30c, 0x0a6f800c, 0x00000000, 0x0603510a,
+	0x06803f0a, 0x0603520a, 0x0c7fedc0, 0x0603500b, 0x064c2307,
+	0x0befc047, 0x0cc00000, 0x064c2007, 0x040011c7, 0x06800008,
+	0x0a20c047, 0x058011c7, 0x024071c8, 0x0cc00000, 0x00000000,
+	0x02409247, 0x048ff249, 0x05401249, 0x02407207, 0x048ff1c7,
+	0x054011c7, 0x0680000a, 0x0680000b, 0x06800048, 0x0b8041c8,
+	0x054012cb, 0x0980b04b, 0x024081c8, 0x05401208, 0x0b2ec20a,
+	0x0400128a, 0x058012cb, 0x0e0002c9, 0x00000000, 0x00000000,
+	0x0cc00000, 0x0f000240, 0x02409247, 0x06807fca, 0x02809289,
+	0x02407207, 0x06807fca, 0x02807287, 0x0680000a, 0x0680000b,
 	0x06800048, 0x0b8041c8, 0x054012cb, 0x0980b04b, 0x024081c8,
 	0x05401208, 0x0b2ec20a, 0x0400128a, 0x058012cb, 0x0e0002c9,
-	0x00000000, 0x00000000, 0x0cc00000, 0x0f000240, 0x02409247,
-	0x06807fca, 0x02809289, 0x02407207, 0x06807fca, 0x02807287,
+	0x00000000, 0x00000000, 0x0cc00000, 0x0f000240, 0x024091c9,
+	0x06807fca, 0x02809289, 0x024071c8, 0x06807fca, 0x02807287,
 	0x0680000a, 0x0680000b, 0x06800048, 0x0b8041c8, 0x054012cb,
 	0x0980b04b, 0x024081c8, 0x05401208, 0x0b2ec20a, 0x0400128a,
 	0x058012cb, 0x0e0002c9, 0x00000000, 0x00000000, 0x0cc00000,
-	0x0f000240, 0x024091c9, 0x06807fca, 0x02809289, 0x024071c8,
-	0x06807fca, 0x02807287, 0x0680000a, 0x0680000b, 0x06800048,
-	0x0b8041c8, 0x054012cb, 0x0980b04b, 0x024081c8, 0x05401208,
-	0x0b2ec20a, 0x0400128a, 0x058012cb, 0x0e0002c9, 0x00000000,
-	0x00000000, 0x0cc00000, 0x0f000240, 0x02407207, 0x06807fca,
-	0x02807287, 0x0680000a, 0x0680000b, 0x06800048, 0x0b8041c8,
-	0x054012cb, 0x0980b04b, 0x024081c8, 0x05401208, 0x0b2ec34a,
-	0x0400128a, 0x0cc00000, 0x0580124b, 0x07804187, 0x0a60c007,
-	0x06800088, 0x06800048, 0x07c04148, 0x0a60c01a, 0x068057ec,
-	0x0680005a, 0x0cc00000, 0x00000000, 0x024091c9, 0x06807fc8,
-	0x02809209, 0x0680000a, 0x0680000b, 0x06800048, 0x0b8041c8,
-	0x054012cb, 0x0980b04b, 0x024081c8, 0x05401208, 0x0b2ec20a,
-	0x0400128a, 0x058012cb, 0x0e0002c9, 0x00000000, 0x00000000,
-	0x0cc00000, 0x0f000240, 0x0aa1409a, 0x0aa0801a, 0x0c784cc0,
-	0x0cc00000, 0x00000000, 0x07801ec7, 0x07801e88, 0x02407207,
-	0x048ff1c7, 0x054011c7, 0x07c00447, 0x07801f07, 0x07801e88,
-	0x02407207, 0x048ff1c7, 0x054011c7, 0x07c00487, 0x07804149,
-	0x0aa140c9, 0x07800389, 0x0a60c009, 0x00000000, 0x044011c7,
-	0x0c07f580, 0x07800449, 0x06800f88, 0x09646248, 0x060c3009,
-	0x07800487, 0x07804149, 0x0aa280c9, 0x07800389, 0x0aa0c009,
-	0x00000000, 0x040011c7, 0x0c07f280, 0x07800449, 0x06800fc8,
-	0x09646248, 0x060c3009, 0x07804147, 0x0aa080c7, 0x0c780bc0,
-	0x07801e88, 0x05401208, 0x07801ec7, 0x0c07e980, 0x054011c7,
-	0x06800c08, 0x09646248, 0x060c3009, 0x07801e48, 0x05401208,
-	0x07801ec7, 0x0c07e780, 0x054011c7, 0x06800c48, 0x09646248,
-	0x060c3009, 0x07801f07, 0x07801e88, 0x02407207, 0x048ff1c7,
-	0x05401247, 0x07801ec7, 0x07801f08, 0x02407207, 0x048ff1c7,
-	0x054011c7, 0x09529247, 0x06800d08, 0x09646248, 0x060c3009,
-	0x07801f07, 0x07801e88, 0x0c07d1c0, 0x07801e89, 0x06800808,
-	0x09646248, 0x060c3009, 0x07801ec7, 0x07801f08, 0x0c07d000,
-	0x07801f09, 0x06800888, 0x09646248, 0x060c3009, 0x0cc00000,
-	0x00000000, 0x07801f8c, 0x0aa0c00c, 0x0780038c, 0x0680000c,
-	0x0a61c00c, 0x07801ec7, 0x054011c7, 0x07801e88, 0x05401208,
-	0x0c780180, 0x04001208, 0x07801ec7, 0x054011c7, 0x040011c7,
-	0x04401207, 0x0c07db00, 0x00000000, 0x06800c08, 0x09646248,
-	0x0a60c00c, 0x00000000, 0x098093c9, 0x060c3009, 0x0a61800c,
-	0x07801ec7, 0x054011c7, 0x07801e88, 0x0c780200, 0x05401208,
-	0x07801ec7, 0x054011c7, 0x040011c7, 0x07801e88, 0x05401208,
-	0x04001208, 0x0c07d600, 0x00000000, 0x06800c48, 0x09646248,
-	0x0aa0c00c, 0x00000000, 0x098093c9, 0x060c3009, 0x0a61c00c,
-	0x07801ec7, 0x054011c7, 0x07801e48, 0x05401208, 0x0c7801c0,
-	0x04001208, 0x07801ec7, 0x054011c7, 0x040011c7, 0x07801e88,
-	0x05401208, 0x0c07d100, 0x00000000, 0x06800c88, 0x09646248,
-	0x060c3009, 0x0a61800c, 0x07801ec7, 0x054011c7, 0x07801e48,
-	0x0c780200, 0x05401208, 0x07801ec7, 0x054011c7, 0x040011c7,
-	0x07801e48, 0x05401208, 0x04001208, 0x0c07ccc0, 0x00000000,
-	0x06800cc8, 0x09646248, 0x060c3009, 0x0780038c, 0x07801f07,
-	0x0aa0c00c, 0x054011c7, 0x040011c7, 0x07801e88, 0x05401208,
+	0x0f000240, 0x02407207, 0x06807fca, 0x02807287, 0x0680000a,
+	0x0680000b, 0x06800048, 0x0b8041c8, 0x054012cb, 0x0980b04b,
+	0x024081c8, 0x05401208, 0x0b2ec34a, 0x0400128a, 0x0cc00000,
+	0x0580124b, 0x07804187, 0x0a60c007, 0x06800088, 0x06800048,
+	0x07c04148, 0x0a60c01a, 0x0680696d, 0x0680005a, 0x0cc00000,
+	0x00000000, 0x024091c9, 0x06807fc8, 0x02809209, 0x0680000a,
+	0x0680000b, 0x06800048, 0x0b8041c8, 0x054012cb, 0x0980b04b,
+	0x024081c8, 0x05401208, 0x0b2ec20a, 0x0400128a, 0x058012cb,
+	0x0e0002c9, 0x00000000, 0x00000000, 0x0cc00000, 0x0f000240,
+	0x0aa1409a, 0x0aa0801a, 0x0c784cc0, 0x0cc00000, 0x00000000,
+	0x07801ec7, 0x07801e88, 0x02407207, 0x048ff1c7, 0x054011c7,
+	0x07c00447, 0x07801f07, 0x07801e88, 0x02407207, 0x048ff1c7,
+	0x054011c7, 0x07c00487, 0x07804149, 0x0aa140c9, 0x07800389,
+	0x0a60c009, 0x00000000, 0x044011c7, 0x0c07f580, 0x07800449,
+	0x06800f88, 0x09646248, 0x060c3009, 0x07800487, 0x07804149,
+	0x0aa280c9, 0x07800389, 0x0aa0c009, 0x00000000, 0x040011c7,
+	0x0c07f280, 0x07800449, 0x06800fc8, 0x09646248, 0x060c3009,
+	0x07804147, 0x0aa080c7, 0x0c780bc0, 0x07801e88, 0x05401208,
+	0x07801ec7, 0x0c07e980, 0x054011c7, 0x06800c08, 0x09646248,
+	0x060c3009, 0x07801e48, 0x05401208, 0x07801ec7, 0x0c07e780,
+	0x054011c7, 0x06800c48, 0x09646248, 0x060c3009, 0x07801f07,
+	0x07801e88, 0x02407207, 0x048ff1c7, 0x05401247, 0x07801ec7,
+	0x07801f08, 0x02407207, 0x048ff1c7, 0x054011c7, 0x09529247,
+	0x06800d08, 0x09646248, 0x060c3009, 0x07801f07, 0x07801e88,
+	0x0c07d1c0, 0x07801e89, 0x06800808, 0x09646248, 0x060c3009,
+	0x07801ec7, 0x07801f08, 0x0c07d000, 0x07801f09, 0x06800888,
+	0x09646248, 0x060c3009, 0x0cc00000, 0x00000000, 0x07801f8c,
+	0x0aa0c00c, 0x0780038c, 0x0680000c, 0x0a61c00c, 0x07801ec7,
+	0x054011c7, 0x07801e88, 0x05401208, 0x0c780180, 0x04001208,
+	0x07801ec7, 0x054011c7, 0x040011c7, 0x04401207, 0x0c07db00,
+	0x00000000, 0x06800c08, 0x09646248, 0x0a60c00c, 0x00000000,
+	0x098093c9, 0x060c3009, 0x0a61800c, 0x07801ec7, 0x054011c7,
+	0x07801e88, 0x0c780200, 0x05401208, 0x07801ec7, 0x054011c7,
+	0x040011c7, 0x07801e88, 0x05401208, 0x04001208, 0x0c07d600,
+	0x00000000, 0x06800c48, 0x09646248, 0x0aa0c00c, 0x00000000,
+	0x098093c9, 0x060c3009, 0x0a61c00c, 0x07801ec7, 0x054011c7,
+	0x07801e48, 0x05401208, 0x0c7801c0, 0x04001208, 0x07801ec7,
+	0x054011c7, 0x040011c7, 0x07801e88, 0x05401208, 0x0c07d100,
+	0x00000000, 0x06800c88, 0x09646248, 0x060c3009, 0x0a61800c,
+	0x07801ec7, 0x054011c7, 0x07801e48, 0x0c780200, 0x05401208,
+	0x07801ec7, 0x054011c7, 0x040011c7, 0x07801e48, 0x05401208,
+	0x04001208, 0x0c07ccc0, 0x00000000, 0x06800cc8, 0x09646248,
+	0x060c3009, 0x0780038c, 0x07801f07, 0x0aa0c00c, 0x054011c7,
+	0x040011c7, 0x07801e88, 0x05401208, 0x02407207, 0x06807fca,
+	0x02809287, 0x07801ec7, 0x0aa1800c, 0x054011c7, 0x07801f88,
+	0x0a60c008, 0x00000000, 0x040011c7, 0x07801f08, 0x0aa0c00c,
+	0x05401208, 0x04001208, 0x02407207, 0x02807287, 0x09529247,
+	0x06800d08, 0x09646248, 0x060c3009, 0x07801f07, 0x0aa0c00c,
+	0x054011c7, 0x040011c7, 0x07801e88, 0x05401208, 0x04001208,
 	0x02407207, 0x06807fca, 0x02809287, 0x07801ec7, 0x0aa1800c,
 	0x054011c7, 0x07801f88, 0x0a60c008, 0x00000000, 0x040011c7,
 	0x07801f08, 0x0aa0c00c, 0x05401208, 0x04001208, 0x02407207,
-	0x02807287, 0x09529247, 0x06800d08, 0x09646248, 0x060c3009,
-	0x07801f07, 0x0aa0c00c, 0x054011c7, 0x040011c7, 0x07801e88,
-	0x05401208, 0x04001208, 0x02407207, 0x06807fca, 0x02809287,
-	0x07801ec7, 0x0aa1800c, 0x054011c7, 0x07801f88, 0x0a60c008,
-	0x00000000, 0x040011c7, 0x07801f08, 0x0aa0c00c, 0x05401208,
-	0x04001208, 0x02407207, 0x02807287, 0x09529247, 0x06800d48,
-	0x09646248, 0x060c3009, 0x0aa0c00c, 0x0680000c, 0x0680004c,
+	0x02807287, 0x09529247, 0x06800d48, 0x09646248, 0x060c3009,
+	0x0aa0c00c, 0x0680000c, 0x0680004c, 0x07801f07, 0x054011c7,
+	0x02007307, 0x07801e88, 0x05401208, 0x04001208, 0x0c07b0c0,
+	0x04000248, 0x06800808, 0x09646248, 0x060c3009, 0x07801f07,
+	0x054011c7, 0x02007307, 0x07801e88, 0x05401208, 0x0c07ae40,
+	0x04001248, 0x06800848, 0x09646248, 0x060c3009, 0x07801f07,
+	0x054011c7, 0x02007307, 0x07801ec8, 0x05401208, 0x0c07b140,
+	0x04000248, 0x06800888, 0x09646248, 0x060c3009, 0x07801f07,
+	0x054011c7, 0x02007307, 0x07801ec8, 0x05401208, 0x04001208,
+	0x0c07ae80, 0x04401248, 0x068008c8, 0x09646248, 0x060c3009,
 	0x07801f07, 0x054011c7, 0x02007307, 0x07801e88, 0x05401208,
-	0x04001208, 0x0c07b0c0, 0x04000248, 0x06800808, 0x09646248,
+	0x04001208, 0x0c07a640, 0x04401248, 0x06800908, 0x09646248,
 	0x060c3009, 0x07801f07, 0x054011c7, 0x02007307, 0x07801e88,
-	0x05401208, 0x0c07ae40, 0x04001248, 0x06800848, 0x09646248,
+	0x05401208, 0x0c07a3c0, 0x04000248, 0x06800948, 0x09646248,
 	0x060c3009, 0x07801f07, 0x054011c7, 0x02007307, 0x07801ec8,
-	0x05401208, 0x0c07b140, 0x04000248, 0x06800888, 0x09646248,
+	0x05401208, 0x0c07a6c0, 0x04001248, 0x06800988, 0x09646248,
 	0x060c3009, 0x07801f07, 0x054011c7, 0x02007307, 0x07801ec8,
-	0x05401208, 0x04001208, 0x0c07ae80, 0x04401248, 0x068008c8,
-	0x09646248, 0x060c3009, 0x07801f07, 0x054011c7, 0x02007307,
-	0x07801e88, 0x05401208, 0x04001208, 0x0c07a640, 0x04401248,
-	0x06800908, 0x09646248, 0x060c3009, 0x07801f07, 0x054011c7,
-	0x02007307, 0x07801e88, 0x05401208, 0x0c07a3c0, 0x04000248,
-	0x06800948, 0x09646248, 0x060c3009, 0x07801f07, 0x054011c7,
-	0x02007307, 0x07801ec8, 0x05401208, 0x0c07a6c0, 0x04001248,
-	0x06800988, 0x09646248, 0x060c3009, 0x07801f07, 0x054011c7,
-	0x02007307, 0x07801ec8, 0x05401208, 0x04001208, 0x0c07a400,
-	0x04400248, 0x068009c8, 0x09646248, 0x060c3009, 0x0cc00000,
-	0x00000000, 0x07804147, 0x0aa080c7, 0x0c7807c0, 0x07801f07,
-	0x07801e88, 0x0c079600, 0x07801e89, 0x06800808, 0x09646248,
-	0x060c3009, 0x07801ec7, 0x07801e48, 0x0c079440, 0x07801e89,
-	0x06800848, 0x09646248, 0x060c3009, 0x07801ec7, 0x07801e88,
-	0x0c079280, 0x07801e49, 0x06800908, 0x09646248, 0x060c3009,
-	0x07801ec7, 0x07801e48, 0x0c0790c0, 0x07801e49, 0x06800948,
-	0x09646248, 0x060c3009, 0x0cc00000, 0x00000000, 0x0780038c,
-	0x0aa0800c, 0x0c780880, 0x0680080d, 0x07801f07, 0x054011c7,
-	0x0900230d, 0x07801e88, 0x05401208, 0x0aa2004c, 0x0aa1c00c,
-	0x04001208, 0x07801e48, 0x05401208, 0x0aa0c0cc, 0x00000000,
-	0x04001208, 0x0904230d, 0x07801e89, 0x05401249, 0x0aa2004c,
-	0x0aa1c00c, 0x04001249, 0x07801e49, 0x05401249, 0x0aa0c0cc,
-	0x00000000, 0x04001249, 0x0c078d80, 0x00000000, 0x0964624d,
-	0x060c3009, 0x0ba90bcd, 0x0400134d, 0x0cc00000, 0x00000000,
-	0x0680080d, 0x07801f07, 0x054011c7, 0x040011c7, 0x0900230d,
-	0x07801f08, 0x0aa2800c, 0x05401208, 0x07801e88, 0x05401208,
-	0x0aa1808c, 0x0aa1404c, 0x04001208, 0x07801e48, 0x05401208,
-	0x04001208, 0x0904230d, 0x07801f09, 0x0aa2800c, 0x05401249,
-	0x07801e89, 0x05401249, 0x0aa1808c, 0x0aa1404c, 0x04001249,
-	0x07801e49, 0x05401249, 0x04001249, 0x0c078480, 0x00000000,
-	0x0964624d, 0x060c3009, 0x0ba84bcd, 0x0400134d, 0x0cc00000,
-	0x00000000, 0x07804147, 0x0a6140c7, 0x06099004, 0x06099105,
-	0x0c780240, 0x06099206, 0x06099004, 0x06099104, 0x06099205,
-	0x06099305, 0x06099406, 0x0c780080, 0x06099506, 0x0aa3c09a,
-	0x0aa0805a, 0x0cc00000, 0x07804147, 0x0698d908, 0x0aa1c0c7,
-	0x06d85888, 0x0688d108, 0x0aa10087, 0x06c85088, 0x06910948,
-	0x06d088c8, 0x080c2400, 0x0cc00000, 0x060c2208, 0x07804147,
-	0x0698d908, 0x0aa100c7, 0x06d85888, 0x06800008, 0x06d088c8,
-	0x080c2400, 0x060c2208, 0x07804147, 0x069898c8, 0x0aa100c7,
-	0x06d81848, 0x06800008, 0x06c85008, 0x080c2408, 0x0cc00000,
-	0x060c2208, 0x0609cd32, 0x0609ce31, 0x08007401, 0x0649ce31,
-	0x0a6fc031, 0x00000000, 0x0cc00000, 0x00000000
+	0x05401208, 0x04001208, 0x0c07a400, 0x04400248, 0x068009c8,
+	0x09646248, 0x060c3009, 0x0cc00000, 0x00000000, 0x07804147,
+	0x0aa080c7, 0x0c7807c0, 0x07801f07, 0x07801e88, 0x0c079600,
+	0x07801e89, 0x06800808, 0x09646248, 0x060c3009, 0x07801ec7,
+	0x07801e48, 0x0c079440, 0x07801e89, 0x06800848, 0x09646248,
+	0x060c3009, 0x07801ec7, 0x07801e88, 0x0c079280, 0x07801e49,
+	0x06800908, 0x09646248, 0x060c3009, 0x07801ec7, 0x07801e48,
+	0x0c0790c0, 0x07801e49, 0x06800948, 0x09646248, 0x060c3009,
+	0x0cc00000, 0x00000000, 0x0780038c, 0x0aa0800c, 0x0c780880,
+	0x0680080d, 0x07801f07, 0x054011c7, 0x0900230d, 0x07801e88,
+	0x05401208, 0x0aa2004c, 0x0aa1c00c, 0x04001208, 0x07801e48,
+	0x05401208, 0x0aa0c0cc, 0x00000000, 0x04001208, 0x0904230d,
+	0x07801e89, 0x05401249, 0x0aa2004c, 0x0aa1c00c, 0x04001249,
+	0x07801e49, 0x05401249, 0x0aa0c0cc, 0x00000000, 0x04001249,
+	0x0c078d80, 0x00000000, 0x0964624d, 0x060c3009, 0x0ba90bcd,
+	0x0400134d, 0x0cc00000, 0x00000000, 0x0680080d, 0x07801f07,
+	0x054011c7, 0x040011c7, 0x0900230d, 0x07801f08, 0x0aa2800c,
+	0x05401208, 0x07801e88, 0x05401208, 0x0aa1808c, 0x0aa1404c,
+	0x04001208, 0x07801e48, 0x05401208, 0x04001208, 0x0904230d,
+	0x07801f09, 0x0aa2800c, 0x05401249, 0x07801e89, 0x05401249,
+	0x0aa1808c, 0x0aa1404c, 0x04001249, 0x07801e49, 0x05401249,
+	0x04001249, 0x0c078480, 0x00000000, 0x0964624d, 0x060c3009,
+	0x0ba84bcd, 0x0400134d, 0x0cc00000, 0x00000000, 0x07804147,
+	0x0a6140c7, 0x06099004, 0x06099105, 0x0c780240, 0x06099206,
+	0x06099004, 0x06099104, 0x06099205, 0x06099305, 0x06099406,
+	0x0c780080, 0x06099506, 0x0aa3c09a, 0x0aa0805a, 0x0cc00000,
+	0x07804147, 0x0698d908, 0x0aa1c0c7, 0x06d85888, 0x0688d108,
+	0x0aa10087, 0x06c85088, 0x06910948, 0x06d088c8, 0x080c2400,
+	0x0cc00000, 0x060c2208, 0x07804147, 0x0698d908, 0x0aa100c7,
+	0x06d85888, 0x06800008, 0x06d088c8, 0x080c2400, 0x060c2208,
+	0x07804147, 0x069898c8, 0x0aa100c7, 0x06d81848, 0x06800008,
+	0x06c85008, 0x080c2408, 0x0cc00000, 0x060c2208, 0x06435007,
+	0x0580f1c7, 0x0bef8047, 0x06919607, 0x06c00c87, 0x02007c07,
+	0x06035107, 0x06800207, 0x06035207, 0x06b04807, 0x06035007,
+	0x06435007, 0x0580f1c7, 0x0bef8047, 0x00000000, 0x064c5307,
+	0x07c04847, 0x092101c7, 0x07c04807, 0x064c5407, 0x07c048c7,
+	0x092101c7, 0x07c04887, 0x06919607, 0x06c00c87, 0x02007c07,
+	0x06035107, 0x06800207, 0x06035207, 0x06a04807, 0x06035007,
+	0x06435007, 0x0580f1c7, 0x0bef8047, 0x00000000, 0x06435307,
+	0x0900c1c7, 0x0a6f8007, 0x00000000, 0x07804087, 0x078040c8,
+	0x096101c8, 0x0609d307, 0x06800047, 0x07804048, 0x05001208,
+	0x094211c8, 0x07804208, 0x094411c8, 0x07804148, 0x0a60c0c8,
+	0x06800048, 0x094611c8, 0x0aa1401a, 0x06800088, 0x0aa0c05a,
+	0x06800008, 0x06800048, 0x094821c8, 0x07804288, 0x094c11c8,
+	0x0609d407, 0x08007401, 0x0cc00000, 0x00000000, 0x02007c07,
+	0x060c5507, 0x064c4407, 0x09c07047, 0x060c4407, 0x00000000,
+	0x00000000, 0x064c4407, 0x091011c7, 0x0a6f8007, 0x00000000,
+	0x080c5603, 0x064c5607, 0x090e11c7, 0x0a6f8007, 0x00000000,
+	0x0cc00000, 0x080c5600, 0x02007c07, 0x060c5507, 0x064c4407,
+	0x09c07047, 0x060c4407, 0x00000000, 0x00000000, 0x064c4407,
+	0x091011c7, 0x0a6f8007, 0x00000000, 0x080c5601, 0x064c5607,
+	0x090e11c7, 0x0a6f8007, 0x00000000, 0x0cc00000, 0x080c5600,
+	0x06959e07, 0x06c48d07, 0x060c5307, 0x0690c847, 0x06e1d947,
+	0x060c5407, 0x06800e07, 0x060c4407, 0x0649d207, 0x060c4007,
+	0x06bffe07, 0x06c7ffc7, 0x060c4207, 0x0649d207, 0x060c4107,
+	0x06800087, 0x060c4807, 0x06bffe07, 0x06c7ffc7, 0x060c4507,
+	0x06810e07, 0x060c4407, 0x06810e47, 0x060c4407, 0x06810e07,
+	0x060c4407, 0x068000c7, 0x060c4807, 0x06803087, 0x060c4807,
+	0x06810f07, 0x06c00447, 0x060c4407, 0x0cc00000, 0x00000000,
+	0x00800000, 0x0c07f280, 0x00000000, 0x064c4407, 0x09807047,
+	0x060c4407, 0x0cc00000, 0x00400000, 0x0609cd32, 0x0609ce31,
+	0x08007401, 0x0649ce31, 0x0a6fc031, 0x00000000, 0x0cc00000,
+	0x00000000
 };
diff --git a/drivers/amlogic/amports/arch/ucode/avs/avs_linux_old.h b/drivers/amlogic/amports/arch/ucode/avs/avs_linux_old.h
new file mode 100644
index 0000000..af61b2b
--- /dev/null
+++ b/drivers/amlogic/amports/arch/ucode/avs/avs_linux_old.h
@@ -0,0 +1,539 @@
+/*
+ * drivers/amlogic/amports/arch/m8_m8m2/avs/avs_linux.h
+ *
+ * Copyright (C) 2015 Amlogic, Inc. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+*/
+
+static const u32 MicroCode[] __initconst = {
+	0x06807801, 0x06800000, 0x0d000001, 0x07400040, 0x0c0145c0,
+	0x00000000, 0x00000000, 0x00000000, 0x080c0002, 0x06932000,
+	0x09800580, 0x060c1e00, 0x06bfdac0, 0x07c017c0, 0x06030400,
+	0x00400000, 0x0c015800, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x0c7ffec0, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x0cc00000, 0x00400000, 0x0cc00000,
+	0x00400000, 0x0c780540, 0x064c0007, 0x0c796080, 0x00000000,
+	0x0c796a80, 0x00000000, 0x0cc00000, 0x00400000, 0x0cc00000,
+	0x00400000, 0x0c796900, 0x00000000, 0x0cc00000, 0x00400000,
+	0x06800009, 0x07c01fc9, 0x07c00409, 0x00800000, 0x078017c9,
+	0x0c7ffe40, 0x06030409, 0x06bfd9c9, 0x06030409, 0x00400000,
+	0x0a2d8047, 0x07801509, 0x0aa14009, 0x0a608049, 0x0c78f700,
+	0x0a608089, 0x0c78ebc0, 0x0a23c807, 0x0c786200, 0x00000000,
+	0x0649d008, 0x0aa0c008, 0x0809c701, 0x0c780000, 0x0c01a380,
+	0x080c0a00, 0x0c01a6c0, 0x00000000, 0x0c01b980, 0x00000000,
+	0x0c792ec0, 0x00000000, 0x0becd007, 0x078043c8, 0x0aa0c008,
+	0x0a208207, 0x0c792d40, 0x078003c7, 0x0a6fc007, 0x078043c7,
+	0x0a63c007, 0x064c2907, 0x0be2c407, 0x07800007, 0x0a62c007,
+	0x00000000, 0x064c2907, 0x091c11c7, 0x0a61c047, 0x00000000,
+	0x064c0607, 0x0900f1c7, 0x0ae0c047, 0x0c792900, 0x00000000,
+	0x0cb8002c, 0x00000000, 0x068fdfca, 0x064e0408, 0x02808288,
+	0x02c08748, 0x060e0408, 0x060c071e, 0x064c0324, 0x064c0325,
+	0x064c2728, 0x09210268, 0x07800007, 0x0a618007, 0x07801c08,
+	0x06c00008, 0x060c0208, 0x080c0200, 0x06bfffc9, 0x060c0320,
+	0x060c0321, 0x07801c48, 0x09610209, 0x060c2708, 0x07801847,
+	0x0a6fc007, 0x07800147, 0x07c01b87, 0x06800347, 0x07c00147,
+	0x060c2507, 0x080c2602, 0x080c260f, 0x080c2603, 0x04c001c7,
+	0x09807207, 0x060c2107, 0x07801907, 0x0aa14007, 0x06a01008,
+	0x0aa0c047, 0x06a22008, 0x06a40008, 0x06c00108, 0x060e0508,
+	0x07801b08, 0x06801809, 0x09502248, 0x060c2109, 0x080c260e,
+	0x06800088, 0x07c01947, 0x0ba0c087, 0x040011c7, 0x06800007,
+	0x07c01907, 0x07800007, 0x07c01b47, 0x07801b87, 0x07c01bc7,
+	0x07c01848, 0x08030580, 0x07801d47, 0x0aa1472f, 0x040011c7,
+	0x078016c8, 0x0a20c048, 0x00000000, 0x07c01d47, 0x0683ffc8,
+	0x064c2307, 0x093041c7, 0x0aa0c008, 0x0a6f4007, 0x04401208,
+	0x07801c8d, 0x0ba13fcd, 0x06800008, 0x0c781100, 0x07c01c88,
+	0x06808008, 0x0ba1070d, 0x0400024d, 0x0441c249, 0x0680c008,
+	0x05403289, 0x0200a24a, 0x02008288, 0x07400228, 0x04001208,
+	0x092102e4, 0x0740020b, 0x04001208, 0x07400224, 0x04001208,
+	0x07400225, 0x04001208, 0x092102e5, 0x0740020b, 0x04001208,
+	0x07400226, 0x04001208, 0x092102e6, 0x0740020b, 0x04001208,
+	0x07400227, 0x04001208, 0x092102e7, 0x0740020b, 0x07800988,
+	0x0ac07bc8, 0x0780000a, 0x0aa3872f, 0x040002ca, 0x078016ca,
+	0x0c7802c0, 0x0942f28b, 0x0a61000a, 0x0aa1472f, 0x078016ca,
+	0x0a20c04a, 0x0a6146c9, 0x0400128d, 0x0b60c70d, 0x0680000a,
+	0x0680070a, 0x07c01c8a, 0x0b013bc8, 0x0aa0800a, 0x0a64470a,
+	0x07801cca, 0x0a20c04a, 0x06a0800b, 0x06a0c00b, 0x06b80009,
+	0x07801d0c, 0x0540928c, 0x0200a24a, 0x06c0748a, 0x0200ac0a,
+	0x0603510a, 0x06803f0a, 0x0603520a, 0x0603500b, 0x0c01b400,
+	0x00000000, 0x07800007, 0x040011c7, 0x07c00007, 0x09c1d39d,
+	0x07800988, 0x0b405207, 0x040011c7, 0x0b833207, 0x0c780c80,
+	0x0981d1dd, 0x06800007, 0x07c00007, 0x0981d39d, 0x09c1d3dd,
+	0x09c1d1dd, 0x078016c8, 0x04001208, 0x07801dc9, 0x0b828248,
+	0x07c016c8, 0x07801847, 0x0a6fc007, 0x00000000, 0x06430507,
+	0x0a2f0107, 0x06a00007, 0x060c3d07, 0x07800147, 0x0aa24007,
+	0x06803fcb, 0x07801a88, 0x064e0c09, 0x09010249, 0x0b804248,
+	0x0aa0c00b, 0x0c7ffec0, 0x044012cb, 0x07804147, 0x0aa280c7,
+	0x07800347, 0x07801dc8, 0x0b407207, 0x0c01c600, 0x07c00348,
+	0x06800048, 0x07c00308, 0x0c789640, 0x07c00388, 0x06800008,
+	0x07c00308, 0x07c00388, 0x0c78f740, 0x064c0007, 0x0b60c709,
+	0x06808008, 0x0680c008, 0x0c780400, 0x06800007, 0x07800007,
+	0x09508787, 0x078016c9, 0x09408789, 0x07800989, 0x0b009bc9,
+	0x06808008, 0x0aad0007, 0x07801c89, 0x040011c9, 0x0ba10707,
+	0x0b6c0e07, 0x0680c008, 0x0441c1c7, 0x05403247, 0x020091c9,
+	0x02008248, 0x07000209, 0x07c01c49, 0x04001208, 0x07000209,
+	0x04001208, 0x07000220, 0x09610809, 0x04001208, 0x07000221,
+	0x04001208, 0x07000209, 0x09610849, 0x04001208, 0x07000222,
+	0x04001208, 0x07000209, 0x09610889, 0x04001208, 0x07000223,
+	0x04001208, 0x07000209, 0x096108c9, 0x0c7fb580, 0x00000000,
+	0x068fdfca, 0x064e0408, 0x02808288, 0x02c08748, 0x060e0408,
+	0x060c071e, 0x064c0324, 0x064c0325, 0x064c0326, 0x064c0327,
+	0x064c2728, 0x060c071e, 0x09210268, 0x07800007, 0x0a638007,
+	0x07801c08, 0x06c00008, 0x060c0208, 0x06800008, 0x06c00008,
+	0x060c0208, 0x06800008, 0x06c00008, 0x060c0208, 0x06800008,
+	0x06c00008, 0x060c0208, 0x06bfffc9, 0x060c0320, 0x060c0321,
+	0x060c0322, 0x060c0323, 0x07801c48, 0x09610209, 0x060c2708,
+	0x07804287, 0x054031c7, 0x04c301c7, 0x07801f8a, 0x095011ca,
+	0x060c2507, 0x0780184a, 0x0a6fc00a, 0x07800147, 0x07c01b87,
+	0x064c2307, 0x09304207, 0x0a6f8008, 0x090a1207, 0x090241c7,
+	0x095211c8, 0x064c0609, 0x09010249, 0x0aa10009, 0x00000000,
+	0x06800007, 0x06800008, 0x07c00147, 0x0aa60347, 0x060c2507,
+	0x0aa60287, 0x0aa18048, 0x0a60c007, 0x0c780200, 0x00000000,
+	0x080c2605, 0x080c2606, 0x080c2607, 0x080c2602, 0x080c260f,
+	0x080c2603, 0x07801ac8, 0x0aa100c8, 0x06800089, 0x0c7fb8c0,
+	0x07c01ac9, 0x0780184b, 0x0a6fc00b, 0x00000000, 0x07c01b08,
+	0x0c7fb740, 0x07c01ac9, 0x080c2602, 0x080c260f, 0x080c2603,
+	0x07801ac8, 0x0aa48088, 0x068000c9, 0x07800008, 0x0aa0c008,
+	0x0c7fb4c0, 0x07c01ac9, 0x06803fcb, 0x07801a88, 0x064e0c09,
+	0x09010249, 0x0b804248, 0x0aa0c00b, 0x0c7ffec0, 0x044012cb,
+	0x06800088, 0x068000c9, 0x0680180b, 0x060c210b, 0x0780184b,
+	0x0a6fc00b, 0x00000000, 0x07c01b08, 0x0c7fb040, 0x07c01ac9,
+	0x0a279007, 0x00000000, 0x0649d00a, 0x0aa0c00a, 0x0809c701,
+	0x0c780000, 0x0c014180, 0x080c0a00, 0x0c0144c0, 0x00000000,
+	0x0c0152c0, 0x00000000, 0x064c000a, 0x09c0a18a, 0x0980a20a,
+	0x0980a00a, 0x060c000a, 0x080c2300, 0x064c1e08, 0x09c081c8,
+	0x09808008, 0x060c1e08, 0x098081c8, 0x09c08008, 0x060c1e08,
+	0x064c080a, 0x0980a34a, 0x060c080a, 0x0c014680, 0x00000000,
+	0x064c1a07, 0x0aa10007, 0x06800008, 0x0c78c780, 0x00000000,
+	0x064c1e0a, 0x0980a60a, 0x060c1e0a, 0x06809009, 0x060c0809,
+	0x0fc08280, 0x0aa3ec0a, 0x0649c108, 0x0aa2c008, 0x0aa12cca,
+	0x0aa1ad8a, 0x0ae22bca, 0x0c78a5c0, 0x06800007, 0x0c780980,
+	0x07c00387, 0x06800007, 0x0c781ec0, 0x07c00387, 0x0c78c240,
+	0x00000000, 0x0fc08280, 0x07c0400a, 0x0609c40a, 0x0fc08280,
+	0x0fc01280, 0x0500128a, 0x07c0404a, 0x0fc0e1c0, 0x07c04087,
+	0x0609c107, 0x0fc0e1c0, 0x07c040c7, 0x0609c207, 0x0fc021c0,
+	0x0fc031c0, 0x0fc041c0, 0x0609c007, 0x0fc041c0, 0x0609c307,
+	0x0fc091c0, 0x0fc091c0, 0x0fc011c0, 0x0fc0c1c0, 0x0fc011c0,
+	0x07c04107, 0x0fc011c0, 0x0fc091c0, 0x0fc091c0, 0x0fc031c0,
+	0x0c78ba80, 0x00000000, 0x06800007, 0x07c01f87, 0x07804007,
+	0x0a611207, 0x0fc101c0, 0x0fc011c0, 0x0fc071c0, 0x0fc011c0,
+	0x0aa10007, 0x00000000, 0x0fc0c1c0, 0x0fc0c1c0, 0x0fc011c0,
+	0x07802047, 0x07c02007, 0x07802087, 0x07c02047, 0x0fc081c0,
+	0x07c02087, 0x07804107, 0x0aa10007, 0x0c016a40, 0x080c2301,
+	0x07c01f47, 0x0fc011c0, 0x07802088, 0x095c1207, 0x07c02088,
+	0x050011c7, 0x07c01807, 0x0aa30007, 0x068000c8, 0x0fc011c0,
+	0x0a624007, 0x068000c8, 0x0fc011c0, 0x07c04187, 0x0a60c007,
+	0x06800048, 0x06800088, 0x0c780140, 0x07c04148, 0x07c04148,
+	0x0fc011c0, 0x07c04187, 0x0fc011c0, 0x07c041c7, 0x0fc011c0,
+	0x07c04207, 0x0fc061c0, 0x07c04247, 0x06800087, 0x07c00087,
+	0x06800808, 0x060c2108, 0x07801807, 0x0aa18007, 0x06800008,
+	0x07804147, 0x0aa0c0c7, 0x00000000, 0x0fc01200, 0x07c04288,
+	0x0fc041c0, 0x0fc011c0, 0x07c042c7, 0x0a648007, 0x06800008,
+	0x0fc011c0, 0x0aa34007, 0x06800009, 0x0c015dc0, 0x080c2301,
+	0x0c015e40, 0x00000000, 0x07c04307, 0x0c015c80, 0x080c2301,
+	0x0c015d00, 0x00000000, 0x0c780100, 0x07c04347, 0x07c04308,
+	0x07c04349, 0x06800007, 0x07c00107, 0x0c782a00, 0x0680001a,
+	0x07804007, 0x0a611207, 0x0fc101c0, 0x0fc011c0, 0x0fc071c0,
+	0x0fc021c0, 0x0a60c047, 0x0c780180, 0x0680005a, 0x0fc081c0,
+	0x07c020c7, 0x0c780240, 0x0680009a, 0x07802047, 0x07c02007,
+	0x07802087, 0x07c02047, 0x0fc081c0, 0x07c02087, 0x07c020c7,
+	0x07804107, 0x0aa10007, 0x0c015400, 0x080c2301, 0x07c01f47,
+	0x0fc011c0, 0x078020c8, 0x095c1207, 0x0aa0c09a, 0x07c020c8,
+	0x07c02088, 0x050011c7, 0x07c01807, 0x0aa34007, 0x068000c8,
+	0x0fc011c0, 0x0a628007, 0x068000c8, 0x0fc011c0, 0x0fc011c0,
+	0x07c04187, 0x0a60c007, 0x06800048, 0x06800088, 0x0c780140,
+	0x07c04148, 0x07c04148, 0x0fc011c0, 0x07c04187, 0x0fc011c0,
+	0x07c041c7, 0x0fc011c0, 0x07c04207, 0x0fc061c0, 0x07c04247,
+	0x078020c7, 0x048ff207, 0x07c01f08, 0x091c11c7, 0x0aa5c007,
+	0x07802007, 0x091c1207, 0x0a610008, 0x048ff1c7, 0x054011c7,
+	0x048ff1c7, 0x07c01e47, 0x07802047, 0x091c1207, 0x0a610008,
+	0x048ff1c7, 0x054011c7, 0x048ff1c7, 0x07c01e87, 0x07802087,
+	0x091c1207, 0x0a610008, 0x048ff1c7, 0x054011c7, 0x048ff1c7,
+	0x0c780b40, 0x07c01ec7, 0x07802007, 0x091c1207, 0x0aa2c008,
+	0x048ff1c7, 0x058011c7, 0x07801f08, 0x0b4031c8, 0x06804009,
+	0x02008248, 0x024091c8, 0x0ba0e009, 0x0c7fff80, 0x040801c7,
+	0x07c01e47, 0x07802047, 0x091c1207, 0x0aa2c008, 0x048ff1c7,
+	0x058011c7, 0x07801f08, 0x0b4031c8, 0x06804009, 0x02008248,
+	0x024091c8, 0x0ba0e009, 0x0c7fff80, 0x040801c7, 0x07c01e87,
+	0x07802087, 0x091c1207, 0x0aa2c008, 0x048ff1c7, 0x058011c7,
+	0x07801f08, 0x0b0031c8, 0x06804009, 0x02408248, 0x02409207,
+	0x0ba0e009, 0x0c7fff80, 0x044801c7, 0x048ff1c7, 0x07c01ec7,
+	0x0a61409a, 0x07804147, 0x0a60c0c7, 0x0c780240, 0x06800808,
+	0x0fc011c0, 0x07c00087, 0x0a6f0007, 0x06800808, 0x06800047,
+	0x09505207, 0x09605207, 0x060c2108, 0x0fc011c0, 0x0fc011c0,
+	0x07c01f87, 0x0fc021c0, 0x0fc011c0, 0x07c04287, 0x0fc011c0,
+	0x07c042c7, 0x0a648007, 0x06800008, 0x0fc011c0, 0x0aa34007,
+	0x06800009, 0x0c0133c0, 0x080c2301, 0x0c013440, 0x00000000,
+	0x07c04307, 0x0c013280, 0x080c2301, 0x0c013300, 0x00000000,
+	0x0c780100, 0x07c04347, 0x07c04308, 0x07c04349, 0x06800007,
+	0x07c00107, 0x07804007, 0x0aa25207, 0x00000000, 0x06802007,
+	0x06c02007, 0x060e1907, 0x060e1a07, 0x060e1b07, 0x0c781640,
+	0x00000000, 0x0fc011c0, 0x064e1c09, 0x097e1247, 0x0aa20047,
+	0x060e1c09, 0x06802007, 0x06c02007, 0x060e1907, 0x060e1a07,
+	0x0c781200, 0x060e1b07, 0x0fc011c0, 0x0fc011c0, 0x06800009,
+	0x07c01009, 0x0a630007, 0x07c01049, 0x0c012940, 0x080c2301,
+	0x0c0129c0, 0x00000000, 0x07c01007, 0x0c012800, 0x080c2301,
+	0x0c012880, 0x00000000, 0x07c01047, 0x0fc021c0, 0x0fc02200,
+	0x064e1c09, 0x09602248, 0x07801008, 0x09405248, 0x07801048,
+	0x09505248, 0x060e1c09, 0x0aa30047, 0x06802008, 0x07c01088,
+	0x06801888, 0x07c010c8, 0x06801a88, 0x07c01108, 0x06801d08,
+	0x07c01148, 0x07c01188, 0x0c7802c0, 0x06802008, 0x068021c8,
+	0x07c01088, 0x068023c8, 0x07c010c8, 0x07c01108, 0x06802808,
+	0x07c01148, 0x07c01188, 0x06803548, 0x07c011c8, 0x0aa2c007,
+	0x06801089, 0x0c011e80, 0x080c2301, 0x0c011f00, 0x00000000,
+	0x07000248, 0x020081c8, 0x07400248, 0x0bae51c9, 0x04001249,
+	0x07801088, 0x078010c9, 0x09609209, 0x060e1908, 0x07801108,
+	0x07801149, 0x09609209, 0x060e1a08, 0x07801188, 0x078011c9,
+	0x09609209, 0x060e1b08, 0x0fc011c0, 0x07c043c7, 0x0aa0c007,
+	0x06800007, 0x0687ffc7, 0x07c01c07, 0x064c510a, 0x064c4607,
+	0x07801308, 0x05410208, 0x078012c9, 0x02008248, 0x05802208,
+	0x0e000288, 0x00000000, 0x00000000, 0x00000000, 0x0f000200,
+	0x0f010280, 0x0970820a, 0x05402208, 0x020081c8, 0x064c430a,
+	0x02408288, 0x064c400a, 0x02408288, 0x07c01348, 0x05810208,
+	0x07c01388, 0x0c013040, 0x00000000, 0x0680001e, 0x07c0001e,
+	0x07c016de, 0x0981d39e, 0x0981d3dd, 0x09c1d1dd, 0x07804087,
+	0x0400f1c7, 0x058041c7, 0x060c0907, 0x07c00987, 0x04401247,
+	0x07c00609, 0x09708789, 0x05404287, 0x078040c8, 0x0400f208,
+	0x05804208, 0x05404248, 0x04401249, 0x05402249, 0x07c009c8,
+	0x07804149, 0x0aa0c0c9, 0x04000248, 0x05801249, 0x07c01dc9,
+	0x04401248, 0x09608789, 0x04000248, 0x09610247, 0x06095209,
+	0x05404208, 0x0780408a, 0x0400f28a, 0x0580428a, 0x0540428a,
+	0x078040c8, 0x0400f208, 0x05804208, 0x05404208, 0x0961020a,
+	0x06090808, 0x0c005b00, 0x07c013da, 0x06a00007, 0x060c3d07,
+	0x064c3d08, 0x09161208, 0x0a6f8008, 0x06800008, 0x06c06c08,
+	0x0aa1009a, 0x02008c08, 0x0c780400, 0x060c3808, 0x05803208,
+	0x07804147, 0x0aa200c7, 0x06800109, 0x0aa18047, 0x06800009,
+	0x07801f87, 0x0aa0c007, 0x068000c9, 0x06800009, 0x097a3209,
+	0x060c3908, 0x06bfffc8, 0x060c3808, 0x0c00bdc0, 0x00000000,
+	0x0c00c100, 0x00000000, 0x0c00cf00, 0x00000000, 0x069898c8,
+	0x06d81848, 0x06800707, 0x0d000007, 0x060c2208, 0x07800387,
+	0x0aa10007, 0x06800007, 0x0c7f10c0, 0x07c00387, 0x0649c909,
+	0x0aa10009, 0x06800087, 0x0c7f0f80, 0x07c01507, 0x07801487,
+	0x0a608007, 0x0c780900, 0x044011c7, 0x0aa0c087, 0x07801549,
+	0x078015c9, 0x0ae7c0c9, 0x040301c9, 0x070001c7, 0x054101c7,
+	0x04034209, 0x07000208, 0x094101c8, 0x0609cb07, 0x040381c9,
+	0x070001c7, 0x07800fc8, 0x020081c8, 0x0609ca08, 0x07c00fd9,
+	0x040941c9, 0x070001c7, 0x054101c7, 0x04090209, 0x07000208,
+	0x094101c8, 0x0609cc07, 0x04029209, 0x04001249, 0x07000208,
+	0x09464248, 0x07801808, 0x094e1248, 0x0609c909, 0x08007401,
+	0x06800009, 0x07c01489, 0x06800009, 0x07c01509, 0x078014c7,
+	0x02c07247, 0x04000295, 0x0a238047, 0x06800008, 0x04000296,
+	0x0a22c087, 0x06800048, 0x04000297, 0x0a220107, 0x06800088,
+	0x04000298, 0x0a214207, 0x068000c8, 0x06800047, 0x0c7f0140,
+	0x07c01507, 0x07801607, 0x090041c7, 0x0a8051c8, 0x0aa2001a,
+	0x07801607, 0x090841c7, 0x0a4051c8, 0x06800047, 0x03407207,
+	0x0c7ff980, 0x02c091c9, 0x07801347, 0x04090248, 0x07400247,
+	0x07801387, 0x04004249, 0x07400247, 0x07804187, 0x054031c7,
+	0x02c07687, 0x04029248, 0x07400247, 0x040301c8, 0x07800f49,
+	0x074001c9, 0x040341c8, 0x07800f09, 0x0a60c05a, 0x074001c9,
+	0x040006c8, 0x0a62009a, 0x040381c8, 0x074001d9, 0x07000709,
+	0x0aa1c009, 0x04401249, 0x0c780140, 0x07400709, 0x07800f89,
+	0x074001c9, 0x04000707, 0x07c00f99, 0x06800047, 0x03407207,
+	0x078014c9, 0x02c091c9, 0x07c014c9, 0x0609b20a, 0x0609b00a,
+	0x0609b10a, 0x068000c9, 0x0400125a, 0x07c01489, 0x0a60809a,
+	0x0c780340, 0x07801587, 0x07c015c7, 0x07c01588, 0x04000185,
+	0x04000144, 0x07801609, 0x05404249, 0x09404248, 0x07c01609,
+	0x0400010a, 0x0c7800c0, 0x00000000, 0x07c01548, 0x0649c108,
+	0x0aa2c008, 0x07800187, 0x0b61c087, 0x06800048, 0x0aa1c09a,
+	0x0aa0801a, 0x0aa14007, 0x040011c7, 0x07c00187, 0x0c780180,
+	0x07c001c8, 0x06800008, 0x07c001c8, 0x0c782280, 0x00000000,
+	0x0aa0c01a, 0x06801aec, 0x068057ac, 0x0c0049c0, 0x00000000,
+	0x0c008ac0, 0x00000000, 0x0c015b80, 0x00000000, 0x0c004e00,
+	0x00000000, 0x0c781f40, 0x00000000, 0x0c781ec0, 0x00000000,
+	0x078001c7, 0x0aaf4007, 0x00000000, 0x0400024a, 0x07800107,
+	0x0b4031c9, 0x0c781cc0, 0x00000000, 0x07c00109, 0x078040c7,
+	0x0682bc08, 0x0b004207, 0x00000000, 0x0fc031c0, 0x094e3247,
+	0x07c00349, 0x07804148, 0x0aa200c8, 0x07801dc8, 0x0b806209,
+	0x00000000, 0x07800307, 0x0a608007, 0x0c781880, 0x02409209,
+	0x078016c8, 0x0a805209, 0x07c016c9, 0x0680001e, 0x07c0001e,
+	0x09408789, 0x0981d39d, 0x0981d3dd, 0x09c1d1dd, 0x0c003e40,
+	0x00000000, 0x0c007f40, 0x00000000, 0x0c015000, 0x00000000,
+	0x0c004280, 0x00000000, 0x07804208, 0x0a610008, 0x07804247,
+	0x0fc01200, 0x0fc061c0, 0x07c00207, 0x094e11c8, 0x060c0a07,
+	0x0a61001a, 0x06800007, 0x0c7808c0, 0x07c01e07, 0x0fc011c0,
+	0x07c01e07, 0x08094200, 0x0a60c007, 0x0c780740, 0x00000000,
+	0x06815448, 0x06094208, 0x0680c008, 0x06094008, 0x07800087,
+	0x0aa18087, 0x06800047, 0x07804147, 0x0aa0c0c7, 0x06800087,
+	0x06800107, 0x0fc08200, 0x0fc08240, 0x09509248, 0x06094109,
+	0x0fc01200, 0x0fc08200, 0x0fc08240, 0x09509248, 0x06094109,
+	0x06094109, 0x0fc01200, 0x0aed4047, 0x044011c7, 0x0fc01200,
+	0x07c00048, 0x08094000, 0x078043c7, 0x0a60c007, 0x0c780540,
+	0x00000000, 0x0fc071c0, 0x080c2940, 0x07800207, 0x07804208,
+	0x094e11c8, 0x09807187, 0x098073c7, 0x060c0a07, 0x09c073c7,
+	0x09807387, 0x060c0a07, 0x0c009700, 0x080c0600, 0x064c0a07,
+	0x091c21c7, 0x0a6f8007, 0x00000000, 0x0c780100, 0x00000000,
+	0x0c009500, 0x080c0600, 0x07801e07, 0x0aa14007, 0x07800048,
+	0x094211c8, 0x05001208, 0x094411c8, 0x060c1807, 0x0cb8002c,
+	0x00000000, 0x064c0007, 0x0a2fc047, 0x00000000, 0x064c3a07,
+	0x090061c7, 0x0aaec647, 0x00000000, 0x080c0a00, 0x080c2300,
+	0x064c1e07, 0x09807547, 0x060c1e07, 0x080c2800, 0x080c0002,
+	0x0c7ec640, 0x00000000, 0x0649c015, 0x0649c116, 0x0649c217,
+	0x0649c318, 0x0809c000, 0x0809c100, 0x0809c200, 0x0809c300,
+	0x06804004, 0x06814105, 0x06824206, 0x0c000a40, 0x00000000,
+	0x08002501, 0x08002605, 0x08002708, 0x0800290d, 0x08002815,
+	0x08002c14, 0x06800000, 0x07c01c00, 0x0cc00000, 0x00000000,
+	0x06800007, 0x07c01907, 0x07c01987, 0x07c019c7, 0x07800607,
+	0x040011c7, 0x07c01887, 0x06800047, 0x060e0c07, 0x07c01a87,
+	0x07c018c7, 0x068003c7, 0x07c00147, 0x06805c07, 0x060c2107,
+	0x080c2170, 0x06800087, 0x07c01ac7, 0x0680001f, 0x07804148,
+	0x05406208, 0x0940321a, 0x07800387, 0x09461207, 0x060c0408,
+	0x06868008, 0x07c01a48, 0x0cc00000, 0x00000000, 0x0649cf30,
+	0x064c4002, 0x064c4203, 0x02403083, 0x040080c3, 0x07c012c3,
+	0x058100c3, 0x07c01303, 0x06800019, 0x07c01499, 0x07c014d9,
+	0x07c01519, 0x064c0919, 0x0680001a, 0x07c0019a, 0x07c001da,
+	0x068000c2, 0x07c04142, 0x06803fc2, 0x07c01542, 0x07c01582,
+	0x07c015c2, 0x07c01602, 0x060c0919, 0x060c1a19, 0x06932002,
+	0x060c1e02, 0x06800002, 0x060c0c02, 0x06c04042, 0x060c0d02,
+	0x0cc00000, 0x00000000, 0x0649c803, 0x0aa14003, 0x078014c2,
+	0x028020c2, 0x07c014c2, 0x0809c800, 0x07801502, 0x0aa0c002,
+	0x06800102, 0x06030502, 0x064c0003, 0x0a2100c3, 0x06800002,
+	0x0c7809c0, 0x00000000, 0x064c3a03, 0x090060c3, 0x0a60cac3,
+	0x0c780880, 0x00000000, 0x07804143, 0x0aa080c3, 0x0c780780,
+	0x064c4403, 0x091210c3, 0x0aa6c003, 0x068fffc3, 0x07801fc2,
+	0x04001082, 0x0b8190c2, 0x07c01fc2, 0x06800002, 0x07c01fc2,
+	0x07800402, 0x04001082, 0x0b8130c2, 0x07c00402, 0x064c0003,
+	0x09803203, 0x09803183, 0x09803003, 0x060c0003, 0x06800002,
+	0x064c1803, 0x095860c2, 0x09803483, 0x060c1803, 0x09c03483,
+	0x060c1803, 0x06800103, 0x06030503, 0x06800002, 0x07c01fc2,
+	0x07c00402, 0x0cc00000, 0x00000000, 0x064c442e, 0x09121bae,
+	0x0aaf802e, 0x0c7ea140, 0x00000000, 0x0c004ac0, 0x00000000,
+	0x06818109, 0x06c34749, 0x06090709, 0x06490b09, 0x09809009,
+	0x098090c9, 0x06090b09, 0x09c09009, 0x09c090c9, 0x0962225a,
+	0x06090b09, 0x06800009, 0x06c07489, 0x02009c09, 0x06094409,
+	0x06880009, 0x06c07489, 0x02009c09, 0x06094509, 0x0cc00000,
+	0x00000000, 0x07804149, 0x0a60c0c9, 0x0cc00000, 0x00000000,
+	0x06490707, 0x09807087, 0x098070c7, 0x06090707, 0x06495107,
+	0x098073c7, 0x0cc00000, 0x06095107, 0x0cc00000, 0x00400000,
+	0x064e1210, 0x091e1410, 0x0bef0050, 0x00000000, 0x0649d910,
+	0x0900c410, 0x0aef8190, 0x07801850, 0x0aa3c090, 0x0c7821c0,
+	0x06800011, 0x06c04011, 0x060e1211, 0x078016d1, 0x0a20c051,
+	0x0680001f, 0x0688001f, 0x06c0749f, 0x0201fc1f, 0x06800010,
+	0x07c01b10, 0x0c7813c0, 0x06800110, 0x07801b11, 0x0aa08091,
+	0x0c780f00, 0x07801892, 0x0aebc092, 0x0aa3c72f, 0x07801b50,
+	0x05406410, 0x078016d1, 0x05801451, 0x0be0c051, 0x06800011,
+	0x06880011, 0x06c07491, 0x02011c11, 0x02010450, 0x04440410,
+	0x060e1310, 0x0c780340, 0x040c07d0, 0x05405410, 0x078016d1,
+	0x0be0c051, 0x06800011, 0x06880011, 0x06c07491, 0x02011c11,
+	0x02010450, 0x04420410, 0x060e1310, 0x040607d0, 0x07801952,
+	0x0aa14012, 0x06a2c211, 0x0aa0c052, 0x06a2c011, 0x06a2c111,
+	0x06c04011, 0x060e1211, 0x06800010, 0x07c01b10, 0x06800110,
+	0x0c7816c0, 0x07c01850, 0x07801991, 0x06800192, 0x02411491,
+	0x02411491, 0x02411491, 0x07801a50, 0x05409410, 0x02010450,
+	0x05403450, 0x02011c11, 0x060e1311, 0x07801952, 0x0aa34012,
+	0x06a44211, 0x0aa2c052, 0x06a44011, 0x0c780240, 0x06a44111,
+	0x0a63c0d1, 0x07801a90, 0x064e0c12, 0x09010492, 0x0b8ea490,
+	0x0cc00000, 0x00400000, 0x06c0c011, 0x060e1211, 0x0680001f,
+	0x06800010, 0x07c01b10, 0x06800150, 0x0c780e80, 0x07c01850,
+	0x078018d1, 0x0aa1c011, 0x04401451, 0x07c018d1, 0x07801891,
+	0x04401451, 0x0c780b00, 0x07c01891, 0x078019d1, 0x07c01a11,
+	0x07801a50, 0x05409410, 0x02010450, 0x06800192, 0x02011491,
+	0x07c019d1, 0x05403450, 0x02011c11, 0x060e1311, 0x07801952,
+	0x0aa14012, 0x06a16211, 0x0aa0c052, 0x06a16011, 0x06a16111,
+	0x07801bd2, 0x0aa28012, 0x07801a90, 0x064e0c12, 0x09010492,
+	0x0b804490, 0x07801a12, 0x0c7fde80, 0x07c019d2, 0x04001410,
+	0x07c01a90, 0x07c01d91, 0x06c00011, 0x060e1211, 0x06800050,
+	0x0c780400, 0x07c01850, 0x0ba30110, 0x0c7ff540, 0x0a6f8050,
+	0x07801891, 0x0aa74011, 0x04401451, 0x0b26c051, 0x07c01891,
+	0x07801ad0, 0x0aa0c0d0, 0x00000000, 0x080c2170, 0x06800010,
+	0x07c01850, 0x0cc00000, 0x00400000, 0x0aa0c010, 0x0688001f,
+	0x0680001f, 0x06c0749f, 0x0c780a40, 0x0201fc1f, 0x0aa0c72f,
+	0x090a841f, 0x090c741f, 0x07800992, 0x0b823490, 0x0a8f5490,
+	0x091a141f, 0x0aa20010, 0x0688001f, 0x0c780180, 0x0680001f,
+	0x0aa7001f, 0x07801991, 0x0c7ffcc0, 0x00000000, 0x06c0749f,
+	0x0201fc1f, 0x07801a50, 0x05409410, 0x06800192, 0x02411491,
+	0x02010450, 0x05403450, 0x02011c11, 0x060e1311, 0x07801d90,
+	0x09004450, 0x0aa14011, 0x06a14210, 0x0aa0c111, 0x06a14010,
+	0x06a14110, 0x06c08010, 0x060e0d1f, 0x0aa0c72f, 0x040207df,
+	0x040207df, 0x0c7ff4c0, 0x060e1210, 0x07801a50, 0x05409410,
+	0x02010450, 0x06800192, 0x02011491, 0x07c01991, 0x05403450,
+	0x02011c11, 0x060e1311, 0x07801d90, 0x0a61801f, 0x09c101d0,
+	0x060e1210, 0x068000d0, 0x0c7ff0c0, 0x07c01850, 0x06c08010,
+	0x060e0d1f, 0x0aae872f, 0x040207df, 0x0c7ffe00, 0x040207df,
+	0x0c000d00, 0x00000000, 0x08095007, 0x08095000, 0x07804347,
+	0x07804308, 0x094a51c8, 0x078042c8, 0x095411c8, 0x06096e07,
+	0x0aa0c008, 0x06800088, 0x06800048, 0x060c3108, 0x06800048,
+	0x0780098a, 0x068002c9, 0x0b00324a, 0x00000000, 0x06800008,
+	0x06498e0a, 0x097c1288, 0x06098e0a, 0x06497f08, 0x068000ca,
+	0x0970220a, 0x06097f08, 0x06820988, 0x06c00208, 0x0968221a,
+	0x0780098a, 0x0b20c2ca, 0x068004ca, 0x06800c0a, 0x0970620a,
+	0x0cc00000, 0x06095108, 0x0683ffc8, 0x06490909, 0x0a210049,
+	0x0aa0c008, 0x0c7fff40, 0x04401208, 0x06490b09, 0x09809009,
+	0x098090c9, 0x06090b09, 0x09c09009, 0x09c090c9, 0x06090b09,
+	0x0cc00000, 0x00000000, 0x0683ffc9, 0x0649bb08, 0x0920c208,
+	0x0649530a, 0x0900128a, 0x02008288, 0x0aa10008, 0x0aa0c009,
+	0x0c7ffe40, 0x04401249, 0x0cc00000, 0x00000000, 0x064e1209,
+	0x091e1249, 0x0bef8049, 0x064e0009, 0x064e0e0b, 0x064e0c0c,
+	0x083f0040, 0x083f0000, 0x0680020d, 0x0d00000d, 0x00000000,
+	0x060e0009, 0x060e0e0b, 0x0cc00000, 0x060e0c0c, 0x0c07fc40,
+	0x00000000, 0x06490b09, 0x09809009, 0x09809089, 0x06090b09,
+	0x09c09009, 0x09c09089, 0x06090b09, 0x08095007, 0x08095000,
+	0x0c000500, 0x00000000, 0x06800007, 0x07c00307, 0x06800007,
+	0x07c01907, 0x07c01987, 0x07c019c7, 0x07800607, 0x040011c7,
+	0x07c01887, 0x06800047, 0x060e0c07, 0x07c01a87, 0x07c018c7,
+	0x068003c7, 0x07c00147, 0x06800007, 0x0cc00000, 0x07c01847,
+	0x0683ffc9, 0x06498f0a, 0x0aa0c009, 0x0a6f800a, 0x04401249,
+	0x064c3d0a, 0x0580a28a, 0x0bef80ca, 0x00000000, 0x06498e0a,
+	0x0980a00a, 0x06800fc9, 0x09706289, 0x06098e0a, 0x06800009,
+	0x09706289, 0x09c0a00a, 0x0cc00000, 0x06098e0a, 0x064c3a08,
+	0x09006208, 0x064c0809, 0x064c090a, 0x064c1e0b, 0x064c380c,
+	0x06800407, 0x063f0007, 0x06800007, 0x063f0007, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x060c0809, 0x060c090a,
+	0x060c1e0b, 0x060c380c, 0x0c07ef00, 0x00000000, 0x06800009,
+	0x060c0c09, 0x06c04049, 0x060c0d09, 0x064c1809, 0x09586248,
+	0x09809489, 0x060c1809, 0x09c09489, 0x060c1809, 0x0cc00000,
+	0x080c0a01, 0x0680072f, 0x06bfffcb, 0x06800024, 0x07801c20,
+	0x06800021, 0x06800025, 0x06800022, 0x06800026, 0x06800023,
+	0x06800027, 0x0680800a, 0x0680070e, 0x0740028b, 0x0400128a,
+	0x074002a4, 0x0400128a, 0x074002a0, 0x0400128a, 0x074002a1,
+	0x0400128a, 0x074002a5, 0x0400128a, 0x074002a2, 0x0400128a,
+	0x074002a6, 0x0400128a, 0x074002a3, 0x0400128a, 0x074002a7,
+	0x0d07fbce, 0x0400128a, 0x07c01c4b, 0x096102cb, 0x080c0700,
+	0x060c270b, 0x09610824, 0x060c0220, 0x09610865, 0x0aa1801a,
+	0x060c0221, 0x096108a6, 0x060c0222, 0x096108e7, 0x060c0223,
+	0x0780098e, 0x0b009bce, 0x06b80007, 0x06c07487, 0x02007c07,
+	0x06035107, 0x06803f07, 0x06035207, 0x06a08007, 0x06035007,
+	0x07800007, 0x0a60c007, 0x06803fc7, 0x07c01c87, 0x06800007,
+	0x07c01d47, 0x0ac0bbce, 0x07801c87, 0x0b613fc7, 0x0ba0c707,
+	0x0441c1c7, 0x07c01c87, 0x06435007, 0x0580f1c7, 0x0bef8047,
+	0x0cc00000, 0x00000000, 0x06435007, 0x0580f1c7, 0x0bef8047,
+	0x00000000, 0x06435307, 0x0900c1c7, 0x0a6f8007, 0x00000000,
+	0x06b80007, 0x06c07487, 0x02007c07, 0x06035107, 0x06803f07,
+	0x06035207, 0x06b0c007, 0x06035007, 0x054011ef, 0x0ac051ce,
+	0x06800087, 0x07c01cc7, 0x0c7ff880, 0x07c01d07, 0x06b90008,
+	0x06c07488, 0x02008c08, 0x0540126f, 0x02009bc9, 0x0680008a,
+	0x07c01cca, 0x068000ca, 0x06435007, 0x0580f1c7, 0x0bef8047,
+	0x06803f07, 0x06035108, 0x06035207, 0x06a08007, 0x06035007,
+	0x0ac0324e, 0x0c7ff3c0, 0x07c01d0a, 0x06808007, 0x020081c8,
+	0x02009bc9, 0x0c7ffc80, 0x0400128a, 0x0400130c, 0x0480f30c,
+	0x07c01d0c, 0x0980b38b, 0x07801ccc, 0x0540928c, 0x0200a24a,
+	0x0400130c, 0x0480f30c, 0x07c01ccc, 0x0643500c, 0x0580f30c,
+	0x06c0748a, 0x0bef404c, 0x0200ac0a, 0x0643530c, 0x0900c30c,
+	0x0a6f800c, 0x00000000, 0x0603510a, 0x06803f0a, 0x0603520a,
+	0x0c7fedc0, 0x0603500b, 0x064c2307, 0x0befc047, 0x0cc00000,
+	0x064c2007, 0x040011c7, 0x06800008, 0x0a20c047, 0x058011c7,
+	0x024071c8, 0x0cc00000, 0x00000000, 0x02409247, 0x048ff249,
+	0x05401249, 0x02407207, 0x048ff1c7, 0x054011c7, 0x0680000a,
+	0x0680000b, 0x06800048, 0x0b8041c8, 0x054012cb, 0x0980b04b,
+	0x024081c8, 0x05401208, 0x0b2ec20a, 0x0400128a, 0x058012cb,
+	0x0e0002c9, 0x00000000, 0x00000000, 0x0cc00000, 0x0f000240,
+	0x02409247, 0x06807fca, 0x02809289, 0x02407207, 0x06807fca,
+	0x02807287, 0x0680000a, 0x0680000b, 0x06800048, 0x0b8041c8,
+	0x054012cb, 0x0980b04b, 0x024081c8, 0x05401208, 0x0b2ec20a,
+	0x0400128a, 0x058012cb, 0x0e0002c9, 0x00000000, 0x00000000,
+	0x0cc00000, 0x0f000240, 0x024091c9, 0x06807fca, 0x02809289,
+	0x024071c8, 0x06807fca, 0x02807287, 0x0680000a, 0x0680000b,
+	0x06800048, 0x0b8041c8, 0x054012cb, 0x0980b04b, 0x024081c8,
+	0x05401208, 0x0b2ec20a, 0x0400128a, 0x058012cb, 0x0e0002c9,
+	0x00000000, 0x00000000, 0x0cc00000, 0x0f000240, 0x02407207,
+	0x06807fca, 0x02807287, 0x0680000a, 0x0680000b, 0x06800048,
+	0x0b8041c8, 0x054012cb, 0x0980b04b, 0x024081c8, 0x05401208,
+	0x0b2ec34a, 0x0400128a, 0x0cc00000, 0x0580124b, 0x07804187,
+	0x0a60c007, 0x06800088, 0x06800048, 0x07c04148, 0x0a60c01a,
+	0x068057ac, 0x0680005a, 0x0cc00000, 0x00000000, 0x024091c9,
+	0x06807fc8, 0x02809209, 0x0680000a, 0x0680000b, 0x06800048,
+	0x0b8041c8, 0x054012cb, 0x0980b04b, 0x024081c8, 0x05401208,
+	0x0b2ec20a, 0x0400128a, 0x058012cb, 0x0e0002c9, 0x00000000,
+	0x00000000, 0x0cc00000, 0x0f000240, 0x0aa1409a, 0x0aa0801a,
+	0x0c784cc0, 0x0cc00000, 0x00000000, 0x07801ec7, 0x07801e88,
+	0x02407207, 0x048ff1c7, 0x054011c7, 0x07c00447, 0x07801f07,
+	0x07801e88, 0x02407207, 0x048ff1c7, 0x054011c7, 0x07c00487,
+	0x07804149, 0x0aa140c9, 0x07800389, 0x0a60c009, 0x00000000,
+	0x044011c7, 0x0c07f580, 0x07800449, 0x06800f88, 0x09646248,
+	0x060c3009, 0x07800487, 0x07804149, 0x0aa280c9, 0x07800389,
+	0x0aa0c009, 0x00000000, 0x040011c7, 0x0c07f280, 0x07800449,
+	0x06800fc8, 0x09646248, 0x060c3009, 0x07804147, 0x0aa080c7,
+	0x0c780bc0, 0x07801e88, 0x05401208, 0x07801ec7, 0x0c07e980,
+	0x054011c7, 0x06800c08, 0x09646248, 0x060c3009, 0x07801e48,
+	0x05401208, 0x07801ec7, 0x0c07e780, 0x054011c7, 0x06800c48,
+	0x09646248, 0x060c3009, 0x07801f07, 0x07801e88, 0x02407207,
+	0x048ff1c7, 0x05401247, 0x07801ec7, 0x07801f08, 0x02407207,
+	0x048ff1c7, 0x054011c7, 0x09529247, 0x06800d08, 0x09646248,
+	0x060c3009, 0x07801f07, 0x07801e88, 0x0c07d1c0, 0x07801e89,
+	0x06800808, 0x09646248, 0x060c3009, 0x07801ec7, 0x07801f08,
+	0x0c07d000, 0x07801f09, 0x06800888, 0x09646248, 0x060c3009,
+	0x0cc00000, 0x00000000, 0x07801f8c, 0x0aa0c00c, 0x0780038c,
+	0x0680000c, 0x0a61c00c, 0x07801ec7, 0x054011c7, 0x07801e88,
+	0x05401208, 0x0c780180, 0x04001208, 0x07801ec7, 0x054011c7,
+	0x040011c7, 0x04401207, 0x0c07db00, 0x00000000, 0x06800c08,
+	0x09646248, 0x0a60c00c, 0x00000000, 0x098093c9, 0x060c3009,
+	0x0a61800c, 0x07801ec7, 0x054011c7, 0x07801e88, 0x0c780200,
+	0x05401208, 0x07801ec7, 0x054011c7, 0x040011c7, 0x07801e88,
+	0x05401208, 0x04001208, 0x0c07d600, 0x00000000, 0x06800c48,
+	0x09646248, 0x0aa0c00c, 0x00000000, 0x098093c9, 0x060c3009,
+	0x0a61c00c, 0x07801ec7, 0x054011c7, 0x07801e48, 0x05401208,
+	0x0c7801c0, 0x04001208, 0x07801ec7, 0x054011c7, 0x040011c7,
+	0x07801e88, 0x05401208, 0x0c07d100, 0x00000000, 0x06800c88,
+	0x09646248, 0x060c3009, 0x0a61800c, 0x07801ec7, 0x054011c7,
+	0x07801e48, 0x0c780200, 0x05401208, 0x07801ec7, 0x054011c7,
+	0x040011c7, 0x07801e48, 0x05401208, 0x04001208, 0x0c07ccc0,
+	0x00000000, 0x06800cc8, 0x09646248, 0x060c3009, 0x0780038c,
+	0x07801f07, 0x0aa0c00c, 0x054011c7, 0x040011c7, 0x07801e88,
+	0x05401208, 0x02407207, 0x06807fca, 0x02809287, 0x07801ec7,
+	0x0aa1800c, 0x054011c7, 0x07801f88, 0x0a60c008, 0x00000000,
+	0x040011c7, 0x07801f08, 0x0aa0c00c, 0x05401208, 0x04001208,
+	0x02407207, 0x02807287, 0x09529247, 0x06800d08, 0x09646248,
+	0x060c3009, 0x07801f07, 0x0aa0c00c, 0x054011c7, 0x040011c7,
+	0x07801e88, 0x05401208, 0x04001208, 0x02407207, 0x06807fca,
+	0x02809287, 0x07801ec7, 0x0aa1800c, 0x054011c7, 0x07801f88,
+	0x0a60c008, 0x00000000, 0x040011c7, 0x07801f08, 0x0aa0c00c,
+	0x05401208, 0x04001208, 0x02407207, 0x02807287, 0x09529247,
+	0x06800d48, 0x09646248, 0x060c3009, 0x0aa0c00c, 0x0680000c,
+	0x0680004c, 0x07801f07, 0x054011c7, 0x02007307, 0x07801e88,
+	0x05401208, 0x04001208, 0x0c07b0c0, 0x04000248, 0x06800808,
+	0x09646248, 0x060c3009, 0x07801f07, 0x054011c7, 0x02007307,
+	0x07801e88, 0x05401208, 0x0c07ae40, 0x04001248, 0x06800848,
+	0x09646248, 0x060c3009, 0x07801f07, 0x054011c7, 0x02007307,
+	0x07801ec8, 0x05401208, 0x0c07b140, 0x04000248, 0x06800888,
+	0x09646248, 0x060c3009, 0x07801f07, 0x054011c7, 0x02007307,
+	0x07801ec8, 0x05401208, 0x04001208, 0x0c07ae80, 0x04401248,
+	0x068008c8, 0x09646248, 0x060c3009, 0x07801f07, 0x054011c7,
+	0x02007307, 0x07801e88, 0x05401208, 0x04001208, 0x0c07a640,
+	0x04401248, 0x06800908, 0x09646248, 0x060c3009, 0x07801f07,
+	0x054011c7, 0x02007307, 0x07801e88, 0x05401208, 0x0c07a3c0,
+	0x04000248, 0x06800948, 0x09646248, 0x060c3009, 0x07801f07,
+	0x054011c7, 0x02007307, 0x07801ec8, 0x05401208, 0x0c07a6c0,
+	0x04001248, 0x06800988, 0x09646248, 0x060c3009, 0x07801f07,
+	0x054011c7, 0x02007307, 0x07801ec8, 0x05401208, 0x04001208,
+	0x0c07a400, 0x04400248, 0x068009c8, 0x09646248, 0x060c3009,
+	0x0cc00000, 0x00000000, 0x07804147, 0x0aa080c7, 0x0c7807c0,
+	0x07801f07, 0x07801e88, 0x0c079600, 0x07801e89, 0x06800808,
+	0x09646248, 0x060c3009, 0x07801ec7, 0x07801e48, 0x0c079440,
+	0x07801e89, 0x06800848, 0x09646248, 0x060c3009, 0x07801ec7,
+	0x07801e88, 0x0c079280, 0x07801e49, 0x06800908, 0x09646248,
+	0x060c3009, 0x07801ec7, 0x07801e48, 0x0c0790c0, 0x07801e49,
+	0x06800948, 0x09646248, 0x060c3009, 0x0cc00000, 0x00000000,
+	0x0780038c, 0x0aa0800c, 0x0c780880, 0x0680080d, 0x07801f07,
+	0x054011c7, 0x0900230d, 0x07801e88, 0x05401208, 0x0aa2004c,
+	0x0aa1c00c, 0x04001208, 0x07801e48, 0x05401208, 0x0aa0c0cc,
+	0x00000000, 0x04001208, 0x0904230d, 0x07801e89, 0x05401249,
+	0x0aa2004c, 0x0aa1c00c, 0x04001249, 0x07801e49, 0x05401249,
+	0x0aa0c0cc, 0x00000000, 0x04001249, 0x0c078d80, 0x00000000,
+	0x0964624d, 0x060c3009, 0x0ba90bcd, 0x0400134d, 0x0cc00000,
+	0x00000000, 0x0680080d, 0x07801f07, 0x054011c7, 0x040011c7,
+	0x0900230d, 0x07801f08, 0x0aa2800c, 0x05401208, 0x07801e88,
+	0x05401208, 0x0aa1808c, 0x0aa1404c, 0x04001208, 0x07801e48,
+	0x05401208, 0x04001208, 0x0904230d, 0x07801f09, 0x0aa2800c,
+	0x05401249, 0x07801e89, 0x05401249, 0x0aa1808c, 0x0aa1404c,
+	0x04001249, 0x07801e49, 0x05401249, 0x04001249, 0x0c078480,
+	0x00000000, 0x0964624d, 0x060c3009, 0x0ba84bcd, 0x0400134d,
+	0x0cc00000, 0x00000000, 0x07804147, 0x0a6140c7, 0x06099004,
+	0x06099105, 0x0c780240, 0x06099206, 0x06099004, 0x06099104,
+	0x06099205, 0x06099305, 0x06099406, 0x0c780080, 0x06099506,
+	0x0aa3c09a, 0x0aa0805a, 0x0cc00000, 0x07804147, 0x0698d908,
+	0x0aa1c0c7, 0x06d85888, 0x0688d108, 0x0aa10087, 0x06c85088,
+	0x06910948, 0x06d088c8, 0x080c2400, 0x0cc00000, 0x060c2208,
+	0x07804147, 0x0698d908, 0x0aa100c7, 0x06d85888, 0x06800008,
+	0x06d088c8, 0x080c2400, 0x060c2208, 0x07804147, 0x069898c8,
+	0x0aa100c7, 0x06d81848, 0x06800008, 0x06c85008, 0x080c2408,
+	0x0cc00000, 0x060c2208
+};
diff --git a/drivers/amlogic/amports/arch/ucode/avs/txl_avs_linux.h b/drivers/amlogic/amports/arch/ucode/avs/txl_avs_linux.h
new file mode 100644
index 0000000..3a12097
--- /dev/null
+++ b/drivers/amlogic/amports/arch/ucode/avs/txl_avs_linux.h
@@ -0,0 +1,540 @@
+/*
+ * drivers/amlogic/amports/arch/ucode/avs/gxm_avs_linux.h
+ *
+ * Copyright (C) 2015 Amlogic, Inc. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+*/
+
+static const u32 MicroCode[] __initconst = {
+	0x6807801, 0x6800000, 0xd000001, 0x7400040, 0xc014780,
+	0x0000000, 0x0000000, 0x0000000, 0x80c0002, 0x6932000,
+	0x9800580, 0x60c1e00, 0x6bfdac0, 0x7c017c0, 0x6030400,
+	0x0400000, 0xc0159c0, 0x0000000, 0x0000000, 0x0000000,
+	0x0000000, 0xc7ffec0, 0x0000000, 0x0000000, 0x0000000,
+	0x0000000, 0x0000000, 0x0000000, 0x0000000, 0x0000000,
+	0x0000000, 0x0000000, 0xcc00000, 0x0400000, 0xcc00000,
+	0x0400000, 0xc780540, 0x64c0007, 0xc796240, 0x0000000,
+	0xc796c40, 0x0000000, 0xcc00000, 0x0400000, 0xcc00000,
+	0x0400000, 0xc796ac0, 0x0000000, 0xcc00000, 0x0400000,
+	0x6800009, 0x7c01fc9, 0x7c00409, 0x0800000, 0x78017c9,
+	0xc7ffe40, 0x6030409, 0x6bfd9c9, 0x6030409, 0x0400000,
+	0xa2d8047, 0x7801509, 0xaa14009, 0xa608049, 0xc78f800,
+	0xa608089, 0xc78ecc0, 0xa23c807, 0xc786200, 0x0000000,
+	0x649d008, 0xaa0c008, 0x809c701, 0xc780000, 0xc01a540,
+	0x80c0a00, 0xc01a880, 0x0000000, 0xc01bb40, 0x0000000,
+	0xc792fc0, 0x0000000, 0xbecd007, 0x78043c8, 0xaa0c008,
+	0xa208207, 0xc792e40, 0x78003c7, 0xa6fc007, 0x78043c7,
+	0xa63c007, 0x64c2907, 0xbe2c407, 0x7800007, 0xa62c007,
+	0x0000000, 0x64c2907, 0x91c11c7, 0xa61c047, 0x0000000,
+	0x64c0607, 0x900f1c7, 0xae0c047, 0xc792a00, 0x0000000,
+	0xcb8002c, 0x0000000, 0x68fdfca, 0x64e0408, 0x2808288,
+	0x2c08748, 0x60e0408, 0x60c071e, 0x64c0324, 0x64c0325,
+	0x64c2728, 0x9210268, 0x7800007, 0xa618007, 0x7801c08,
+	0x6c00008, 0x60c0208, 0x80c0200, 0x6bfffc9, 0x60c0320,
+	0x60c0321, 0x7801c48, 0x9610209, 0x60c2708, 0x7801847,
+	0xa6fc007, 0x7800147, 0x7c01b87, 0x6800347, 0x7c00147,
+	0x60c2507, 0x80c2602, 0x80c260f, 0x80c2603, 0x4c001c7,
+	0x9807207, 0x60c2107, 0x7801907, 0xaa14007, 0x6a01008,
+	0xaa0c047, 0x6a22008, 0x6a40008, 0x6c00108, 0x60e0508,
+	0x7801b08, 0x6801809, 0x9502248, 0x60c2109, 0x80c260e,
+	0x6800088, 0x7c01947, 0xba0c087, 0x40011c7, 0x6800007,
+	0x7c01907, 0x7800007, 0x7c01b47, 0x7801b87, 0x7c01bc7,
+	0x7c01848, 0x8030580, 0x7801d47, 0xaa1472f, 0x40011c7,
+	0x78016c8, 0xa20c048, 0x0000000, 0x7c01d47, 0x683ffc8,
+	0x64c2307, 0x93041c7, 0xaa0c008, 0xa6f4007, 0x4401208,
+	0x7801c8d, 0xba13fcd, 0x6800008, 0xc781100, 0x7c01c88,
+	0x6808008, 0xba1070d, 0x400024d, 0x441c249, 0x680c008,
+	0x5403289, 0x200a24a, 0x2008288, 0x7400228, 0x4001208,
+	0x92102e4, 0x740020b, 0x4001208, 0x7400224, 0x4001208,
+	0x7400225, 0x4001208, 0x92102e5, 0x740020b, 0x4001208,
+	0x7400226, 0x4001208, 0x92102e6, 0x740020b, 0x4001208,
+	0x7400227, 0x4001208, 0x92102e7, 0x740020b, 0x7800988,
+	0xac07bc8, 0x780000a, 0xaa3872f, 0x40002ca, 0x78016ca,
+	0xc7802c0, 0x942f28b, 0xa61000a, 0xaa1472f, 0x78016ca,
+	0xa20c04a, 0xa6146c9, 0x400128d, 0xb60c70d, 0x680000a,
+	0x680070a, 0x7c01c8a, 0xb013bc8, 0xaa0800a, 0xa64470a,
+	0x7801cca, 0xa20c04a, 0x6a0800b, 0x6a0c00b, 0x6b80009,
+	0x7801d0c, 0x540928c, 0x200a24a, 0x6c0748a, 0x200ac0a,
+	0x603510a, 0x6803f0a, 0x603520a, 0x603500b, 0xc01b5c0,
+	0x0000000, 0x7800007, 0x40011c7, 0x7c00007, 0x9c1d39d,
+	0x7800988, 0xb405207, 0x40011c7, 0xb833207, 0xc780c80,
+	0x981d1dd, 0x6800007, 0x7c00007, 0x981d39d, 0x9c1d3dd,
+	0x9c1d1dd, 0x78016c8, 0x4001208, 0x7801dc9, 0xb828248,
+	0x7c016c8, 0x7801847, 0xa6fc007, 0x0000000, 0x6430507,
+	0xa2f0107, 0x6a00007, 0x60c3d07, 0x7800147, 0xaa24007,
+	0x6803fcb, 0x7801a88, 0x64e0c09, 0x9010249, 0xb804248,
+	0xaa0c00b, 0xc7ffec0, 0x44012cb, 0x7804147, 0xaa280c7,
+	0x7800347, 0x7801dc8, 0xb407207, 0xc01c7c0, 0x7c00348,
+	0x6800048, 0x7c00308, 0xc789740, 0x7c00388, 0x6800008,
+	0x7c00308, 0x7c00388, 0xc78f840, 0x64c0007, 0xb60c709,
+	0x6808008, 0x680c008, 0xc780400, 0x6800007, 0x7800007,
+	0x9508787, 0x78016c9, 0x9408789, 0x7800989, 0xb009bc9,
+	0x6808008, 0xaad0007, 0x7801c89, 0x40011c9, 0xba10707,
+	0xb6c0e07, 0x680c008, 0x441c1c7, 0x5403247, 0x20091c9,
+	0x2008248, 0x7000209, 0x7c01c49, 0x4001208, 0x7000209,
+	0x4001208, 0x7000220, 0x9610809, 0x4001208, 0x7000221,
+	0x4001208, 0x7000209, 0x9610849, 0x4001208, 0x7000222,
+	0x4001208, 0x7000209, 0x9610889, 0x4001208, 0x7000223,
+	0x4001208, 0x7000209, 0x96108c9, 0xc7fb580, 0x0000000,
+	0x68fdfca, 0x64e0408, 0x2808288, 0x2c08748, 0x60e0408,
+	0x60c071e, 0x64c0324, 0x64c0325, 0x64c0326, 0x64c0327,
+	0x64c2728, 0x60c071e, 0x9210268, 0x7800007, 0xa638007,
+	0x7801c08, 0x6c00008, 0x60c0208, 0x6800008, 0x6c00008,
+	0x60c0208, 0x6800008, 0x6c00008, 0x60c0208, 0x6800008,
+	0x6c00008, 0x60c0208, 0x6bfffc9, 0x60c0320, 0x60c0321,
+	0x60c0322, 0x60c0323, 0x7801c48, 0x9610209, 0x60c2708,
+	0x7804287, 0x54031c7, 0x4c301c7, 0x7801f8a, 0x95011ca,
+	0x60c2507, 0x780184a, 0xa6fc00a, 0x7800147, 0x7c01b87,
+	0x64c2307, 0x9304207, 0xa6f8008, 0x90a1207, 0x90241c7,
+	0x95211c8, 0x64c0609, 0x9010249, 0xaa10009, 0x0000000,
+	0x6800007, 0x6800008, 0x7c00147, 0xaa60347, 0x60c2507,
+	0xaa60287, 0xaa18048, 0xa60c007, 0xc780200, 0x0000000,
+	0x80c2605, 0x80c2606, 0x80c2607, 0x80c2602, 0x80c260f,
+	0x80c2603, 0x7801ac8, 0xaa100c8, 0x6800089, 0xc7fb8c0,
+	0x7c01ac9, 0x780184b, 0xa6fc00b, 0x0000000, 0x7c01b08,
+	0xc7fb740, 0x7c01ac9, 0x80c2602, 0x80c260f, 0x80c2603,
+	0x7801ac8, 0xaa48088, 0x68000c9, 0x7800008, 0xaa0c008,
+	0xc7fb4c0, 0x7c01ac9, 0x6803fcb, 0x7801a88, 0x64e0c09,
+	0x9010249, 0xb804248, 0xaa0c00b, 0xc7ffec0, 0x44012cb,
+	0x6800088, 0x68000c9, 0x680180b, 0x60c210b, 0x780184b,
+	0xa6fc00b, 0x0000000, 0x7c01b08, 0xc7fb040, 0x7c01ac9,
+	0xa279007, 0x0000000, 0x649d00a, 0xaa0c00a, 0x809c701,
+	0xc780000, 0xc014340, 0x80c0a00, 0xc014680, 0x0000000,
+	0xc015480, 0x0000000, 0x64c000a, 0x9c0a18a, 0x980a20a,
+	0x980a00a, 0x60c000a, 0x80c2300, 0x64c1e08, 0x9c081c8,
+	0x9808008, 0x60c1e08, 0x98081c8, 0x9c08008, 0x60c1e08,
+	0x64c080a, 0x980a34a, 0x60c080a, 0xc014840, 0x0000000,
+	0x64c1a07, 0xaa10007, 0x6800008, 0xc78c880, 0x0000000,
+	0x64c1e0a, 0x980a60a, 0x60c1e0a, 0x6809009, 0x60c0809,
+	0x64c1e0a, 0x980a74a, 0x980a7ca, 0x60c1e0a, 0xfc08280,
+	0xaa3ec0a, 0x649c108, 0xaa2c008, 0xaa12cca, 0xaa1ad8a,
+	0xae22bca, 0xc78a5c0, 0x6800007, 0xc780980, 0x7c00387,
+	0x6800007, 0xc781ec0, 0x7c00387, 0xc78c240, 0x0000000,
+	0xfc08280, 0x7c0400a, 0x609c40a, 0xfc08280, 0xfc01280,
+	0x500128a, 0x7c0404a, 0xfc0e1c0, 0x7c04087, 0x609c107,
+	0xfc0e1c0, 0x7c040c7, 0x609c207, 0xfc021c0, 0xfc031c0,
+	0xfc041c0, 0x609c007, 0xfc041c0, 0x609c307, 0xfc091c0,
+	0xfc091c0, 0xfc011c0, 0xfc0c1c0, 0xfc011c0, 0x7c04107,
+	0xfc011c0, 0xfc091c0, 0xfc091c0, 0xfc031c0, 0xc78ba80,
+	0x0000000, 0x6800007, 0x7c01f87, 0x7804007, 0xa611207,
+	0xfc101c0, 0xfc011c0, 0xfc071c0, 0xfc011c0, 0xaa10007,
+	0x0000000, 0xfc0c1c0, 0xfc0c1c0, 0xfc011c0, 0x7802047,
+	0x7c02007, 0x7802087, 0x7c02047, 0xfc081c0, 0x7c02087,
+	0x7804107, 0xaa10007, 0xc016b00, 0x80c2301, 0x7c01f47,
+	0xfc011c0, 0x7802088, 0x95c1207, 0x7c02088, 0x50011c7,
+	0x7c01807, 0xaa30007, 0x68000c8, 0xfc011c0, 0xa624007,
+	0x68000c8, 0xfc011c0, 0x7c04187, 0xa60c007, 0x6800048,
+	0x6800088, 0xc780140, 0x7c04148, 0x7c04148, 0xfc011c0,
+	0x7c04187, 0xfc011c0, 0x7c041c7, 0xfc011c0, 0x7c04207,
+	0xfc061c0, 0x7c04247, 0x6800087, 0x7c00087, 0x6800808,
+	0x60c2108, 0x7801807, 0xaa18007, 0x6800008, 0x7804147,
+	0xaa0c0c7, 0x0000000, 0xfc01200, 0x7c04288, 0xfc041c0,
+	0xfc011c0, 0x7c042c7, 0xa648007, 0x6800008, 0xfc011c0,
+	0xaa34007, 0x6800009, 0xc015e80, 0x80c2301, 0xc015f00,
+	0x0000000, 0x7c04307, 0xc015d40, 0x80c2301, 0xc015dc0,
+	0x0000000, 0xc780100, 0x7c04347, 0x7c04308, 0x7c04349,
+	0x6800007, 0x7c00107, 0xc782a00, 0x680001a, 0x7804007,
+	0xa611207, 0xfc101c0, 0xfc011c0, 0xfc071c0, 0xfc021c0,
+	0xa60c047, 0xc780180, 0x680005a, 0xfc081c0, 0x7c020c7,
+	0xc780240, 0x680009a, 0x7802047, 0x7c02007, 0x7802087,
+	0x7c02047, 0xfc081c0, 0x7c02087, 0x7c020c7, 0x7804107,
+	0xaa10007, 0xc0154c0, 0x80c2301, 0x7c01f47, 0xfc011c0,
+	0x78020c8, 0x95c1207, 0xaa0c09a, 0x7c020c8, 0x7c02088,
+	0x50011c7, 0x7c01807, 0xaa34007, 0x68000c8, 0xfc011c0,
+	0xa628007, 0x68000c8, 0xfc011c0, 0xfc011c0, 0x7c04187,
+	0xa60c007, 0x6800048, 0x6800088, 0xc780140, 0x7c04148,
+	0x7c04148, 0xfc011c0, 0x7c04187, 0xfc011c0, 0x7c041c7,
+	0xfc011c0, 0x7c04207, 0xfc061c0, 0x7c04247, 0x78020c7,
+	0x48ff207, 0x7c01f08, 0x91c11c7, 0xaa5c007, 0x7802007,
+	0x91c1207, 0xa610008, 0x48ff1c7, 0x54011c7, 0x48ff1c7,
+	0x7c01e47, 0x7802047, 0x91c1207, 0xa610008, 0x48ff1c7,
+	0x54011c7, 0x48ff1c7, 0x7c01e87, 0x7802087, 0x91c1207,
+	0xa610008, 0x48ff1c7, 0x54011c7, 0x48ff1c7, 0xc780b40,
+	0x7c01ec7, 0x7802007, 0x91c1207, 0xaa2c008, 0x48ff1c7,
+	0x58011c7, 0x7801f08, 0xb4031c8, 0x6804009, 0x2008248,
+	0x24091c8, 0xba0e009, 0xc7fff80, 0x40801c7, 0x7c01e47,
+	0x7802047, 0x91c1207, 0xaa2c008, 0x48ff1c7, 0x58011c7,
+	0x7801f08, 0xb4031c8, 0x6804009, 0x2008248, 0x24091c8,
+	0xba0e009, 0xc7fff80, 0x40801c7, 0x7c01e87, 0x7802087,
+	0x91c1207, 0xaa2c008, 0x48ff1c7, 0x58011c7, 0x7801f08,
+	0xb0031c8, 0x6804009, 0x2408248, 0x2409207, 0xba0e009,
+	0xc7fff80, 0x44801c7, 0x48ff1c7, 0x7c01ec7, 0xa61409a,
+	0x7804147, 0xa60c0c7, 0xc780240, 0x6800808, 0xfc011c0,
+	0x7c00087, 0xa6f0007, 0x6800808, 0x6800047, 0x9505207,
+	0x9605207, 0x60c2108, 0xfc011c0, 0xfc011c0, 0x7c01f87,
+	0xfc021c0, 0xfc011c0, 0x7c04287, 0xfc011c0, 0x7c042c7,
+	0xa648007, 0x6800008, 0xfc011c0, 0xaa34007, 0x6800009,
+	0xc013480, 0x80c2301, 0xc013500, 0x0000000, 0x7c04307,
+	0xc013340, 0x80c2301, 0xc0133c0, 0x0000000, 0xc780100,
+	0x7c04347, 0x7c04308, 0x7c04349, 0x6800007, 0x7c00107,
+	0x7804007, 0xaa25207, 0x0000000, 0x6802007, 0x6c02007,
+	0x60e1907, 0x60e1a07, 0x60e1b07, 0xc781640, 0x0000000,
+	0xfc011c0, 0x64e1c09, 0x97e1247, 0xaa20047, 0x60e1c09,
+	0x6802007, 0x6c02007, 0x60e1907, 0x60e1a07, 0xc781200,
+	0x60e1b07, 0xfc011c0, 0xfc011c0, 0x6800009, 0x7c01009,
+	0xa630007, 0x7c01049, 0xc012a00, 0x80c2301, 0xc012a80,
+	0x0000000, 0x7c01007, 0xc0128c0, 0x80c2301, 0xc012940,
+	0x0000000, 0x7c01047, 0xfc021c0, 0xfc02200, 0x64e1c09,
+	0x9602248, 0x7801008, 0x9405248, 0x7801048, 0x9505248,
+	0x60e1c09, 0xaa30047, 0x6802008, 0x7c01088, 0x6801888,
+	0x7c010c8, 0x6801a88, 0x7c01108, 0x6801d08, 0x7c01148,
+	0x7c01188, 0xc7802c0, 0x6802008, 0x68021c8, 0x7c01088,
+	0x68023c8, 0x7c010c8, 0x7c01108, 0x6802808, 0x7c01148,
+	0x7c01188, 0x6803548, 0x7c011c8, 0xaa2c007, 0x6801089,
+	0xc011f40, 0x80c2301, 0xc011fc0, 0x0000000, 0x7000248,
+	0x20081c8, 0x7400248, 0xbae51c9, 0x4001249, 0x7801088,
+	0x78010c9, 0x9609209, 0x60e1908, 0x7801108, 0x7801149,
+	0x9609209, 0x60e1a08, 0x7801188, 0x78011c9, 0x9609209,
+	0x60e1b08, 0xfc011c0, 0x7c043c7, 0xaa0c007, 0x6800007,
+	0x687ffc7, 0x7c01c07, 0x64c510a, 0x64c4607, 0x7801308,
+	0x5410208, 0x78012c9, 0x2008248, 0x5802208, 0xe000288,
+	0x0000000, 0x0000000, 0x0000000, 0xf000200, 0xf010280,
+	0x970820a, 0x5402208, 0x20081c8, 0x64c430a, 0x2408288,
+	0x64c400a, 0x2408288, 0x7c01348, 0x5810208, 0x7c01388,
+	0xc013100, 0x0000000, 0x680001e, 0x7c0001e, 0x7c016de,
+	0x981d39e, 0x981d3dd, 0x9c1d1dd, 0x7804087, 0x400f1c7,
+	0x58041c7, 0x60c0907, 0x7c00987, 0x4401247, 0x7c00609,
+	0x9708789, 0x5404287, 0x78040c8, 0x400f208, 0x5804208,
+	0x5404248, 0x4401249, 0x5402249, 0x7c009c8, 0x7804149,
+	0xaa0c0c9, 0x4000248, 0x5801249, 0x7c01dc9, 0x4401248,
+	0x9608789, 0x4000248, 0x9610247, 0x6095209, 0x5404208,
+	0x780408a, 0x400f28a, 0x580428a, 0x540428a, 0x78040c8,
+	0x400f208, 0x5804208, 0x5404208, 0x961020a, 0x6090808,
+	0xc005bc0, 0x7c013da, 0x6a00007, 0x60c3d07, 0x64c3d08,
+	0x9161208, 0xa6f8008, 0x6800008, 0x6c06c08, 0xaa1009a,
+	0x2008c08, 0xc780400, 0x60c3808, 0x5803208, 0x7804147,
+	0xaa200c7, 0x6800109, 0xaa18047, 0x6800009, 0x7801f87,
+	0xaa0c007, 0x68000c9, 0x6800009, 0x97a3209, 0x60c3908,
+	0x6bfffc8, 0x60c3808, 0xc00be80, 0x0000000, 0xc00c1c0,
+	0x0000000, 0xc00cfc0, 0x0000000, 0x69898c8, 0x6d81848,
+	0x6800707, 0xd000007, 0x60c2208, 0x7800387, 0xaa10007,
+	0x6800007, 0xc7f0fc0, 0x7c00387, 0x649c909, 0xaa10009,
+	0x6800087, 0xc7f0e80, 0x7c01507, 0x7801487, 0xa608007,
+	0xc780900, 0x44011c7, 0xaa0c087, 0x7801549, 0x78015c9,
+	0xae7c0c9, 0x40301c9, 0x70001c7, 0x54101c7, 0x4034209,
+	0x7000208, 0x94101c8, 0x609cb07, 0x40381c9, 0x70001c7,
+	0x7800fc8, 0x20081c8, 0x609ca08, 0x7c00fd9, 0x40941c9,
+	0x70001c7, 0x54101c7, 0x4090209, 0x7000208, 0x94101c8,
+	0x609cc07, 0x4029209, 0x4001249, 0x7000208, 0x9464248,
+	0x7801808, 0x94e1248, 0x609c909, 0x8007401, 0x6800009,
+	0x7c01489, 0x6800009, 0x7c01509, 0x78014c7, 0x2c07247,
+	0x4000295, 0xa238047, 0x6800008, 0x4000296, 0xa22c087,
+	0x6800048, 0x4000297, 0xa220107, 0x6800088, 0x4000298,
+	0xa214207, 0x68000c8, 0x6800047, 0xc7f0040, 0x7c01507,
+	0x7801607, 0x90041c7, 0xa8051c8, 0xaa2001a, 0x7801607,
+	0x90841c7, 0xa4051c8, 0x6800047, 0x3407207, 0xc7ff980,
+	0x2c091c9, 0x7801347, 0x4090248, 0x7400247, 0x7801387,
+	0x4004249, 0x7400247, 0x7804187, 0x54031c7, 0x2c07687,
+	0x4029248, 0x7400247, 0x40301c8, 0x7800f49, 0x74001c9,
+	0x40341c8, 0x7800f09, 0xa60c05a, 0x74001c9, 0x40006c8,
+	0xa62009a, 0x40381c8, 0x74001d9, 0x7000709, 0xaa1c009,
+	0x4401249, 0xc780140, 0x7400709, 0x7800f89, 0x74001c9,
+	0x4000707, 0x7c00f99, 0x6800047, 0x3407207, 0x78014c9,
+	0x2c091c9, 0x7c014c9, 0x609b20a, 0x609b00a, 0x609b10a,
+	0x68000c9, 0x400125a, 0x7c01489, 0xa60809a, 0xc780340,
+	0x7801587, 0x7c015c7, 0x7c01588, 0x4000185, 0x4000144,
+	0x7801609, 0x5404249, 0x9404248, 0x7c01609, 0x400010a,
+	0xc7800c0, 0x0000000, 0x7c01548, 0x649c108, 0xaa2c008,
+	0x7800187, 0xb61c087, 0x6800048, 0xaa1c09a, 0xaa0801a,
+	0xaa14007, 0x40011c7, 0x7c00187, 0xc780180, 0x7c001c8,
+	0x6800008, 0x7c001c8, 0xc782280, 0x0000000, 0xaa0c01a,
+	0x6801aec, 0x68057ac, 0xc004a80, 0x0000000, 0xc008b80,
+	0x0000000, 0xc015c40, 0x0000000, 0xc004ec0, 0x0000000,
+	0xc781f40, 0x0000000, 0xc781ec0, 0x0000000, 0x78001c7,
+	0xaaf4007, 0x0000000, 0x400024a, 0x7800107, 0xb4031c9,
+	0xc781cc0, 0x0000000, 0x7c00109, 0x78040c7, 0x682bc08,
+	0xb004207, 0x0000000, 0xfc031c0, 0x94e3247, 0x7c00349,
+	0x7804148, 0xaa200c8, 0x7801dc8, 0xb806209, 0x0000000,
+	0x7800307, 0xa608007, 0xc781880, 0x2409209, 0x78016c8,
+	0xa805209, 0x7c016c9, 0x680001e, 0x7c0001e, 0x9408789,
+	0x981d39d, 0x981d3dd, 0x9c1d1dd, 0xc003f00, 0x0000000,
+	0xc008000, 0x0000000, 0xc0150c0, 0x0000000, 0xc004340,
+	0x0000000, 0x7804208, 0xa610008, 0x7804247, 0xfc01200,
+	0xfc061c0, 0x7c00207, 0x94e11c8, 0x60c0a07, 0xa61001a,
+	0x6800007, 0xc7808c0, 0x7c01e07, 0xfc011c0, 0x7c01e07,
+	0x8094200, 0xa60c007, 0xc780740, 0x0000000, 0x6815448,
+	0x6094208, 0x680c008, 0x6094008, 0x7800087, 0xaa18087,
+	0x6800047, 0x7804147, 0xaa0c0c7, 0x6800087, 0x6800107,
+	0xfc08200, 0xfc08240, 0x9509248, 0x6094109, 0xfc01200,
+	0xfc08200, 0xfc08240, 0x9509248, 0x6094109, 0x6094109,
+	0xfc01200, 0xaed4047, 0x44011c7, 0xfc01200, 0x7c00048,
+	0x8094000, 0x78043c7, 0xa60c007, 0xc780540, 0x0000000,
+	0xfc071c0, 0x80c2940, 0x7800207, 0x7804208, 0x94e11c8,
+	0x9807187, 0x98073c7, 0x60c0a07, 0x9c073c7, 0x9807387,
+	0x60c0a07, 0xc0097c0, 0x80c0600, 0x64c0a07, 0x91c21c7,
+	0xa6f8007, 0x0000000, 0xc780100, 0x0000000, 0xc0095c0,
+	0x80c0600, 0x7801e07, 0xaa14007, 0x7800048, 0x94211c8,
+	0x5001208, 0x94411c8, 0x60c1807, 0xcb8002c, 0x0000000,
+	0x64c0007, 0xa2fc047, 0x0000000, 0x64c3a07, 0x90061c7,
+	0xaaec647, 0x0000000, 0x80c0a00, 0x80c2300, 0x64c1e07,
+	0x9807547, 0x60c1e07, 0x80c2800, 0x64c1e07, 0x9c07747,
+	0x60c1e07, 0x80c0002, 0xc7ec480, 0x0000000, 0x649c015,
+	0x649c116, 0x649c217, 0x649c318, 0x809c000, 0x809c100,
+	0x809c200, 0x809c300, 0x6804004, 0x6814105, 0x6824206,
+	0xc000a40, 0x0000000, 0x8002501, 0x8002605, 0x8002708,
+	0x800290d, 0x8002815, 0x8002c14, 0x6800000, 0x7c01c00,
+	0xcc00000, 0x0000000, 0x6800007, 0x7c01907, 0x7c01987,
+	0x7c019c7, 0x7800607, 0x40011c7, 0x7c01887, 0x6800047,
+	0x60e0c07, 0x7c01a87, 0x7c018c7, 0x68003c7, 0x7c00147,
+	0x6805c07, 0x60c2107, 0x80c2170, 0x6800087, 0x7c01ac7,
+	0x680001f, 0x7804148, 0x5406208, 0x940321a, 0x7800387,
+	0x9461207, 0x60c0408, 0x6868008, 0x7c01a48, 0xcc00000,
+	0x0000000, 0x649cf30, 0x64c4002, 0x64c4203, 0x2403083,
+	0x40080c3, 0x7c012c3, 0x58100c3, 0x7c01303, 0x6800019,
+	0x7c01499, 0x7c014d9, 0x7c01519, 0x64c0919, 0x680001a,
+	0x7c0019a, 0x7c001da, 0x68000c2, 0x7c04142, 0x6803fc2,
+	0x7c01542, 0x7c01582, 0x7c015c2, 0x7c01602, 0x60c0919,
+	0x60c1a19, 0x6932002, 0x60c1e02, 0x6800002, 0x60c0c02,
+	0x6c04042, 0x60c0d02, 0xcc00000, 0x0000000, 0x649c803,
+	0xaa14003, 0x78014c2, 0x28020c2, 0x7c014c2, 0x809c800,
+	0x7801502, 0xaa0c002, 0x6800102, 0x6030502, 0x64c0003,
+	0xa2100c3, 0x6800002, 0xc7809c0, 0x0000000, 0x64c3a03,
+	0x90060c3, 0xa60cac3, 0xc780880, 0x0000000, 0x7804143,
+	0xaa080c3, 0xc780780, 0x64c4403, 0x91210c3, 0xaa6c003,
+	0x68fffc3, 0x7801fc2, 0x4001082, 0xb8190c2, 0x7c01fc2,
+	0x6800002, 0x7c01fc2, 0x7800402, 0x4001082, 0xb8130c2,
+	0x7c00402, 0x64c0003, 0x9803203, 0x9803183, 0x9803003,
+	0x60c0003, 0x6800002, 0x64c1803, 0x95860c2, 0x9803483,
+	0x60c1803, 0x9c03483, 0x60c1803, 0x6800103, 0x6030503,
+	0x6800002, 0x7c01fc2, 0x7c00402, 0xcc00000, 0x0000000,
+	0x64c442e, 0x9121bae, 0xaaf802e, 0xc7e9f80, 0x0000000,
+	0xc004ac0, 0x0000000, 0x6818109, 0x6c34749, 0x6090709,
+	0x6490b09, 0x9809009, 0x98090c9, 0x6090b09, 0x9c09009,
+	0x9c090c9, 0x962225a, 0x6090b09, 0x6800009, 0x6c07489,
+	0x2009c09, 0x6094409, 0x6880009, 0x6c07489, 0x2009c09,
+	0x6094509, 0xcc00000, 0x0000000, 0x7804149, 0xa60c0c9,
+	0xcc00000, 0x0000000, 0x6490707, 0x9807087, 0x98070c7,
+	0x6090707, 0x6495107, 0x98073c7, 0xcc00000, 0x6095107,
+	0xcc00000, 0x0400000, 0x64e1210, 0x91e1410, 0xbef0050,
+	0x0000000, 0x649d910, 0x900c410, 0xaef8190, 0x7801850,
+	0xaa3c090, 0xc7821c0, 0x6800011, 0x6c04011, 0x60e1211,
+	0x78016d1, 0xa20c051, 0x680001f, 0x688001f, 0x6c0749f,
+	0x201fc1f, 0x6800010, 0x7c01b10, 0xc7813c0, 0x6800110,
+	0x7801b11, 0xaa08091, 0xc780f00, 0x7801892, 0xaebc092,
+	0xaa3c72f, 0x7801b50, 0x5406410, 0x78016d1, 0x5801451,
+	0xbe0c051, 0x6800011, 0x6880011, 0x6c07491, 0x2011c11,
+	0x2010450, 0x4440410, 0x60e1310, 0xc780340, 0x40c07d0,
+	0x5405410, 0x78016d1, 0xbe0c051, 0x6800011, 0x6880011,
+	0x6c07491, 0x2011c11, 0x2010450, 0x4420410, 0x60e1310,
+	0x40607d0, 0x7801952, 0xaa14012, 0x6a2c211, 0xaa0c052,
+	0x6a2c011, 0x6a2c111, 0x6c04011, 0x60e1211, 0x6800010,
+	0x7c01b10, 0x6800110, 0xc7816c0, 0x7c01850, 0x7801991,
+	0x6800192, 0x2411491, 0x2411491, 0x2411491, 0x7801a50,
+	0x5409410, 0x2010450, 0x5403450, 0x2011c11, 0x60e1311,
+	0x7801952, 0xaa34012, 0x6a44211, 0xaa2c052, 0x6a44011,
+	0xc780240, 0x6a44111, 0xa63c0d1, 0x7801a90, 0x64e0c12,
+	0x9010492, 0xb8ea490, 0xcc00000, 0x0400000, 0x6c0c011,
+	0x60e1211, 0x680001f, 0x6800010, 0x7c01b10, 0x6800150,
+	0xc780e80, 0x7c01850, 0x78018d1, 0xaa1c011, 0x4401451,
+	0x7c018d1, 0x7801891, 0x4401451, 0xc780b00, 0x7c01891,
+	0x78019d1, 0x7c01a11, 0x7801a50, 0x5409410, 0x2010450,
+	0x6800192, 0x2011491, 0x7c019d1, 0x5403450, 0x2011c11,
+	0x60e1311, 0x7801952, 0xaa14012, 0x6a16211, 0xaa0c052,
+	0x6a16011, 0x6a16111, 0x7801bd2, 0xaa28012, 0x7801a90,
+	0x64e0c12, 0x9010492, 0xb804490, 0x7801a12, 0xc7fde80,
+	0x7c019d2, 0x4001410, 0x7c01a90, 0x7c01d91, 0x6c00011,
+	0x60e1211, 0x6800050, 0xc780400, 0x7c01850, 0xba30110,
+	0xc7ff540, 0xa6f8050, 0x7801891, 0xaa74011, 0x4401451,
+	0xb26c051, 0x7c01891, 0x7801ad0, 0xaa0c0d0, 0x0000000,
+	0x80c2170, 0x6800010, 0x7c01850, 0xcc00000, 0x0400000,
+	0xaa0c010, 0x688001f, 0x680001f, 0x6c0749f, 0xc780a40,
+	0x201fc1f, 0xaa0c72f, 0x90a841f, 0x90c741f, 0x7800992,
+	0xb823490, 0xa8f5490, 0x91a141f, 0xaa20010, 0x688001f,
+	0xc780180, 0x680001f, 0xaa7001f, 0x7801991, 0xc7ffcc0,
+	0x0000000, 0x6c0749f, 0x201fc1f, 0x7801a50, 0x5409410,
+	0x6800192, 0x2411491, 0x2010450, 0x5403450, 0x2011c11,
+	0x60e1311, 0x7801d90, 0x9004450, 0xaa14011, 0x6a14210,
+	0xaa0c111, 0x6a14010, 0x6a14110, 0x6c08010, 0x60e0d1f,
+	0xaa0c72f, 0x40207df, 0x40207df, 0xc7ff4c0, 0x60e1210,
+	0x7801a50, 0x5409410, 0x2010450, 0x6800192, 0x2011491,
+	0x7c01991, 0x5403450, 0x2011c11, 0x60e1311, 0x7801d90,
+	0xa61801f, 0x9c101d0, 0x60e1210, 0x68000d0, 0xc7ff0c0,
+	0x7c01850, 0x6c08010, 0x60e0d1f, 0xaae872f, 0x40207df,
+	0xc7ffe00, 0x40207df, 0xc000d00, 0x0000000, 0x8095007,
+	0x8095000, 0x7804347, 0x7804308, 0x94a51c8, 0x78042c8,
+	0x95411c8, 0x6096e07, 0xaa0c008, 0x6800088, 0x6800048,
+	0x60c3108, 0x6800048, 0x780098a, 0x68002c9, 0xb00324a,
+	0x0000000, 0x6800008, 0x6498e0a, 0x97c1288, 0x6098e0a,
+	0x6497f08, 0x68000ca, 0x970220a, 0x6097f08, 0x6820988,
+	0x6c00208, 0x968221a, 0x780098a, 0xb20c2ca, 0x68004ca,
+	0x6800c0a, 0x970620a, 0xcc00000, 0x6095108, 0x683ffc8,
+	0x6490909, 0xa210049, 0xaa0c008, 0xc7fff40, 0x4401208,
+	0x6490b09, 0x9809009, 0x98090c9, 0x6090b09, 0x9c09009,
+	0x9c090c9, 0x6090b09, 0xcc00000, 0x0000000, 0x683ffc9,
+	0x649bb08, 0x920c208, 0x649530a, 0x900128a, 0x2008288,
+	0xaa10008, 0xaa0c009, 0xc7ffe40, 0x4401249, 0xcc00000,
+	0x0000000, 0x64e1209, 0x91e1249, 0xbef8049, 0x64e0009,
+	0x64e0e0b, 0x64e0c0c, 0x83f0040, 0x83f0000, 0x680020d,
+	0xd00000d, 0x0000000, 0x60e0009, 0x60e0e0b, 0xcc00000,
+	0x60e0c0c, 0xc07fc40, 0x0000000, 0x6490b09, 0x9809009,
+	0x9809089, 0x6090b09, 0x9c09009, 0x9c09089, 0x6090b09,
+	0x8095007, 0x8095000, 0xc000500, 0x0000000, 0x6800007,
+	0x7c00307, 0x6800007, 0x7c01907, 0x7c01987, 0x7c019c7,
+	0x7800607, 0x40011c7, 0x7c01887, 0x6800047, 0x60e0c07,
+	0x7c01a87, 0x7c018c7, 0x68003c7, 0x7c00147, 0x6800007,
+	0xcc00000, 0x7c01847, 0x683ffc9, 0x6498f0a, 0xaa0c009,
+	0xa6f800a, 0x4401249, 0x64c3d0a, 0x580a28a, 0xbef80ca,
+	0x0000000, 0x6498e0a, 0x980a00a, 0x6800fc9, 0x9706289,
+	0x6098e0a, 0x6800009, 0x9706289, 0x9c0a00a, 0xcc00000,
+	0x6098e0a, 0x64c3a08, 0x9006208, 0x64c0809, 0x64c090a,
+	0x64c1e0b, 0x64c380c, 0x6800407, 0x63f0007, 0x6800007,
+	0x63f0007, 0x0000000, 0x0000000, 0x0000000, 0x0000000,
+	0x60c0809, 0x60c090a, 0x60c1e0b, 0x60c380c, 0xc07ef00,
+	0x0000000, 0x6800009, 0x60c0c09, 0x6c04049, 0x60c0d09,
+	0x64c1809, 0x9586248, 0x9809489, 0x60c1809, 0x9c09489,
+	0x60c1809, 0xcc00000, 0x80c0a01, 0x680072f, 0x6bfffcb,
+	0x6800024, 0x7801c20, 0x6800021, 0x6800025, 0x6800022,
+	0x6800026, 0x6800023, 0x6800027, 0x680800a, 0x680070e,
+	0x740028b, 0x400128a, 0x74002a4, 0x400128a, 0x74002a0,
+	0x400128a, 0x74002a1, 0x400128a, 0x74002a5, 0x400128a,
+	0x74002a2, 0x400128a, 0x74002a6, 0x400128a, 0x74002a3,
+	0x400128a, 0x74002a7, 0xd07fbce, 0x400128a, 0x7c01c4b,
+	0x96102cb, 0x80c0700, 0x60c270b, 0x9610824, 0x60c0220,
+	0x9610865, 0xaa1801a, 0x60c0221, 0x96108a6, 0x60c0222,
+	0x96108e7, 0x60c0223, 0x780098e, 0xb009bce, 0x6b80007,
+	0x6c07487, 0x2007c07, 0x6035107, 0x6803f07, 0x6035207,
+	0x6a08007, 0x6035007, 0x7800007, 0xa60c007, 0x6803fc7,
+	0x7c01c87, 0x6800007, 0x7c01d47, 0xac0bbce, 0x7801c87,
+	0xb613fc7, 0xba0c707, 0x441c1c7, 0x7c01c87, 0x6435007,
+	0x580f1c7, 0xbef8047, 0xcc00000, 0x0000000, 0x6435007,
+	0x580f1c7, 0xbef8047, 0x0000000, 0x6435307, 0x900c1c7,
+	0xa6f8007, 0x0000000, 0x6b80007, 0x6c07487, 0x2007c07,
+	0x6035107, 0x6803f07, 0x6035207, 0x6b0c007, 0x6035007,
+	0x54011ef, 0xac051ce, 0x6800087, 0x7c01cc7, 0xc7ff880,
+	0x7c01d07, 0x6b90008, 0x6c07488, 0x2008c08, 0x540126f,
+	0x2009bc9, 0x680008a, 0x7c01cca, 0x68000ca, 0x6435007,
+	0x580f1c7, 0xbef8047, 0x6803f07, 0x6035108, 0x6035207,
+	0x6a08007, 0x6035007, 0xac0324e, 0xc7ff3c0, 0x7c01d0a,
+	0x6808007, 0x20081c8, 0x2009bc9, 0xc7ffc80, 0x400128a,
+	0x400130c, 0x480f30c, 0x7c01d0c, 0x980b38b, 0x7801ccc,
+	0x540928c, 0x200a24a, 0x400130c, 0x480f30c, 0x7c01ccc,
+	0x643500c, 0x580f30c, 0x6c0748a, 0xbef404c, 0x200ac0a,
+	0x643530c, 0x900c30c, 0xa6f800c, 0x0000000, 0x603510a,
+	0x6803f0a, 0x603520a, 0xc7fedc0, 0x603500b, 0x64c2307,
+	0xbefc047, 0xcc00000, 0x64c2007, 0x40011c7, 0x6800008,
+	0xa20c047, 0x58011c7, 0x24071c8, 0xcc00000, 0x0000000,
+	0x2409247, 0x48ff249, 0x5401249, 0x2407207, 0x48ff1c7,
+	0x54011c7, 0x680000a, 0x680000b, 0x6800048, 0xb8041c8,
+	0x54012cb, 0x980b04b, 0x24081c8, 0x5401208, 0xb2ec20a,
+	0x400128a, 0x58012cb, 0xe0002c9, 0x0000000, 0x0000000,
+	0xcc00000, 0xf000240, 0x2409247, 0x6807fca, 0x2809289,
+	0x2407207, 0x6807fca, 0x2807287, 0x680000a, 0x680000b,
+	0x6800048, 0xb8041c8, 0x54012cb, 0x980b04b, 0x24081c8,
+	0x5401208, 0xb2ec20a, 0x400128a, 0x58012cb, 0xe0002c9,
+	0x0000000, 0x0000000, 0xcc00000, 0xf000240, 0x24091c9,
+	0x6807fca, 0x2809289, 0x24071c8, 0x6807fca, 0x2807287,
+	0x680000a, 0x680000b, 0x6800048, 0xb8041c8, 0x54012cb,
+	0x980b04b, 0x24081c8, 0x5401208, 0xb2ec20a, 0x400128a,
+	0x58012cb, 0xe0002c9, 0x0000000, 0x0000000, 0xcc00000,
+	0xf000240, 0x2407207, 0x6807fca, 0x2807287, 0x680000a,
+	0x680000b, 0x6800048, 0xb8041c8, 0x54012cb, 0x980b04b,
+	0x24081c8, 0x5401208, 0xb2ec34a, 0x400128a, 0xcc00000,
+	0x580124b, 0x7804187, 0xa60c007, 0x6800088, 0x6800048,
+	0x7c04148, 0xa60c01a, 0x68057ac, 0x680005a, 0xcc00000,
+	0x0000000, 0x24091c9, 0x6807fc8, 0x2809209, 0x680000a,
+	0x680000b, 0x6800048, 0xb8041c8, 0x54012cb, 0x980b04b,
+	0x24081c8, 0x5401208, 0xb2ec20a, 0x400128a, 0x58012cb,
+	0xe0002c9, 0x0000000, 0x0000000, 0xcc00000, 0xf000240,
+	0xaa1409a, 0xaa0801a, 0xc784cc0, 0xcc00000, 0x0000000,
+	0x7801ec7, 0x7801e88, 0x2407207, 0x48ff1c7, 0x54011c7,
+	0x7c00447, 0x7801f07, 0x7801e88, 0x2407207, 0x48ff1c7,
+	0x54011c7, 0x7c00487, 0x7804149, 0xaa140c9, 0x7800389,
+	0xa60c009, 0x0000000, 0x44011c7, 0xc07f580, 0x7800449,
+	0x6800f88, 0x9646248, 0x60c3009, 0x7800487, 0x7804149,
+	0xaa280c9, 0x7800389, 0xaa0c009, 0x0000000, 0x40011c7,
+	0xc07f280, 0x7800449, 0x6800fc8, 0x9646248, 0x60c3009,
+	0x7804147, 0xaa080c7, 0xc780bc0, 0x7801e88, 0x5401208,
+	0x7801ec7, 0xc07e980, 0x54011c7, 0x6800c08, 0x9646248,
+	0x60c3009, 0x7801e48, 0x5401208, 0x7801ec7, 0xc07e780,
+	0x54011c7, 0x6800c48, 0x9646248, 0x60c3009, 0x7801f07,
+	0x7801e88, 0x2407207, 0x48ff1c7, 0x5401247, 0x7801ec7,
+	0x7801f08, 0x2407207, 0x48ff1c7, 0x54011c7, 0x9529247,
+	0x6800d08, 0x9646248, 0x60c3009, 0x7801f07, 0x7801e88,
+	0xc07d1c0, 0x7801e89, 0x6800808, 0x9646248, 0x60c3009,
+	0x7801ec7, 0x7801f08, 0xc07d000, 0x7801f09, 0x6800888,
+	0x9646248, 0x60c3009, 0xcc00000, 0x0000000, 0x7801f8c,
+	0xaa0c00c, 0x780038c, 0x680000c, 0xa61c00c, 0x7801ec7,
+	0x54011c7, 0x7801e88, 0x5401208, 0xc780180, 0x4001208,
+	0x7801ec7, 0x54011c7, 0x40011c7, 0x4401207, 0xc07db00,
+	0x0000000, 0x6800c08, 0x9646248, 0xa60c00c, 0x0000000,
+	0x98093c9, 0x60c3009, 0xa61800c, 0x7801ec7, 0x54011c7,
+	0x7801e88, 0xc780200, 0x5401208, 0x7801ec7, 0x54011c7,
+	0x40011c7, 0x7801e88, 0x5401208, 0x4001208, 0xc07d600,
+	0x0000000, 0x6800c48, 0x9646248, 0xaa0c00c, 0x0000000,
+	0x98093c9, 0x60c3009, 0xa61c00c, 0x7801ec7, 0x54011c7,
+	0x7801e48, 0x5401208, 0xc7801c0, 0x4001208, 0x7801ec7,
+	0x54011c7, 0x40011c7, 0x7801e88, 0x5401208, 0xc07d100,
+	0x0000000, 0x6800c88, 0x9646248, 0x60c3009, 0xa61800c,
+	0x7801ec7, 0x54011c7, 0x7801e48, 0xc780200, 0x5401208,
+	0x7801ec7, 0x54011c7, 0x40011c7, 0x7801e48, 0x5401208,
+	0x4001208, 0xc07ccc0, 0x0000000, 0x6800cc8, 0x9646248,
+	0x60c3009, 0x780038c, 0x7801f07, 0xaa0c00c, 0x54011c7,
+	0x40011c7, 0x7801e88, 0x5401208, 0x2407207, 0x6807fca,
+	0x2809287, 0x7801ec7, 0xaa1800c, 0x54011c7, 0x7801f88,
+	0xa60c008, 0x0000000, 0x40011c7, 0x7801f08, 0xaa0c00c,
+	0x5401208, 0x4001208, 0x2407207, 0x2807287, 0x9529247,
+	0x6800d08, 0x9646248, 0x60c3009, 0x7801f07, 0xaa0c00c,
+	0x54011c7, 0x40011c7, 0x7801e88, 0x5401208, 0x4001208,
+	0x2407207, 0x6807fca, 0x2809287, 0x7801ec7, 0xaa1800c,
+	0x54011c7, 0x7801f88, 0xa60c008, 0x0000000, 0x40011c7,
+	0x7801f08, 0xaa0c00c, 0x5401208, 0x4001208, 0x2407207,
+	0x2807287, 0x9529247, 0x6800d48, 0x9646248, 0x60c3009,
+	0xaa0c00c, 0x680000c, 0x680004c, 0x7801f07, 0x54011c7,
+	0x2007307, 0x7801e88, 0x5401208, 0x4001208, 0xc07b0c0,
+	0x4000248, 0x6800808, 0x9646248, 0x60c3009, 0x7801f07,
+	0x54011c7, 0x2007307, 0x7801e88, 0x5401208, 0xc07ae40,
+	0x4001248, 0x6800848, 0x9646248, 0x60c3009, 0x7801f07,
+	0x54011c7, 0x2007307, 0x7801ec8, 0x5401208, 0xc07b140,
+	0x4000248, 0x6800888, 0x9646248, 0x60c3009, 0x7801f07,
+	0x54011c7, 0x2007307, 0x7801ec8, 0x5401208, 0x4001208,
+	0xc07ae80, 0x4401248, 0x68008c8, 0x9646248, 0x60c3009,
+	0x7801f07, 0x54011c7, 0x2007307, 0x7801e88, 0x5401208,
+	0x4001208, 0xc07a640, 0x4401248, 0x6800908, 0x9646248,
+	0x60c3009, 0x7801f07, 0x54011c7, 0x2007307, 0x7801e88,
+	0x5401208, 0xc07a3c0, 0x4000248, 0x6800948, 0x9646248,
+	0x60c3009, 0x7801f07, 0x54011c7, 0x2007307, 0x7801ec8,
+	0x5401208, 0xc07a6c0, 0x4001248, 0x6800988, 0x9646248,
+	0x60c3009, 0x7801f07, 0x54011c7, 0x2007307, 0x7801ec8,
+	0x5401208, 0x4001208, 0xc07a400, 0x4400248, 0x68009c8,
+	0x9646248, 0x60c3009, 0xcc00000, 0x0000000, 0x7804147,
+	0xaa080c7, 0xc7807c0, 0x7801f07, 0x7801e88, 0xc079600,
+	0x7801e89, 0x6800808, 0x9646248, 0x60c3009, 0x7801ec7,
+	0x7801e48, 0xc079440, 0x7801e89, 0x6800848, 0x9646248,
+	0x60c3009, 0x7801ec7, 0x7801e88, 0xc079280, 0x7801e49,
+	0x6800908, 0x9646248, 0x60c3009, 0x7801ec7, 0x7801e48,
+	0xc0790c0, 0x7801e49, 0x6800948, 0x9646248, 0x60c3009,
+	0xcc00000, 0x0000000, 0x780038c, 0xaa0800c, 0xc780880,
+	0x680080d, 0x7801f07, 0x54011c7, 0x900230d, 0x7801e88,
+	0x5401208, 0xaa2004c, 0xaa1c00c, 0x4001208, 0x7801e48,
+	0x5401208, 0xaa0c0cc, 0x0000000, 0x4001208, 0x904230d,
+	0x7801e89, 0x5401249, 0xaa2004c, 0xaa1c00c, 0x4001249,
+	0x7801e49, 0x5401249, 0xaa0c0cc, 0x0000000, 0x4001249,
+	0xc078d80, 0x0000000, 0x964624d, 0x60c3009, 0xba90bcd,
+	0x400134d, 0xcc00000, 0x0000000, 0x680080d, 0x7801f07,
+	0x54011c7, 0x40011c7, 0x900230d, 0x7801f08, 0xaa2800c,
+	0x5401208, 0x7801e88, 0x5401208, 0xaa1808c, 0xaa1404c,
+	0x4001208, 0x7801e48, 0x5401208, 0x4001208, 0x904230d,
+	0x7801f09, 0xaa2800c, 0x5401249, 0x7801e89, 0x5401249,
+	0xaa1808c, 0xaa1404c, 0x4001249, 0x7801e49, 0x5401249,
+	0x4001249, 0xc078480, 0x0000000, 0x964624d, 0x60c3009,
+	0xba84bcd, 0x400134d, 0xcc00000, 0x0000000, 0x7804147,
+	0xa6140c7, 0x6099004, 0x6099105, 0xc780240, 0x6099206,
+	0x6099004, 0x6099104, 0x6099205, 0x6099305, 0x6099406,
+	0xc780080, 0x6099506, 0xaa3c09a, 0xaa0805a, 0xcc00000,
+	0x7804147, 0x698d908, 0xaa1c0c7, 0x6d85888, 0x688d108,
+	0xaa10087, 0x6c85088, 0x6910948, 0x6d088c8, 0x80c2400,
+	0xcc00000, 0x60c2208, 0x7804147, 0x698d908, 0xaa100c7,
+	0x6d85888, 0x6800008, 0x6d088c8, 0x80c2400, 0x60c2208,
+	0x7804147, 0x69898c8, 0xaa100c7, 0x6d81848, 0x6800008,
+	0x6c85008, 0x80c2408, 0xcc00000, 0x60c2208, 0x0000000
+};
diff --git a/drivers/amlogic/amports/arch/ucode/avs/txl_avs_linux_debug.h b/drivers/amlogic/amports/arch/ucode/avs/txl_avs_linux_debug.h
new file mode 100644
index 0000000..9aea2f6
--- /dev/null
+++ b/drivers/amlogic/amports/arch/ucode/avs/txl_avs_linux_debug.h
@@ -0,0 +1,546 @@
+/*
+ * drivers/amlogic/amports/arch/ucode/avs/gxm_avs_linux_debug.h
+ *
+ * Copyright (C) 2015 Amlogic, Inc. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+*/
+
+static const u32 MicroCode[] __initconst = {
+	0x6807801, 0x6800000, 0xd000001, 0x7400040, 0xc014c00,
+	0x0000000, 0x0000000, 0x0000000, 0x80c0002, 0x6932000,
+	0x9800580, 0x60c1e00, 0x6bfdac0, 0x7c017c0, 0x6030400,
+	0x0400000, 0xc015e40, 0x0000000, 0x0000000, 0x0000000,
+	0x0000000, 0xc7ffec0, 0x0000000, 0x0000000, 0x0000000,
+	0x0000000, 0x0000000, 0x0000000, 0x0000000, 0x0000000,
+	0x0000000, 0x0000000, 0xcc00000, 0x0400000, 0xcc00000,
+	0x0400000, 0xc780540, 0x64c0007, 0xc796780, 0x0000000,
+	0xc797180, 0x0000000, 0xcc00000, 0x0400000, 0xcc00000,
+	0x0400000, 0xc797000, 0x0000000, 0xcc00000, 0x0400000,
+	0x6800009, 0x7c01fc9, 0x7c00409, 0x0800000, 0x78017c9,
+	0xc7ffe40, 0x6030409, 0x6bfd9c9, 0x6030409, 0x0400000,
+	0xa2d8047, 0x7801509, 0xaa14009, 0xa608049, 0xc78fb00,
+	0xa608089, 0xc78efc0, 0xa23c807, 0xc786380, 0x0000000,
+	0x649d008, 0xaa0c008, 0x809c701, 0xc780000, 0xc01aa80,
+	0x80c0a00, 0xc01adc0, 0x0000000, 0xc01c080, 0x0000000,
+	0xc793440, 0x0000000, 0xbecd007, 0x78043c8, 0xaa0c008,
+	0xa208207, 0xc7932c0, 0x78003c7, 0xa6fc007, 0x78043c7,
+	0xa648007, 0x64c2907, 0xbe2c407, 0x7800007, 0xa638007,
+	0x0000000, 0x64c2907, 0x91c11c7, 0xa628047, 0x0000000,
+	0x64c0607, 0x900f1c7, 0xae18047, 0x68025f1, 0xc027640,
+	0x78025f2, 0xc792dc0, 0x0000000, 0xcb8002c, 0x0000000,
+	0x68fdfca, 0x64e0408, 0x2808288, 0x2c08748, 0x60e0408,
+	0x60c071e, 0x64c0324, 0x64c0325, 0x64c2728, 0x9210268,
+	0x7800007, 0xa618007, 0x7801c08, 0x6c00008, 0x60c0208,
+	0x80c0200, 0x6bfffc9, 0x60c0320, 0x60c0321, 0x7801c48,
+	0x9610209, 0x60c2708, 0x7801847, 0xa6fc007, 0x7800147,
+	0x7c01b87, 0x6800347, 0x7c00147, 0x60c2507, 0x80c2602,
+	0x80c260f, 0x80c2603, 0x4c001c7, 0x9807207, 0x60c2107,
+	0x7801907, 0xaa14007, 0x6a01008, 0xaa0c047, 0x6a22008,
+	0x6a40008, 0x6c00108, 0x60e0508, 0x7801b08, 0x6801809,
+	0x9502248, 0x60c2109, 0x80c260e, 0x6800088, 0x7c01947,
+	0xba0c087, 0x40011c7, 0x6800007, 0x7c01907, 0x7800007,
+	0x7c01b47, 0x7801b87, 0x7c01bc7, 0x7c01848, 0x8030580,
+	0x7801d47, 0xaa1472f, 0x40011c7, 0x78016c8, 0xa20c048,
+	0x0000000, 0x7c01d47, 0x683ffc8, 0x64c2307, 0x93041c7,
+	0xaa0c008, 0xa6f4007, 0x4401208, 0x7801c8d, 0xba13fcd,
+	0x6800008, 0xc781100, 0x7c01c88, 0x6808008, 0xba1070d,
+	0x400024d, 0x441c249, 0x680c008, 0x5403289, 0x200a24a,
+	0x2008288, 0x7400228, 0x4001208, 0x92102e4, 0x740020b,
+	0x4001208, 0x7400224, 0x4001208, 0x7400225, 0x4001208,
+	0x92102e5, 0x740020b, 0x4001208, 0x7400226, 0x4001208,
+	0x92102e6, 0x740020b, 0x4001208, 0x7400227, 0x4001208,
+	0x92102e7, 0x740020b, 0x7800988, 0xac07bc8, 0x780000a,
+	0xaa3872f, 0x40002ca, 0x78016ca, 0xc7802c0, 0x942f28b,
+	0xa61000a, 0xaa1472f, 0x78016ca, 0xa20c04a, 0xa6146c9,
+	0x400128d, 0xb60c70d, 0x680000a, 0x680070a, 0x7c01c8a,
+	0xb013bc8, 0xaa0800a, 0xa64470a, 0x7801cca, 0xa20c04a,
+	0x6a0800b, 0x6a0c00b, 0x6b80009, 0x7801d0c, 0x540928c,
+	0x200a24a, 0x6c0748a, 0x200ac0a, 0x603510a, 0x6803f0a,
+	0x603520a, 0x603500b, 0xc01ba40, 0x0000000, 0x7800007,
+	0x40011c7, 0x7c00007, 0x9c1d39d, 0x7800988, 0xb405207,
+	0x40011c7, 0xb836207, 0xc780d40, 0x981d1dd, 0x6800007,
+	0x7c00007, 0x981d39d, 0x9c1d3dd, 0x9c1d1dd, 0x78016c8,
+	0x4001208, 0x68000b1, 0xc024c40, 0x4000c88, 0x7801dc9,
+	0xb828248, 0x7c016c8, 0x7801847, 0xa6fc007, 0x0000000,
+	0x6430507, 0xa2f0107, 0x6a00007, 0x60c3d07, 0x7800147,
+	0xaa24007, 0x6803fcb, 0x7801a88, 0x64e0c09, 0x9010249,
+	0xb804248, 0xaa0c00b, 0xc7ffec0, 0x44012cb, 0x7804147,
+	0xaa280c7, 0x7800347, 0x7801dc8, 0xb407207, 0xc01cb80,
+	0x7c00348, 0x6800048, 0x7c00308, 0xc7898c0, 0x7c00388,
+	0x6800008, 0x7c00308, 0x7c00388, 0xc78fb40, 0x64c0007,
+	0xb60c709, 0x6808008, 0x680c008, 0xc780400, 0x6800007,
+	0x7800007, 0x9508787, 0x78016c9, 0x9408789, 0x7800989,
+	0xb009bc9, 0x6808008, 0xaad0007, 0x7801c89, 0x40011c9,
+	0xba10707, 0xb6c0e07, 0x680c008, 0x441c1c7, 0x5403247,
+	0x20091c9, 0x2008248, 0x7000209, 0x7c01c49, 0x4001208,
+	0x7000209, 0x4001208, 0x7000220, 0x9610809, 0x4001208,
+	0x7000221, 0x4001208, 0x7000209, 0x9610849, 0x4001208,
+	0x7000222, 0x4001208, 0x7000209, 0x9610889, 0x4001208,
+	0x7000223, 0x4001208, 0x7000209, 0x96108c9, 0xc7fb400,
+	0x0000000, 0x68fdfca, 0x64e0408, 0x2808288, 0x2c08748,
+	0x60e0408, 0x60c071e, 0x64c0324, 0x64c0325, 0x64c0326,
+	0x64c0327, 0x64c2728, 0x60c071e, 0x9210268, 0x7800007,
+	0xa638007, 0x7801c08, 0x6c00008, 0x60c0208, 0x6800008,
+	0x6c00008, 0x60c0208, 0x6800008, 0x6c00008, 0x60c0208,
+	0x6800008, 0x6c00008, 0x60c0208, 0x6bfffc9, 0x60c0320,
+	0x60c0321, 0x60c0322, 0x60c0323, 0x7801c48, 0x9610209,
+	0x60c2708, 0x7804287, 0x54031c7, 0x4c301c7, 0x7801f8a,
+	0x95011ca, 0x60c2507, 0x780184a, 0xa6fc00a, 0x7800147,
+	0x7c01b87, 0x64c2307, 0x9304207, 0xa6f8008, 0x90a1207,
+	0x90241c7, 0x95211c8, 0x64c0609, 0x9010249, 0xaa10009,
+	0x0000000, 0x6800007, 0x6800008, 0x7c00147, 0xaa60347,
+	0x60c2507, 0xaa60287, 0xaa18048, 0xa60c007, 0xc780200,
+	0x0000000, 0x80c2605, 0x80c2606, 0x80c2607, 0x80c2602,
+	0x80c260f, 0x80c2603, 0x7801ac8, 0xaa100c8, 0x6800089,
+	0xc7fb800, 0x7c01ac9, 0x780184b, 0xa6fc00b, 0x0000000,
+	0x7c01b08, 0xc7fb680, 0x7c01ac9, 0x80c2602, 0x80c260f,
+	0x80c2603, 0x7801ac8, 0xaa48088, 0x68000c9, 0x7800008,
+	0xaa0c008, 0xc7fb400, 0x7c01ac9, 0x6803fcb, 0x7801a88,
+	0x64e0c09, 0x9010249, 0xb804248, 0xaa0c00b, 0xc7ffec0,
+	0x44012cb, 0x6800088, 0x68000c9, 0x680180b, 0x60c210b,
+	0x780184b, 0xa6fc00b, 0x0000000, 0x7c01b08, 0xc7faf80,
+	0x7c01ac9, 0xa279007, 0x0000000, 0x649d00a, 0xaa0c00a,
+	0x809c701, 0xc780000, 0xc014700, 0x80c0a00, 0xc014a40,
+	0x0000000, 0xc015840, 0x0000000, 0x64c000a, 0x9c0a18a,
+	0x980a20a, 0x980a00a, 0x60c000a, 0x80c2300, 0x64c1e08,
+	0x9c081c8, 0x9808008, 0x60c1e08, 0x98081c8, 0x9c08008,
+	0x60c1e08, 0x64c080a, 0x980a34a, 0x60c080a, 0xc014c00,
+	0x0000000, 0x64c1a07, 0xaa10007, 0x6800008, 0xc78cb80,
+	0x0000000, 0x64c1e0a, 0x980a60a, 0x60c1e0a, 0x6809009,
+	0x60c0809, 0x64c1e0a, 0x980a74a, 0x980a7ca, 0x60c1e0a,
+	0xfc08280, 0x6800071, 0xc021040, 0x4000c8a, 0xaa3ec0a,
+	0x649c108, 0xaa2c008, 0xaa12cca, 0xaa1ad8a, 0xae22bca,
+	0xc78a800, 0x6800007, 0xc780980, 0x7c00387, 0x6800007,
+	0xc781ec0, 0x7c00387, 0xc78c480, 0x0000000, 0xfc08280,
+	0x7c0400a, 0x609c40a, 0xfc08280, 0xfc01280, 0x500128a,
+	0x7c0404a, 0xfc0e1c0, 0x7c04087, 0x609c107, 0xfc0e1c0,
+	0x7c040c7, 0x609c207, 0xfc021c0, 0xfc031c0, 0xfc041c0,
+	0x609c007, 0xfc041c0, 0x609c307, 0xfc091c0, 0xfc091c0,
+	0xfc011c0, 0xfc0c1c0, 0xfc011c0, 0x7c04107, 0xfc011c0,
+	0xfc091c0, 0xfc091c0, 0xfc031c0, 0xc78bcc0, 0x0000000,
+	0x6800007, 0x7c01f87, 0x7804007, 0xa611207, 0xfc101c0,
+	0xfc011c0, 0xfc071c0, 0xfc011c0, 0xaa10007, 0x0000000,
+	0xfc0c1c0, 0xfc0c1c0, 0xfc011c0, 0x7802047, 0x7c02007,
+	0x7802087, 0x7c02047, 0xfc081c0, 0x7c02087, 0x7804107,
+	0xaa10007, 0xc016e00, 0x80c2301, 0x7c01f47, 0xfc011c0,
+	0x7802088, 0x95c1207, 0x7c02088, 0x50011c7, 0x7c01807,
+	0xaa30007, 0x68000c8, 0xfc011c0, 0xa624007, 0x68000c8,
+	0xfc011c0, 0x7c04187, 0xa60c007, 0x6800048, 0x6800088,
+	0xc780140, 0x7c04148, 0x7c04148, 0xfc011c0, 0x7c04187,
+	0xfc011c0, 0x7c041c7, 0xfc011c0, 0x7c04207, 0xfc061c0,
+	0x7c04247, 0x6800087, 0x7c00087, 0x6800808, 0x60c2108,
+	0x7801807, 0xaa18007, 0x6800008, 0x7804147, 0xaa0c0c7,
+	0x0000000, 0xfc01200, 0x7c04288, 0xfc041c0, 0xfc011c0,
+	0x7c042c7, 0xa648007, 0x6800008, 0xfc011c0, 0xaa34007,
+	0x6800009, 0xc016180, 0x80c2301, 0xc016200, 0x0000000,
+	0x7c04307, 0xc016040, 0x80c2301, 0xc0160c0, 0x0000000,
+	0xc780100, 0x7c04347, 0x7c04308, 0x7c04349, 0x6800007,
+	0x7c00107, 0xc782ac0, 0x680001a, 0x7804007, 0xa611207,
+	0xfc101c0, 0xfc011c0, 0xfc071c0, 0xfc021c0, 0xa60c047,
+	0xc780180, 0x680005a, 0xfc081c0, 0x7c020c7, 0xc780240,
+	0x680009a, 0x7802047, 0x7c02007, 0x7802087, 0x7c02047,
+	0xfc081c0, 0x7c02087, 0x7c020c7, 0x6800271, 0xc01e900,
+	0x4000c9a, 0x7804107, 0xaa10007, 0xc015700, 0x80c2301,
+	0x7c01f47, 0xfc011c0, 0x78020c8, 0x95c1207, 0xaa0c09a,
+	0x7c020c8, 0x7c02088, 0x50011c7, 0x7c01807, 0xaa34007,
+	0x68000c8, 0xfc011c0, 0xa628007, 0x68000c8, 0xfc011c0,
+	0xfc011c0, 0x7c04187, 0xa60c007, 0x6800048, 0x6800088,
+	0xc780140, 0x7c04148, 0x7c04148, 0xfc011c0, 0x7c04187,
+	0xfc011c0, 0x7c041c7, 0xfc011c0, 0x7c04207, 0xfc061c0,
+	0x7c04247, 0x78020c7, 0x48ff207, 0x7c01f08, 0x91c11c7,
+	0xaa5c007, 0x7802007, 0x91c1207, 0xa610008, 0x48ff1c7,
+	0x54011c7, 0x48ff1c7, 0x7c01e47, 0x7802047, 0x91c1207,
+	0xa610008, 0x48ff1c7, 0x54011c7, 0x48ff1c7, 0x7c01e87,
+	0x7802087, 0x91c1207, 0xa610008, 0x48ff1c7, 0x54011c7,
+	0x48ff1c7, 0xc780b40, 0x7c01ec7, 0x7802007, 0x91c1207,
+	0xaa2c008, 0x48ff1c7, 0x58011c7, 0x7801f08, 0xb4031c8,
+	0x6804009, 0x2008248, 0x24091c8, 0xba0e009, 0xc7fff80,
+	0x40801c7, 0x7c01e47, 0x7802047, 0x91c1207, 0xaa2c008,
+	0x48ff1c7, 0x58011c7, 0x7801f08, 0xb4031c8, 0x6804009,
+	0x2008248, 0x24091c8, 0xba0e009, 0xc7fff80, 0x40801c7,
+	0x7c01e87, 0x7802087, 0x91c1207, 0xaa2c008, 0x48ff1c7,
+	0x58011c7, 0x7801f08, 0xb0031c8, 0x6804009, 0x2408248,
+	0x2409207, 0xba0e009, 0xc7fff80, 0x44801c7, 0x48ff1c7,
+	0x7c01ec7, 0xa61409a, 0x7804147, 0xa60c0c7, 0xc780240,
+	0x6800808, 0xfc011c0, 0x7c00087, 0xa6f0007, 0x6800808,
+	0x6800047, 0x9505207, 0x9605207, 0x60c2108, 0xfc011c0,
+	0xfc011c0, 0x7c01f87, 0xfc021c0, 0xfc011c0, 0x7c04287,
+	0xfc011c0, 0x7c042c7, 0xa648007, 0x6800008, 0xfc011c0,
+	0xaa34007, 0x6800009, 0xc0136c0, 0x80c2301, 0xc013740,
+	0x0000000, 0x7c04307, 0xc013580, 0x80c2301, 0xc013600,
+	0x0000000, 0xc780100, 0x7c04347, 0x7c04308, 0x7c04349,
+	0x6800007, 0x7c00107, 0x7804007, 0xaa25207, 0x0000000,
+	0x6802007, 0x6c02007, 0x60e1907, 0x60e1a07, 0x60e1b07,
+	0xc781640, 0x0000000, 0xfc011c0, 0x64e1c09, 0x97e1247,
+	0xaa20047, 0x60e1c09, 0x6802007, 0x6c02007, 0x60e1907,
+	0x60e1a07, 0xc781200, 0x60e1b07, 0xfc011c0, 0xfc011c0,
+	0x6800009, 0x7c01009, 0xa630007, 0x7c01049, 0xc012c40,
+	0x80c2301, 0xc012cc0, 0x0000000, 0x7c01007, 0xc012b00,
+	0x80c2301, 0xc012b80, 0x0000000, 0x7c01047, 0xfc021c0,
+	0xfc02200, 0x64e1c09, 0x9602248, 0x7801008, 0x9405248,
+	0x7801048, 0x9505248, 0x60e1c09, 0xaa30047, 0x6802008,
+	0x7c01088, 0x6801888, 0x7c010c8, 0x6801a88, 0x7c01108,
+	0x6801d08, 0x7c01148, 0x7c01188, 0xc7802c0, 0x6802008,
+	0x68021c8, 0x7c01088, 0x68023c8, 0x7c010c8, 0x7c01108,
+	0x6802808, 0x7c01148, 0x7c01188, 0x6803548, 0x7c011c8,
+	0xaa2c007, 0x6801089, 0xc012180, 0x80c2301, 0xc012200,
+	0x0000000, 0x7000248, 0x20081c8, 0x7400248, 0xbae51c9,
+	0x4001249, 0x7801088, 0x78010c9, 0x9609209, 0x60e1908,
+	0x7801108, 0x7801149, 0x9609209, 0x60e1a08, 0x7801188,
+	0x78011c9, 0x9609209, 0x60e1b08, 0xfc011c0, 0x7c043c7,
+	0xaa0c007, 0x6800007, 0x687ffc7, 0x7c01c07, 0x64c510a,
+	0x64c4607, 0x7801308, 0x5410208, 0x78012c9, 0x2008248,
+	0x5802208, 0xe000288, 0x0000000, 0x0000000, 0x0000000,
+	0xf000200, 0xf010280, 0x970820a, 0x5402208, 0x20081c8,
+	0x64c430a, 0x2408288, 0x64c400a, 0x2408288, 0x7c01348,
+	0x5810208, 0x7c01388, 0xc013340, 0x0000000, 0x680001e,
+	0x7c0001e, 0x7c016de, 0x981d39e, 0x981d3dd, 0x9c1d1dd,
+	0x7804087, 0x400f1c7, 0x58041c7, 0x60c0907, 0x7c00987,
+	0x4401247, 0x7c00609, 0x9708789, 0x5404287, 0x78040c8,
+	0x400f208, 0x5804208, 0x5404248, 0x4401249, 0x5402249,
+	0x7c009c8, 0x7804149, 0xaa0c0c9, 0x4000248, 0x5801249,
+	0x7c01dc9, 0x4401248, 0x9608789, 0x4000248, 0x9610247,
+	0x6095209, 0x5404208, 0x780408a, 0x400f28a, 0x580428a,
+	0x540428a, 0x78040c8, 0x400f208, 0x5804208, 0x5404208,
+	0x961020a, 0x6090808, 0xc005d40, 0x7c013da, 0x6a00007,
+	0x60c3d07, 0x64c3d08, 0x9161208, 0xa6f8008, 0x6800008,
+	0x6c06c08, 0xaa1009a, 0x2008c08, 0xc780400, 0x60c3808,
+	0x5803208, 0x7804147, 0xaa200c7, 0x6800109, 0xaa18047,
+	0x6800009, 0x7801f87, 0xaa0c007, 0x68000c9, 0x6800009,
+	0x97a3209, 0x60c3908, 0x6bfffc8, 0x60c3808, 0xc00c0c0,
+	0x0000000, 0xc00c400, 0x0000000, 0xc00d200, 0x0000000,
+	0x69898c8, 0x6d81848, 0x6800707, 0xd000007, 0x60c2208,
+	0x7800387, 0xaa10007, 0x6800007, 0xc7f0cc0, 0x7c00387,
+	0x649c909, 0xaa10009, 0x6800087, 0xc7f0b80, 0x7c01507,
+	0x7801487, 0xa608007, 0xc780900, 0x44011c7, 0xaa0c087,
+	0x7801549, 0x78015c9, 0xae7c0c9, 0x40301c9, 0x70001c7,
+	0x54101c7, 0x4034209, 0x7000208, 0x94101c8, 0x609cb07,
+	0x40381c9, 0x70001c7, 0x7800fc8, 0x20081c8, 0x609ca08,
+	0x7c00fd9, 0x40941c9, 0x70001c7, 0x54101c7, 0x4090209,
+	0x7000208, 0x94101c8, 0x609cc07, 0x4029209, 0x4001249,
+	0x7000208, 0x9464248, 0x7801808, 0x94e1248, 0x609c909,
+	0x8007401, 0x6800009, 0x7c01489, 0x6800009, 0x7c01509,
+	0x78014c7, 0x2c07247, 0x4000295, 0xa238047, 0x6800008,
+	0x4000296, 0xa22c087, 0x6800048, 0x4000297, 0xa220107,
+	0x6800088, 0x4000298, 0xa214207, 0x68000c8, 0x6800047,
+	0xc7efd40, 0x7c01507, 0x7801607, 0x90041c7, 0xa8051c8,
+	0xaa2001a, 0x7801607, 0x90841c7, 0xa4051c8, 0x6800047,
+	0x3407207, 0xc7ff980, 0x2c091c9, 0x7801347, 0x4090248,
+	0x7400247, 0x7801387, 0x4004249, 0x7400247, 0x7804187,
+	0x54031c7, 0x2c07687, 0x4029248, 0x7400247, 0x40301c8,
+	0x7800f49, 0x74001c9, 0x40341c8, 0x7800f09, 0xa60c05a,
+	0x74001c9, 0x40006c8, 0xa62009a, 0x40381c8, 0x74001d9,
+	0x7000709, 0xaa1c009, 0x4401249, 0xc780140, 0x7400709,
+	0x7800f89, 0x74001c9, 0x4000707, 0x7c00f99, 0x6800231,
+	0xc0175c0, 0x4000c88, 0x6800047, 0x3407207, 0x78014c9,
+	0x2c091c9, 0x7c014c9, 0x609b20a, 0x609b00a, 0x609b10a,
+	0x68000c9, 0x400125a, 0x7c01489, 0xa60809a, 0xc780340,
+	0x7801587, 0x7c015c7, 0x7c01588, 0x4000185, 0x4000144,
+	0x7801609, 0x5404249, 0x9404248, 0x7c01609, 0x400010a,
+	0xc7800c0, 0x0000000, 0x7c01548, 0x649c108, 0xaa2c008,
+	0x7800187, 0xb61c087, 0x6800048, 0xaa1c09a, 0xaa0801a,
+	0xaa14007, 0x40011c7, 0x7c00187, 0xc780180, 0x7c001c8,
+	0x6800008, 0x7c001c8, 0xc782340, 0x0000000, 0x6800131,
+	0xc016a80, 0x4000c9a, 0xaa0c01a, 0x6801bac, 0x680592c,
+	0xc004b40, 0x0000000, 0xc008c40, 0x0000000, 0xc015d00,
+	0x0000000, 0xc004f80, 0x0000000, 0xc781f40, 0x0000000,
+	0xc781ec0, 0x0000000, 0x78001c7, 0xaaf4007, 0x0000000,
+	0x400024a, 0x7800107, 0xb4031c9, 0xc781cc0, 0x0000000,
+	0x7c00109, 0x78040c7, 0x682bc08, 0xb004207, 0x0000000,
+	0xfc031c0, 0x94e3247, 0x7c00349, 0x7804148, 0xaa200c8,
+	0x7801dc8, 0xb806209, 0x0000000, 0x7800307, 0xa608007,
+	0xc781880, 0x2409209, 0x78016c8, 0xa805209, 0x7c016c9,
+	0x680001e, 0x7c0001e, 0x9408789, 0x981d39d, 0x981d3dd,
+	0x9c1d1dd, 0xc003fc0, 0x0000000, 0xc0080c0, 0x0000000,
+	0xc015180, 0x0000000, 0xc004400, 0x0000000, 0x7804208,
+	0xa610008, 0x7804247, 0xfc01200, 0xfc061c0, 0x7c00207,
+	0x94e11c8, 0x60c0a07, 0xa61001a, 0x6800007, 0xc7808c0,
+	0x7c01e07, 0xfc011c0, 0x7c01e07, 0x8094200, 0xa60c007,
+	0xc780740, 0x0000000, 0x6815448, 0x6094208, 0x680c008,
+	0x6094008, 0x7800087, 0xaa18087, 0x6800047, 0x7804147,
+	0xaa0c0c7, 0x6800087, 0x6800107, 0xfc08200, 0xfc08240,
+	0x9509248, 0x6094109, 0xfc01200, 0xfc08200, 0xfc08240,
+	0x9509248, 0x6094109, 0x6094109, 0xfc01200, 0xaed4047,
+	0x44011c7, 0xfc01200, 0x7c00048, 0x8094000, 0x78043c7,
+	0xa60c007, 0xc780540, 0x0000000, 0xfc071c0, 0x80c2940,
+	0x7800207, 0x7804208, 0x94e11c8, 0x9807187, 0x98073c7,
+	0x60c0a07, 0x9c073c7, 0x9807387, 0x60c0a07, 0xc009880,
+	0x80c0600, 0x64c0a07, 0x91c21c7, 0xa6f8007, 0x0000000,
+	0xc780100, 0x0000000, 0xc009680, 0x80c0600, 0x7801e07,
+	0xaa14007, 0x7800048, 0x94211c8, 0x5001208, 0x94411c8,
+	0x60c1807, 0xcb8002c, 0x0000000, 0x64c0007, 0xa2fc047,
+	0x0000000, 0x64c3a07, 0x90061c7, 0xaaec647, 0x0000000,
+	0x80c0a00, 0x80c2300, 0x64c1e07, 0x9807547, 0x60c1e07,
+	0x80c2800, 0x64c1e07, 0x9c07747, 0x60c1e07, 0x80c0002,
+	0xc7ec000, 0x0000000, 0x649c015, 0x649c116, 0x649c217,
+	0x649c318, 0x809c000, 0x809c100, 0x809c200, 0x809c300,
+	0x6804004, 0x6814105, 0x6824206, 0xc000a40, 0x0000000,
+	0x8002501, 0x8002605, 0x8002708, 0x800290d, 0x8002815,
+	0x8002c14, 0x6800000, 0x7c01c00, 0xcc00000, 0x0000000,
+	0x6800007, 0x7c01907, 0x7c01987, 0x7c019c7, 0x7800607,
+	0x40011c7, 0x7c01887, 0x6800047, 0x60e0c07, 0x7c01a87,
+	0x7c018c7, 0x68003c7, 0x7c00147, 0x6805c07, 0x60c2107,
+	0x80c2170, 0x6800087, 0x7c01ac7, 0x680001f, 0x7804148,
+	0x5406208, 0x940321a, 0x7800387, 0x9461207, 0x60c0408,
+	0x6868008, 0x7c01a48, 0xcc00000, 0x0000000, 0x649cf30,
+	0x64c4002, 0x64c4203, 0x2403083, 0x40080c3, 0x7c012c3,
+	0x58100c3, 0x7c01303, 0x6800019, 0x7c01499, 0x7c014d9,
+	0x7c01519, 0x64c0919, 0x680001a, 0x7c0019a, 0x7c001da,
+	0x68000c2, 0x7c04142, 0x6803fc2, 0x7c01542, 0x7c01582,
+	0x7c015c2, 0x7c01602, 0x60c0919, 0x60c1a19, 0x6932002,
+	0x60c1e02, 0x6800002, 0x60c0c02, 0x6c04042, 0x60c0d02,
+	0xcc00000, 0x0000000, 0x649c803, 0xaa14003, 0x78014c2,
+	0x28020c2, 0x7c014c2, 0x809c800, 0x7801502, 0xaa0c002,
+	0x6800102, 0x6030502, 0x64c0003, 0xa2100c3, 0x6800002,
+	0xc780a80, 0x0000000, 0x64c3a03, 0x90060c3, 0xa60cac3,
+	0xc780940, 0x0000000, 0x7804143, 0xaa080c3, 0xc780840,
+	0x64c4403, 0x91210c3, 0xaa78003, 0x68fffc3, 0x7801fc2,
+	0x4001082, 0xb81c0c2, 0x7c01fc2, 0x6800002, 0x7c01fc2,
+	0x7800402, 0x4001082, 0xb8160c2, 0x7c00402, 0x64c0003,
+	0x9803203, 0x9803183, 0x9803003, 0x60c0003, 0x6802671,
+	0xc012340, 0x7802672, 0x6800002, 0x64c1803, 0x95860c2,
+	0x9803483, 0x60c1803, 0x9c03483, 0x60c1803, 0x6800103,
+	0x6030503, 0x6800002, 0x7c01fc2, 0x7c00402, 0xcc00000,
+	0x0000000, 0x64c442e, 0x9121bae, 0xaaf802e, 0xc7e9a40,
+	0x0000000, 0xc004ac0, 0x0000000, 0x6818109, 0x6c34749,
+	0x6090709, 0x6490b09, 0x9809009, 0x98090c9, 0x6090b09,
+	0x9c09009, 0x9c090c9, 0x962225a, 0x6090b09, 0x6800009,
+	0x6c07489, 0x2009c09, 0x6094409, 0x6880009, 0x6c07489,
+	0x2009c09, 0x6094509, 0xcc00000, 0x0000000, 0x7804149,
+	0xa60c0c9, 0xcc00000, 0x0000000, 0x6490707, 0x9807087,
+	0x98070c7, 0x6090707, 0x6495107, 0x98073c7, 0xcc00000,
+	0x6095107, 0xcc00000, 0x0400000, 0x64e1210, 0x91e1410,
+	0xbef0050, 0x0000000, 0x649d910, 0x900c410, 0xaef8190,
+	0x7801850, 0xaa3c090, 0xc7821c0, 0x6800011, 0x6c04011,
+	0x60e1211, 0x78016d1, 0xa20c051, 0x680001f, 0x688001f,
+	0x6c0749f, 0x201fc1f, 0x6800010, 0x7c01b10, 0xc7813c0,
+	0x6800110, 0x7801b11, 0xaa08091, 0xc780f00, 0x7801892,
+	0xaebc092, 0xaa3c72f, 0x7801b50, 0x5406410, 0x78016d1,
+	0x5801451, 0xbe0c051, 0x6800011, 0x6880011, 0x6c07491,
+	0x2011c11, 0x2010450, 0x4440410, 0x60e1310, 0xc780340,
+	0x40c07d0, 0x5405410, 0x78016d1, 0xbe0c051, 0x6800011,
+	0x6880011, 0x6c07491, 0x2011c11, 0x2010450, 0x4420410,
+	0x60e1310, 0x40607d0, 0x7801952, 0xaa14012, 0x6a2c211,
+	0xaa0c052, 0x6a2c011, 0x6a2c111, 0x6c04011, 0x60e1211,
+	0x6800010, 0x7c01b10, 0x6800110, 0xc7816c0, 0x7c01850,
+	0x7801991, 0x6800192, 0x2411491, 0x2411491, 0x2411491,
+	0x7801a50, 0x5409410, 0x2010450, 0x5403450, 0x2011c11,
+	0x60e1311, 0x7801952, 0xaa34012, 0x6a44211, 0xaa2c052,
+	0x6a44011, 0xc780240, 0x6a44111, 0xa63c0d1, 0x7801a90,
+	0x64e0c12, 0x9010492, 0xb8ea490, 0xcc00000, 0x0400000,
+	0x6c0c011, 0x60e1211, 0x680001f, 0x6800010, 0x7c01b10,
+	0x6800150, 0xc780e80, 0x7c01850, 0x78018d1, 0xaa1c011,
+	0x4401451, 0x7c018d1, 0x7801891, 0x4401451, 0xc780b00,
+	0x7c01891, 0x78019d1, 0x7c01a11, 0x7801a50, 0x5409410,
+	0x2010450, 0x6800192, 0x2011491, 0x7c019d1, 0x5403450,
+	0x2011c11, 0x60e1311, 0x7801952, 0xaa14012, 0x6a16211,
+	0xaa0c052, 0x6a16011, 0x6a16111, 0x7801bd2, 0xaa28012,
+	0x7801a90, 0x64e0c12, 0x9010492, 0xb804490, 0x7801a12,
+	0xc7fde80, 0x7c019d2, 0x4001410, 0x7c01a90, 0x7c01d91,
+	0x6c00011, 0x60e1211, 0x6800050, 0xc780400, 0x7c01850,
+	0xba30110, 0xc7ff540, 0xa6f8050, 0x7801891, 0xaa74011,
+	0x4401451, 0xb26c051, 0x7c01891, 0x7801ad0, 0xaa0c0d0,
+	0x0000000, 0x80c2170, 0x6800010, 0x7c01850, 0xcc00000,
+	0x0400000, 0xaa0c010, 0x688001f, 0x680001f, 0x6c0749f,
+	0xc780a40, 0x201fc1f, 0xaa0c72f, 0x90a841f, 0x90c741f,
+	0x7800992, 0xb823490, 0xa8f5490, 0x91a141f, 0xaa20010,
+	0x688001f, 0xc780180, 0x680001f, 0xaa7001f, 0x7801991,
+	0xc7ffcc0, 0x0000000, 0x6c0749f, 0x201fc1f, 0x7801a50,
+	0x5409410, 0x6800192, 0x2411491, 0x2010450, 0x5403450,
+	0x2011c11, 0x60e1311, 0x7801d90, 0x9004450, 0xaa14011,
+	0x6a14210, 0xaa0c111, 0x6a14010, 0x6a14110, 0x6c08010,
+	0x60e0d1f, 0xaa0c72f, 0x40207df, 0x40207df, 0xc7ff4c0,
+	0x60e1210, 0x7801a50, 0x5409410, 0x2010450, 0x6800192,
+	0x2011491, 0x7c01991, 0x5403450, 0x2011c11, 0x60e1311,
+	0x7801d90, 0xa61801f, 0x9c101d0, 0x60e1210, 0x68000d0,
+	0xc7ff0c0, 0x7c01850, 0x6c08010, 0x60e0d1f, 0xaae872f,
+	0x40207df, 0xc7ffe00, 0x40207df, 0xc000d00, 0x0000000,
+	0x8095007, 0x8095000, 0x7804347, 0x7804308, 0x94a51c8,
+	0x78042c8, 0x95411c8, 0x6096e07, 0xaa0c008, 0x6800088,
+	0x6800048, 0x60c3108, 0x6800048, 0x780098a, 0x68002c9,
+	0xb00324a, 0x0000000, 0x6800008, 0x6498e0a, 0x97c1288,
+	0x6098e0a, 0x6497f08, 0x68000ca, 0x970220a, 0x6097f08,
+	0x6820988, 0x6c00208, 0x968221a, 0x780098a, 0xb20c2ca,
+	0x68004ca, 0x6800c0a, 0x970620a, 0xcc00000, 0x6095108,
+	0x683ffc8, 0x6490909, 0xa210049, 0xaa0c008, 0xc7fff40,
+	0x4401208, 0x6490b09, 0x9809009, 0x98090c9, 0x6090b09,
+	0x9c09009, 0x9c090c9, 0x6090b09, 0xcc00000, 0x0000000,
+	0x683ffc9, 0x649bb08, 0x920c208, 0x649530a, 0x900128a,
+	0x2008288, 0xaa10008, 0xaa0c009, 0xc7ffe40, 0x4401249,
+	0xcc00000, 0x0000000, 0x64e1209, 0x91e1249, 0xbef8049,
+	0x64e0009, 0x64e0e0b, 0x64e0c0c, 0x83f0040, 0x83f0000,
+	0x680020d, 0xd00000d, 0x0000000, 0x60e0009, 0x60e0e0b,
+	0xcc00000, 0x60e0c0c, 0xc07fc40, 0x0000000, 0x6490b09,
+	0x9809009, 0x9809089, 0x6090b09, 0x9c09009, 0x9c09089,
+	0x6090b09, 0x8095007, 0x8095000, 0xc000500, 0x0000000,
+	0x6800007, 0x7c00307, 0x6800007, 0x7c01907, 0x7c01987,
+	0x7c019c7, 0x7800607, 0x40011c7, 0x7c01887, 0x6800047,
+	0x60e0c07, 0x7c01a87, 0x7c018c7, 0x68003c7, 0x7c00147,
+	0x6800007, 0xcc00000, 0x7c01847, 0x683ffc9, 0x6498f0a,
+	0xaa0c009, 0xa6f800a, 0x4401249, 0x64c3d0a, 0x580a28a,
+	0xbef80ca, 0x0000000, 0x6498e0a, 0x980a00a, 0x6800fc9,
+	0x9706289, 0x6098e0a, 0x6800009, 0x9706289, 0x9c0a00a,
+	0xcc00000, 0x6098e0a, 0x64c3a08, 0x9006208, 0x64c0809,
+	0x64c090a, 0x64c1e0b, 0x64c380c, 0x6800407, 0x63f0007,
+	0x6800007, 0x63f0007, 0x0000000, 0x0000000, 0x0000000,
+	0x0000000, 0x60c0809, 0x60c090a, 0x60c1e0b, 0x60c380c,
+	0xc07ef00, 0x0000000, 0x6800009, 0x60c0c09, 0x6c04049,
+	0x60c0d09, 0x64c1809, 0x9586248, 0x9809489, 0x60c1809,
+	0x9c09489, 0x60c1809, 0xcc00000, 0x80c0a01, 0x680072f,
+	0x6bfffcb, 0x6800024, 0x7801c20, 0x6800021, 0x6800025,
+	0x6800022, 0x6800026, 0x6800023, 0x6800027, 0x680800a,
+	0x680070e, 0x740028b, 0x400128a, 0x74002a4, 0x400128a,
+	0x74002a0, 0x400128a, 0x74002a1, 0x400128a, 0x74002a5,
+	0x400128a, 0x74002a2, 0x400128a, 0x74002a6, 0x400128a,
+	0x74002a3, 0x400128a, 0x74002a7, 0xd07fbce, 0x400128a,
+	0x7c01c4b, 0x96102cb, 0x80c0700, 0x60c270b, 0x9610824,
+	0x60c0220, 0x9610865, 0xaa1801a, 0x60c0221, 0x96108a6,
+	0x60c0222, 0x96108e7, 0x60c0223, 0x780098e, 0xb009bce,
+	0x6b80007, 0x6c07487, 0x2007c07, 0x6035107, 0x6803f07,
+	0x6035207, 0x6a08007, 0x6035007, 0x7800007, 0xa60c007,
+	0x6803fc7, 0x7c01c87, 0x6800007, 0x7c01d47, 0xac0bbce,
+	0x7801c87, 0xb613fc7, 0xba0c707, 0x441c1c7, 0x7c01c87,
+	0x6435007, 0x580f1c7, 0xbef8047, 0xcc00000, 0x0000000,
+	0x6435007, 0x580f1c7, 0xbef8047, 0x0000000, 0x6435307,
+	0x900c1c7, 0xa6f8007, 0x0000000, 0x6b80007, 0x6c07487,
+	0x2007c07, 0x6035107, 0x6803f07, 0x6035207, 0x6b0c007,
+	0x6035007, 0x54011ef, 0xac051ce, 0x6800087, 0x7c01cc7,
+	0xc7ff880, 0x7c01d07, 0x6b90008, 0x6c07488, 0x2008c08,
+	0x540126f, 0x2009bc9, 0x680008a, 0x7c01cca, 0x68000ca,
+	0x6435007, 0x580f1c7, 0xbef8047, 0x6803f07, 0x6035108,
+	0x6035207, 0x6a08007, 0x6035007, 0xac0324e, 0xc7ff3c0,
+	0x7c01d0a, 0x6808007, 0x20081c8, 0x2009bc9, 0xc7ffc80,
+	0x400128a, 0x400130c, 0x480f30c, 0x7c01d0c, 0x980b38b,
+	0x7801ccc, 0x540928c, 0x200a24a, 0x400130c, 0x480f30c,
+	0x7c01ccc, 0x643500c, 0x580f30c, 0x6c0748a, 0xbef404c,
+	0x200ac0a, 0x643530c, 0x900c30c, 0xa6f800c, 0x0000000,
+	0x603510a, 0x6803f0a, 0x603520a, 0xc7fedc0, 0x603500b,
+	0x64c2307, 0xbefc047, 0xcc00000, 0x64c2007, 0x40011c7,
+	0x6800008, 0xa20c047, 0x58011c7, 0x24071c8, 0xcc00000,
+	0x0000000, 0x2409247, 0x48ff249, 0x5401249, 0x2407207,
+	0x48ff1c7, 0x54011c7, 0x680000a, 0x680000b, 0x6800048,
+	0xb8041c8, 0x54012cb, 0x980b04b, 0x24081c8, 0x5401208,
+	0xb2ec20a, 0x400128a, 0x58012cb, 0xe0002c9, 0x0000000,
+	0x0000000, 0xcc00000, 0xf000240, 0x2409247, 0x6807fca,
+	0x2809289, 0x2407207, 0x6807fca, 0x2807287, 0x680000a,
+	0x680000b, 0x6800048, 0xb8041c8, 0x54012cb, 0x980b04b,
+	0x24081c8, 0x5401208, 0xb2ec20a, 0x400128a, 0x58012cb,
+	0xe0002c9, 0x0000000, 0x0000000, 0xcc00000, 0xf000240,
+	0x24091c9, 0x6807fca, 0x2809289, 0x24071c8, 0x6807fca,
+	0x2807287, 0x680000a, 0x680000b, 0x6800048, 0xb8041c8,
+	0x54012cb, 0x980b04b, 0x24081c8, 0x5401208, 0xb2ec20a,
+	0x400128a, 0x58012cb, 0xe0002c9, 0x0000000, 0x0000000,
+	0xcc00000, 0xf000240, 0x2407207, 0x6807fca, 0x2807287,
+	0x680000a, 0x680000b, 0x6800048, 0xb8041c8, 0x54012cb,
+	0x980b04b, 0x24081c8, 0x5401208, 0xb2ec34a, 0x400128a,
+	0xcc00000, 0x580124b, 0x7804187, 0xa60c007, 0x6800088,
+	0x6800048, 0x7c04148, 0xa60c01a, 0x680592c, 0x680005a,
+	0xcc00000, 0x0000000, 0x24091c9, 0x6807fc8, 0x2809209,
+	0x680000a, 0x680000b, 0x6800048, 0xb8041c8, 0x54012cb,
+	0x980b04b, 0x24081c8, 0x5401208, 0xb2ec20a, 0x400128a,
+	0x58012cb, 0xe0002c9, 0x0000000, 0x0000000, 0xcc00000,
+	0xf000240, 0xaa1409a, 0xaa0801a, 0xc784cc0, 0xcc00000,
+	0x0000000, 0x7801ec7, 0x7801e88, 0x2407207, 0x48ff1c7,
+	0x54011c7, 0x7c00447, 0x7801f07, 0x7801e88, 0x2407207,
+	0x48ff1c7, 0x54011c7, 0x7c00487, 0x7804149, 0xaa140c9,
+	0x7800389, 0xa60c009, 0x0000000, 0x44011c7, 0xc07f580,
+	0x7800449, 0x6800f88, 0x9646248, 0x60c3009, 0x7800487,
+	0x7804149, 0xaa280c9, 0x7800389, 0xaa0c009, 0x0000000,
+	0x40011c7, 0xc07f280, 0x7800449, 0x6800fc8, 0x9646248,
+	0x60c3009, 0x7804147, 0xaa080c7, 0xc780bc0, 0x7801e88,
+	0x5401208, 0x7801ec7, 0xc07e980, 0x54011c7, 0x6800c08,
+	0x9646248, 0x60c3009, 0x7801e48, 0x5401208, 0x7801ec7,
+	0xc07e780, 0x54011c7, 0x6800c48, 0x9646248, 0x60c3009,
+	0x7801f07, 0x7801e88, 0x2407207, 0x48ff1c7, 0x5401247,
+	0x7801ec7, 0x7801f08, 0x2407207, 0x48ff1c7, 0x54011c7,
+	0x9529247, 0x6800d08, 0x9646248, 0x60c3009, 0x7801f07,
+	0x7801e88, 0xc07d1c0, 0x7801e89, 0x6800808, 0x9646248,
+	0x60c3009, 0x7801ec7, 0x7801f08, 0xc07d000, 0x7801f09,
+	0x6800888, 0x9646248, 0x60c3009, 0xcc00000, 0x0000000,
+	0x7801f8c, 0xaa0c00c, 0x780038c, 0x680000c, 0xa61c00c,
+	0x7801ec7, 0x54011c7, 0x7801e88, 0x5401208, 0xc780180,
+	0x4001208, 0x7801ec7, 0x54011c7, 0x40011c7, 0x4401207,
+	0xc07db00, 0x0000000, 0x6800c08, 0x9646248, 0xa60c00c,
+	0x0000000, 0x98093c9, 0x60c3009, 0xa61800c, 0x7801ec7,
+	0x54011c7, 0x7801e88, 0xc780200, 0x5401208, 0x7801ec7,
+	0x54011c7, 0x40011c7, 0x7801e88, 0x5401208, 0x4001208,
+	0xc07d600, 0x0000000, 0x6800c48, 0x9646248, 0xaa0c00c,
+	0x0000000, 0x98093c9, 0x60c3009, 0xa61c00c, 0x7801ec7,
+	0x54011c7, 0x7801e48, 0x5401208, 0xc7801c0, 0x4001208,
+	0x7801ec7, 0x54011c7, 0x40011c7, 0x7801e88, 0x5401208,
+	0xc07d100, 0x0000000, 0x6800c88, 0x9646248, 0x60c3009,
+	0xa61800c, 0x7801ec7, 0x54011c7, 0x7801e48, 0xc780200,
+	0x5401208, 0x7801ec7, 0x54011c7, 0x40011c7, 0x7801e48,
+	0x5401208, 0x4001208, 0xc07ccc0, 0x0000000, 0x6800cc8,
+	0x9646248, 0x60c3009, 0x780038c, 0x7801f07, 0xaa0c00c,
+	0x54011c7, 0x40011c7, 0x7801e88, 0x5401208, 0x2407207,
+	0x6807fca, 0x2809287, 0x7801ec7, 0xaa1800c, 0x54011c7,
+	0x7801f88, 0xa60c008, 0x0000000, 0x40011c7, 0x7801f08,
+	0xaa0c00c, 0x5401208, 0x4001208, 0x2407207, 0x2807287,
+	0x9529247, 0x6800d08, 0x9646248, 0x60c3009, 0x7801f07,
+	0xaa0c00c, 0x54011c7, 0x40011c7, 0x7801e88, 0x5401208,
+	0x4001208, 0x2407207, 0x6807fca, 0x2809287, 0x7801ec7,
+	0xaa1800c, 0x54011c7, 0x7801f88, 0xa60c008, 0x0000000,
+	0x40011c7, 0x7801f08, 0xaa0c00c, 0x5401208, 0x4001208,
+	0x2407207, 0x2807287, 0x9529247, 0x6800d48, 0x9646248,
+	0x60c3009, 0xaa0c00c, 0x680000c, 0x680004c, 0x7801f07,
+	0x54011c7, 0x2007307, 0x7801e88, 0x5401208, 0x4001208,
+	0xc07b0c0, 0x4000248, 0x6800808, 0x9646248, 0x60c3009,
+	0x7801f07, 0x54011c7, 0x2007307, 0x7801e88, 0x5401208,
+	0xc07ae40, 0x4001248, 0x6800848, 0x9646248, 0x60c3009,
+	0x7801f07, 0x54011c7, 0x2007307, 0x7801ec8, 0x5401208,
+	0xc07b140, 0x4000248, 0x6800888, 0x9646248, 0x60c3009,
+	0x7801f07, 0x54011c7, 0x2007307, 0x7801ec8, 0x5401208,
+	0x4001208, 0xc07ae80, 0x4401248, 0x68008c8, 0x9646248,
+	0x60c3009, 0x7801f07, 0x54011c7, 0x2007307, 0x7801e88,
+	0x5401208, 0x4001208, 0xc07a640, 0x4401248, 0x6800908,
+	0x9646248, 0x60c3009, 0x7801f07, 0x54011c7, 0x2007307,
+	0x7801e88, 0x5401208, 0xc07a3c0, 0x4000248, 0x6800948,
+	0x9646248, 0x60c3009, 0x7801f07, 0x54011c7, 0x2007307,
+	0x7801ec8, 0x5401208, 0xc07a6c0, 0x4001248, 0x6800988,
+	0x9646248, 0x60c3009, 0x7801f07, 0x54011c7, 0x2007307,
+	0x7801ec8, 0x5401208, 0x4001208, 0xc07a400, 0x4400248,
+	0x68009c8, 0x9646248, 0x60c3009, 0xcc00000, 0x0000000,
+	0x7804147, 0xaa080c7, 0xc7807c0, 0x7801f07, 0x7801e88,
+	0xc079600, 0x7801e89, 0x6800808, 0x9646248, 0x60c3009,
+	0x7801ec7, 0x7801e48, 0xc079440, 0x7801e89, 0x6800848,
+	0x9646248, 0x60c3009, 0x7801ec7, 0x7801e88, 0xc079280,
+	0x7801e49, 0x6800908, 0x9646248, 0x60c3009, 0x7801ec7,
+	0x7801e48, 0xc0790c0, 0x7801e49, 0x6800948, 0x9646248,
+	0x60c3009, 0xcc00000, 0x0000000, 0x780038c, 0xaa0800c,
+	0xc780880, 0x680080d, 0x7801f07, 0x54011c7, 0x900230d,
+	0x7801e88, 0x5401208, 0xaa2004c, 0xaa1c00c, 0x4001208,
+	0x7801e48, 0x5401208, 0xaa0c0cc, 0x0000000, 0x4001208,
+	0x904230d, 0x7801e89, 0x5401249, 0xaa2004c, 0xaa1c00c,
+	0x4001249, 0x7801e49, 0x5401249, 0xaa0c0cc, 0x0000000,
+	0x4001249, 0xc078d80, 0x0000000, 0x964624d, 0x60c3009,
+	0xba90bcd, 0x400134d, 0xcc00000, 0x0000000, 0x680080d,
+	0x7801f07, 0x54011c7, 0x40011c7, 0x900230d, 0x7801f08,
+	0xaa2800c, 0x5401208, 0x7801e88, 0x5401208, 0xaa1808c,
+	0xaa1404c, 0x4001208, 0x7801e48, 0x5401208, 0x4001208,
+	0x904230d, 0x7801f09, 0xaa2800c, 0x5401249, 0x7801e89,
+	0x5401249, 0xaa1808c, 0xaa1404c, 0x4001249, 0x7801e49,
+	0x5401249, 0x4001249, 0xc078480, 0x0000000, 0x964624d,
+	0x60c3009, 0xba84bcd, 0x400134d, 0xcc00000, 0x0000000,
+	0x7804147, 0xa6140c7, 0x6099004, 0x6099105, 0xc780240,
+	0x6099206, 0x6099004, 0x6099104, 0x6099205, 0x6099305,
+	0x6099406, 0xc780080, 0x6099506, 0xaa3c09a, 0xaa0805a,
+	0xcc00000, 0x7804147, 0x698d908, 0xaa1c0c7, 0x6d85888,
+	0x688d108, 0xaa10087, 0x6c85088, 0x6910948, 0x6d088c8,
+	0x80c2400, 0xcc00000, 0x60c2208, 0x7804147, 0x698d908,
+	0xaa100c7, 0x6d85888, 0x6800008, 0x6d088c8, 0x80c2400,
+	0x60c2208, 0x7804147, 0x69898c8, 0xaa100c7, 0x6d81848,
+	0x6800008, 0x6c85008, 0x80c2408, 0xcc00000, 0x60c2208,
+	0x609cd32, 0x609ce31, 0x8007401, 0x649ce31, 0xa6fc031,
+	0x0000000, 0xcc00000, 0x0000000, 0x0000000
+};
diff --git a/drivers/amlogic/amports/arch/ucode/avs/vavs_mc.c b/drivers/amlogic/amports/arch/ucode/avs/vavs_mc.c
index 5c5c79c..46a0fc9 100644
--- a/drivers/amlogic/amports/arch/ucode/avs/vavs_mc.c
+++ b/drivers/amlogic/amports/arch/ucode/avs/vavs_mc.c
@@ -23,12 +23,27 @@
 #define MicroCode vavs_mc_debug
 #include "avs_linux_debug.h"
 
+#undef MicroCode
+#define MicroCode vavs_mc_old
+#include "avs_linux_old.h"
+
+#undef MicroCode
+#define MicroCode txl_vavs_mc
+#include "txl_avs_linux.h"
+#undef MicroCode
+#define MicroCode txl_vavs_mc_debug
+#include "txl_avs_linux_debug.h"
+
+
 #define FOR_VFORMAT VFORMAT_AVS
 
 #define REG_FIRMWARE_ALL()\
 	do {\
 		DEF_FIRMWARE(vavs_mc);\
 		DEF_FIRMWARE(vavs_mc_debug);\
+		DEF_FIRMWARE(vavs_mc_old);\
+		DEF_FIRMWARE(txl_vavs_mc);\
+		DEF_FIRMWARE(txl_vavs_mc_debug);\
 	} while (0)
 
 INIT_DEF_FIRMWARE();
diff --git a/drivers/amlogic/amports/arch/ucode/firmware_def.h b/drivers/amlogic/amports/arch/ucode/firmware_def.h
index c5c716c..498b9d0 100644
--- a/drivers/amlogic/amports/arch/ucode/firmware_def.h
+++ b/drivers/amlogic/amports/arch/ucode/firmware_def.h
@@ -22,6 +22,10 @@
 		MESON_CPU_MAJOR_ID_M8,\
 		MESON_CPU_MAJOR_ID_M8M2,\
 		MESON_CPU_MAJOR_ID_GXBB,\
+		MESON_CPU_MAJOR_ID_GXTVBB,\
+		MESON_CPU_MAJOR_ID_GXL,\
+		MESON_CPU_MAJOR_ID_GXM,\
+		MESON_CPU_MAJOR_ID_TXL,\
 		0}
 
 #endif
diff --git a/drivers/amlogic/amports/arch/ucode/h264/gxm_h264c_linux.h b/drivers/amlogic/amports/arch/ucode/h264/gxm_h264c_linux.h
new file mode 100644
index 0000000..1ff0ba5
--- /dev/null
+++ b/drivers/amlogic/amports/arch/ucode/h264/gxm_h264c_linux.h
@@ -0,0 +1,822 @@
+static const u32 MicroCode[] __initconst = {
+	0x06810001, 0x06800000, 0x0d000001, 0x07400040, 0x064c0800,
+	0x09800300, 0x00000000, 0x060c0800, 0x0649d019, 0x0c006140,
+	0x0649c134, 0x06880000, 0x060c2900, 0x080c0002, 0x06bfda80,
+	0x07c02d40, 0x06030400, 0x00400000, 0x0c007c80, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0c7ffe80,
+	0x00000000, 0x06431e35, 0x0befc075, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x0c780500, 0x00000000, 0x0cc00000,
+	0x00400000, 0x0c780d40, 0x064c0007, 0x0cc00000, 0x00400000,
+	0x0c787cc0, 0x00000000, 0x0cc00000, 0x00400000, 0x0cc00000,
+	0x00400000, 0x0c787b40, 0x00000000, 0x0c787900, 0x00000000,
+	0x0cc00000, 0x00400000, 0x0aa44133, 0x0aa0c033, 0x0c7fff00,
+	0x0680001b, 0x0649cf1c, 0x0bee405c, 0x064c431c, 0x0ae0ffdc,
+	0x0c7ffd80, 0x0680001b, 0x064c411c, 0x0968c71c, 0x0a40bc9c,
+	0x04000c9c, 0x0b60c19b, 0x0c7ffbc0, 0x040016db, 0x0809c006,
+	0x08007401, 0x06bfffb3, 0x06030433, 0x0c7ffa40, 0x06800133,
+	0x0649c91c, 0x0400171c, 0x0609c91c, 0x0c7ff900, 0x0680001b,
+	0x07801949, 0x0a212009, 0x09c091c9, 0x0c7a8780, 0x07c01949,
+	0x00800000, 0x07802d49, 0x0c7ff6c0, 0x06030409, 0x06bf9b89,
+	0x06030409, 0x00400000, 0x064c4309, 0x05801249, 0x0baf9809,
+	0x00000000, 0x0a2c0047, 0x07802bc9, 0x0aa14009, 0x0a608049,
+	0x0c7a08c0, 0x0a6080c9, 0x0c79f700, 0x0a208807, 0x0c782680,
+	0x0be15007, 0x0a208207, 0x0c7845c0, 0x0cb8001a, 0x00000000,
+	0x0c000280, 0x00000000, 0x06bfffca, 0x07903c08, 0x0a402288,
+	0x0c784580, 0x0be08207, 0x0c7ffdc0, 0x0c784300, 0x00000000,
+	0x0649cd09, 0x04001249, 0x0609cd09, 0x0c000780, 0x064c380e,
+	0x064c0809, 0x064c090b, 0x0680040a, 0x063f000a, 0x0680000a,
+	0x063f000a, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x060c0809, 0x060c090b, 0x0688000a, 0x060c290a, 0x0c0005c0,
+	0x00000000, 0x0680000a, 0x060c0c0a, 0x06c0404a, 0x060c0d0a,
+	0x080c0101, 0x0684044a, 0x060c2e0a, 0x060c380e, 0x0c001780,
+	0x00000000, 0x0cc00000, 0x00000000, 0x0683ffc9, 0x0aa18009,
+	0x0649470a, 0x0910828a, 0x07802cc8, 0x0a4fc20a, 0x04401249,
+	0x0cc00000, 0x00000000, 0x0c00a500, 0x00000000, 0x06490b09,
+	0x09809009, 0x09809089, 0x06090b09, 0x09c09009, 0x09c09089,
+	0x06090b09, 0x08095007, 0x08095000, 0x0683ffc9, 0x06498f0a,
+	0x0aa0c009, 0x0a6f800a, 0x04401249, 0x064c3d0a, 0x0580a28a,
+	0x0bef80ca, 0x00000000, 0x06498e0a, 0x0980a00a, 0x068007c9,
+	0x09706289, 0x06098e0a, 0x06800009, 0x09706289, 0x09c0a00a,
+	0x0cc00000, 0x06098e0a, 0x0200ad0a, 0x0603510a, 0x06035209,
+	0x0603500b, 0x0643500c, 0x0580f30c, 0x0bef804c, 0x00000000,
+	0x0643530c, 0x0900c30c, 0x0a6f800c, 0x00000000, 0x0cc00000,
+	0x0240ad0a, 0x0200a64a, 0x0603410a, 0x06810009, 0x06034209,
+	0x06a2000b, 0x06c001cb, 0x0603400b, 0x0643400c, 0x0580f30c,
+	0x0bef804c, 0x0cc00000, 0x00000000, 0x08032100, 0x0200a64a,
+	0x0603410a, 0x06810009, 0x06034209, 0x06a3000b, 0x06c001cb,
+	0x0603400b, 0x0643400c, 0x0580f30c, 0x0bef804c, 0x06840008,
+	0x063f0008, 0x06800008, 0x063f0008, 0x08002a09, 0x08002b17,
+	0x06830008, 0x06032608, 0x08032261, 0x06800048, 0x06c00088,
+	0x06032108, 0x0cc00000, 0x00000000, 0x0680004a, 0x060e0c0a,
+	0x07c026ca, 0x07c0250a, 0x068003ca, 0x07c0280a, 0x06805c0a,
+	0x060c210a, 0x080c2170, 0x0680008a, 0x07c02a4a, 0x06800018,
+	0x0680000a, 0x0cc00000, 0x07c0248a, 0x0a25d007, 0x0680004a,
+	0x0c07e540, 0x07c01e4a, 0x064c000a, 0x09c0a18a, 0x0980a20a,
+	0x0980a00a, 0x060c000a, 0x064c2908, 0x09c08348, 0x09808208,
+	0x060c2908, 0x09808348, 0x09c08208, 0x060c2908, 0x064c080a,
+	0x0980a34a, 0x060c080a, 0x0c07e340, 0x00000000, 0x0c07f700,
+	0x00000000, 0x080c0600, 0x0fc081c0, 0x0649cf0a, 0x0a21500a,
+	0x0a611e47, 0x0a20c80a, 0x0c780dc0, 0x00000000, 0x090a2207,
+	0x07c02048, 0x0481f1c7, 0x07c02007, 0x0aa38147, 0x0aa34047,
+	0x0a60c187, 0x0c781040, 0x0681d98d, 0x0a60c1c7, 0x0c780f80,
+	0x0682000d, 0x0a60c207, 0x0c780ec0, 0x0682744d, 0x0a608247,
+	0x0c780740, 0x0c781400, 0x0c78f1c0, 0x00000000, 0x064c4408,
+	0x09101208, 0x0aaf8048, 0x064c5109, 0x064c460a, 0x07801a48,
+	0x05410208, 0x07801a0b, 0x020082c8, 0x0580a208, 0x06031f08,
+	0x06033f09, 0x0c07b640, 0x08031e15, 0x06431f08, 0x06433f09,
+	0x09708209, 0x0540a208, 0x02008288, 0x064c4309, 0x02408248,
+	0x064c4009, 0x02408248, 0x0cc00000, 0x0440a208, 0x0c07f9c0,
+	0x00000000, 0x07c00bc8, 0x05810208, 0x07c00c08, 0x06800048,
+	0x0c780b80, 0x07c00c48, 0x0c07f7c0, 0x00000000, 0x07800909,
+	0x0780094a, 0x0961024a, 0x0609c209, 0x0680a149, 0x02008248,
+	0x07c00908, 0x05810208, 0x07c00948, 0x07807188, 0x0609c108,
+	0x0809c00a, 0x08007401, 0x0649c008, 0x0a6fc008, 0x0c7806c0,
+	0x00000000, 0x07803bc8, 0x090821c8, 0x0aa18047, 0x06800047,
+	0x09482207, 0x0680000a, 0x0c07d7c0, 0x06c0000a, 0x0cb8000d,
+	0x07c03bc8, 0x064c2907, 0x0be14407, 0x064c2307, 0x0bef4047,
+	0x0cc00000, 0x064c2007, 0x0cc00000, 0x06800007, 0x040011c7,
+	0x06800008, 0x0a20c047, 0x058011c7, 0x024071c8, 0x0cc00000,
+	0x00000000, 0x064c0007, 0x0a2fc047, 0x00000000, 0x064c3a07,
+	0x090061c7, 0x0aaec647, 0x00000000, 0x080c0a01, 0x080c2800,
+	0x080c0002, 0x0c7fb100, 0x00000000, 0x0684000a, 0x0c07cfc0,
+	0x06c0000a, 0x069fffc2, 0x07c03b42, 0x07c03b82, 0x07c03c42,
+	0x07c00a02, 0x07c00a42, 0x07c00a82, 0x07c03c82, 0x07c01742,
+	0x07c017c2, 0x068003c2, 0x07c02fc2, 0x064c1e02, 0x098025c2,
+	0x060c1e02, 0x064c1e02, 0x09802702, 0x060c1e02, 0x0680c002,
+	0x06094002, 0x06803003, 0x06804002, 0x0d000003, 0x06094102,
+	0x06800002, 0x06094002, 0x0c000680, 0x00000000, 0x064c1e02,
+	0x098025c2, 0x060c1e02, 0x08002501, 0x08002609, 0x08002708,
+	0x0800290d, 0x08002d15, 0x08002c14, 0x0649b802, 0x06800fc3,
+	0x09508083, 0x0609b802, 0x08002609, 0x08002b17, 0x06830002,
+	0x06032602, 0x08032261, 0x06800042, 0x06c00082, 0x06032102,
+	0x06800032, 0x0cc00000, 0x0680001b, 0x06800203, 0x07c03bc3,
+	0x06800712, 0x06800033, 0x07c02bf3, 0x07c01933, 0x07c01973,
+	0x07c01df3, 0x07c01e33, 0x0649c203, 0x0a654003, 0x06800803,
+	0x068f000a, 0x06c0470a, 0x06810002, 0x06800049, 0x06a02bcb,
+	0x0c07ba80, 0x00000000, 0x0d07ff83, 0x0200a08a, 0x06804003,
+	0x06af000a, 0x06c0470a, 0x06808002, 0x06800049, 0x06a02bcb,
+	0x0c07b800, 0x00000000, 0x0d07ff83, 0x0200a08a, 0x064e1203,
+	0x091e10c3, 0x0bef8043, 0x064c0903, 0x06803002, 0x063f0002,
+	0x06800002, 0x063f0002, 0x06803fc2, 0x060c0903, 0x06800002,
+	0x060c0c02, 0x06c04042, 0x060c0d02, 0x080c0101, 0x06840442,
+	0x060c2e02, 0x064c4010, 0x064c4211, 0x02411411, 0x04008451,
+	0x07c01a11, 0x05810451, 0x07c01a51, 0x064c1e02, 0x09802702,
+	0x060c1e02, 0x064e0e02, 0x09802242, 0x060e0e02, 0x0cc00000,
+	0x00000000, 0x07802bc2, 0x0aa0c002, 0x06800102, 0x06030502,
+	0x0b60c11b, 0x0cc00000, 0x00000000, 0x00800000, 0x00000000,
+	0x0c079ac0, 0x00000000, 0x080c0a01, 0x080c2800, 0x080c0002,
+	0x0cc00000, 0x00400000, 0x064c441c, 0x0910171c, 0x0a6f801c,
+	0x0c7f86c0, 0x00000000, 0x0cc00000, 0x00400000, 0x064e1214,
+	0x091e1514, 0x0bef0054, 0x078029d5, 0x0649d914, 0x0900c514,
+	0x0acfe554, 0x07802494, 0x0aa50094, 0x0aa08194, 0x0c782d00,
+	0x0c7824c0, 0x07802715, 0x06800015, 0x06c04015, 0x07802857,
+	0x097c1557, 0x060e1215, 0x07802d15, 0x0a20c055, 0x06800018,
+	0x06900018, 0x06c046d8, 0x02018d18, 0x06800014, 0x07c02a94,
+	0x0c782540, 0x06800114, 0x07802a95, 0x0aa08095, 0x0c781340,
+	0x078024d6, 0x0aeb4096, 0x07802857, 0x0aa4c712, 0x07802ad4,
+	0x05406514, 0x07802d15, 0x05801555, 0x0be0c055, 0x06800015,
+	0x06900015, 0x06c046d5, 0x02015d15, 0x02014554, 0x04440514,
+	0x060e1314, 0x0aa44017, 0x040c0614, 0x06805c16, 0x060c2116,
+	0x0c780340, 0x04040618, 0x05405514, 0x07802d15, 0x0be0c055,
+	0x06800015, 0x06900015, 0x06c046d5, 0x02015d15, 0x02014554,
+	0x04420514, 0x060e1314, 0x04060614, 0x07802596, 0x0aa14016,
+	0x06a2c215, 0x0aa0c056, 0x06a2c015, 0x06a2c115, 0x0aa10017,
+	0x06c04015, 0x068003d4, 0x09506554, 0x097c1557, 0x060e1215,
+	0x064e0e14, 0x098142d4, 0x060e0e14, 0x06800014, 0x07c02a94,
+	0x06800114, 0x0c781ec0, 0x07c02494, 0x078025d5, 0x078029d6,
+	0x0e000595, 0x05401516, 0x07802857, 0x0aa0c017, 0x02014594,
+	0x02014594, 0x0f000540, 0x02415515, 0x07802694, 0x05409514,
+	0x02014554, 0x05403554, 0x02015d15, 0x060e1315, 0x07802596,
+	0x0aa34016, 0x06a44215, 0x0aa2c056, 0x06a44015, 0x0c780240,
+	0x06a44115, 0x0a6580d5, 0x078026d4, 0x064e0c16, 0x09010596,
+	0x0b8e5594, 0x0cc00000, 0x00400000, 0x0aa10017, 0x06c0c015,
+	0x068005d4, 0x09506554, 0x097c1557, 0x060e1215, 0x064e0e14,
+	0x098142d4, 0x060e0e14, 0x06800018, 0x06800014, 0x07c02a94,
+	0x06800154, 0x0c781380, 0x07c02494, 0x07802515, 0x0aa1c015,
+	0x04401555, 0x07c02515, 0x078024d5, 0x04401555, 0x0c780f80,
+	0x07c024d5, 0x07802615, 0x078029d6, 0x0e000595, 0x07c02655,
+	0x04001515, 0x07c02614, 0x0f000540, 0x07802694, 0x05409514,
+	0x02014554, 0x05403554, 0x02015d15, 0x060e1315, 0x07802596,
+	0x0aa14016, 0x06b16215, 0x0aa0c056, 0x06b16015, 0x06b16115,
+	0x07803056, 0x0aa2c016, 0x078026d4, 0x064e0c16, 0x09010596,
+	0x0b805594, 0x07c02715, 0x06800194, 0x0c7fd680, 0x07c02494,
+	0x04001514, 0x07c026d4, 0x07c02715, 0x06c00015, 0x060e1215,
+	0x06800054, 0x0c780840, 0x07c02494, 0x0ba74114, 0x07802855,
+	0x0a608015, 0x0c7ff400, 0x078026d5, 0x04001555, 0x07c026d5,
+	0x0aa0c114, 0x06800015, 0x080c2170, 0x0c7804c0, 0x07c02855,
+	0x064e0e14, 0x09814314, 0x0cc00000, 0x060e0e14, 0x0a6c0054,
+	0x078024d5, 0x0a608015, 0x0c780900, 0x04401555, 0x0b2f8055,
+	0x07c024d5, 0x0c07fd40, 0x00000000, 0x07802a54, 0x0aa0c0d4,
+	0x00000000, 0x080c2170, 0x06800014, 0x07c02494, 0x0cc00000,
+	0x00400000, 0x091c1518, 0x0aa0c014, 0x06900018, 0x06800018,
+	0x06c046d8, 0x0c780bc0, 0x02018d18, 0x0aa0c712, 0x090a8518,
+	0x090c7518, 0x07802c56, 0x0b829594, 0x0a8f4594, 0x0f000540,
+	0x064e0e14, 0x098142d4, 0x060e0e14, 0x091c1518, 0x0aa28014,
+	0x06900018, 0x0c780200, 0x06800018, 0x078025d5, 0x078029d6,
+	0x0aa70018, 0x0e000595, 0x0c7ffb40, 0x00000000, 0x06c046d8,
+	0x02018d18, 0x07802694, 0x05409514, 0x078029d6, 0x02415595,
+	0x02014554, 0x05403554, 0x02015d15, 0x060e1315, 0x07802714,
+	0x09004554, 0x0aa14015, 0x06a14214, 0x0aa0c115, 0x06a14014,
+	0x06a14114, 0x06c08014, 0x060e0d18, 0x0aa0c712, 0x04020618,
+	0x04020618, 0x0c7ff300, 0x060e1214, 0x07802694, 0x05409514,
+	0x0f000540, 0x02014554, 0x078025d5, 0x04001555, 0x07c025d5,
+	0x05403554, 0x02015d15, 0x060e1315, 0x07802714, 0x0a618018,
+	0x09c141d4, 0x060e1214, 0x068000d4, 0x0c7feec0, 0x07c02494,
+	0x06c08014, 0x09c14394, 0x060e0d18, 0x0aae4712, 0x04020618,
+	0x0c7ffdc0, 0x04020618, 0x0683ffca, 0x0a61000a, 0x0440128a,
+	0x0c780140, 0x080e1200, 0x064e1209, 0x091e1249, 0x0bee8049,
+	0x064e0009, 0x064e030a, 0x064e0e0b, 0x064e0c0c, 0x083f0040,
+	0x083f0000, 0x064c180d, 0x0980d20d, 0x060c180d, 0x09c0d20d,
+	0x060c180d, 0x0680020d, 0x0d00000d, 0x00000000, 0x060e0009,
+	0x060e030a, 0x060e0e0b, 0x0cc00000, 0x060e0c0c, 0x0c000cc0,
+	0x00000000, 0x06810109, 0x06c34749, 0x06090709, 0x06490b09,
+	0x09809009, 0x09809089, 0x06090b09, 0x09c09009, 0x09c09089,
+	0x06090b09, 0x06800009, 0x06c046c9, 0x02009d09, 0x06094409,
+	0x06900009, 0x06c046c9, 0x02009d09, 0x06094509, 0x0cc00000,
+	0x00000000, 0x0c000e00, 0x00000000, 0x06497f08, 0x068000c7,
+	0x09702207, 0x09808688, 0x06097f08, 0x06498e08, 0x09c080c8,
+	0x06098e08, 0x07802c47, 0x0b20c187, 0x00000000, 0x098080c8,
+	0x09c08788, 0x06098e08, 0x06820888, 0x06c00208, 0x068001c9,
+	0x07802c47, 0x0b20c407, 0x06800447, 0x06800c07, 0x09706207,
+	0x09808648, 0x06095108, 0x06095009, 0x0cc00000, 0x08095000,
+	0x0683ffc8, 0x06490909, 0x0a210049, 0x0aa0c008, 0x0c7fff40,
+	0x04401208, 0x0683ffc8, 0x06490909, 0x09343249, 0x0a2241c9,
+	0x0aa20008, 0x06490b09, 0x098090c9, 0x06090b09, 0x09c090c9,
+	0x06090b09, 0x0c7ffdc0, 0x04401208, 0x06490b09, 0x09809009,
+	0x09809089, 0x06090b09, 0x09c09009, 0x09c09089, 0x06090b09,
+	0x0cc00000, 0x00000000, 0x0683ffc9, 0x0649bb08, 0x0920c208,
+	0x06495307, 0x090011c7, 0x020081c8, 0x0aa10008, 0x0aa0c009,
+	0x0c7ffe40, 0x04401249, 0x0cc00000, 0x00000000, 0x04000289,
+	0x02408289, 0x0b64a008, 0x00000000, 0x0c077100, 0x080c2301,
+	0x02408289, 0x0b60d008, 0x00000000, 0x07400247, 0x0aa280c7,
+	0x04001249, 0x0c076f00, 0x080c2301, 0x02408289, 0x0b60d008,
+	0x00000000, 0x07400247, 0x0c7ffbc0, 0x04001249, 0x068000c7,
+	0x0404028a, 0x07400287, 0x0cc00000, 0x00000000, 0x0680000a,
+	0x04001249, 0x0fc011c0, 0x0aa20047, 0x0680004b, 0x06494207,
+	0x090841c7, 0x0340b1cb, 0x054082cb, 0x0c780340, 0x0609410b,
+	0x0c076900, 0x080c2301, 0x0c076a80, 0x00000000, 0x040002c7,
+	0x0c0767c0, 0x080c2301, 0x0c076940, 0x00000000, 0x095091cb,
+	0x06094107, 0x0fc011c0, 0x0aa24047, 0x0680004b, 0x06494207,
+	0x091041c7, 0x0340b1cb, 0x054082cb, 0x0609410b, 0x0c780600,
+	0x0609410b, 0x0c0763c0, 0x080c2301, 0x0c076540, 0x00000000,
+	0x040002c7, 0x0c076280, 0x080c2301, 0x0c076400, 0x00000000,
+	0x095091cb, 0x06094107, 0x0c076100, 0x080c2301, 0x0c076280,
+	0x00000000, 0x040002c7, 0x0c075fc0, 0x080c2301, 0x0c076140,
+	0x00000000, 0x095091cb, 0x06094107, 0x0400128a, 0x0b8cb24a,
+	0x0cc00000, 0x00000000, 0x0649c707, 0x0aa28007, 0x044011c7,
+	0x0809c700, 0x06804008, 0x054031c7, 0x02007207, 0x040011c7,
+	0x070001c8, 0x09c082c8, 0x074001c8, 0x0649c807, 0x0aa28007,
+	0x044011c7, 0x0809c800, 0x06804008, 0x054031c7, 0x02007207,
+	0x040011c7, 0x070001c8, 0x09c082c8, 0x074001c8, 0x0cc00000,
+	0x00000000, 0x0200d308, 0x0440134d, 0x0700034d, 0x0540234d,
+	0x0200d349, 0x0700034e, 0x0400040e, 0x0400134d, 0x0700034d,
+	0x0900234d, 0x094a240d, 0x09408390, 0x09508390, 0x09608390,
+	0x09708390, 0x06800210, 0x0d000010, 0x060c220e, 0x0cc00000,
+	0x00000000, 0x0649cd09, 0x06800047, 0x054101c7, 0x020091c9,
+	0x0609cd09, 0x069fffc7, 0x07c03b47, 0x07c03b87, 0x07c03c47,
+	0x07c00a07, 0x07c00a47, 0x07c00a87, 0x07c03c87, 0x07c01747,
+	0x06800207, 0x0c7f5240, 0x07c03bc7, 0x07803c0a, 0x0a60c00a,
+	0x0c780c80, 0x0680004a, 0x07802dca, 0x0aa0800a, 0x0c780b80,
+	0x0649cf07, 0x0a2180c7, 0x07803c07, 0x0aa0c007, 0x0680004a,
+	0x0680000a, 0x0c7809c0, 0x07807347, 0x07801f48, 0x0a803207,
+	0x0c7808c0, 0x0680004a, 0x07802407, 0x07801f08, 0x0a803207,
+	0x0c780780, 0x0680004a, 0x07802047, 0x07802e08, 0x02009207,
+	0x0aa18009, 0x0a803247, 0x0a802248, 0x0c7800c0, 0x0c780540,
+	0x0680004a, 0x07802007, 0x07802e48, 0x0a803207, 0x0c780400,
+	0x0680004a, 0x0a618147, 0x07801f87, 0x07801fc8, 0x0a803207,
+	0x0c780280, 0x0680004a, 0x07802147, 0x0aa1c087, 0x07801807,
+	0x0a4033c7, 0x07801847, 0x0a803407, 0x0c780080, 0x0680004a,
+	0x0cc00000, 0x07c02dca, 0x06490908, 0x0581f208, 0x0a6f8008,
+	0x00000000, 0x06490708, 0x09808648, 0x09c08488, 0x06090708,
+	0x068400c8, 0x096e820b, 0x097e120a, 0x07802407, 0x040011c7,
+	0x048031c7, 0x09542207, 0x0580124a, 0x06094809, 0x06094908,
+	0x06800008, 0x098092c8, 0x07801987, 0x09405247, 0x058051c7,
+	0x040011c7, 0x097c2207, 0x06094809, 0x06094908, 0x0c07be00,
+	0x00000000, 0x06490708, 0x09c08648, 0x09808488, 0x06090708,
+	0x0cc00000, 0x00000000, 0x0649cf07, 0x06800048, 0x0a2100c7,
+	0x07c01e48, 0x0cc00000, 0x00000000, 0x07801988, 0x0aa0c008,
+	0x0a210807, 0x00000000, 0x0cc00000, 0x00000000, 0x0c07b900,
+	0x00000000, 0x0c07b140, 0x00000000, 0x0680001b, 0x0780294e,
+	0x0a61038e, 0x07802c4e, 0x0c780380, 0x0980b00b, 0x0ae6011b,
+	0x0c07f180, 0x00000000, 0x0400128a, 0x0b80438a, 0x00000000,
+	0x0680000a, 0x040012cb, 0x0b8f834b, 0x0b8f730a, 0x0c780380,
+	0x00000000, 0x0ae3011b, 0x0c07ee80, 0x044012cb, 0x0c07ee00,
+	0x040012cb, 0x0400128a, 0x0b80438a, 0x00000000, 0x0680000a,
+	0x040022cb, 0x0b8f634b, 0x0b8f530a, 0x0cc00000, 0x0680001b,
+	0x07803c07, 0x07802e88, 0x0a402207, 0x0c7809c0, 0x07c02e87,
+	0x07802c49, 0x0780294a, 0x0a60c30a, 0x07802c8a, 0x0540128a,
+	0x06800008, 0x0b80a247, 0x095084c7, 0x02407247, 0x0b8fd288,
+	0x04001208, 0x0649cd07, 0x040011c7, 0x0609cd07, 0x0cc00000,
+	0x06800047, 0x0aa0c007, 0x06800049, 0x07c02d89, 0x0aa0c712,
+	0x07c02cc7, 0x05401208, 0x094084c8, 0x07c02d08, 0x0780188a,
+	0x078018cb, 0x07802ccc, 0x07802d0d, 0x0c07ebc0, 0x06800009,
+	0x07802cc7, 0x0aa18007, 0x044011c7, 0x0ba0c707, 0x0c7fffc0,
+	0x0441c1c7, 0x07c02b07, 0x07802cc7, 0x07c01887, 0x07802d07,
+	0x07c018c7, 0x0cc00000, 0x06800007, 0x0c780380, 0x06800087,
+	0x0c780300, 0x06800147, 0x0c780280, 0x06800187, 0x0c071e40,
+	0x080c2301, 0x07c03c07, 0x0c071d80, 0x080c2301, 0x0aad41c7,
+	0x0aad8007, 0x0aadc047, 0x07c01ec7, 0x07803bc8, 0x09061248,
+	0x07c02dc9, 0x0a250208, 0x07803c08, 0x0aa08008, 0x0c7f1e40,
+	0x0649cf09, 0x0a20c0c9, 0x0aa2c087, 0x0c7f1d40, 0x07802008,
+	0x0aa20148, 0x07801c48, 0x0a614008, 0x0aa08087, 0x0c7f1bc0,
+	0x06800048, 0x07c01c48, 0x07c01c08, 0x0649c909, 0x04001249,
+	0x0609c909, 0x06800009, 0x07c01d89, 0x0c079a00, 0x00000000,
+	0x0c07a040, 0x00000000, 0x0c0714c0, 0x080c2301, 0x07803b8d,
+	0x0a806347, 0x07803bc8, 0x06800049, 0x07c02dc9, 0x0c780080,
+	0x07c03b87, 0x09082248, 0x0aa1c049, 0x0680000a, 0x0c06e880,
+	0x06c0000a, 0x06800049, 0x09482209, 0x07c03bc8, 0x06af000a,
+	0x06c0470a, 0x054091c7, 0x0200a1ca, 0x06804009, 0x06b0c00b,
+	0x0c06e240, 0x00000000, 0x0780c007, 0x06905348, 0x0a803207,
+	0x0c7f1180, 0x07c03b8d, 0x0780c047, 0x09105207, 0x07803b4e,
+	0x0a803388, 0x0c7802c0, 0x07c03b48, 0x07803bc7, 0x0be20047,
+	0x068c000a, 0x06c0470a, 0x06808009, 0x06b0400b, 0x0c06dd80,
+	0x00000000, 0x0c780900, 0x068f000a, 0x06c0470a, 0x07803b48,
+	0x0540a1c8, 0x0200a1ca, 0x06806009, 0x06b0400b, 0x0c06db00,
+	0x00000000, 0x07804007, 0x06905348, 0x0a805207, 0x00000000,
+	0x07c03b8d, 0x0c7f09c0, 0x07c03b4e, 0x0680000a, 0x0c00f080,
+	0x00000000, 0x0c016980, 0x00000000, 0x07803bc7, 0x0be34107,
+	0x068c000a, 0x06c0470a, 0x06804009, 0x06b0400b, 0x0c06d600,
+	0x00000000, 0x068cc00a, 0x06c0470a, 0x06802009, 0x06b0a00b,
+	0x0c06d480, 0x00000000, 0x0c012fc0, 0x00000000, 0x07803bc7,
+	0x0be34107, 0x068d000a, 0x06c0470a, 0x06804009, 0x06b0c00b,
+	0x0c06d200, 0x00000000, 0x0c780180, 0x068c000a, 0x06c0470a,
+	0x0680c009, 0x0c06d080, 0x06b0400b, 0x078020c8, 0x0f8001c8,
+	0x0649cf0a, 0x0be6808a, 0x07803bca, 0x0be6020a, 0x0780200a,
+	0x0aa5814a, 0x07801f4a, 0x0a814287, 0x0400128a, 0x06800049,
+	0x03409209, 0x04401249, 0x0280a289, 0x0a80e287, 0x0780394a,
+	0x0a63000a, 0x0649cf0a, 0x0be0d00a, 0x0c7fa580, 0x00000000,
+	0x07801eca, 0x0a61008a, 0x0680004a, 0x0c780100, 0x07c00b8a,
+	0x0680004a, 0x07c00b4a, 0x07c01f47, 0x07802107, 0x0a61c007,
+	0x068000c9, 0x0fc011c0, 0x0aa10007, 0x00000000, 0x0fc011c0,
+	0x04001247, 0x07c01f09, 0x07802007, 0x0a614147, 0x00000000,
+	0x0c06f240, 0x080c2301, 0x07c01f87, 0x07802147, 0x0a65c007,
+	0x07802187, 0x0f8001c7, 0x07807388, 0x07c01808, 0x07c07387,
+	0x078074c7, 0x07c01847, 0x06800007, 0x07c074c7, 0x07c07507,
+	0x078021c7, 0x0aa2c007, 0x07801f07, 0x0a6240c7, 0x00000000,
+	0x0c06ed40, 0x080c2301, 0x0c06eec0, 0x00000000, 0x07c074c7,
+	0x058101c7, 0x07c07507, 0x0780738f, 0x078074d0, 0x07802147,
+	0x06800048, 0x0a422207, 0x07807547, 0x07c01807, 0x078075c7,
+	0x07c01847, 0x06800007, 0x07c07547, 0x07c07587, 0x07c075c7,
+	0x07c07607, 0x07803a87, 0x0aa54047, 0x00000000, 0x0c06e740,
+	0x080c2301, 0x0c06e8c0, 0x00000000, 0x07c07547, 0x058101c7,
+	0x07c07587, 0x078021c7, 0x0aa2c007, 0x07801f07, 0x0a6240c7,
+	0x00000000, 0x0c06e440, 0x080c2301, 0x0c06e5c0, 0x00000000,
+	0x07c075c7, 0x058101c7, 0x07c07607, 0x0780754f, 0x078075d0,
+	0x0c079400, 0x00000000, 0x07802dc7, 0x0a608007, 0x0c782200,
+	0x07801e87, 0x069fffc8, 0x0b803207, 0x040011c7, 0x06800147,
+	0x07c01e87, 0x07802d07, 0x078023c8, 0x0b802207, 0x0c780200,
+	0x0780188a, 0x078018cb, 0x0680000c, 0x078023cd, 0x06800049,
+	0x0c07a540, 0x07c01e49, 0x07801d08, 0x0649cf09, 0x0aa28008,
+	0x07803c0a, 0x0aa0800a, 0x0c781c40, 0x04401208, 0x07c01d08,
+	0x0aa08008, 0x0c781b40, 0x09c09089, 0x0609cf09, 0x0a22c309,
+	0x0780204a, 0x0a62400a, 0x07802e0a, 0x0aa1c00a, 0x07801f0a,
+	0x0aa0c0ca, 0x0680004a, 0x0680008a, 0x0c781840, 0x07c01d0a,
+	0x0680000a, 0x07c01d0a, 0x0688000a, 0x0c06afc0, 0x06c0000a,
+	0x07803bc7, 0x0be54107, 0x068001ca, 0x06031e0a, 0x0680001b,
+	0x0649ce09, 0x0aa10009, 0x00000000, 0x0809ce00, 0x08007401,
+	0x06431e09, 0x0bee4049, 0x00000000, 0x0649cf07, 0x0a2200c7,
+	0x07801d87, 0x0aa18007, 0x07801ec7, 0x0aa10087, 0x06800207,
+	0x0c7ed440, 0x07c03bc7, 0x06800013, 0x07c02cd3, 0x07c02d13,
+	0x07c02e93, 0x07c01893, 0x07c018d3, 0x06803fc7, 0x07c02b07,
+	0x06800007, 0x07c02547, 0x07c025c7, 0x07c02607, 0x07802c07,
+	0x040011c7, 0x07c024c7, 0x06800047, 0x060e0c07, 0x07c026c7,
+	0x07c02507, 0x068003c7, 0x07c02807, 0x06805c07, 0x060c2107,
+	0x080c2170, 0x06800087, 0x07c02a47, 0x06800018, 0x0649cf07,
+	0x0be1d007, 0x00000000, 0x07801ec7, 0x0aa28187, 0x06800007,
+	0x0c780200, 0x07c01e47, 0x07801ec7, 0x0a60c087, 0x06800007,
+	0x07c00b47, 0x07800b47, 0x07c01e47, 0x068003c7, 0x07c02fc7,
+	0x06800407, 0x060c2407, 0x06800007, 0x07807048, 0x06804009,
+	0x05403287, 0x0200a289, 0x0400128a, 0x0700028b, 0x060c220b,
+	0x0400128a, 0x0700028b, 0x0400128a, 0x0700028c, 0x096102cc,
+	0x060c220b, 0x0400128a, 0x0700028b, 0x0400128a, 0x0700028c,
+	0x096102cc, 0x060c220b, 0x040011c7, 0x0b8ee207, 0x00000000,
+	0x07801d07, 0x0aa08007, 0x0c7ec240, 0x06800007, 0x07c01947,
+	0x06a00007, 0x060c3d07, 0x07802dc7, 0x0a618007, 0x00000000,
+	0x0c0790c0, 0x00000000, 0x0aa08007, 0x0c7ebf80, 0x07802047,
+	0x07c02e07, 0x07802007, 0x07c02e47, 0x07801ec7, 0x07c02087,
+	0x07801f47, 0x07c07347, 0x07801f07, 0x07c02407, 0x07801f87,
+	0x07c01fc7, 0x0780248a, 0x0a6fc00a, 0x00000000, 0x0c072f40,
+	0x00000000, 0x07802dc7, 0x0aa10007, 0x00000000, 0x0c072740,
+	0x00000000, 0x0c073300, 0x00000000, 0x07802087, 0x06840009,
+	0x0682629a, 0x0aa1c087, 0x06800008, 0x0682305a, 0x0aa10147,
+	0x06800048, 0x06800088, 0x06840009, 0x07c02788, 0x07c02689,
+	0x06800007, 0x07c02a87, 0x07802c8a, 0x07802107, 0x0a630007,
+	0x07802409, 0x0aa280c9, 0x0540128a, 0x0580128a, 0x06490707,
+	0x09807087, 0x098070c7, 0x06090707, 0x06495107, 0x098073c7,
+	0x06095107, 0x07c023ca, 0x07802947, 0x094421c9, 0x07c02947,
+	0x0a648387, 0x068000c9, 0x06495107, 0x094041c9, 0x06800009,
+	0x097821c9, 0x06095107, 0x06490707, 0x09807447, 0x06090707,
+	0x06498e07, 0x09807787, 0x09c070c7, 0x06098e07, 0x07802087,
+	0x0aa0c087, 0x0682519a, 0x068214da, 0x07803bc8, 0x090821c8,
+	0x0aa18087, 0x06800087, 0x09482207, 0x0690000a, 0x0c067e40,
+	0x06c0000a, 0x0c784a40, 0x07c03bc8, 0x07802dc7, 0x0aa18007,
+	0x00000000, 0x0c077a00, 0x00000000, 0x0aa08007, 0x0c7ea8c0,
+	0x06800007, 0x07803bc8, 0x09082208, 0x0aa10008, 0x0684000a,
+	0x0c067a40, 0x06c0000a, 0x07c03bc7, 0x07802d87, 0x0aa34007,
+	0x07802c47, 0x0b22c2c7, 0x07802cc7, 0x0a614007, 0x06495108,
+	0x09c08608, 0x0c7800c0, 0x07c02d87, 0x09808608, 0x06095108,
+	0x08095017, 0x08095000, 0x0c784280, 0x00000000, 0x0540928c,
+	0x0200a24a, 0x06c046ca, 0x0200ad0a, 0x0400130c, 0x0481f30c,
+	0x07c02b4c, 0x0643500c, 0x0580f30c, 0x0bef804c, 0x00000000,
+	0x0643530c, 0x0900c30c, 0x0a6f800c, 0x00000000, 0x0603510a,
+	0x06803f0a, 0x0603520a, 0x0c792940, 0x0603500b, 0x0cc00000,
+	0x00000000, 0x07802cc9, 0x07c02ac9, 0x07802889, 0x07c03049,
+	0x07802809, 0x0aa08009, 0x0cc00000, 0x064e0e09, 0x09809309,
+	0x098092c9, 0x0cc00000, 0x060e0e09, 0x06435007, 0x0580f1c7,
+	0x0bef8047, 0x0aa14712, 0x06800007, 0x07802d07, 0x050011c7,
+	0x048011c7, 0x0b60c709, 0x06808008, 0x0680c008, 0x0c78ea80,
+	0x00000000, 0x0c7806c0, 0x07802807, 0x0aaf8387, 0x00000000,
+	0x07802947, 0x0aaec387, 0x064e0407, 0x091c2207, 0x0a24c0c8,
+	0x080c3e07, 0x064c3f07, 0x064c3f09, 0x09004249, 0x0581b1c7,
+	0x0a234047, 0x090241c7, 0x0a210088, 0x0aa20289, 0x0aa1c309,
+	0x0be18087, 0x0a21c048, 0x0aa102c9, 0x0aa0c309, 0x0be08047,
+	0x0c7800c0, 0x06800049, 0x07c01e49, 0x0cc00000, 0x00000000,
+	0x07800dc8, 0x0aa0c048, 0x0c780780, 0x00000000, 0x06800008,
+	0x07c00dc8, 0x07800d89, 0x07801f08, 0x09610248, 0x0609d509,
+	0x0aa18048, 0x0aa20088, 0x00000000, 0x0680774a, 0x0c780180,
+	0x00000000, 0x068077ca, 0x0c7800c0, 0x00000000, 0x0680784a,
+	0x07000288, 0x0400128a, 0x07000289, 0x09610209, 0x0609d608,
+	0x0649d308, 0x098083c8, 0x0609d308, 0x08007401, 0x0649d308,
+	0x0a6fc008, 0x00000000, 0x0cc00000, 0x00000000, 0x0680000c,
+	0x0680002a, 0x064c2907, 0x0a20c407, 0x0c7e8600, 0x00000000,
+	0x0fc081c0, 0x0aaeffc7, 0x0200c1cc, 0x064c2907, 0x0a20c407,
+	0x0c7e8440, 0x00000000, 0x0fc081c0, 0x0aaeffc7, 0x0202a1ea,
+	0x0aa5400c, 0x0aa1418c, 0x0462d1cc, 0x0c500880, 0x0a61004c,
+	0x0c780e80, 0x06800047, 0x07c01c47, 0x064c0007, 0x0be14207,
+	0x064c2907, 0x0be0c407, 0x0d07ff2a, 0x0fc081c0, 0x064c0007,
+	0x0be10207, 0x064c2907, 0x0be08407, 0x0c7ff780, 0x0c7e7e40,
+	0x00000000, 0x0c067a00, 0x080c2301, 0x064c232b, 0x05810aeb,
+	0x048ffaeb, 0x068f000a, 0x06c0470a, 0x0540a1c7, 0x0200a1ca,
+	0x06804009, 0x0c064ac0, 0x06b0400b, 0x07804007, 0x06905348,
+	0x0a80f207, 0x0c7e7a00, 0x0c067600, 0x080c2301, 0x064c232b,
+	0x05810aeb, 0x048ffaeb, 0x0fc011c0, 0x0aa14047, 0x04001aeb,
+	0x0fc071c0, 0x04007aeb, 0x07c017c7, 0x0c780140, 0x00000000,
+	0x0680004a, 0x0c005dc0, 0x00000000, 0x048071eb, 0x0580322b,
+	0x0aa14007, 0x06800209, 0x04001208, 0x024071c9, 0x0f8001c7,
+	0x0262a22a, 0x0c57f440, 0x0c7ff280, 0x0680002b, 0x07803d0d,
+	0x0a22830d, 0x07802f87, 0x09005207, 0x04001208, 0x0c00ce00,
+	0x0202b22b, 0x090a5207, 0x04001208, 0x0c00cd00, 0x0202b22b,
+	0x0a21440d, 0x00000000, 0x0fc041c0, 0x07c02fc7, 0x04004aeb,
+	0x0c7ff940, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x07802787, 0x07802408,
+	0x094c21c8, 0x060c0407, 0x080c0a01, 0x07802347, 0x0a610007,
+	0x07802387, 0x0c780b00, 0x060c0a07, 0x0fc071c0, 0x080c2940,
+	0x07802387, 0x09807187, 0x098073c7, 0x060c0a07, 0x09c073c7,
+	0x09807387, 0x0c00b600, 0x060c0a07, 0x07802788, 0x064c0a07,
+	0x091c21c7, 0x0a6f8007, 0x07802a21, 0x06c00021, 0x06800022,
+	0x06c00022, 0x06800023, 0x06c00023, 0x06800024, 0x06c00024,
+	0x06bfffe5, 0x0a628008, 0x07802947, 0x06800309, 0x0aa18387,
+	0x07c029c9, 0x06800189, 0x07c029c9, 0x0c785980, 0x060c0713,
+	0x0c784ac0, 0x06800309, 0x0aa18387, 0x07c029c9, 0x06800189,
+	0x07c029c9, 0x0c7825c0, 0x060c0713, 0x0c780bc0, 0x00000000,
+	0x0c00ad80, 0x080c0600, 0x07802a21, 0x06c00021, 0x06800022,
+	0x06c00022, 0x06800023, 0x06c00023, 0x06800024, 0x06c00024,
+	0x06bfffe5, 0x07802788, 0x0a628008, 0x07802947, 0x06800309,
+	0x0aa18387, 0x07c029c9, 0x06800189, 0x07c029c9, 0x0c7851c0,
+	0x060c0713, 0x0c784300, 0x06800309, 0x0aa18387, 0x07c029c9,
+	0x06800189, 0x07c029c9, 0x0c781e00, 0x060c0713, 0x0c780400,
+	0x00000000, 0x064c0321, 0x064c0322, 0x064c0323, 0x064c0324,
+	0x064c2725, 0x0a224053, 0x07802447, 0x07c02987, 0x0400099d,
+	0x040009de, 0x04000a1f, 0x04000a60, 0x0c781400, 0x060c0713,
+	0x0683ffc7, 0x044011c7, 0x0aa0c007, 0x0780248a, 0x0a6f400a,
+	0x068000ca, 0x07802747, 0x09510287, 0x07802cc7, 0x09708287,
+	0x06031e0a, 0x0aa08007, 0x0c780b00, 0x080c0700, 0x07802a08,
+	0x06c00008, 0x060c0208, 0x06800008, 0x06c00008, 0x060c0208,
+	0x06800008, 0x06c00008, 0x060c0208, 0x06800008, 0x06c00008,
+	0x060c0208, 0x06bfffc9, 0x060c0326, 0x060c0327, 0x060c0328,
+	0x060c0329, 0x07802988, 0x09610209, 0x060c2708, 0x080c0701,
+	0x07802a08, 0x06c00008, 0x060c0208, 0x06800008, 0x06c00008,
+	0x060c0208, 0x06800008, 0x06c00008, 0x060c0208, 0x06800008,
+	0x06c00008, 0x060c0208, 0x060c031d, 0x060c031e, 0x060c031f,
+	0x060c0320, 0x0780244a, 0x09610289, 0x060c270a, 0x0c780580,
+	0x060c0713, 0x064c2709, 0x09210249, 0x060c0326, 0x060c0327,
+	0x060c0328, 0x060c0329, 0x07802988, 0x09610209, 0x060c2708,
+	0x080c0701, 0x064c2709, 0x09210249, 0x060c031d, 0x060c031e,
+	0x060c031f, 0x060c0320, 0x07802448, 0x09610209, 0x060c2708,
+	0x060c0713, 0x06431e09, 0x0befc049, 0x07802307, 0x09021247,
+	0x094411c9, 0x04c301c7, 0x0c780f00, 0x060c2507, 0x0683ffc8,
+	0x080c3e01, 0x064c3f07, 0x093e11c7, 0x0aaf4007, 0x064c2307,
+	0x09304247, 0x0aa0c009, 0x0aee4008, 0x04401208, 0x0cc00000,
+	0x00000000, 0x064c0321, 0x064c0322, 0x064c0323, 0x064c0324,
+	0x064c2725, 0x060c0713, 0x09210265, 0x07802cc7, 0x0a638007,
+	0x07802a08, 0x06c00008, 0x060c0208, 0x06800008, 0x06c00008,
+	0x060c0208, 0x06800008, 0x06c00008, 0x060c0208, 0x06800008,
+	0x06c00008, 0x060c0208, 0x06bfffc9, 0x060c031d, 0x060c031e,
+	0x060c031f, 0x060c0320, 0x07802448, 0x09610209, 0x060c2708,
+	0x07802307, 0x09021247, 0x094411c9, 0x04c301c7, 0x060c2507,
+	0x0683ffc9, 0x0780248a, 0x0aa1000a, 0x0aa0c0ca, 0x0a6f4009,
+	0x04401249, 0x068000ca, 0x07802749, 0x09510289, 0x07802cc9,
+	0x09708289, 0x06031e0a, 0x07802807, 0x0c07f140, 0x07c02887,
+	0x0b608008, 0x0c7ddec0, 0x090a1207, 0x090241c7, 0x095211c8,
+	0x0780194b, 0x0aa0c00b, 0x07c02807, 0x0c781040, 0x0aa64247,
+	0x060c2507, 0x0aa64287, 0x0aa58347, 0x0aa1c048, 0x0aa58387,
+	0x0a60c007, 0x0c7801c0, 0x00000000, 0x080c2605, 0x080c2606,
+	0x080c2602, 0x080c260f, 0x080c2603, 0x07802a48, 0x0aa100c8,
+	0x06800089, 0x0c782b80, 0x07c02a49, 0x0780248b, 0x0a6fc00b,
+	0x00000000, 0x07c02a88, 0x0c782a00, 0x07c02a49, 0x080c2602,
+	0x080c260f, 0x080c2603, 0x07802a48, 0x0aa50088, 0x068000c9,
+	0x07802cc8, 0x0aa0c008, 0x0c782780, 0x07c02a49, 0x0aa08712,
+	0x0bef4053, 0x0683ffcb, 0x078026c8, 0x064e0c09, 0x09010249,
+	0x0b804248, 0x0aa0c00b, 0x0c7ffec0, 0x044012cb, 0x06800088,
+	0x068000c9, 0x0680180b, 0x060c210b, 0x0683ffcc, 0x0aa2c00c,
+	0x064e110b, 0x091012cb, 0x0a6f400b, 0x0440130c, 0x064e110b,
+	0x091012cb, 0x0a6e400b, 0x0780248b, 0x0a6dc00b, 0x00000000,
+	0x07c02a88, 0x0c782040, 0x07c02a49, 0x06800007, 0x07c02807,
+	0x060c2507, 0x06431e07, 0x0befc047, 0x068fdfc8, 0x06fcffc8,
+	0x064e0407, 0x02807207, 0x0c7ff140, 0x060e0407, 0x064c0321,
+	0x064c0322, 0x064c2725, 0x0a230053, 0x07802447, 0x07c02987,
+	0x0400099d, 0x040009de, 0x060c0713, 0x07802307, 0x09021247,
+	0x094411c9, 0x04c301c7, 0x0c781640, 0x060c2507, 0x07802cc7,
+	0x0a658007, 0x080c0700, 0x07802a08, 0x06c00008, 0x060c0208,
+	0x080c0200, 0x06bfffc9, 0x060c0326, 0x060c0327, 0x0780298a,
+	0x09610289, 0x060c270a, 0x080c0701, 0x060c0208, 0x080c0200,
+	0x060c031d, 0x060c031e, 0x0780244a, 0x09610289, 0x060c270a,
+	0x0c780480, 0x060c0713, 0x064c2709, 0x09210249, 0x060c0326,
+	0x060c0327, 0x07802988, 0x09610209, 0x060c2708, 0x080c0701,
+	0x064c2709, 0x09210249, 0x060c031d, 0x060c031e, 0x07802448,
+	0x09610209, 0x060c2708, 0x060c0713, 0x07802307, 0x09021247,
+	0x094411c9, 0x04c301c7, 0x060c2507, 0x0780248a, 0x0a6fc00a,
+	0x068000ca, 0x07802749, 0x09510289, 0x07802cc9, 0x09708289,
+	0x0c780900, 0x06031e0a, 0x064c0321, 0x064c0322, 0x064c2725,
+	0x060c0713, 0x09210265, 0x07802cc7, 0x0a618007, 0x07802a08,
+	0x06c00008, 0x060c0208, 0x080c0200, 0x06bfffc9, 0x060c031d,
+	0x060c031e, 0x07802448, 0x09610209, 0x060c2708, 0x07802307,
+	0x09021247, 0x094411c9, 0x04c301c7, 0x060c2507, 0x0683ffc9,
+	0x04401249, 0x0aa10009, 0x0780248a, 0x0aa080ca, 0x0a6f000a,
+	0x068000ca, 0x07802749, 0x09510289, 0x07802cc9, 0x09708289,
+	0x06031e0a, 0x07802807, 0x0c07c200, 0x07c02887, 0x090241c7,
+	0x0b614008, 0x07c02807, 0x06bfffc8, 0x0c7daec0, 0x07c03c08,
+	0x0aa10287, 0x060c2507, 0x080c2602, 0x080c260f, 0x080c2603,
+	0x04c001c7, 0x09807207, 0x060c2107, 0x07802547, 0x0aa14007,
+	0x06a01008, 0x0aa0c047, 0x06a22008, 0x06a40008, 0x06431e09,
+	0x0befc049, 0x06c00108, 0x07802949, 0x0a670389, 0x0a26c053,
+	0x0c075240, 0x00000000, 0x0780288a, 0x0aa1c00a, 0x07802a8a,
+	0x00800000, 0x078026c9, 0x04001249, 0x07c026c9, 0x00400000,
+	0x0b61408a, 0x00000000, 0x080c2170, 0x0c780700, 0x080c260e,
+	0x0683ffca, 0x0440128a, 0x0aa0c00a, 0x07802489, 0x0a6f4009,
+	0x078026c9, 0x04401249, 0x0c008080, 0x07c026c9, 0x0c780440,
+	0x08030580, 0x060e0508, 0x07802a88, 0x06801809, 0x09502248,
+	0x060c2109, 0x080c260e, 0x07c02587, 0x0ba0c087, 0x040011c7,
+	0x06800007, 0x0c074840, 0x07c02547, 0x06800088, 0x07c02488,
+	0x08030580, 0x0c074d80, 0x00000000, 0x07802747, 0x0aa14712,
+	0x040011c7, 0x07802d08, 0x0a20c048, 0x00000000, 0x07c02747,
+	0x0c07ae80, 0x07802b0d, 0x0b608008, 0x0c7fed00, 0x0ba13fcd,
+	0x06800008, 0x0c781780, 0x07c02b08, 0x06808008, 0x0ba1070d,
+	0x0400024d, 0x0441c249, 0x0680c008, 0x05403289, 0x0200a24a,
+	0x02008288, 0x07400225, 0x04001208, 0x092102e1, 0x0740020b,
+	0x04001208, 0x07400221, 0x04001208, 0x07400222, 0x04001208,
+	0x092102e2, 0x0740020b, 0x04001208, 0x07400223, 0x04001208,
+	0x092102e3, 0x0740020b, 0x04001208, 0x07400224, 0x04001208,
+	0x092102e4, 0x0740020b, 0x07802c48, 0x0ac07488, 0x07802cca,
+	0x0aa38712, 0x040002ca, 0x07802d0a, 0x0c7802c0, 0x0942f28b,
+	0x0a61000a, 0x0aa14712, 0x07802d0a, 0x0a20c04a, 0x0a6146c9,
+	0x0400128d, 0x0b60c70d, 0x0680000a, 0x0680070a, 0x07c02b0a,
+	0x0b02d488, 0x0aa0800a, 0x0a67c70a, 0x07802b4a, 0x0a20c04a,
+	0x06a0800b, 0x06a0c00b, 0x06b00009, 0x07802b8c, 0x0540928c,
+	0x0200a24a, 0x06c046ca, 0x0200ad0a, 0x06435009, 0x0580f249,
+	0x0bef8049, 0x00000000, 0x0603510a, 0x06803f0a, 0x0603520a,
+	0x0603500b, 0x0400130c, 0x0481f30c, 0x07c02b8c, 0x07802b4c,
+	0x07802c47, 0x07802ccb, 0x024072c7, 0x0b20c0c7, 0x00000000,
+	0x068000c7, 0x095c2307, 0x07c02b4c, 0x07802b4c, 0x091c22cc,
+	0x0aa2800b, 0x044012cb, 0x095c230b, 0x0a61c00b, 0x07c02b4c,
+	0x0a20c04c, 0x06b0800b, 0x06b0c00b, 0x0c0726c0, 0x06b00009,
+	0x0680001b, 0x07802947, 0x0aa5c387, 0x07802cc7, 0x040011c7,
+	0x07c02cc7, 0x07802e88, 0x04001208, 0x07c02e88, 0x07802c48,
+	0x0b828207, 0x06800007, 0x07c02cc7, 0x07802d08, 0x04001208,
+	0x078023c9, 0x0b822248, 0x07c02d08, 0x07802487, 0x0a6fc007,
+	0x00000000, 0x06430507, 0x0a2f0107, 0x0c7dc300, 0x064c0007,
+	0x07802d08, 0x0be10048, 0x040011c8, 0x0c780580, 0x07c02d07,
+	0x044011c8, 0x07c02d07, 0x07802cc7, 0x040011c7, 0x07c02cc7,
+	0x07802e88, 0x04001208, 0x07c02e88, 0x07802c48, 0x0b80b207,
+	0x06800007, 0x07c02cc7, 0x07802d08, 0x04002208, 0x078023c9,
+	0x0b805248, 0x07c02d08, 0x06800007, 0x0c7ff880, 0x07c02e87,
+	0x064c3b07, 0x0920c1c7, 0x0b218a07, 0x0680004a, 0x07c01e4a,
+	0x07c01d8a, 0x0680204a, 0x07c0194a, 0x07802cc7, 0x095084c7,
+	0x07802d09, 0x094084c9, 0x07801909, 0x0aa14009, 0x04401249,
+	0x0a60c009, 0x07c01909, 0x0c7ef600, 0x07802c49, 0x0b014489,
+	0x06808008, 0x0a628712, 0x0c780840, 0x00000000, 0x07802d0a,
+	0x0a20c04a, 0x0500128a, 0x040011c7, 0x054011c7, 0x0c780840,
+	0x094011ca, 0x040011c7, 0x0a410247, 0x07802b09, 0x07802d07,
+	0x0a25c047, 0x040021c9, 0x0c7f1b00, 0x06800007, 0x0aa5c712,
+	0x07802d0a, 0x0a2bc04a, 0x04001287, 0x0a4ed24a, 0x0c780480,
+	0x06800007, 0x0c7f16c0, 0x00000000, 0x0a628047, 0x040021c9,
+	0x07802d07, 0x0be1c047, 0x040021c9, 0x0c7f1700, 0x06800047,
+	0x0aadc007, 0x07802b09, 0x040011c9, 0x0ba10707, 0x0b6cce07,
+	0x0680c008, 0x0441c1c7, 0x05403247, 0x020091c9, 0x02008248,
+	0x07000209, 0x07c02449, 0x04001208, 0x07000209, 0x04001208,
+	0x0700021d, 0x09610749, 0x04001208, 0x0700021e, 0x04001208,
+	0x07000209, 0x09610789, 0x04001208, 0x0700021f, 0x04001208,
+	0x07000209, 0x096107c9, 0x04001208, 0x07000220, 0x04001208,
+	0x07000209, 0x09610809, 0x0c7d5a00, 0x00000000, 0x07802dc7,
+	0x0aa18007, 0x07802087, 0x0a614087, 0x00000000, 0x08098002,
+	0x080980f0, 0x0c780a40, 0x080c2400, 0x064c2207, 0x09305207,
+	0x093a2287, 0x09205247, 0x092a22c7, 0x054022cb, 0x02c0a2ca,
+	0x09105347, 0x091a22c7, 0x054042cb, 0x02c0a2ca, 0x09005387,
+	0x090a22c7, 0x054062cb, 0x02c0a2ca, 0x07802087, 0x0a63c187,
+	0x080c2408, 0x064c2207, 0x048032ca, 0x0aa340cb, 0x00000000,
+	0x0480f28a, 0x09305347, 0x093a22c7, 0x054042cb, 0x02c0a2ca,
+	0x09205387, 0x092a22c7, 0x054062cb, 0x02c0a2ca, 0x0c780240,
+	0x00000000, 0x0480328a, 0x09305247, 0x093a22c7, 0x054022cb,
+	0x0c7800c0, 0x02c0a2ca, 0x0c780580, 0x05418208, 0x0609b308,
+	0x0649b308, 0x05418249, 0x0609b309, 0x0649b309, 0x0541834d,
+	0x0609b30d, 0x0649b30d, 0x0541838e, 0x0609b30e, 0x0649b30e,
+	0x08098002, 0x06bfffcb, 0x054102cb, 0x06bfffcc, 0x02c0c2cc,
+	0x0609820c, 0x048032ca, 0x0a6480cb, 0x0c780080, 0x0c780640,
+	0x054102c8, 0x058102cb, 0x05410308, 0x02c0c2cc, 0x0609810c,
+	0x054042ca, 0x0609800b, 0x0a811248, 0x00000000, 0x054102c9,
+	0x058102cb, 0x05410309, 0x02c0c2cc, 0x0c7802c0, 0x0609820c,
+	0x054102c8, 0x058102cb, 0x05410309, 0x02c0c2cc, 0x0609810c,
+	0x054042ca, 0x04c042cb, 0x0c7800c0, 0x0609800b, 0x0c780340,
+	0x048032ca, 0x054182cb, 0x02c0b20b, 0x0483030a, 0x0541430c,
+	0x02c0c34c, 0x0a80630b, 0x054102cd, 0x058102cb, 0x0541030e,
+	0x02c0c2cc, 0x0609820c, 0x0780294b, 0x0a60c38b, 0x06800712,
+	0x05801492, 0x06bfffcb, 0x06800021, 0x07802a1d, 0x0680001e,
+	0x06800022, 0x0680001f, 0x06800023, 0x06800020, 0x06800024,
+	0x0400099d, 0x040009de, 0x04000a1f, 0x04000a60, 0x0680800a,
+	0x0680070e, 0x0740028b, 0x0400128a, 0x074002a1, 0x0400128a,
+	0x0740029d, 0x0400128a, 0x0740029e, 0x0400128a, 0x074002a2,
+	0x0400128a, 0x0740029f, 0x0400128a, 0x074002a3, 0x0400128a,
+	0x074002a0, 0x0400128a, 0x074002a4, 0x0d07fbce, 0x0400128a,
+	0x07c0244b, 0x07c0298b, 0x096102cb, 0x080c0700, 0x060c270b,
+	0x09610761, 0x060c021d, 0x096107a2, 0x0780278e, 0x0aa1800e,
+	0x060c021e, 0x096107e3, 0x060c021f, 0x09610824, 0x060c0220,
+	0x080c0701, 0x060c270b, 0x060c021d, 0x0aa1000e, 0x060c021e,
+	0x060c021f, 0x060c0220, 0x07802c4e, 0x0b00948e, 0x06b00007,
+	0x06c046c7, 0x02007d07, 0x06035107, 0x06803f07, 0x06035207,
+	0x06a08007, 0x06035007, 0x07802cc7, 0x0aa24007, 0x06803fc7,
+	0x07802947, 0x0aa1c387, 0x07802cc7, 0x044011c7, 0x0ba0c707,
+	0x0c7fffc0, 0x0441c1c7, 0x07c02b07, 0x06800007, 0x07c02747,
+	0x0ac0b48e, 0x07802b07, 0x0b613fc7, 0x0ba0c707, 0x0441c1c7,
+	0x07c02b07, 0x06435007, 0x0580f1c7, 0x0bef8047, 0x0cc00000,
+	0x00000000, 0x06435007, 0x0580f1c7, 0x0bef8047, 0x00000000,
+	0x06435307, 0x0900c1c7, 0x0a6f8007, 0x06b00007, 0x06c046c7,
+	0x02007d07, 0x06035107, 0x06803f07, 0x06035207, 0x06b0c007,
+	0x06035007, 0x054011d2, 0x0ac051ce, 0x06800087, 0x07c02b47,
+	0x0c7ff8c0, 0x07c02b87, 0x06b10008, 0x06c046c8, 0x02008d08,
+	0x05401252, 0x02009489, 0x0680008a, 0x07c02b4a, 0x068000ca,
+	0x06435007, 0x0580f1c7, 0x0bef8047, 0x06803f07, 0x06035108,
+	0x06035207, 0x06a08007, 0x06035007, 0x0ac0324e, 0x0c7ff400,
+	0x07c02b8a, 0x06808007, 0x020081c8, 0x02009489, 0x0c7ffc80,
+	0x0400128a, 0x0780254b, 0x0a60c00b, 0x044011cb, 0x06800087,
+	0x0aa14007, 0x06a01008, 0x0aa0c047, 0x06a22008, 0x06a40008,
+	0x06c00108, 0x060e0508, 0x07c02587, 0x07802a88, 0x06801809,
+	0x09502248, 0x060c2109, 0x080c260e, 0x06800049, 0x07c02849,
+	0x07802cc9, 0x07c02ac9, 0x07802889, 0x07c03049, 0x06800088,
+	0x0cc00000, 0x07c02488, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x06bfff40, 0x06032400,
+	0x00400000, 0x0c780000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0cc00000,
+	0x00400000, 0x0c780080, 0x06431e07, 0x09027207, 0x0a668048,
+	0x068fdfca, 0x06fcffca, 0x064e0408, 0x02808288, 0x09110287,
+	0x064c0909, 0x0ac0924a, 0x0b80324a, 0x0c7801c0, 0x09808688,
+	0x0400128a, 0x098083c8, 0x0a40324a, 0x0440128a, 0x098086c8,
+	0x0aa1000a, 0x09308287, 0x0a60c00a, 0x0400128a, 0x09808388,
+	0x0b80324a, 0x00000000, 0x098081c8, 0x0c780500, 0x060e0408,
+	0x0a614248, 0x00000000, 0x0c009240, 0x00000000, 0x0c780380,
+	0x0a62c288, 0x06431f20, 0x06433f21, 0x0e000860, 0x00000000,
+	0x00000000, 0x0f000800, 0x06031f20, 0x0f010840, 0x0c780100,
+	0x06033f21, 0x0c780080, 0x00000000, 0x08031e00, 0x0cc00000,
+	0x00400000, 0x0680400f, 0x0680a00e, 0x0680ec0d, 0x0680f60c,
+	0x0780704b, 0x0680000a, 0x06800009, 0x06800008, 0x0780776f,
+	0x07807780, 0x09610bc0, 0x0780736e, 0x078020c0, 0x06800041,
+	0x0342d001, 0x07807300, 0x06800081, 0x0b831040, 0x05403c4a,
+	0x02031c4f, 0x04001c71, 0x07000c44, 0x06800c00, 0x0bc25004,
+	0x09042004, 0x068000c1, 0x0a422040, 0x09101004, 0x04001c31,
+	0x02030030, 0x02030030, 0x07000c2c, 0x04001c30, 0x07000c00,
+	0x09610b00, 0x04005c71, 0x07000c6b, 0x0b003bab, 0x00000000,
+	0x0242bb6b, 0x0202a209, 0x05402c2a, 0x02030c0e, 0x07400c0a,
+	0x068000c0, 0x04001c30, 0x07400c00, 0x04001c30, 0x07400c2b,
+	0x0581002b, 0x04001c30, 0x07400c00, 0x0ac05bec, 0x0203024d,
+	0x07400c2a, 0x04001249, 0x0c780100, 0x0203020c, 0x07400c2a,
+	0x04001208, 0x0400128a, 0x0b8d52ca, 0x02000209, 0x07c070c9,
+	0x0cc00000, 0x07c07100, 0x0aa14040, 0x06800047, 0x06800006,
+	0x0c780100, 0x00000000, 0x06800007, 0x06800046, 0x05403c4a,
+	0x02031c4f, 0x04001c71, 0x07000c44, 0x09101004, 0x04001c31,
+	0x02030030, 0x02030030, 0x07000c2c, 0x04001c30, 0x07000c00,
+	0x09610b00, 0x04005c71, 0x07000c6b, 0x0b003bab, 0x00000000,
+	0x0242bb6b, 0x0be60404, 0x0a25c104, 0x0202a209, 0x05402c2a,
+	0x02030c0e, 0x07400c0a, 0x06800040, 0x04001c30, 0x07400c00,
+	0x0540102b, 0x020001c0, 0x04001c30, 0x07400c00, 0x05810000,
+	0x04001c30, 0x07400c00, 0x0ac05bec, 0x0203024d, 0x07400c2a,
+	0x04001249, 0x0c780100, 0x0203020c, 0x07400c2a, 0x04001208,
+	0x0be60804, 0x0a25c204, 0x0202a209, 0x05402c2a, 0x02030c0e,
+	0x07400c0a, 0x06800080, 0x04001c30, 0x07400c00, 0x0540102b,
+	0x02000180, 0x04001c30, 0x07400c00, 0x05810000, 0x04001c30,
+	0x07400c00, 0x0ac05bec, 0x0203024d, 0x07400c2a, 0x04001249,
+	0x0c780100, 0x0203020c, 0x07400c2a, 0x04001208, 0x0400128a,
+	0x0b8be2ca, 0x02000209, 0x07c070c9, 0x0cc00000, 0x07c07100,
+	0x0680400f, 0x0680a00e, 0x0680ec0d, 0x0780704b, 0x0680000a,
+	0x07807109, 0x07807300, 0x0ba6c080, 0x05403c4a, 0x02031c4f,
+	0x04001c71, 0x07000c44, 0x09082004, 0x0a6440c0, 0x04006c71,
+	0x07000c6b, 0x05402c09, 0x02030c0e, 0x07400c0a, 0x068001c0,
+	0x04001c30, 0x07400c00, 0x04001c30, 0x07400c2b, 0x0581002b,
+	0x04001c30, 0x07400c00, 0x0203024d, 0x07400c09, 0x04001249,
+	0x0400128a, 0x0b8e92ca, 0x0cc00000, 0x07c07149, 0x0aa14040,
+	0x06800047, 0x06800006, 0x0c780100, 0x00000000, 0x06800007,
+	0x06800046, 0x05403c4a, 0x02031c4f, 0x04001c71, 0x07000c44,
+	0x04006c71, 0x07000c6b, 0x0a244404, 0x05402c09, 0x02030c0e,
+	0x07400c0a, 0x06800140, 0x04001c30, 0x07400c00, 0x0540102b,
+	0x020001c0, 0x04001c30, 0x07400c00, 0x05810000, 0x04001c30,
+	0x07400c00, 0x0203024d, 0x07400c09, 0x04001249, 0x0a244804,
+	0x05402c09, 0x02030c0e, 0x07400c0a, 0x06800180, 0x04001c30,
+	0x07400c00, 0x0540102b, 0x02000180, 0x04001c30, 0x07400c00,
+	0x05810000, 0x04001c30, 0x07400c00, 0x0203024d, 0x07400c09,
+	0x04001249, 0x0400128a, 0x0b8d72ca, 0x0cc00000, 0x07c07149,
+	0x0680ec0f, 0x0680f60e, 0x0780710a, 0x078070c9, 0x06800008,
+	0x0240a24a, 0x0200e28e, 0x0a60c009, 0x0cc00000, 0x00000000,
+	0x070003c0, 0x07400380, 0x040013cf, 0x0400138e, 0x04001208,
+	0x0b8fb248, 0x0cc00000, 0x00000000, 0x0680ec0f, 0x0680f60e,
+	0x0780710a, 0x078070c9, 0x06800008, 0x0240a24a, 0x0200f24f,
+	0x0a60c00a, 0x0cc00000, 0x00000000, 0x07000380, 0x074003c0,
+	0x040013cf, 0x0400138e, 0x04001208, 0x0b8fb288, 0x0cc00000,
+	0x00000000, 0x0680ec0f, 0x0680f60e, 0x0780710a, 0x07807149,
+	0x0200f28f, 0x0200e28e, 0x0a40324a, 0x0cc00000, 0x00000000,
+	0x070003c0, 0x07400380, 0x040013cf, 0x0400138e, 0x0400128a,
+	0x0b8fb24a, 0x0cc00000, 0x00000000, 0x0b60808e, 0x0c780e00,
+	0x0680a00c, 0x0680400b, 0x0680000a, 0x0a83438a, 0x0400124a,
+	0x0202f28f, 0x07000bee, 0x0540222e, 0x0200820c, 0x04002208,
+	0x0700022d, 0x04001208, 0x07000200, 0x09610b40, 0x0a814389,
+	0x0202c24f, 0x07000b2b, 0x0540222b, 0x0200820c, 0x04002208,
+	0x0700022a, 0x04001208, 0x07000200, 0x09610a80, 0x0a60c00d,
+	0x0b807aad, 0x0c7800c0, 0x0ac05aad, 0x00000000, 0x07400b2e,
+	0x04000bab, 0x04000b6a, 0x04001249, 0x0c7ffb40, 0x07807300,
+	0x0b644080, 0x0a24004a, 0x0540222e, 0x0200820c, 0x04002208,
+	0x07000207, 0x0a22c047, 0x04401b6f, 0x07000b6c, 0x0540222c,
+	0x0200820c, 0x04002208, 0x07000207, 0x0be10047, 0x00000000,
+	0x07400b6e, 0x04000bac, 0x07400bee, 0x0400128a, 0x0c7ff340,
+	0x0cc00000, 0x00000000, 0x0b60808e, 0x0c781680, 0x0680a00c,
+	0x0680400b, 0x0680000a, 0x0a85638a, 0x0400124a, 0x0202f28f,
+	0x07000bee, 0x0540222e, 0x0200820c, 0x07000207, 0x04001208,
+	0x07000206, 0x054031c7, 0x020071cb, 0x09002146, 0x0a6280c5,
+	0x00000000, 0x040011c7, 0x070001c4, 0x09101c44, 0x040011c7,
+	0x02007c47, 0x02007c47, 0x0c780100, 0x00000000, 0x02007147,
+	0x02007147, 0x070001ed, 0x040011c7, 0x070001c0, 0x09610b40,
+	0x0a825389, 0x0202c24f, 0x07000b2b, 0x0540222b, 0x0200820c,
+	0x07000207, 0x04001208, 0x07000206, 0x054031c7, 0x020071cb,
+	0x09002146, 0x0a6280c5, 0x00000000, 0x040011c7, 0x070001c4,
+	0x09101c44, 0x040011c7, 0x02007c47, 0x02007c47, 0x0c780100,
+	0x00000000, 0x02007147, 0x02007147, 0x070001ea, 0x040011c7,
+	0x070001c0, 0x09610a80, 0x0a60c00d, 0x0b807aad, 0x0c7800c0,
+	0x0ac05aad, 0x00000000, 0x07400b2e, 0x04000bab, 0x04000b6a,
+	0x04001249, 0x0c7ff700, 0x07807300, 0x0b644080, 0x0a24004a,
+	0x0540222e, 0x0200820c, 0x04002208, 0x07000207, 0x0a22c047,
+	0x04401b6f, 0x07000b6c, 0x0540222c, 0x0200820c, 0x04002208,
+	0x07000207, 0x0be10047, 0x00000000, 0x07400b6e, 0x04000bac,
+	0x07400bee, 0x0400128a, 0x0c7feac0, 0x0cc00000, 0x00000000,
+	0x0400120a, 0x0200720f, 0x070001c9, 0x05402189, 0x0200618c,
+	0x04002186, 0x07000185, 0x09001005, 0x0a4092c0, 0x04401c47,
+	0x07000c40, 0x074001c0, 0x04401208, 0x0acfc288, 0x040001f1,
+	0x0cc00000, 0x074001c9, 0x04001208, 0x0b8ef388, 0x0cc00000,
+	0x00000000, 0x0780710e, 0x0440134e, 0x0680a00c, 0x0680000a,
+	0x0b60808e, 0x0c7804c0, 0x0200928f, 0x07000248, 0x054021c8,
+	0x020071cc, 0x040021c7, 0x070001c6, 0x0be1804a, 0x0be24046,
+	0x00000000, 0x0c07f700, 0x0680004b, 0x0c780140, 0x0a210046,
+	0x00000000, 0x0c07f5c0, 0x0680000b, 0x0400128a, 0x0b8ef34a,
+	0x0cc00000, 0x00000000, 0x06800008, 0x0700040a, 0x0200720f,
+	0x070001c9, 0x05402189, 0x020061af, 0x04001186, 0x07000185,
+	0x09041005, 0x0a418a80, 0x04001186, 0x07000185, 0x04001186,
+	0x07000180, 0x09610140, 0x0a412305, 0x0a80e348, 0x0ac07348,
+	0x00000000, 0x0200734f, 0x0a80a34a, 0x0400128a, 0x0440120a,
+	0x0200720f, 0x04401c47, 0x07000c40, 0x074001c0, 0x04401208,
+	0x0acfc348, 0x040001f1, 0x074001c9, 0x0cc00000, 0x0740040a,
+	0x04001208, 0x0b8e0288, 0x0cc00000, 0x00000000, 0x0680a02f,
+	0x078020c0, 0x06800041, 0x0342e001, 0x0780736d, 0x07807300,
+	0x0b614080, 0x00000000, 0x05401bae, 0x05401b6d, 0x04001b6d,
+	0x0242cbad, 0x04000aed, 0x0680000d, 0x0680002a, 0x07000380,
+	0x0400138e, 0x0aa10000, 0x0aa30040, 0x0aa50080, 0x0c780680,
+	0x07000380, 0x0400138e, 0x04001000, 0x0242b02b, 0x0b411b2b,
+	0x0400032b, 0x0202bbab, 0x0c780380, 0x0400032b, 0x07000380,
+	0x0400138e, 0x04001000, 0x0202b02b, 0x0b808b6b, 0x0400032b,
+	0x0242bbab, 0x0c780140, 0x0400032b, 0x0680006a, 0x0700038c,
+	0x0400138e, 0x0c07ec40, 0x00000000, 0x0c7ff880, 0x0400134d,
+	0x0cc00000, 0x00000000, 0x0c077280, 0x00000000, 0x0c079600,
+	0x00000000, 0x07802080, 0x0aa64180, 0x00000000, 0x0c07ae80,
+	0x00000000, 0x07807140, 0x07c07240, 0x0680ec0f, 0x0780710e,
+	0x0680004d, 0x0c07b580, 0x00000000, 0x0680ec0f, 0x0780714e,
+	0x07807100, 0x0200f00f, 0x0240e00e, 0x0680000d, 0x0c07b380,
+	0x00000000, 0x0680ec0f, 0x0680c00e, 0x0c07ed80, 0x06807250,
+	0x0cc00000, 0x00000000, 0x0680ec0f, 0x078070ce, 0x0680004d,
+	0x0c07bf80, 0x00000000, 0x0680f60f, 0x0780710e, 0x078070c0,
+	0x0240e00e, 0x0680000d, 0x0c07bdc0, 0x00000000, 0x0680ec0f,
+	0x0780714e, 0x07807100, 0x0200f00f, 0x0240e00e, 0x0680000d,
+	0x0c07ad00, 0x00000000, 0x0c07a3c0, 0x00000000, 0x0c079ec0,
+	0x00000000, 0x0c07a740, 0x00000000, 0x07807140, 0x07c07240,
+	0x07c07280, 0x07807300, 0x0b618080, 0x00000000, 0x0c07d4c0,
+	0x0680ec0f, 0x0c07d440, 0x0680f60f, 0x078070c0, 0x07807101,
+	0x07807170, 0x0ba280b0, 0x0aa0c000, 0x0a802040, 0x0c7801c0,
+	0x0680f60f, 0x0400138f, 0x070003c0, 0x07000381, 0x07400380,
+	0x074003c1, 0x0680ec0f, 0x0680c00e, 0x0c07dfc0, 0x06807250,
+	0x0680f60f, 0x0680d08e, 0x0c07dec0, 0x06807290, 0x0cc00000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000
+};
diff --git a/drivers/amlogic/amports/arch/ucode/h264/gxm_h264data_linux.h b/drivers/amlogic/amports/arch/ucode/h264/gxm_h264data_linux.h
new file mode 100644
index 0000000..e1fb9cd
--- /dev/null
+++ b/drivers/amlogic/amports/arch/ucode/h264/gxm_h264data_linux.h
@@ -0,0 +1,207 @@
+static const u32 MicroCode[] __initconst = {
+	0x07802787, 0x07802408, 0x094c21c8, 0x060c0407, 0x080c0a01,
+	0x07802347, 0x0a610007, 0x07802387, 0x0c780b00, 0x060c0a07,
+	0x0fc071c0, 0x080c2940, 0x07802387, 0x09807187, 0x098073c7,
+	0x060c0a07, 0x09c073c7, 0x09807387, 0x0c00b600, 0x060c0a07,
+	0x07802788, 0x064c0a07, 0x091c21c7, 0x0a6f8007, 0x07802a21,
+	0x06c00021, 0x06800022, 0x06c00022, 0x06800023, 0x06c00023,
+	0x06800024, 0x06c00024, 0x06bfffe5, 0x0a628008, 0x07802947,
+	0x06800309, 0x0aa18387, 0x07c029c9, 0x06800189, 0x07c029c9,
+	0x0c785980, 0x060c0713, 0x0c784ac0, 0x06800309, 0x0aa18387,
+	0x07c029c9, 0x06800189, 0x07c029c9, 0x0c7825c0, 0x060c0713,
+	0x0c780bc0, 0x00000000, 0x0c00ad80, 0x080c0600, 0x07802a21,
+	0x06c00021, 0x06800022, 0x06c00022, 0x06800023, 0x06c00023,
+	0x06800024, 0x06c00024, 0x06bfffe5, 0x07802788, 0x0a628008,
+	0x07802947, 0x06800309, 0x0aa18387, 0x07c029c9, 0x06800189,
+	0x07c029c9, 0x0c7851c0, 0x060c0713, 0x0c784300, 0x06800309,
+	0x0aa18387, 0x07c029c9, 0x06800189, 0x07c029c9, 0x0c781e00,
+	0x060c0713, 0x0c780400, 0x00000000, 0x064c0321, 0x064c0322,
+	0x064c0323, 0x064c0324, 0x064c2725, 0x0a224053, 0x07802447,
+	0x07c02987, 0x0400099d, 0x040009de, 0x04000a1f, 0x04000a60,
+	0x0c781400, 0x060c0713, 0x0683ffc7, 0x044011c7, 0x0aa0c007,
+	0x0780248a, 0x0a6f400a, 0x068000ca, 0x07802747, 0x09510287,
+	0x07802cc7, 0x09708287, 0x06031e0a, 0x0aa08007, 0x0c780b00,
+	0x080c0700, 0x07802a08, 0x06c00008, 0x060c0208, 0x06800008,
+	0x06c00008, 0x060c0208, 0x06800008, 0x06c00008, 0x060c0208,
+	0x06800008, 0x06c00008, 0x060c0208, 0x06bfffc9, 0x060c0326,
+	0x060c0327, 0x060c0328, 0x060c0329, 0x07802988, 0x09610209,
+	0x060c2708, 0x080c0701, 0x07802a08, 0x06c00008, 0x060c0208,
+	0x06800008, 0x06c00008, 0x060c0208, 0x06800008, 0x06c00008,
+	0x060c0208, 0x06800008, 0x06c00008, 0x060c0208, 0x060c031d,
+	0x060c031e, 0x060c031f, 0x060c0320, 0x0780244a, 0x09610289,
+	0x060c270a, 0x0c780580, 0x060c0713, 0x064c2709, 0x09210249,
+	0x060c0326, 0x060c0327, 0x060c0328, 0x060c0329, 0x07802988,
+	0x09610209, 0x060c2708, 0x080c0701, 0x064c2709, 0x09210249,
+	0x060c031d, 0x060c031e, 0x060c031f, 0x060c0320, 0x07802448,
+	0x09610209, 0x060c2708, 0x060c0713, 0x06431e09, 0x0befc049,
+	0x07802307, 0x09021247, 0x094411c9, 0x04c301c7, 0x0c780f00,
+	0x060c2507, 0x0683ffc8, 0x080c3e01, 0x064c3f07, 0x093e11c7,
+	0x0aaf4007, 0x064c2307, 0x09304247, 0x0aa0c009, 0x0aee4008,
+	0x04401208, 0x0cc00000, 0x00000000, 0x064c0321, 0x064c0322,
+	0x064c0323, 0x064c0324, 0x064c2725, 0x060c0713, 0x09210265,
+	0x07802cc7, 0x0a638007, 0x07802a08, 0x06c00008, 0x060c0208,
+	0x06800008, 0x06c00008, 0x060c0208, 0x06800008, 0x06c00008,
+	0x060c0208, 0x06800008, 0x06c00008, 0x060c0208, 0x06bfffc9,
+	0x060c031d, 0x060c031e, 0x060c031f, 0x060c0320, 0x07802448,
+	0x09610209, 0x060c2708, 0x07802307, 0x09021247, 0x094411c9,
+	0x04c301c7, 0x060c2507, 0x0683ffc9, 0x0780248a, 0x0aa1000a,
+	0x0aa0c0ca, 0x0a6f4009, 0x04401249, 0x068000ca, 0x07802749,
+	0x09510289, 0x07802cc9, 0x09708289, 0x06031e0a, 0x07802807,
+	0x0c07f140, 0x07c02887, 0x0b608008, 0x0c7ddec0, 0x090a1207,
+	0x090241c7, 0x095211c8, 0x0780194b, 0x0aa0c00b, 0x07c02807,
+	0x0c781040, 0x0aa64247, 0x060c2507, 0x0aa64287, 0x0aa58347,
+	0x0aa1c048, 0x0aa58387, 0x0a60c007, 0x0c7801c0, 0x00000000,
+	0x080c2605, 0x080c2606, 0x080c2602, 0x080c260f, 0x080c2603,
+	0x07802a48, 0x0aa100c8, 0x06800089, 0x0c782b80, 0x07c02a49,
+	0x0780248b, 0x0a6fc00b, 0x00000000, 0x07c02a88, 0x0c782a00,
+	0x07c02a49, 0x080c2602, 0x080c260f, 0x080c2603, 0x07802a48,
+	0x0aa50088, 0x068000c9, 0x07802cc8, 0x0aa0c008, 0x0c782780,
+	0x07c02a49, 0x0aa08712, 0x0bef4053, 0x0683ffcb, 0x078026c8,
+	0x064e0c09, 0x09010249, 0x0b804248, 0x0aa0c00b, 0x0c7ffec0,
+	0x044012cb, 0x06800088, 0x068000c9, 0x0680180b, 0x060c210b,
+	0x0683ffcc, 0x0aa2c00c, 0x064e110b, 0x091012cb, 0x0a6f400b,
+	0x0440130c, 0x064e110b, 0x091012cb, 0x0a6e400b, 0x0780248b,
+	0x0a6dc00b, 0x00000000, 0x07c02a88, 0x0c782040, 0x07c02a49,
+	0x06800007, 0x07c02807, 0x060c2507, 0x06431e07, 0x0befc047,
+	0x068fdfc8, 0x06fcffc8, 0x064e0407, 0x02807207, 0x0c7ff140,
+	0x060e0407, 0x064c0321, 0x064c0322, 0x064c2725, 0x0a230053,
+	0x07802447, 0x07c02987, 0x0400099d, 0x040009de, 0x060c0713,
+	0x07802307, 0x09021247, 0x094411c9, 0x04c301c7, 0x0c781640,
+	0x060c2507, 0x07802cc7, 0x0a658007, 0x080c0700, 0x07802a08,
+	0x06c00008, 0x060c0208, 0x080c0200, 0x06bfffc9, 0x060c0326,
+	0x060c0327, 0x0780298a, 0x09610289, 0x060c270a, 0x080c0701,
+	0x060c0208, 0x080c0200, 0x060c031d, 0x060c031e, 0x0780244a,
+	0x09610289, 0x060c270a, 0x0c780480, 0x060c0713, 0x064c2709,
+	0x09210249, 0x060c0326, 0x060c0327, 0x07802988, 0x09610209,
+	0x060c2708, 0x080c0701, 0x064c2709, 0x09210249, 0x060c031d,
+	0x060c031e, 0x07802448, 0x09610209, 0x060c2708, 0x060c0713,
+	0x07802307, 0x09021247, 0x094411c9, 0x04c301c7, 0x060c2507,
+	0x0780248a, 0x0a6fc00a, 0x068000ca, 0x07802749, 0x09510289,
+	0x07802cc9, 0x09708289, 0x0c780900, 0x06031e0a, 0x064c0321,
+	0x064c0322, 0x064c2725, 0x060c0713, 0x09210265, 0x07802cc7,
+	0x0a618007, 0x07802a08, 0x06c00008, 0x060c0208, 0x080c0200,
+	0x06bfffc9, 0x060c031d, 0x060c031e, 0x07802448, 0x09610209,
+	0x060c2708, 0x07802307, 0x09021247, 0x094411c9, 0x04c301c7,
+	0x060c2507, 0x0683ffc9, 0x04401249, 0x0aa10009, 0x0780248a,
+	0x0aa080ca, 0x0a6f000a, 0x068000ca, 0x07802749, 0x09510289,
+	0x07802cc9, 0x09708289, 0x06031e0a, 0x07802807, 0x0c07c200,
+	0x07c02887, 0x090241c7, 0x0b614008, 0x07c02807, 0x06bfffc8,
+	0x0c7daec0, 0x07c03c08, 0x0aa10287, 0x060c2507, 0x080c2602,
+	0x080c260f, 0x080c2603, 0x04c001c7, 0x09807207, 0x060c2107,
+	0x07802547, 0x0aa14007, 0x06a01008, 0x0aa0c047, 0x06a22008,
+	0x06a40008, 0x06431e09, 0x0befc049, 0x06c00108, 0x07802949,
+	0x0a670389, 0x0a26c053, 0x0c075240, 0x00000000, 0x0780288a,
+	0x0aa1c00a, 0x07802a8a, 0x00800000, 0x078026c9, 0x04001249,
+	0x07c026c9, 0x00400000, 0x0b61408a, 0x00000000, 0x080c2170,
+	0x0c780700, 0x080c260e, 0x0683ffca, 0x0440128a, 0x0aa0c00a,
+	0x07802489, 0x0a6f4009, 0x078026c9, 0x04401249, 0x0c008080,
+	0x07c026c9, 0x0c780440, 0x08030580, 0x060e0508, 0x07802a88,
+	0x06801809, 0x09502248, 0x060c2109, 0x080c260e, 0x07c02587,
+	0x0ba0c087, 0x040011c7, 0x06800007, 0x0c074840, 0x07c02547,
+	0x06800088, 0x07c02488, 0x08030580, 0x0c074d80, 0x00000000,
+	0x07802747, 0x0aa14712, 0x040011c7, 0x07802d08, 0x0a20c048,
+	0x00000000, 0x07c02747, 0x0c07ae80, 0x07802b0d, 0x0b608008,
+	0x0c7fed00, 0x0ba13fcd, 0x06800008, 0x0c781780, 0x07c02b08,
+	0x06808008, 0x0ba1070d, 0x0400024d, 0x0441c249, 0x0680c008,
+	0x05403289, 0x0200a24a, 0x02008288, 0x07400225, 0x04001208,
+	0x092102e1, 0x0740020b, 0x04001208, 0x07400221, 0x04001208,
+	0x07400222, 0x04001208, 0x092102e2, 0x0740020b, 0x04001208,
+	0x07400223, 0x04001208, 0x092102e3, 0x0740020b, 0x04001208,
+	0x07400224, 0x04001208, 0x092102e4, 0x0740020b, 0x07802c48,
+	0x0ac07488, 0x07802cca, 0x0aa38712, 0x040002ca, 0x07802d0a,
+	0x0c7802c0, 0x0942f28b, 0x0a61000a, 0x0aa14712, 0x07802d0a,
+	0x0a20c04a, 0x0a6146c9, 0x0400128d, 0x0b60c70d, 0x0680000a,
+	0x0680070a, 0x07c02b0a, 0x0b02d488, 0x0aa0800a, 0x0a67c70a,
+	0x07802b4a, 0x0a20c04a, 0x06a0800b, 0x06a0c00b, 0x06b00009,
+	0x07802b8c, 0x0540928c, 0x0200a24a, 0x06c046ca, 0x0200ad0a,
+	0x06435009, 0x0580f249, 0x0bef8049, 0x00000000, 0x0603510a,
+	0x06803f0a, 0x0603520a, 0x0603500b, 0x0400130c, 0x0481f30c,
+	0x07c02b8c, 0x07802b4c, 0x07802c47, 0x07802ccb, 0x024072c7,
+	0x0b20c0c7, 0x00000000, 0x068000c7, 0x095c2307, 0x07c02b4c,
+	0x07802b4c, 0x091c22cc, 0x0aa2800b, 0x044012cb, 0x095c230b,
+	0x0a61c00b, 0x07c02b4c, 0x0a20c04c, 0x06b0800b, 0x06b0c00b,
+	0x0c0726c0, 0x06b00009, 0x0680001b, 0x07802947, 0x0aa5c387,
+	0x07802cc7, 0x040011c7, 0x07c02cc7, 0x07802e88, 0x04001208,
+	0x07c02e88, 0x07802c48, 0x0b828207, 0x06800007, 0x07c02cc7,
+	0x07802d08, 0x04001208, 0x078023c9, 0x0b822248, 0x07c02d08,
+	0x07802487, 0x0a6fc007, 0x00000000, 0x06430507, 0x0a2f0107,
+	0x0c7dc300, 0x064c0007, 0x07802d08, 0x0be10048, 0x040011c8,
+	0x0c780580, 0x07c02d07, 0x044011c8, 0x07c02d07, 0x07802cc7,
+	0x040011c7, 0x07c02cc7, 0x07802e88, 0x04001208, 0x07c02e88,
+	0x07802c48, 0x0b80b207, 0x06800007, 0x07c02cc7, 0x07802d08,
+	0x04002208, 0x078023c9, 0x0b805248, 0x07c02d08, 0x06800007,
+	0x0c7ff880, 0x07c02e87, 0x064c3b07, 0x0920c1c7, 0x0b218a07,
+	0x0680004a, 0x07c01e4a, 0x07c01d8a, 0x0680204a, 0x07c0194a,
+	0x07802cc7, 0x095084c7, 0x07802d09, 0x094084c9, 0x07801909,
+	0x0aa14009, 0x04401249, 0x0a60c009, 0x07c01909, 0x0c7ef600,
+	0x07802c49, 0x0b014489, 0x06808008, 0x0a628712, 0x0c780840,
+	0x00000000, 0x07802d0a, 0x0a20c04a, 0x0500128a, 0x040011c7,
+	0x054011c7, 0x0c780840, 0x094011ca, 0x040011c7, 0x0a410247,
+	0x07802b09, 0x07802d07, 0x0a25c047, 0x040021c9, 0x0c7f1b00,
+	0x06800007, 0x0aa5c712, 0x07802d0a, 0x0a2bc04a, 0x04001287,
+	0x0a4ed24a, 0x0c780480, 0x06800007, 0x0c7f16c0, 0x00000000,
+	0x0a628047, 0x040021c9, 0x07802d07, 0x0be1c047, 0x040021c9,
+	0x0c7f1700, 0x06800047, 0x0aadc007, 0x07802b09, 0x040011c9,
+	0x0ba10707, 0x0b6cce07, 0x0680c008, 0x0441c1c7, 0x05403247,
+	0x020091c9, 0x02008248, 0x07000209, 0x07c02449, 0x04001208,
+	0x07000209, 0x04001208, 0x0700021d, 0x09610749, 0x04001208,
+	0x0700021e, 0x04001208, 0x07000209, 0x09610789, 0x04001208,
+	0x0700021f, 0x04001208, 0x07000209, 0x096107c9, 0x04001208,
+	0x07000220, 0x04001208, 0x07000209, 0x09610809, 0x0c7d5a00,
+	0x00000000, 0x07802dc7, 0x0aa18007, 0x07802087, 0x0a614087,
+	0x00000000, 0x08098002, 0x080980f0, 0x0c780a40, 0x080c2400,
+	0x064c2207, 0x09305207, 0x093a2287, 0x09205247, 0x092a22c7,
+	0x054022cb, 0x02c0a2ca, 0x09105347, 0x091a22c7, 0x054042cb,
+	0x02c0a2ca, 0x09005387, 0x090a22c7, 0x054062cb, 0x02c0a2ca,
+	0x07802087, 0x0a63c187, 0x080c2408, 0x064c2207, 0x048032ca,
+	0x0aa340cb, 0x00000000, 0x0480f28a, 0x09305347, 0x093a22c7,
+	0x054042cb, 0x02c0a2ca, 0x09205387, 0x092a22c7, 0x054062cb,
+	0x02c0a2ca, 0x0c780240, 0x00000000, 0x0480328a, 0x09305247,
+	0x093a22c7, 0x054022cb, 0x0c7800c0, 0x02c0a2ca, 0x0c780580,
+	0x05418208, 0x0609b308, 0x0649b308, 0x05418249, 0x0609b309,
+	0x0649b309, 0x0541834d, 0x0609b30d, 0x0649b30d, 0x0541838e,
+	0x0609b30e, 0x0649b30e, 0x08098002, 0x06bfffcb, 0x054102cb,
+	0x06bfffcc, 0x02c0c2cc, 0x0609820c, 0x048032ca, 0x0a6480cb,
+	0x0c780080, 0x0c780640, 0x054102c8, 0x058102cb, 0x05410308,
+	0x02c0c2cc, 0x0609810c, 0x054042ca, 0x0609800b, 0x0a811248,
+	0x00000000, 0x054102c9, 0x058102cb, 0x05410309, 0x02c0c2cc,
+	0x0c7802c0, 0x0609820c, 0x054102c8, 0x058102cb, 0x05410309,
+	0x02c0c2cc, 0x0609810c, 0x054042ca, 0x04c042cb, 0x0c7800c0,
+	0x0609800b, 0x0c780340, 0x048032ca, 0x054182cb, 0x02c0b20b,
+	0x0483030a, 0x0541430c, 0x02c0c34c, 0x0a80630b, 0x054102cd,
+	0x058102cb, 0x0541030e, 0x02c0c2cc, 0x0609820c, 0x0780294b,
+	0x0a60c38b, 0x06800712, 0x05801492, 0x06bfffcb, 0x06800021,
+	0x07802a1d, 0x0680001e, 0x06800022, 0x0680001f, 0x06800023,
+	0x06800020, 0x06800024, 0x0400099d, 0x040009de, 0x04000a1f,
+	0x04000a60, 0x0680800a, 0x0680070e, 0x0740028b, 0x0400128a,
+	0x074002a1, 0x0400128a, 0x0740029d, 0x0400128a, 0x0740029e,
+	0x0400128a, 0x074002a2, 0x0400128a, 0x0740029f, 0x0400128a,
+	0x074002a3, 0x0400128a, 0x074002a0, 0x0400128a, 0x074002a4,
+	0x0d07fbce, 0x0400128a, 0x07c0244b, 0x07c0298b, 0x096102cb,
+	0x080c0700, 0x060c270b, 0x09610761, 0x060c021d, 0x096107a2,
+	0x0780278e, 0x0aa1800e, 0x060c021e, 0x096107e3, 0x060c021f,
+	0x09610824, 0x060c0220, 0x080c0701, 0x060c270b, 0x060c021d,
+	0x0aa1000e, 0x060c021e, 0x060c021f, 0x060c0220, 0x07802c4e,
+	0x0b00948e, 0x06b00007, 0x06c046c7, 0x02007d07, 0x06035107,
+	0x06803f07, 0x06035207, 0x06a08007, 0x06035007, 0x07802cc7,
+	0x0aa24007, 0x06803fc7, 0x07802947, 0x0aa1c387, 0x07802cc7,
+	0x044011c7, 0x0ba0c707, 0x0c7fffc0, 0x0441c1c7, 0x07c02b07,
+	0x06800007, 0x07c02747, 0x0ac0b48e, 0x07802b07, 0x0b613fc7,
+	0x0ba0c707, 0x0441c1c7, 0x07c02b07, 0x06435007, 0x0580f1c7,
+	0x0bef8047, 0x0cc00000, 0x00000000, 0x06435007, 0x0580f1c7,
+	0x0bef8047, 0x00000000, 0x06435307, 0x0900c1c7, 0x0a6f8007,
+	0x06b00007, 0x06c046c7, 0x02007d07, 0x06035107, 0x06803f07,
+	0x06035207, 0x06b0c007, 0x06035007, 0x054011d2, 0x0ac051ce,
+	0x06800087, 0x07c02b47, 0x0c7ff8c0, 0x07c02b87, 0x06b10008,
+	0x06c046c8, 0x02008d08, 0x05401252, 0x02009489, 0x0680008a,
+	0x07c02b4a, 0x068000ca, 0x06435007, 0x0580f1c7, 0x0bef8047,
+	0x06803f07, 0x06035108, 0x06035207, 0x06a08007, 0x06035007,
+	0x0ac0324e, 0x0c7ff400, 0x07c02b8a, 0x06808007, 0x020081c8,
+	0x02009489, 0x0c7ffc80, 0x0400128a, 0x0780254b, 0x0a60c00b,
+	0x044011cb, 0x06800087, 0x0aa14007, 0x06a01008, 0x0aa0c047,
+	0x06a22008, 0x06a40008, 0x06c00108, 0x060e0508, 0x07c02587,
+	0x07802a88, 0x06801809, 0x09502248, 0x060c2109, 0x080c260e,
+	0x06800049, 0x07c02849, 0x07802cc9, 0x07c02ac9, 0x07802889,
+	0x07c03049, 0x06800088, 0x0cc00000, 0x07c02488, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000
+};
diff --git a/drivers/amlogic/amports/arch/ucode/h264/gxm_h264header_linux.h b/drivers/amlogic/amports/arch/ucode/h264/gxm_h264header_linux.h
new file mode 100644
index 0000000..bd754aa
--- /dev/null
+++ b/drivers/amlogic/amports/arch/ucode/h264/gxm_h264header_linux.h
@@ -0,0 +1,207 @@
+static const u32 MicroCode[] __initconst = {
+	0x06804011, 0x06905347, 0x07400447, 0x04002451, 0x0fc101c0,
+	0x09108247, 0x0a60e509, 0x0c7e5ec0, 0x00000000, 0x07400447,
+	0x04001451, 0x0fc08280, 0x07c00d0a, 0x0c065980, 0x080c2301,
+	0x0b2087c7, 0x0c7e5c80, 0x04000407, 0x09505287, 0x0740044a,
+	0x04001451, 0x0ba59909, 0x0c065740, 0x080c2301, 0x05001387,
+	0x07803ccd, 0x09502347, 0x07c03ccd, 0x0c0655c0, 0x080c2301,
+	0x0c065540, 0x080c2301, 0x0fc011c0, 0x0fc01340, 0x0942134e,
+	0x0740044d, 0x04001451, 0x0aa1800d, 0x0680000e, 0x068001c7,
+	0x07c01d47, 0x0c009bc0, 0x06800009, 0x0c065200, 0x080c2301,
+	0x04004247, 0x07400449, 0x04001451, 0x0c0650c0, 0x080c2301,
+	0x07400447, 0x04001451, 0x06800088, 0x0a835207, 0x06800008,
+	0x0a82e207, 0x00000000, 0x0fc011c0, 0x07400447, 0x04001451,
+	0x0c064dc0, 0x080c2301, 0x0c064f40, 0x00000000, 0x07400447,
+	0x04001451, 0x058101c7, 0x07400447, 0x04001451, 0x0c064b80,
+	0x080c2301, 0x0c064d00, 0x00000000, 0x07400447, 0x04001451,
+	0x058101c7, 0x07400447, 0x04001451, 0x0c064940, 0x080c2301,
+	0x0aa68007, 0x0aa12007, 0x05807207, 0x0aa08008, 0x0c7e4b80,
+	0x07400447, 0x04001451, 0x04000287, 0x06808009, 0x0c064680,
+	0x080c2301, 0x0c064800, 0x00000000, 0x07400247, 0x04001249,
+	0x058101c7, 0x07400247, 0x0d07fe0a, 0x04001249, 0x0c7801c0,
+	0x00000000, 0x0c064380, 0x080c2301, 0x040041c7, 0x07400447,
+	0x04001451, 0x0c064240, 0x080c2301, 0x04000247, 0x0fc011c0,
+	0x09501247, 0x07400449, 0x04001451, 0x0c064080, 0x080c2301,
+	0x04000347, 0x0c063fc0, 0x080c2301, 0x04000387, 0x0c780700,
+	0x00000000, 0x06031f0d, 0x06033f0e, 0x0c05e7c0, 0x08031e15,
+	0x06431f07, 0x06a40008, 0x0b014207, 0x06804009, 0x0b00b24d,
+	0x00000000, 0x0649cf09, 0x0a208089, 0x0c7e3f40, 0x00000000,
+	0x0809c007, 0x0609c10d, 0x08007401, 0x0c780000, 0x00800000,
+	0x0400034e, 0x0b21a40d, 0x0649cf09, 0x0a208089, 0x0c7e3c80,
+	0x0c7ffdc0, 0x0809c008, 0x0400124d, 0x07400449, 0x04001451,
+	0x0400124e, 0x07400449, 0x04001451, 0x0fc011c0, 0x0a610007,
+	0x00000000, 0x0fc01200, 0x094211c8, 0x0fc01200, 0x094411c8,
+	0x07400447, 0x04001451, 0x0fc011c0, 0x0aa20007, 0x06800108,
+	0x0c063380, 0x080c2301, 0x07400447, 0x0d07ff48, 0x04001451,
+	0x0c780140, 0x06800007, 0x07400447, 0x0d07ffc8, 0x04001451,
+	0x06804048, 0x07400211, 0x0fc01200, 0x0a60c008, 0x0c7817c0,
+	0x07400448, 0x0fc011c0, 0x09421207, 0x07400448, 0x0aa30007,
+	0x04001451, 0x0fc081c0, 0x07400447, 0x0a623fc7, 0x04001451,
+	0x0fc101c0, 0x07400447, 0x04001451, 0x0fc101c0, 0x07400447,
+	0x04001451, 0x0fc011c0, 0x0aa0c007, 0x00000000, 0x0fc011c0,
+	0x0fc011c0, 0x0aa38007, 0x00000000, 0x0680000e, 0x0fc051c0,
+	0x09405387, 0x0540838e, 0x0980e34e, 0x0a21c047, 0x00000000,
+	0x0fc101c0, 0x07c00987, 0x0fc081c0, 0x09408387, 0x07c009ce,
+	0x0fc011c0, 0x0aa14007, 0x0c062680, 0x080c2301, 0x0c062600,
+	0x080c2301, 0x0fc011c0, 0x07400447, 0x04001451, 0x0aa40007,
+	0x07c00687, 0x0fc101c0, 0x07400447, 0x04001451, 0x0fc101c0,
+	0x07400447, 0x04001451, 0x0fc101c0, 0x07400447, 0x04001451,
+	0x0fc101c0, 0x07400447, 0x04001451, 0x0fc011c0, 0x07c00687,
+	0x0680000e, 0x0fc011c0, 0x0aa18007, 0x09401387, 0x0c008140,
+	0x00000000, 0x090aa207, 0x07c02f88, 0x0fc011c0, 0x0aa1c007,
+	0x09421387, 0x0c007f80, 0x00000000, 0x0be0c04e, 0x090aa207,
+	0x07c02f88, 0x0a20c0ce, 0x00000000, 0x0fc011c0, 0x0fc011c0,
+	0x09441387, 0x0fc011c0, 0x09461387, 0x0740044e, 0x04001451,
+	0x0aa24007, 0x06800188, 0x0fc011c0, 0x0c0619c0, 0x080c2301,
+	0x0d07ff88, 0x00000000, 0x07400447, 0x04001451, 0x07803b47,
+	0x0a404407, 0x07803bc7, 0x09807007, 0x07c03bc7, 0x068f000a,
+	0x06c0470a, 0x0540a1d0, 0x0200a1ca, 0x06806009, 0x0c05e900,
+	0x06a0400b, 0x0c7e1900, 0x00000000, 0x0aa1000a, 0x06804047,
+	0x0c782180, 0x070001d1, 0x06804091, 0x07000447, 0x04001451,
+	0x07c039c7, 0x09108247, 0x07000448, 0x04001451, 0x090081c8,
+	0x07c03a07, 0x064c2908, 0x09c080c8, 0x060c2908, 0x0b60d909,
+	0x0c780680, 0x080e0000, 0x0700044d, 0x04001451, 0x064c2908,
+	0x090211cd, 0x09461207, 0x060c2908, 0x0aa3000d, 0x0680000e,
+	0x06800009, 0x06c00049, 0x060e0209, 0x068001c7, 0x07c01d47,
+	0x0c006300, 0x06800009, 0x06800009, 0x06c00049, 0x060e0209,
+	0x064e0007, 0x096e91cd, 0x060e0007, 0x064e0307, 0x095081ce,
+	0x060e0307, 0x07000449, 0x04001451, 0x07c020c9, 0x07000447,
+	0x04001451, 0x07c02147, 0x06800088, 0x0a819207, 0x06800008,
+	0x0a814207, 0x07000447, 0x04001451, 0x07c03a87, 0x07000447,
+	0x04001451, 0x07c03807, 0x07000447, 0x04001451, 0x07c03847,
+	0x07000447, 0x04001451, 0x07c03887, 0x07000447, 0x04001451,
+	0x07c038c7, 0x07000447, 0x04001451, 0x07c03987, 0x0c780100,
+	0x07000447, 0x04001451, 0x07c02187, 0x07000449, 0x04001451,
+	0x090081c9, 0x07c03907, 0x091011c9, 0x07c03947, 0x07000447,
+	0x04001451, 0x060c0907, 0x07c02c47, 0x04401247, 0x07c02c09,
+	0x07000449, 0x04001451, 0x07c02c89, 0x0700044d, 0x04001451,
+	0x090011cd, 0x0a60c007, 0x07c02107, 0x05401249, 0x04000289,
+	0x07802c48, 0x09610288, 0x0609520a, 0x05404289, 0x0968c288,
+	0x0609080a, 0x06031f08, 0x06033f09, 0x0c05a440, 0x08031e15,
+	0x06431f08, 0x0a610007, 0x07c03a48, 0x0902120d, 0x094211c8,
+	0x07c02947, 0x090411cd, 0x0aa10007, 0x054011c7, 0x07802108,
+	0x094411c8, 0x07c02307, 0x06800087, 0x07802108, 0x02408207,
+	0x07000447, 0x04001451, 0x07000449, 0x04001451, 0x09508247,
+	0x05401249, 0x07c01a89, 0x07000447, 0x04001451, 0x07000449,
+	0x04001451, 0x09508247, 0x03409209, 0x07c01ac9, 0x07000447,
+	0x04001451, 0x0be0c047, 0x0c780900, 0x05801347, 0x05801347,
+	0x0a22c04d, 0x07000447, 0x04001451, 0x07c03d47, 0x0a61ffc7,
+	0x07000447, 0x04001451, 0x07c03d87, 0x07000447, 0x04001451,
+	0x07c03dc7, 0x07000447, 0x04001451, 0x0a238047, 0x09421347,
+	0x07000447, 0x04001451, 0x07c03e47, 0x07000447, 0x04001451,
+	0x07c03e07, 0x07000447, 0x04001451, 0x07c03ec7, 0x07000447,
+	0x04001451, 0x07c03e87, 0x07000447, 0x04001451, 0x09444347,
+	0x0a20c207, 0x07000447, 0x07c01b87, 0x0cc00000, 0x07c03d0d,
+	0x0680c011, 0x06905347, 0x07400447, 0x04001451, 0x0c05e780,
+	0x080c2301, 0x0b20bfc7, 0x0c7dea80, 0x04000407, 0x04000247,
+	0x0c05e600, 0x080c2301, 0x09505247, 0x0fc011c0, 0x095a1247,
+	0x0fc011c0, 0x095c1247, 0x07400449, 0x04001451, 0x0c05e3c0,
+	0x080c2301, 0x0aa0c007, 0x0c7de6c0, 0x00000000, 0x0c05e280,
+	0x080c2301, 0x04000207, 0x0c05e1c0, 0x080c2301, 0x094a5207,
+	0x0fc011c0, 0x09541207, 0x0fc021c0, 0x09562207, 0x07400448,
+	0x04001451, 0x0c05df80, 0x080c2301, 0x04000247, 0x0c05dec0,
+	0x080c2301, 0x09508247, 0x07400449, 0x04001451, 0x0c05dd80,
+	0x080c2301, 0x04000247, 0x0fc011c0, 0x09501247, 0x0fc011c0,
+	0x09521247, 0x0fc011c0, 0x09541247, 0x07400449, 0x064c2907,
+	0x091c21c7, 0x0a60c0c7, 0x0c780580, 0x04001451, 0x098092c9,
+	0x07400449, 0x04001451, 0x0fc011c0, 0x06800149, 0x05401347,
+	0x02009349, 0x07c01d49, 0x0fc01340, 0x094211cd, 0x07400447,
+	0x04001451, 0x0aa1000d, 0x0680000e, 0x0c001f80, 0x06800009,
+	0x0c05d5c0, 0x080c2301, 0x07400447, 0x04001451, 0x07803b87,
+	0x0a404407, 0x07803bc7, 0x09807047, 0x07c03bc7, 0x06af000a,
+	0x06c0470a, 0x054091d0, 0x0200a1ca, 0x06804009, 0x06a0c00b,
+	0x0c05a540, 0x00000000, 0x0c7dd540, 0x00000000, 0x0680c051,
+	0x07000449, 0x04001451, 0x091a11c9, 0x07c02347, 0x0aa0c007,
+	0x06800007, 0x0687ffc7, 0x07c02a07, 0x091c11c9, 0x07c021c7,
+	0x06800808, 0x07000449, 0x04001451, 0x090051c9, 0x07c03ac7,
+	0x09505207, 0x090a51c9, 0x07c03b07, 0x09605207, 0x07802947,
+	0x096a2207, 0x060c2108, 0x091411c9, 0x07c028c7, 0x091621c9,
+	0x07c02907, 0x07000449, 0x04001451, 0x090081c9, 0x0c05cb80,
+	0x00000000, 0x07c02247, 0x091081c9, 0x0c05ca80, 0x00000000,
+	0x07000449, 0x04001451, 0x090081c9, 0x0c05c940, 0x00000000,
+	0x06801008, 0x09505207, 0x060c2108, 0x06801408, 0x09505207,
+	0x060c2108, 0x091011c9, 0x07c02287, 0x091211c9, 0x064e0e08,
+	0x09401207, 0x060e0e08, 0x091411c9, 0x07c02207, 0x0580b1c9,
+	0x0be18047, 0x06800007, 0x07802308, 0x09c08008, 0x0cc00000,
+	0x07c02308, 0x07000449, 0x04001451, 0x090011c9, 0x0680014d,
+	0x05401387, 0x0200d38d, 0x07c01d4d, 0x07802308, 0x09401207,
+	0x07c02308, 0x09021349, 0x0aa2800d, 0x0680000e, 0x06801c09,
+	0x06c00049, 0x060e0209, 0x0c0013c0, 0x06800009, 0x06800009,
+	0x06c00049, 0x060e0209, 0x064e0007, 0x095c91cd, 0x060e0007,
+	0x064e0307, 0x094081ce, 0x060e0307, 0x07000447, 0x04001451,
+	0x0c05bc40, 0x00000000, 0x06801408, 0x09505207, 0x0cc00000,
+	0x060c2108, 0x0ba0c189, 0x0680020c, 0x0680080c, 0x07801d47,
+	0x0b8041c9, 0x04001249, 0x0cc00000, 0x00000000, 0x0540134d,
+	0x0540138e, 0x0fc01200, 0x07400448, 0x04001451, 0x09401348,
+	0x0aac8008, 0x0680020a, 0x0680020b, 0x0ba0c189, 0x068003cc,
+	0x06800fcc, 0x0aa4400b, 0x00000000, 0x0c05b340, 0x080c2301,
+	0x07400447, 0x04001451, 0x0c05b440, 0x00000000, 0x02007287,
+	0x048ff2c7, 0x0a61800b, 0x0aa0cfcc, 0x0b614189, 0x0a6103cc,
+	0x0c7ff780, 0x0980e00e, 0x0400028b, 0x054083cf, 0x0be0c04c,
+	0x094083ca, 0x06c0000f, 0x0aeac00c, 0x0440130c, 0x07801d47,
+	0x0b8031c9, 0x0cc00000, 0x00000000, 0x0c7ff640, 0x04001249,
+	0x0ba0c189, 0x0680020c, 0x0680080c, 0x064e020a, 0x0200a30a,
+	0x06c0004a, 0x060e020a, 0x0ba101c9, 0x04001249, 0x0cc00000,
+	0x00000000, 0x0540134d, 0x0540138e, 0x07801d48, 0x0ac04209,
+	0x06800008, 0x07000448, 0x04001451, 0x09401348, 0x0aab4008,
+	0x0680020a, 0x0680020b, 0x0ba0c189, 0x068003cc, 0x06800fcc,
+	0x0aa3400b, 0x07000447, 0x0c05a7c0, 0x04001451, 0x02007287,
+	0x048ff2c7, 0x0a61800b, 0x0aa0cfcc, 0x0b614189, 0x0a6103cc,
+	0x0c7ff740, 0x0980e00e, 0x0400028b, 0x054083cf, 0x0be1004c,
+	0x094083ca, 0x06c0000f, 0x060e020f, 0x0aeb800c, 0x0440130c,
+	0x0ba0c1c9, 0x0cc00000, 0x00000000, 0x0c7ff6c0, 0x04001249,
+	0x0b210408, 0x00000000, 0x0fc10240, 0x04410208, 0x0cc00000,
+	0x0f800208, 0x0c059e80, 0x080c2301, 0x04001347, 0x0fc081c0,
+	0x0c059d80, 0x080c2301, 0x0c059d00, 0x080c2301, 0x0d07ff0d,
+	0x0fc011c0, 0x0fc051c0, 0x0cc00000, 0x0fc0f1c0, 0x07803c47,
+	0x07803c88, 0x0780174b, 0x07800a4d, 0x07800a8e, 0x07802c49,
+	0x07803a4a, 0x0780390c, 0x07803e8f, 0x07803ed0, 0x07803e11,
+	0x0a409247, 0x0a408288, 0x0a40730b, 0x0a4063cd, 0x0a40540e,
+	0x00000000, 0x07800a07, 0x0a402447, 0x0c7825c0, 0x06800007,
+	0x07c07087, 0x07803bc7, 0x09807087, 0x07c03bc7, 0x069fffc7,
+	0x07c03c49, 0x07c03c8a, 0x07c0174c, 0x07c00a4f, 0x07c00a90,
+	0x07c00a11, 0x0a83f207, 0x0688000a, 0x0c056c80, 0x06c0000a,
+	0x068c000a, 0x06c0470a, 0x06804009, 0x0c0564c0, 0x06b0400b,
+	0x0680044a, 0x06031e0a, 0x0649ce09, 0x0aa10009, 0x00000000,
+	0x0809ce00, 0x08007401, 0x06431e0a, 0x0bee804a, 0x00000000,
+	0x07803a47, 0x0a634047, 0x07807187, 0x06804089, 0x054031c7,
+	0x020091c9, 0x07000247, 0x091011c7, 0x020091c9, 0x0740024a,
+	0x04001249, 0x06801fca, 0x0740024a, 0x07c0178a, 0x07807047,
+	0x07c07187, 0x068003ca, 0x06031e0a, 0x0649ce09, 0x0aa10009,
+	0x00000000, 0x0809ce00, 0x08007401, 0x06431e09, 0x0bee8049,
+	0x00000000, 0x0649ce09, 0x0a6dc009, 0x00000000, 0x0c062a00,
+	0x00000000, 0x0649c007, 0x0bef7fc7, 0x07803a47, 0x0a60c047,
+	0x0c780000, 0x00800000, 0x068000c7, 0x0609c007, 0x08007401,
+	0x0c062740, 0x0680001b, 0x0649c007, 0x0bef7fc7, 0x07802c47,
+	0x07803a48, 0x095101c8, 0x07803908, 0x097071c8, 0x07802308,
+	0x09021208, 0x097e11c8, 0x0609c107, 0x07803d07, 0x07802108,
+	0x095e11c8, 0x07800688, 0x094c11c8, 0x07803cc8, 0x09102208,
+	0x095a21c8, 0x07803d48, 0x096101c8, 0x0609c207, 0x07803d87,
+	0x07803dc8, 0x096101c8, 0x0609c307, 0x07803e07, 0x07803e48,
+	0x096101c8, 0x0609c407, 0x07803e87, 0x07803ec8, 0x096101c8,
+	0x0609c507, 0x07801ac7, 0x07801a88, 0x096101c8, 0x0609c607,
+	0x07800d07, 0x0609ca07, 0x078009c7, 0x07800988, 0x09610207,
+	0x0609d108, 0x06800047, 0x0609c007, 0x08007401, 0x06800007,
+	0x06800008, 0x06804009, 0x04001249, 0x07400248, 0x040011c7,
+	0x0baf8607, 0x04008249, 0x0680001b, 0x0649c008, 0x0befbfc8,
+	0x091081c8, 0x07c03187, 0x092081c8, 0x07c07047, 0x093081c8,
+	0x07803cc8, 0x09408207, 0x07c03cc8, 0x06800007, 0x07c071c7,
+	0x07c07207, 0x0649c107, 0x07c078c7, 0x058101c7, 0x07c07907,
+	0x0649c407, 0x07c07947, 0x058101c7, 0x07c07987, 0x07803cc8,
+	0x09008208, 0x07802307, 0x090211c7, 0x054011c7, 0x034081c8,
+	0x07803907, 0x07803189, 0x0b004247, 0x00000000, 0x040001c9,
+	0x07c03907, 0x0b803207, 0x044011c8, 0x07c03907, 0x0cc00000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000
+};
diff --git a/drivers/amlogic/amports/arch/ucode/h264/gxm_h264list_linux.h b/drivers/amlogic/amports/arch/ucode/h264/gxm_h264list_linux.h
new file mode 100644
index 0000000..80d76d3
--- /dev/null
+++ b/drivers/amlogic/amports/arch/ucode/h264/gxm_h264list_linux.h
@@ -0,0 +1,207 @@
+static const u32 MicroCode[] __initconst = {
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x06bfff40, 0x06032400, 0x00400000, 0x0c780000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x0cc00000, 0x00400000, 0x0c780080,
+	0x06431e07, 0x09027207, 0x0a668048, 0x068fdfca, 0x06fcffca,
+	0x064e0408, 0x02808288, 0x09110287, 0x064c0909, 0x0ac0924a,
+	0x0b80324a, 0x0c7801c0, 0x09808688, 0x0400128a, 0x098083c8,
+	0x0a40324a, 0x0440128a, 0x098086c8, 0x0aa1000a, 0x09308287,
+	0x0a60c00a, 0x0400128a, 0x09808388, 0x0b80324a, 0x00000000,
+	0x098081c8, 0x0c780500, 0x060e0408, 0x0a614248, 0x00000000,
+	0x0c009240, 0x00000000, 0x0c780380, 0x0a62c288, 0x06431f20,
+	0x06433f21, 0x0e000860, 0x00000000, 0x00000000, 0x0f000800,
+	0x06031f20, 0x0f010840, 0x0c780100, 0x06033f21, 0x0c780080,
+	0x00000000, 0x08031e00, 0x0cc00000, 0x00400000, 0x0680400f,
+	0x0680a00e, 0x0680ec0d, 0x0680f60c, 0x0780704b, 0x0680000a,
+	0x06800009, 0x06800008, 0x0780776f, 0x07807780, 0x09610bc0,
+	0x0780736e, 0x078020c0, 0x06800041, 0x0342d001, 0x07807300,
+	0x06800081, 0x0b831040, 0x05403c4a, 0x02031c4f, 0x04001c71,
+	0x07000c44, 0x06800c00, 0x0bc25004, 0x09042004, 0x068000c1,
+	0x0a422040, 0x09101004, 0x04001c31, 0x02030030, 0x02030030,
+	0x07000c2c, 0x04001c30, 0x07000c00, 0x09610b00, 0x04005c71,
+	0x07000c6b, 0x0b003bab, 0x00000000, 0x0242bb6b, 0x0202a209,
+	0x05402c2a, 0x02030c0e, 0x07400c0a, 0x068000c0, 0x04001c30,
+	0x07400c00, 0x04001c30, 0x07400c2b, 0x0581002b, 0x04001c30,
+	0x07400c00, 0x0ac05bec, 0x0203024d, 0x07400c2a, 0x04001249,
+	0x0c780100, 0x0203020c, 0x07400c2a, 0x04001208, 0x0400128a,
+	0x0b8d52ca, 0x02000209, 0x07c070c9, 0x0cc00000, 0x07c07100,
+	0x0aa14040, 0x06800047, 0x06800006, 0x0c780100, 0x00000000,
+	0x06800007, 0x06800046, 0x05403c4a, 0x02031c4f, 0x04001c71,
+	0x07000c44, 0x09101004, 0x04001c31, 0x02030030, 0x02030030,
+	0x07000c2c, 0x04001c30, 0x07000c00, 0x09610b00, 0x04005c71,
+	0x07000c6b, 0x0b003bab, 0x00000000, 0x0242bb6b, 0x0be60404,
+	0x0a25c104, 0x0202a209, 0x05402c2a, 0x02030c0e, 0x07400c0a,
+	0x06800040, 0x04001c30, 0x07400c00, 0x0540102b, 0x020001c0,
+	0x04001c30, 0x07400c00, 0x05810000, 0x04001c30, 0x07400c00,
+	0x0ac05bec, 0x0203024d, 0x07400c2a, 0x04001249, 0x0c780100,
+	0x0203020c, 0x07400c2a, 0x04001208, 0x0be60804, 0x0a25c204,
+	0x0202a209, 0x05402c2a, 0x02030c0e, 0x07400c0a, 0x06800080,
+	0x04001c30, 0x07400c00, 0x0540102b, 0x02000180, 0x04001c30,
+	0x07400c00, 0x05810000, 0x04001c30, 0x07400c00, 0x0ac05bec,
+	0x0203024d, 0x07400c2a, 0x04001249, 0x0c780100, 0x0203020c,
+	0x07400c2a, 0x04001208, 0x0400128a, 0x0b8be2ca, 0x02000209,
+	0x07c070c9, 0x0cc00000, 0x07c07100, 0x0680400f, 0x0680a00e,
+	0x0680ec0d, 0x0780704b, 0x0680000a, 0x07807109, 0x07807300,
+	0x0ba6c080, 0x05403c4a, 0x02031c4f, 0x04001c71, 0x07000c44,
+	0x09082004, 0x0a6440c0, 0x04006c71, 0x07000c6b, 0x05402c09,
+	0x02030c0e, 0x07400c0a, 0x068001c0, 0x04001c30, 0x07400c00,
+	0x04001c30, 0x07400c2b, 0x0581002b, 0x04001c30, 0x07400c00,
+	0x0203024d, 0x07400c09, 0x04001249, 0x0400128a, 0x0b8e92ca,
+	0x0cc00000, 0x07c07149, 0x0aa14040, 0x06800047, 0x06800006,
+	0x0c780100, 0x00000000, 0x06800007, 0x06800046, 0x05403c4a,
+	0x02031c4f, 0x04001c71, 0x07000c44, 0x04006c71, 0x07000c6b,
+	0x0a244404, 0x05402c09, 0x02030c0e, 0x07400c0a, 0x06800140,
+	0x04001c30, 0x07400c00, 0x0540102b, 0x020001c0, 0x04001c30,
+	0x07400c00, 0x05810000, 0x04001c30, 0x07400c00, 0x0203024d,
+	0x07400c09, 0x04001249, 0x0a244804, 0x05402c09, 0x02030c0e,
+	0x07400c0a, 0x06800180, 0x04001c30, 0x07400c00, 0x0540102b,
+	0x02000180, 0x04001c30, 0x07400c00, 0x05810000, 0x04001c30,
+	0x07400c00, 0x0203024d, 0x07400c09, 0x04001249, 0x0400128a,
+	0x0b8d72ca, 0x0cc00000, 0x07c07149, 0x0680ec0f, 0x0680f60e,
+	0x0780710a, 0x078070c9, 0x06800008, 0x0240a24a, 0x0200e28e,
+	0x0a60c009, 0x0cc00000, 0x00000000, 0x070003c0, 0x07400380,
+	0x040013cf, 0x0400138e, 0x04001208, 0x0b8fb248, 0x0cc00000,
+	0x00000000, 0x0680ec0f, 0x0680f60e, 0x0780710a, 0x078070c9,
+	0x06800008, 0x0240a24a, 0x0200f24f, 0x0a60c00a, 0x0cc00000,
+	0x00000000, 0x07000380, 0x074003c0, 0x040013cf, 0x0400138e,
+	0x04001208, 0x0b8fb288, 0x0cc00000, 0x00000000, 0x0680ec0f,
+	0x0680f60e, 0x0780710a, 0x07807149, 0x0200f28f, 0x0200e28e,
+	0x0a40324a, 0x0cc00000, 0x00000000, 0x070003c0, 0x07400380,
+	0x040013cf, 0x0400138e, 0x0400128a, 0x0b8fb24a, 0x0cc00000,
+	0x00000000, 0x0b60808e, 0x0c780e00, 0x0680a00c, 0x0680400b,
+	0x0680000a, 0x0a83438a, 0x0400124a, 0x0202f28f, 0x07000bee,
+	0x0540222e, 0x0200820c, 0x04002208, 0x0700022d, 0x04001208,
+	0x07000200, 0x09610b40, 0x0a814389, 0x0202c24f, 0x07000b2b,
+	0x0540222b, 0x0200820c, 0x04002208, 0x0700022a, 0x04001208,
+	0x07000200, 0x09610a80, 0x0a60c00d, 0x0b807aad, 0x0c7800c0,
+	0x0ac05aad, 0x00000000, 0x07400b2e, 0x04000bab, 0x04000b6a,
+	0x04001249, 0x0c7ffb40, 0x07807300, 0x0b644080, 0x0a24004a,
+	0x0540222e, 0x0200820c, 0x04002208, 0x07000207, 0x0a22c047,
+	0x04401b6f, 0x07000b6c, 0x0540222c, 0x0200820c, 0x04002208,
+	0x07000207, 0x0be10047, 0x00000000, 0x07400b6e, 0x04000bac,
+	0x07400bee, 0x0400128a, 0x0c7ff340, 0x0cc00000, 0x00000000,
+	0x0b60808e, 0x0c781680, 0x0680a00c, 0x0680400b, 0x0680000a,
+	0x0a85638a, 0x0400124a, 0x0202f28f, 0x07000bee, 0x0540222e,
+	0x0200820c, 0x07000207, 0x04001208, 0x07000206, 0x054031c7,
+	0x020071cb, 0x09002146, 0x0a6280c5, 0x00000000, 0x040011c7,
+	0x070001c4, 0x09101c44, 0x040011c7, 0x02007c47, 0x02007c47,
+	0x0c780100, 0x00000000, 0x02007147, 0x02007147, 0x070001ed,
+	0x040011c7, 0x070001c0, 0x09610b40, 0x0a825389, 0x0202c24f,
+	0x07000b2b, 0x0540222b, 0x0200820c, 0x07000207, 0x04001208,
+	0x07000206, 0x054031c7, 0x020071cb, 0x09002146, 0x0a6280c5,
+	0x00000000, 0x040011c7, 0x070001c4, 0x09101c44, 0x040011c7,
+	0x02007c47, 0x02007c47, 0x0c780100, 0x00000000, 0x02007147,
+	0x02007147, 0x070001ea, 0x040011c7, 0x070001c0, 0x09610a80,
+	0x0a60c00d, 0x0b807aad, 0x0c7800c0, 0x0ac05aad, 0x00000000,
+	0x07400b2e, 0x04000bab, 0x04000b6a, 0x04001249, 0x0c7ff700,
+	0x07807300, 0x0b644080, 0x0a24004a, 0x0540222e, 0x0200820c,
+	0x04002208, 0x07000207, 0x0a22c047, 0x04401b6f, 0x07000b6c,
+	0x0540222c, 0x0200820c, 0x04002208, 0x07000207, 0x0be10047,
+	0x00000000, 0x07400b6e, 0x04000bac, 0x07400bee, 0x0400128a,
+	0x0c7feac0, 0x0cc00000, 0x00000000, 0x0400120a, 0x0200720f,
+	0x070001c9, 0x05402189, 0x0200618c, 0x04002186, 0x07000185,
+	0x09001005, 0x0a4092c0, 0x04401c47, 0x07000c40, 0x074001c0,
+	0x04401208, 0x0acfc288, 0x040001f1, 0x0cc00000, 0x074001c9,
+	0x04001208, 0x0b8ef388, 0x0cc00000, 0x00000000, 0x0780710e,
+	0x0440134e, 0x0680a00c, 0x0680000a, 0x0b60808e, 0x0c7804c0,
+	0x0200928f, 0x07000248, 0x054021c8, 0x020071cc, 0x040021c7,
+	0x070001c6, 0x0be1804a, 0x0be24046, 0x00000000, 0x0c07f700,
+	0x0680004b, 0x0c780140, 0x0a210046, 0x00000000, 0x0c07f5c0,
+	0x0680000b, 0x0400128a, 0x0b8ef34a, 0x0cc00000, 0x00000000,
+	0x06800008, 0x0700040a, 0x0200720f, 0x070001c9, 0x05402189,
+	0x020061af, 0x04001186, 0x07000185, 0x09041005, 0x0a418a80,
+	0x04001186, 0x07000185, 0x04001186, 0x07000180, 0x09610140,
+	0x0a412305, 0x0a80e348, 0x0ac07348, 0x00000000, 0x0200734f,
+	0x0a80a34a, 0x0400128a, 0x0440120a, 0x0200720f, 0x04401c47,
+	0x07000c40, 0x074001c0, 0x04401208, 0x0acfc348, 0x040001f1,
+	0x074001c9, 0x0cc00000, 0x0740040a, 0x04001208, 0x0b8e0288,
+	0x0cc00000, 0x00000000, 0x0680a02f, 0x078020c0, 0x06800041,
+	0x0342e001, 0x0780736d, 0x07807300, 0x0b614080, 0x00000000,
+	0x05401bae, 0x05401b6d, 0x04001b6d, 0x0242cbad, 0x04000aed,
+	0x0680000d, 0x0680002a, 0x07000380, 0x0400138e, 0x0aa10000,
+	0x0aa30040, 0x0aa50080, 0x0c780680, 0x07000380, 0x0400138e,
+	0x04001000, 0x0242b02b, 0x0b411b2b, 0x0400032b, 0x0202bbab,
+	0x0c780380, 0x0400032b, 0x07000380, 0x0400138e, 0x04001000,
+	0x0202b02b, 0x0b808b6b, 0x0400032b, 0x0242bbab, 0x0c780140,
+	0x0400032b, 0x0680006a, 0x0700038c, 0x0400138e, 0x0c07ec40,
+	0x00000000, 0x0c7ff880, 0x0400134d, 0x0cc00000, 0x00000000,
+	0x0c077280, 0x00000000, 0x0c079600, 0x00000000, 0x07802080,
+	0x0aa64180, 0x00000000, 0x0c07ae80, 0x00000000, 0x07807140,
+	0x07c07240, 0x0680ec0f, 0x0780710e, 0x0680004d, 0x0c07b580,
+	0x00000000, 0x0680ec0f, 0x0780714e, 0x07807100, 0x0200f00f,
+	0x0240e00e, 0x0680000d, 0x0c07b380, 0x00000000, 0x0680ec0f,
+	0x0680c00e, 0x0c07ed80, 0x06807250, 0x0cc00000, 0x00000000,
+	0x0680ec0f, 0x078070ce, 0x0680004d, 0x0c07bf80, 0x00000000,
+	0x0680f60f, 0x0780710e, 0x078070c0, 0x0240e00e, 0x0680000d,
+	0x0c07bdc0, 0x00000000, 0x0680ec0f, 0x0780714e, 0x07807100,
+	0x0200f00f, 0x0240e00e, 0x0680000d, 0x0c07ad00, 0x00000000,
+	0x0c07a3c0, 0x00000000, 0x0c079ec0, 0x00000000, 0x0c07a740,
+	0x00000000, 0x07807140, 0x07c07240, 0x07c07280, 0x07807300,
+	0x0b618080, 0x00000000, 0x0c07d4c0, 0x0680ec0f, 0x0c07d440,
+	0x0680f60f, 0x078070c0, 0x07807101, 0x07807170, 0x0ba280b0,
+	0x0aa0c000, 0x0a802040, 0x0c7801c0, 0x0680f60f, 0x0400138f,
+	0x070003c0, 0x07000381, 0x07400380, 0x074003c1, 0x0680ec0f,
+	0x0680c00e, 0x0c07dfc0, 0x06807250, 0x0680f60f, 0x0680d08e,
+	0x0c07dec0, 0x06807290, 0x0cc00000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000
+};
diff --git a/drivers/amlogic/amports/arch/ucode/h264/gxm_h264mmc_linux.h b/drivers/amlogic/amports/arch/ucode/h264/gxm_h264mmc_linux.h
new file mode 100644
index 0000000..f99eeb4
--- /dev/null
+++ b/drivers/amlogic/amports/arch/ucode/h264/gxm_h264mmc_linux.h
@@ -0,0 +1,207 @@
+static const u32 MicroCode[] __initconst = {
+	0x06bfff40, 0x06032400, 0x00400000, 0x0c780000, 0x00000000,
+	0x09027207, 0x0a6140c8, 0x00000000, 0x0c00d840, 0x00000000,
+	0x0c780540, 0x0a614148, 0x00000000, 0x0c0038c0, 0x00000000,
+	0x0c780400, 0x0a614188, 0x00000000, 0x0c006c80, 0x00000000,
+	0x0c7802c0, 0x0a6141c8, 0x00000000, 0x0c0079c0, 0x00000000,
+	0x0c780180, 0x0a628208, 0x00000000, 0x0c000c40, 0x00000000,
+	0x00000000, 0x08031e00, 0x0cc00000, 0x00400000, 0x0c7ff8c0,
+	0x06431e07, 0x0a62c288, 0x06431f20, 0x06433f21, 0x0e000860,
+	0x00000000, 0x00000000, 0x0f000800, 0x06031f20, 0x0f010840,
+	0x0c7ffc80, 0x06033f21, 0x078077c5, 0x04002c4e, 0x07400c45,
+	0x07807800, 0x04003c4e, 0x07400c40, 0x0cc00000, 0x09610140,
+	0x07807846, 0x04004c4e, 0x07400c46, 0x07807880, 0x04005c4e,
+	0x07400c40, 0x0cc00000, 0x09610180, 0x0680400f, 0x0780704e,
+	0x040013cf, 0x06800000, 0x07c07080, 0x07c071c0, 0x07c07200,
+	0x070003c1, 0x0940b040, 0x074003c1, 0x0d07ff4e, 0x040083cf,
+	0x0cc00000, 0x00000000, 0x0649c900, 0x05808000, 0x05408000,
+	0x0609c900, 0x078031d0, 0x0680400f, 0x0780718e, 0x0540338e,
+	0x0200e38f, 0x04001c4e, 0x07000c4d, 0x078072c0, 0x090a1040,
+	0x090c1c00, 0x02c0cc01, 0x0780730b, 0x0aa1000b, 0x0aa7404b,
+	0x0c780b40, 0x00000000, 0x0980d00d, 0x0c07f340, 0x0944134c,
+	0x0a22008d, 0x09481350, 0x04004c4e, 0x07000c46, 0x04005c4e,
+	0x07000c40, 0x0c780d00, 0x09610180, 0x0c07f2c0, 0x0980d28d,
+	0x07000380, 0x09c00300, 0x07400380, 0x07807200, 0x02000300,
+	0x07c07200, 0x0649cf00, 0x0be11000, 0x06800040, 0x078071c0,
+	0x04001000, 0x0c780940, 0x07c071c0, 0x0980d04d, 0x0c07eec0,
+	0x0946134c, 0x0a22004d, 0x094a1350, 0x04002c4e, 0x07000c45,
+	0x04003c4e, 0x07000c40, 0x0c780680, 0x09610140, 0x0c07ea40,
+	0x0980d28d, 0x07000380, 0x09800300, 0x0c7ff9c0, 0x07400380,
+	0x0980d00d, 0x0980d04d, 0x0944134c, 0x0946134c, 0x0c07e7c0,
+	0x09481350, 0x0c07e940, 0x094a1350, 0x0980d28d, 0x07807200,
+	0x02000300, 0x07c07200, 0x0649cf00, 0x0be11000, 0x06800040,
+	0x078071c0, 0x04001000, 0x07c071c0, 0x04006c4e, 0x07807340,
+	0x07400c40, 0x04007c4e, 0x07400c51, 0x094c234b, 0x05801010,
+	0x05409000, 0x02c0d00d, 0x07801e40, 0x07000381, 0x09501040,
+	0x0400100e, 0x07000000, 0x0be100c0, 0x00000000, 0x07802080,
+	0x09523040, 0x07400381, 0x07802fc0, 0x09584340, 0x0900200d,
+	0x0a6100c0, 0x0be0c30d, 0x06800000, 0x09402340, 0x09c0d20d,
+	0x04001c4e, 0x0ac03185, 0x0c780140, 0x07400c4d, 0x0980d20d,
+	0x0c780080, 0x07400c4d, 0x0649cf00, 0x0a2440c0, 0x0900200d,
+	0x0680000b, 0x0940634b, 0x07400c4d, 0x0c002080, 0x0780718d,
+	0x040012cb, 0x0aa1c00b, 0x06804080, 0x0609c000, 0x0609ce00,
+	0x0649cf00, 0x0be08080, 0x0c780000, 0x06800040, 0x07c01d80,
+	0x0cc00000, 0x00000000, 0x0680400f, 0x0780704e, 0x078020c0,
+	0x06800041, 0x0340d001, 0x0780734c, 0x06803fcb, 0x06800008,
+	0x05403c48, 0x02031c4f, 0x04001c71, 0x07000c70, 0x0a230330,
+	0x0be2cc30, 0x04005c71, 0x07000c41, 0x0b803301, 0x00000000,
+	0x02401341, 0x0aa0ffcb, 0x0b80404a, 0x00000000, 0x04000281,
+	0x040002c8, 0x04001208, 0x0b8ef388, 0x0cc00000, 0x00000000,
+	0x0780720d, 0x0780390c, 0x0b82230d, 0x0c07f840, 0x00000000,
+	0x0400024a, 0x0aa7bfcb, 0x0680400f, 0x05403c4b, 0x02031c4f,
+	0x04001c71, 0x07000c70, 0x06800000, 0x09404c00, 0x07400c70,
+	0x07807200, 0x04401000, 0x07c07200, 0x04401071, 0x07000040,
+	0x09005000, 0x06800041, 0x03401001, 0x07807080, 0x03000040,
+	0x07c07080, 0x06810000, 0x0bc09030, 0x078071c0, 0x04401000,
+	0x07c071c0, 0x0649cf00, 0x0be11000, 0x0be0c080, 0x0c07f080,
+	0x0a8e3289, 0x0cc00000, 0x00000000, 0x0680400f, 0x0780704e,
+	0x06803fcd, 0x0680000c, 0x06800008, 0x05403c48, 0x02031c4f,
+	0x04001c71, 0x07000c70, 0x06810000, 0x0a00e030, 0x04001c71,
+	0x09101030, 0x02031031, 0x02031031, 0x07000c41, 0x04001c71,
+	0x07000c40, 0x09610040, 0x0aa0ffcd, 0x0b80404c, 0x00000000,
+	0x04000301, 0x04000348, 0x04001208, 0x0b8ec388, 0x0cc00000,
+	0x00000000, 0x0649c701, 0x0aa24001, 0x04401041, 0x0809c700,
+	0x05403041, 0x020013c1, 0x04001041, 0x07000070, 0x09c302f0,
+	0x07400070, 0x0649c801, 0x0aa24001, 0x04401041, 0x0809c800,
+	0x05403041, 0x020013c1, 0x04001041, 0x07000070, 0x09c302f0,
+	0x07400070, 0x0cc00000, 0x00000000, 0x0680400f, 0x05403c4d,
+	0x02031c4f, 0x04001c71, 0x07000c40, 0x06800081, 0x09542001,
+	0x07400c40, 0x04401c31, 0x07000c04, 0x0649cf30, 0x0a20c830,
+	0x05808044, 0x0be20041, 0x07801c01, 0x0aa10001, 0x0a216004,
+	0x06800001, 0x07c01c01, 0x05809040, 0x0a218041, 0x06800001,
+	0x09523001, 0x07400c40, 0x0c781700, 0x044012cb, 0x0c07f400,
+	0x00000000, 0x0649c001, 0x0bef7fc1, 0x09101044, 0x0a60c00b,
+	0x05409041, 0x0809d100, 0x09123c04, 0x0540210b, 0x03430130,
+	0x0649d104, 0x02c04c04, 0x0609d104, 0x0940504d, 0x09184c00,
+	0x0aa583f0, 0x068001c4, 0x0aa50030, 0x06800004, 0x0b648170,
+	0x04404130, 0x0649cf04, 0x0be24084, 0x0b6380f0, 0x04002130,
+	0x0aa30070, 0x06800144, 0x0b6280b0, 0x06800184, 0x0c780200,
+	0x068001c4, 0x04401131, 0x07000104, 0x0580c104, 0x0a20c044,
+	0x06800144, 0x06800184, 0x094a3044, 0x07802130, 0x0aa0c030,
+	0x00000000, 0x09801201, 0x090c2c00, 0x0a60c0b0, 0x00000000,
+	0x09801201, 0x04401c71, 0x07000c70, 0x090a2c30, 0x09542070,
+	0x078017f0, 0x09583070, 0x06803230, 0x02030370, 0x07000c30,
+	0x09610070, 0x06800030, 0x02030370, 0x07000c04, 0x0aa1c00b,
+	0x0aa2404b, 0x0aa3408b, 0x0aa3c0cb, 0x0aa4c10b, 0x0aa5414b,
+	0x00000000, 0x0609ca04, 0x0c780580, 0x0609c101, 0x0649ca30,
+	0x09610c04, 0x0609ca30, 0x0c780440, 0x0609c201, 0x0609cb04,
+	0x0c780380, 0x0609c301, 0x0649cb30, 0x09610c04, 0x0609cb30,
+	0x0c780240, 0x0609c401, 0x0609cc04, 0x0c780180, 0x0609c501,
+	0x0649cc30, 0x09610c04, 0x0609cc30, 0x0609c601, 0x0649cf01,
+	0x0be09001, 0x0be100c0, 0x078071c0, 0x04401000, 0x07c071c0,
+	0x0cc00000, 0x00000000, 0x0680000b, 0x07803d0d, 0x0a21880d,
+	0x0780318c, 0x07801b8d, 0x0b00334c, 0x00000000, 0x07801b8c,
+	0x078071cd, 0x0649cf00, 0x0be0d000, 0x0b01d30d, 0x0c7800c0,
+	0x0680004c, 0x0b81330d, 0x00000000, 0x0c07d080, 0x00000000,
+	0x0a617fcd, 0x0c079a00, 0x00000000, 0x0c780300, 0x00000000,
+	0x07800b00, 0x0400004c, 0x09401040, 0x07c00b01, 0x05810041,
+	0x0c07da00, 0x07c00ac1, 0x040012cb, 0x0aa0818b, 0x0c7ff840,
+	0x0aa1400b, 0x06800080, 0x0950800b, 0x0609c000, 0x0609ce00,
+	0x0cc00000, 0x00000000, 0x07800b0c, 0x0bee004c, 0x07802fcc,
+	0x0aa0c00c, 0x0780210c, 0x0a6d004c, 0x078071cc, 0x0bac808c,
+	0x0c07c880, 0x00000000, 0x0aabffcd, 0x07800b00, 0x07800af0,
+	0x09610030, 0x04002000, 0x0b0e000c, 0x0c7ffa40, 0x00000000,
+	0x0680000b, 0x078071cd, 0x0aa4400d, 0x0c07c540, 0x00000000,
+	0x0a61bfcd, 0x00000000, 0x0c078e80, 0x00000000, 0x0c780280,
+	0x00000000, 0x07807180, 0x0a807340, 0x00000000, 0x0c07cf00,
+	0x00000000, 0x040012cb, 0x0aa0818b, 0x0c7ffbc0, 0x0aa1c00b,
+	0x06800080, 0x0950800b, 0x0609c000, 0x0609ce00, 0x0c7ffa40,
+	0x0680000b, 0x0cc00000, 0x00000000, 0x0680400f, 0x0780704e,
+	0x06800008, 0x06800007, 0x07807186, 0x078072c0, 0x0a225800,
+	0x07c07087, 0x05403c46, 0x02031c4f, 0x07000c70, 0x09005c30,
+	0x06800041, 0x03401c01, 0x07c07081, 0x05403c48, 0x02031c4f,
+	0x04001c71, 0x07000c70, 0x0a23c0f0, 0x0a406188, 0x06800000,
+	0x09444c00, 0x07400c70, 0x0c780280, 0x06800047, 0x06800000,
+	0x09406c00, 0x07400c70, 0x06810000, 0x0bc04030, 0x078071c0,
+	0x04401000, 0x07c071c0, 0x04001208, 0x0b8ec388, 0x0cc00000,
+	0x07c07207, 0x0680400f, 0x0780704e, 0x06800008, 0x06800007,
+	0x07807186, 0x05403c48, 0x02031c4f, 0x04001c71, 0x07000c70,
+	0x06810000, 0x0a007030, 0x0a805188, 0x00000000, 0x09c302b0,
+	0x0c7800c0, 0x07400c70, 0x06800047, 0x04001208, 0x0b8f3388,
+	0x0cc00000, 0x07c071c7, 0x0400138e, 0x0780734d, 0x0240e38d,
+	0x07807300, 0x0b610080, 0x00000000, 0x0200e34e, 0x0400138e,
+	0x06800008, 0x07807109, 0x0680a00a, 0x0a403209, 0x0cc00000,
+	0x00000000, 0x05402108, 0x0200410a, 0x04002c44, 0x07000c40,
+	0x04001c71, 0x07000c41, 0x09610001, 0x0a42a380, 0x07000105,
+	0x06804031, 0x05403005, 0x02006031, 0x04001186, 0x07000187,
+	0x04001c44, 0x07000c70, 0x09002030, 0x0aa14040, 0x0aa18080,
+	0x06800000, 0x0c780180, 0x094421c0, 0x0c780100, 0x09c07087,
+	0x0c780080, 0x09c070c7, 0x0be4c307, 0x06800000, 0x094021c0,
+	0x07807200, 0x04401000, 0x07c07200, 0x04401046, 0x07000040,
+	0x09005000, 0x06800041, 0x03401001, 0x07807080, 0x03000040,
+	0x07c07080, 0x06810000, 0x0bc04007, 0x078071c0, 0x04401000,
+	0x07c071c0, 0x0649cf00, 0x0be14080, 0x07400187, 0x0be0d000,
+	0x04001208, 0x0b8ce248, 0x0cc00000, 0x00000000, 0x07807108,
+	0x07807149, 0x0680a00a, 0x0a403209, 0x0cc00000, 0x00000000,
+	0x05402108, 0x0200410a, 0x04002c44, 0x07000c40, 0x04001c71,
+	0x07000c41, 0x09610001, 0x0a42a380, 0x07000105, 0x06804031,
+	0x05403005, 0x02006031, 0x04001186, 0x07000187, 0x04001c44,
+	0x07000c70, 0x09002030, 0x0aa14040, 0x0aa1c080, 0x06800000,
+	0x0c780200, 0x094441c0, 0x09c07087, 0x0c780140, 0x09c07107,
+	0x09c070c7, 0x0c780080, 0x09c07147, 0x0be4c307, 0x06800000,
+	0x094021c0, 0x07807200, 0x04401000, 0x07c07200, 0x04401046,
+	0x07000040, 0x09005000, 0x06800041, 0x03401001, 0x07807080,
+	0x03000040, 0x07c07080, 0x06810000, 0x0bc04007, 0x078071c0,
+	0x04401000, 0x07c071c0, 0x0cc00000, 0x07400187, 0x04001208,
+	0x0b8ce248, 0x0cc00000, 0x00000000, 0x0680000d, 0x07807300,
+	0x0b60c080, 0x00000000, 0x0680004d, 0x07807108, 0x07807149,
+	0x0680a00a, 0x0a403209, 0x0cc00000, 0x00000000, 0x05402108,
+	0x0200410a, 0x04002c44, 0x07000c40, 0x04001c71, 0x07000c41,
+	0x09610001, 0x03800340, 0x0a41c380, 0x07000105, 0x06804031,
+	0x05403005, 0x02006031, 0x04001186, 0x07000187, 0x0a24c307,
+	0x06800000, 0x094061c0, 0x07807200, 0x04401000, 0x07c07200,
+	0x04401046, 0x07000040, 0x09005000, 0x06800041, 0x03401001,
+	0x07807080, 0x03000040, 0x07c07080, 0x06810000, 0x0bc04007,
+	0x078071c0, 0x04401000, 0x07c071c0, 0x0cc00000, 0x07400187,
+	0x04001208, 0x0b8db248, 0x0cc00000, 0x00000000, 0x0400134d,
+	0x0780734c, 0x0240d34c, 0x07807300, 0x0b610080, 0x00000000,
+	0x0200d30d, 0x0400134d, 0x06800008, 0x07807109, 0x0680a00a,
+	0x0a403209, 0x0cc00000, 0x00000000, 0x05402108, 0x0200410a,
+	0x04002c44, 0x07000c40, 0x04001c71, 0x07000c41, 0x09610001,
+	0x0a417340, 0x07000105, 0x06804031, 0x05403005, 0x02006031,
+	0x04001186, 0x07000187, 0x04001c44, 0x07000c70, 0x09002030,
+	0x0aa14040, 0x0aa18080, 0x068000c0, 0x0c780180, 0x094821c0,
+	0x0c780100, 0x09807107, 0x0c780080, 0x09807147, 0x04006c46,
+	0x07400c4e, 0x0cc00000, 0x07400187, 0x04001208, 0x0b8e1248,
+	0x0cc00000, 0x00000000, 0x0440138e, 0x0680000d, 0x07807300,
+	0x0b60c080, 0x00000000, 0x0680004d, 0x07807108, 0x07807149,
+	0x0680a00a, 0x0a403209, 0x0cc00000, 0x00000000, 0x05402108,
+	0x0200410a, 0x04002c44, 0x07000c40, 0x04001c71, 0x07000c41,
+	0x09610001, 0x03800340, 0x0b01b380, 0x07000105, 0x06804031,
+	0x05403005, 0x02006031, 0x04001186, 0x07000187, 0x0a250307,
+	0x06800000, 0x094061c0, 0x07807200, 0x04401000, 0x07c07200,
+	0x04401046, 0x07000040, 0x09005000, 0x06800041, 0x03401001,
+	0x07807080, 0x03000040, 0x07c07080, 0x06810000, 0x0bc04007,
+	0x078071c0, 0x04401000, 0x07c071c0, 0x07400187, 0x04001208,
+	0x0b8dc248, 0x0cc00000, 0x00000000, 0x06800010, 0x078020b1,
+	0x0a6240b1, 0x0649cf31, 0x0a21d031, 0x07800bb1, 0x0aa14031,
+	0x0c07aa80, 0x07c00b90, 0x0c07a300, 0x00000000, 0x0649cf31,
+	0x0be100b1, 0x078072f1, 0x09005031, 0x0a638140, 0x06800011,
+	0x0c07a800, 0x00000000, 0x0780e100, 0x0be18080, 0x09001400,
+	0x0c079fc0, 0x00000000, 0x0c781800, 0x00000000, 0x0c07af40,
+	0x00000000, 0x0c781700, 0x06800000, 0x090a2071, 0x0780e130,
+	0x0a858001, 0x0a857030, 0x0680e10f, 0x070003c0, 0x0aa2c040,
+	0x0aa3c080, 0x0aa4c0c0, 0x0aa68100, 0x00000000, 0x04605040,
+	0x0c500740, 0x00000000, 0x04606040, 0x0c5010c0, 0x0c781280,
+	0x04001c4f, 0x0c07af00, 0x07000c4e, 0x0c7ffc40, 0x040023cf,
+	0x04001c4f, 0x0c07be80, 0x07000c4e, 0x0c7ffb00, 0x040023cf,
+	0x04002c4f, 0x0c07cc00, 0x07000c4e, 0x04001c4f, 0x0c07d800,
+	0x07000c4d, 0x0c7ff900, 0x040033cf, 0x04001c4f, 0x07000c4e,
+	0x0c07e280, 0x00000000, 0x0c7ff780, 0x040023cf, 0x0c079a80,
+	0x00000000, 0x0c079300, 0x00000000, 0x06800007, 0x07807331,
+	0x0b250071, 0x07807770, 0x07807780, 0x09610c00, 0x07807841,
+	0x07807880, 0x09610040, 0x02401c01, 0x07c07841, 0x05810001,
+	0x07c07880, 0x078077c1, 0x07807800, 0x09610040, 0x02401c01,
+	0x07c077c1, 0x05810001, 0x07c07800, 0x0c7801c0, 0x07c07441,
+	0x07c07447, 0x07c077c7, 0x07c07807, 0x07c07847, 0x07c07887,
+	0x07c07347, 0x07c07487, 0x07c07647, 0x07c07687, 0x07c076c7,
+	0x07c07707, 0x07c07747, 0x07c07787, 0x0c7fed40, 0x040013cf,
+	0x04001c4f, 0x07000c4e, 0x0c07be00, 0x00000000, 0x06800050,
+	0x0400044e, 0x0c7feb40, 0x040023cf, 0x0680400f, 0x0780718e,
+	0x0540338e, 0x0200e38f, 0x04001c4e, 0x07000c40, 0x0a2140c0,
+	0x0c071940, 0x07c031d0, 0x0cc00000, 0x00000000, 0x078072f1,
+	0x09005031, 0x090a2071, 0x0aa10140, 0x0aa0c001, 0x0c073fc0,
+	0x00000000, 0x0649cf00, 0x0a219000, 0x0c071600, 0x07c031d0,
+	0x0c077340, 0x00000000, 0x0c780140, 0x0c077280, 0x00000000,
+	0x0c071440, 0x07c031d0, 0x0cc00000, 0x00000000
+};
diff --git a/drivers/amlogic/amports/arch/ucode/h264/gxm_h264slice_linux.h b/drivers/amlogic/amports/arch/ucode/h264/gxm_h264slice_linux.h
new file mode 100644
index 0000000..ccf6355
--- /dev/null
+++ b/drivers/amlogic/amports/arch/ucode/h264/gxm_h264slice_linux.h
@@ -0,0 +1,207 @@
+static const u32 MicroCode[] __initconst = {
+	0x07802007, 0x07802048, 0x094a21c8, 0x07c072c7, 0x07802407,
+	0x044011c7, 0x07802948, 0x02808207, 0x09021208, 0x02007207,
+	0x07c07307, 0x07802dc7, 0x0aa08047, 0x0c782e00, 0x07802007,
+	0x0a608147, 0x0c781a00, 0x07801c47, 0x0aa0c007, 0x0c781940,
+	0x00000000, 0x0649cf07, 0x0a2080c7, 0x0c781840, 0x07803940,
+	0x0a608000, 0x0c781780, 0x0780736a, 0x078074b1, 0x0a85bab1,
+	0x078072eb, 0x0780732c, 0x0780e12d, 0x0780756e, 0x07807580,
+	0x09610b80, 0x078075ef, 0x07807600, 0x09610bc0, 0x06800090,
+	0x07c031d0, 0x06801840, 0x07c072c0, 0x06800080, 0x07c07300,
+	0x06800000, 0x07c0e100, 0x07c07540, 0x07c07580, 0x07c075c0,
+	0x07c07600, 0x078074b1, 0x04001c71, 0x078020c0, 0x06800041,
+	0x0340f001, 0x044013cf, 0x028313f1, 0x0a834ab1, 0x07c07371,
+	0x07802140, 0x0a60c000, 0x0c780100, 0x07c074b1, 0x0c00a980,
+	0x00000000, 0x068000f3, 0x0c008a80, 0x07c02bf3, 0x07807187,
+	0x07807048, 0x0a403207, 0x0c7e0200, 0x00000000, 0x06800033,
+	0x07c02bf3, 0x068002c0, 0x06031e00, 0x00000000, 0x06431e00,
+	0x0befc040, 0x00000000, 0x0649cf00, 0x0a20d000, 0x06800340,
+	0x06800440, 0x06031e00, 0x0649ce00, 0x0aa10009, 0x00000000,
+	0x0809ce00, 0x08007401, 0x06431e00, 0x0bee8040, 0x00000000,
+	0x0649cf00, 0x0a20d000, 0x06800440, 0x06800340, 0x06031e00,
+	0x0649ce00, 0x0aa10009, 0x00000000, 0x0809ce00, 0x08007401,
+	0x06431e00, 0x0bee8040, 0x00000000, 0x0c7ff1c0, 0x00000000,
+	0x07c0736a, 0x07c072eb, 0x07c0732c, 0x07c0e12d, 0x07c0756e,
+	0x0581002e, 0x07c07580, 0x07c075ef, 0x0581002f, 0x07c07600,
+	0x0c009b80, 0x00000000, 0x080c3000, 0x07807748, 0x07807789,
+	0x09610209, 0x060c3208, 0x078077c8, 0x07807809, 0x09610209,
+	0x060c3208, 0x07807848, 0x07807889, 0x09610209, 0x060c3208,
+	0x06800073, 0x0c007940, 0x07c02bf3, 0x07807187, 0x07807048,
+	0x0a403207, 0x0c7df0c0, 0x00000000, 0x06800033, 0x07c02bf3,
+	0x0aa1000a, 0x00000000, 0x0c780900, 0x00000000, 0x0c07abc0,
+	0x00000000, 0x07800c48, 0x0aa1c008, 0x07800bc8, 0x07800c09,
+	0x09610209, 0x06800009, 0x0c780100, 0x07c00c49, 0x0c062580,
+	0x00000000, 0x0649cf09, 0x0be29009, 0x07800cc9, 0x0a620009,
+	0x06800049, 0x07c00cc9, 0x0809c009, 0x0609c108, 0x08007401,
+	0x0649c009, 0x0a6fc009, 0x07c03088, 0x05810208, 0x07c030c8,
+	0x06803208, 0x07803089, 0x020081c8, 0x07400209, 0x06800008,
+	0x078030c9, 0x020081c8, 0x07400209, 0x06800009, 0x07c03089,
+	0x07c030c9, 0x054181c7, 0x0609b307, 0x068c000a, 0x0c060740,
+	0x06c0000a, 0x0649b307, 0x054081c7, 0x058081c7, 0x0609b207,
+	0x0609b007, 0x0609b107, 0x06800007, 0x07c01c47, 0x078072c7,
+	0x0be09807, 0x0c780840, 0x06bfffc9, 0x06803008, 0x07802307,
+	0x090211c7, 0x054011c7, 0x038081c8, 0x07807307, 0x0a60c087,
+	0x06800007, 0x06800047, 0x038081c8, 0x07803c07, 0x06031f07,
+	0x06033f08, 0x0c05d080, 0x08031e15, 0x078079c9, 0x07807a0a,
+	0x0961024a, 0x06431f07, 0x02009247, 0x078078c7, 0x07807908,
+	0x096101c8, 0x0b8071c9, 0x07807947, 0x07807988, 0x096101c8,
+	0x0b4031c9, 0x0c7800c0, 0x00000000, 0x06bfffc9, 0x064c3d08,
+	0x09161208, 0x0a6f8008, 0x00000000, 0x060c3809, 0x07802207,
+	0x0aa10007, 0x00000000, 0x0c062040, 0x080c2301, 0x07803ac7,
+	0x07c073c7, 0x07803b07, 0x07c07407, 0x07802087, 0x0aa10187,
+	0x06800148, 0x0a83c207, 0x0c781700, 0x00000000, 0x0fc011c0,
+	0x06800808, 0x096e1207, 0x078073c7, 0x09505207, 0x0fc011c0,
+	0x0aa24007, 0x07807407, 0x0c061b40, 0x080c2301, 0x07c073c7,
+	0x09505207, 0x0c061a40, 0x080c2301, 0x07c07407, 0x09605207,
+	0x07802947, 0x096a2207, 0x060c2108, 0x068000c7, 0x07c0c007,
+	0x0fc011c0, 0x0aa10007, 0x00000000, 0x0c06a540, 0x0680c009,
+	0x068000c7, 0x07c0d087, 0x0fc011c0, 0x0aa10007, 0x00000000,
+	0x0c06a380, 0x0680d089, 0x07802907, 0x0a60c087, 0x06800008,
+	0x06815408, 0x09402207, 0x0a644047, 0x06094208, 0x0c061340,
+	0x080c2301, 0x09484207, 0x0c061280, 0x080c2301, 0x09504207,
+	0x06094208, 0x0680c007, 0x06094007, 0x0c06a540, 0x078073c9,
+	0x0680d807, 0x06094007, 0x0c06a440, 0x07807409, 0x0c7808c0,
+	0x00000000, 0x0fc011c0, 0x06800808, 0x0aa14007, 0x078073c7,
+	0x0c060e00, 0x080c2301, 0x07c073c7, 0x09505207, 0x07802947,
+	0x096a2207, 0x060c2108, 0x068000c7, 0x07c0c007, 0x0fc011c0,
+	0x0aa10007, 0x00000000, 0x0c069900, 0x0680c009, 0x078028c7,
+	0x04000207, 0x0aa34007, 0x06094208, 0x0c060980, 0x080c2301,
+	0x09484207, 0x0c0608c0, 0x080c2301, 0x09504207, 0x06094208,
+	0x0680c007, 0x06094007, 0x0c069b80, 0x078073c9, 0x06494007,
+	0x09c07247, 0x06094007, 0x07802047, 0x0aa7c007, 0x07802007,
+	0x06800148, 0x0a82a207, 0x00000000, 0x06800007, 0x07c0e107,
+	0x0fc011c0, 0x0aa5c007, 0x0680e109, 0x04000289, 0x02407289,
+	0x0b610a47, 0x06800007, 0x0c060240, 0x080c2301, 0x0aa3c007,
+	0x07400247, 0x0aae4147, 0x04001249, 0x04000207, 0x0c060080,
+	0x080c2301, 0x07400247, 0x0a6cc0c8, 0x04001249, 0x0c05ff40,
+	0x080c2301, 0x07400247, 0x0c7ffb80, 0x04001249, 0x0649cf07,
+	0x0a20c0c7, 0x06800007, 0x07c0e107, 0x07802347, 0x0aa2c007,
+	0x07802087, 0x0aa24087, 0x06800c08, 0x0c05fbc0, 0x080c2301,
+	0x09402207, 0x0c780100, 0x060c2108, 0x0fc021c0, 0x07c0e107,
+	0x068004ca, 0x06031e0a, 0x0649ce09, 0x0aa10009, 0x00000000,
+	0x0809ce00, 0x08007401, 0x06431e09, 0x0bee8049, 0x00000000,
+	0x07801e87, 0x0a608047, 0x0c782bc0, 0x0680a009, 0x0680400a,
+	0x0680ec08, 0x080c2400, 0x0c069e80, 0x078070cc, 0x080c2400,
+	0x0680000b, 0x0780724c, 0x078073cd, 0x0400134d, 0x0b80334c,
+	0x00000000, 0x0400030d, 0x0200d2c8, 0x0700034d, 0x0540234d,
+	0x0200d349, 0x0700034e, 0x05408410, 0x02010390, 0x0649cf07,
+	0x0a225007, 0x00000000, 0x054033ce, 0x0200f3ca, 0x070003cf,
+	0x091013cf, 0x0aa0c00f, 0x0680004f, 0x07c01e4f, 0x0400134d,
+	0x0700034d, 0x0900234d, 0x094a240d, 0x040013cb, 0x0be0c0cf,
+	0x00000000, 0x060c2210, 0x0a60c00b, 0x00000000, 0x07c01990,
+	0x040012cb, 0x0b8e330b, 0x0a2240cc, 0x090022cc, 0x0680010c,
+	0x0240c2cc, 0x090082d0, 0x05408410, 0x0d07ffcc, 0x0940840b,
+	0x060c2210, 0x07802087, 0x06800188, 0x0a802207, 0x0c781d80,
+	0x0680f608, 0x080c2408, 0x0c0690c0, 0x0780728c, 0x080c2408,
+	0x0680000b, 0x0780740d, 0x0400134d, 0x0b80334c, 0x00000000,
+	0x0400030d, 0x0200d2c8, 0x0700034d, 0x0540234d, 0x0200d349,
+	0x0700034e, 0x05408410, 0x02010390, 0x0400134d, 0x0700034d,
+	0x0900234d, 0x0649cf07, 0x0a225007, 0x00000000, 0x054033ce,
+	0x0200f3ca, 0x070003cf, 0x091013cf, 0x0aa0c00f, 0x0680004f,
+	0x07c01e4f, 0x046002cb, 0x0c481140, 0x07803a47, 0x0540338e,
+	0x0200e38a, 0x0700038f, 0x090053cf, 0x06031f07, 0x06033f0f,
+	0x0c058840, 0x08031e15, 0x0780732b, 0x0a60c0ab, 0x0680002c,
+	0x0680006c, 0x06431f07, 0x07803c0f, 0x054013cf, 0x0380fb0f,
+	0x020073c7, 0x0680180f, 0x06031f07, 0x06033f0f, 0x0c0584c0,
+	0x08031e15, 0x06431f07, 0x06433f0f, 0x097081cf, 0x0780230f,
+	0x090213cf, 0x054013cf, 0x038073c7, 0x078078cf, 0x020073c7,
+	0x0780790f, 0x054103cf, 0x020073c7, 0x058031c7, 0x040013ce,
+	0x070003cf, 0x090c2a8f, 0x097c21ea, 0x0ba5c0ab, 0x040023ce,
+	0x070003ec, 0x040033ce, 0x070003ef, 0x09610b2f, 0x040043ce,
+	0x070003ed, 0x040053ce, 0x070003ef, 0x09610b6f, 0x0780776e,
+	0x078077af, 0x09610baf, 0x0b403b2e, 0x0242fb2e, 0x0242fbac,
+	0x0b403b6e, 0x0242cb6e, 0x0242cbad, 0x0b807b2f, 0x0c780180,
+	0x09807747, 0x044013cd, 0x0ba0c0aa, 0x097a11cf, 0x097a11eb,
+	0x060c3907, 0x094a240d, 0x040013cb, 0x0be0c0cf, 0x00000000,
+	0x060c2210, 0x040012cb, 0x0b8a030b, 0x0a2240cc, 0x090022cc,
+	0x0680010c, 0x0240c2cc, 0x090082d0, 0x05408410, 0x0d07ffcc,
+	0x0940840b, 0x060c2210, 0x0649cf0a, 0x0a21500a, 0x0780208a,
+	0x0a60c08a, 0x0680000a, 0x07c01e4a, 0x068c000a, 0x06c0470a,
+	0x0680c009, 0x0c059c40, 0x06a0400b, 0x0c05c880, 0x080c2301,
+	0x0c05ca00, 0x00000000, 0x0401a1c7, 0x07802248, 0x02007207,
+	0x07c02387, 0x07802287, 0x0aa40007, 0x06800009, 0x0c05c5c0,
+	0x080c2301, 0x0aa30047, 0x09402247, 0x0c05c4c0, 0x080c2301,
+	0x0c05c640, 0x00000000, 0x094c4247, 0x0c05c380, 0x080c2301,
+	0x0c05c500, 0x00000000, 0x09444247, 0x060c3109, 0x0c7f1b80,
+	0x00000000, 0x0c066440, 0x00000000, 0x0680400f, 0x0780704e,
+	0x0780734d, 0x0780730c, 0x078072c0, 0x090a1040, 0x090c1c00,
+	0x02c0bc01, 0x07807188, 0x0aa0c00c, 0x0aa3c04c, 0x0c780900,
+	0x05403c48, 0x020313f1, 0x04001c71, 0x07000c40, 0x09061040,
+	0x04005c71, 0x07000c70, 0x0be4c040, 0x0a248080, 0x0a4112c1,
+	0x0a410370, 0x0cc00000, 0x0680004a, 0x05403c48, 0x020313f1,
+	0x04001c71, 0x07000c40, 0x09041040, 0x04005c71, 0x07000c70,
+	0x0be18080, 0x0a214040, 0x0a4042c1, 0x0a403370, 0x0cc00000,
+	0x0680004a, 0x04803000, 0x0aa20000, 0x0aa1c0c0, 0x00000000,
+	0x04405c71, 0x07000c40, 0x09800000, 0x09800040, 0x07400c40,
+	0x06800008, 0x06830007, 0x05403c48, 0x020313f1, 0x04001c71,
+	0x07000c40, 0x0be180c0, 0x0bc051c0, 0x06800000, 0x07400c40,
+	0x0c780140, 0x07c07188, 0x04001208, 0x0b8f5388, 0x0c780d40,
+	0x07807780, 0x0580f000, 0x0a20c040, 0x06800001, 0x09801181,
+	0x07802000, 0x0a60c140, 0x04401c31, 0x09801141, 0x07801c40,
+	0x094e1040, 0x07400c01, 0x0aa7400b, 0x06801801, 0x07802300,
+	0x09021000, 0x05401000, 0x03801001, 0x07803cca, 0x0900828a,
+	0x0340a00a, 0x078078c5, 0x07807900, 0x09610140, 0x07803a40,
+	0x06031f00, 0x06033f01, 0x0c055480, 0x08031e15, 0x06800046,
+	0x07807087, 0x06431f04, 0x06800009, 0x03400246, 0x0bc0f1c0,
+	0x04401071, 0x07000070, 0x09405c09, 0x07400070, 0x02c07007,
+	0x07c07087, 0x0649c900, 0x09c007c0, 0x0609c900, 0x07c079c5,
+	0x05810145, 0x07c07a05, 0x0cc00000, 0x0680000a, 0x02005105,
+	0x04001249, 0x0b8ee289, 0x0649c900, 0x098007c0, 0x0609c900,
+	0x0cc00000, 0x07c0718e, 0x07802171, 0x04600031, 0x0c480b80,
+	0x07802180, 0x06800041, 0x0340f001, 0x0580138f, 0x078072c0,
+	0x09005000, 0x0a618140, 0x06800000, 0x07c00b00, 0x07c07640,
+	0x07c07680, 0x07c07440, 0x0780764d, 0x07807680, 0x09610340,
+	0x0780734c, 0x0780744b, 0x078073b1, 0x0b4052f1, 0x02400c4b,
+	0x0b807380, 0x0c780180, 0x0200d3cd, 0x024002f1, 0x0b003380,
+	0x0c780080, 0x0240d3cd, 0x040002f1, 0x078072c0, 0x090a2000,
+	0x0aa14000, 0x0581000d, 0x07c0764d, 0x07c07680, 0x07c0744b,
+	0x07807331, 0x0b6100b1, 0x020052cd, 0x0c781e00, 0x04000185,
+	0x078074c0, 0x07807501, 0x09610001, 0x0c781cc0, 0x02006005,
+	0x078020c0, 0x06800041, 0x0340f001, 0x078072c0, 0x09005000,
+	0x0a620140, 0x06800000, 0x07c00b00, 0x07c07480, 0x07c076c0,
+	0x07c07700, 0x07c07540, 0x07c07580, 0x0780748e, 0x078076cd,
+	0x07807700, 0x09610340, 0x0780734c, 0x0b40338c, 0x00000000,
+	0x0200d3cd, 0x04602031, 0x0c501200, 0x0780398b, 0x0460000b,
+	0x0c500a80, 0x0680000a, 0x06800009, 0x0200830d, 0x078072c0,
+	0x090a2000, 0x0a610000, 0x0aa0c008, 0x00000000, 0x04401208,
+	0x04000c4b, 0x06808030, 0x07000c00, 0x04001c30, 0x07000c01,
+	0x09610001, 0x04001c30, 0x0d07fef1, 0x02009009, 0x0a608008,
+	0x0c780580, 0x04401208, 0x06800007, 0x0b8052c8, 0x00000000,
+	0x040011c7, 0x0c7fff40, 0x024082c8, 0x06031f07, 0x06033f09,
+	0x0c053340, 0x08031e15, 0x04001c48, 0x06808030, 0x06431f0a,
+	0x07000c00, 0x04001c30, 0x07000c01, 0x09610001, 0x04001c30,
+	0x0d07fef1, 0x0200a00a, 0x078072c0, 0x090a2000, 0x0a614000,
+	0x07803800, 0x07803841, 0x09610001, 0x0200a00a, 0x07807545,
+	0x07807580, 0x09610140, 0x0200514a, 0x07807331, 0x0a60c031,
+	0x0c780780, 0x04000185, 0x07803886, 0x078038c0, 0x09610180,
+	0x02006185, 0x0b60c0b1, 0x0c7805c0, 0x04000146, 0x078075c0,
+	0x07807601, 0x09610001, 0x0c780480, 0x02006006, 0x078072c0,
+	0x09005000, 0x0a614140, 0x06800005, 0x07c00b05, 0x0c7802c0,
+	0x06800006, 0x0200b30d, 0x054012cb, 0x078072c0, 0x090a2000,
+	0x0a60c000, 0x00000000, 0x044012cb, 0x0400014b, 0x0400018b,
+	0x07c076cd, 0x0581000d, 0x07c07700, 0x0b803185, 0x04000105,
+	0x04000106, 0x040002c4, 0x02c0b14b, 0x02c0b18b, 0x0a20c04b,
+	0x0680004b, 0x07c00b0b, 0x07c07744, 0x05810004, 0x07c07780,
+	0x07c077c5, 0x05810005, 0x07c07800, 0x07c07846, 0x05810006,
+	0x07c07880, 0x0cc00000, 0x07c0748c, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000
+};
diff --git a/drivers/amlogic/amports/arch/ucode/h264/gxtvbb_h264c_linux.h b/drivers/amlogic/amports/arch/ucode/h264/gxtvbb_h264c_linux.h
new file mode 100644
index 0000000..4a7c916
--- /dev/null
+++ b/drivers/amlogic/amports/arch/ucode/h264/gxtvbb_h264c_linux.h
@@ -0,0 +1,822 @@
+static const u32 MicroCode[] __initconst = {
+	0x06810001, 0x06800000, 0x0d000001, 0x07400040, 0x064c0800,
+	0x09800300, 0x00000000, 0x060c0800, 0x0649d019, 0x0c006140,
+	0x0649c134, 0x06880000, 0x060c2900, 0x080c0002, 0x06bfda80,
+	0x07c02d40, 0x06030400, 0x00400000, 0x0c007b00, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0c7ffe80,
+	0x00000000, 0x06431e35, 0x0befc075, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x0c780500, 0x00000000, 0x0cc00000,
+	0x00400000, 0x0c780d40, 0x064c0007, 0x0cc00000, 0x00400000,
+	0x0c787b40, 0x00000000, 0x0cc00000, 0x00400000, 0x0cc00000,
+	0x00400000, 0x0c7879c0, 0x00000000, 0x0c787780, 0x00000000,
+	0x0cc00000, 0x00400000, 0x0aa44133, 0x0aa0c033, 0x0c7fff00,
+	0x0680001b, 0x0649cf1c, 0x0bee405c, 0x064c431c, 0x0ae0ffdc,
+	0x0c7ffd80, 0x0680001b, 0x064c411c, 0x0968c71c, 0x0a40bc9c,
+	0x04000c9c, 0x0b60c19b, 0x0c7ffbc0, 0x040016db, 0x0809c006,
+	0x08007401, 0x06bfffb3, 0x06030433, 0x0c7ffa40, 0x06800133,
+	0x0649c91c, 0x0400171c, 0x0609c91c, 0x0c7ff900, 0x0680001b,
+	0x07801949, 0x0a212009, 0x09c091c9, 0x0c7a8780, 0x07c01949,
+	0x00800000, 0x07802d49, 0x0c7ff6c0, 0x06030409, 0x06bf9b89,
+	0x06030409, 0x00400000, 0x064c4309, 0x05801249, 0x0baf9809,
+	0x00000000, 0x0a2c0047, 0x07802bc9, 0x0aa14009, 0x0a608049,
+	0x0c7a08c0, 0x0a6080c9, 0x0c79f700, 0x0a208807, 0x0c782680,
+	0x0be15007, 0x0a208207, 0x0c7845c0, 0x0cb8001a, 0x00000000,
+	0x0c000280, 0x00000000, 0x06bfffca, 0x07903c08, 0x0a402288,
+	0x0c784580, 0x0be08207, 0x0c7ffdc0, 0x0c784300, 0x00000000,
+	0x0649cd09, 0x04001249, 0x0609cd09, 0x0c000780, 0x064c380e,
+	0x064c0809, 0x064c090b, 0x0680040a, 0x063f000a, 0x0680000a,
+	0x063f000a, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x060c0809, 0x060c090b, 0x0688000a, 0x060c290a, 0x0c0005c0,
+	0x00000000, 0x0680000a, 0x060c0c0a, 0x06c0404a, 0x060c0d0a,
+	0x080c0101, 0x0684044a, 0x060c2e0a, 0x060c380e, 0x0c001780,
+	0x00000000, 0x0cc00000, 0x00000000, 0x0683ffc9, 0x0aa18009,
+	0x0649470a, 0x0910828a, 0x07802cc8, 0x0a4fc20a, 0x04401249,
+	0x0cc00000, 0x00000000, 0x0c00a380, 0x00000000, 0x06490b09,
+	0x09809009, 0x09809089, 0x06090b09, 0x09c09009, 0x09c09089,
+	0x06090b09, 0x08095007, 0x08095000, 0x0683ffc9, 0x06498f0a,
+	0x0aa0c009, 0x0a6f800a, 0x04401249, 0x064c3d0a, 0x0580a28a,
+	0x0bef80ca, 0x00000000, 0x06498e0a, 0x0980a00a, 0x068007c9,
+	0x09706289, 0x06098e0a, 0x06800009, 0x09706289, 0x09c0a00a,
+	0x0cc00000, 0x06098e0a, 0x0200ad0a, 0x0603510a, 0x06035209,
+	0x0603500b, 0x0643500c, 0x0580f30c, 0x0bef804c, 0x00000000,
+	0x0643530c, 0x0900c30c, 0x0a6f800c, 0x00000000, 0x0cc00000,
+	0x0240ad0a, 0x0200a64a, 0x0603410a, 0x06810009, 0x06034209,
+	0x06a2000b, 0x06c001cb, 0x0603400b, 0x0643400c, 0x0580f30c,
+	0x0bef804c, 0x0cc00000, 0x00000000, 0x08032100, 0x0200a64a,
+	0x0603410a, 0x06810009, 0x06034209, 0x06a3000b, 0x06c001cb,
+	0x0603400b, 0x0643400c, 0x0580f30c, 0x0bef804c, 0x06840008,
+	0x063f0008, 0x06800008, 0x063f0008, 0x08002a09, 0x08002b17,
+	0x06830008, 0x06032608, 0x08032261, 0x06800048, 0x06c00088,
+	0x06032108, 0x0cc00000, 0x00000000, 0x0680004a, 0x060e0c0a,
+	0x07c026ca, 0x07c0250a, 0x068003ca, 0x07c0280a, 0x06805c0a,
+	0x060c210a, 0x080c2170, 0x0680008a, 0x07c02a4a, 0x06800018,
+	0x0680000a, 0x0cc00000, 0x07c0248a, 0x0a25d007, 0x0680004a,
+	0x0c07e540, 0x07c01e4a, 0x064c000a, 0x09c0a18a, 0x0980a20a,
+	0x0980a00a, 0x060c000a, 0x064c2908, 0x09c08348, 0x09808208,
+	0x060c2908, 0x09808348, 0x09c08208, 0x060c2908, 0x064c080a,
+	0x0980a34a, 0x060c080a, 0x0c07e340, 0x00000000, 0x0c07f700,
+	0x00000000, 0x080c0600, 0x0fc081c0, 0x0649cf0a, 0x0a21500a,
+	0x0a611e47, 0x0a20c80a, 0x0c780dc0, 0x00000000, 0x090a2207,
+	0x07c02048, 0x0481f1c7, 0x07c02007, 0x0aa38147, 0x0aa34047,
+	0x0a60c187, 0x0c781040, 0x0681d80d, 0x0a60c1c7, 0x0c780f80,
+	0x0682000d, 0x0a60c207, 0x0c780ec0, 0x0682744d, 0x0a608247,
+	0x0c780740, 0x0c781400, 0x0c78f040, 0x00000000, 0x064c4408,
+	0x09101208, 0x0aaf8048, 0x064c5109, 0x064c460a, 0x07801a48,
+	0x05410208, 0x07801a0b, 0x020082c8, 0x0580a208, 0x06031f08,
+	0x06033f09, 0x0c07b640, 0x08031e15, 0x06431f08, 0x06433f09,
+	0x09708209, 0x0540a208, 0x02008288, 0x064c4309, 0x02408248,
+	0x064c4009, 0x02408248, 0x0cc00000, 0x0440a208, 0x0c07f9c0,
+	0x00000000, 0x07c00bc8, 0x05810208, 0x07c00c08, 0x06800048,
+	0x0c780b80, 0x07c00c48, 0x0c07f7c0, 0x00000000, 0x07800909,
+	0x0780094a, 0x0961024a, 0x0609c209, 0x0680a149, 0x02008248,
+	0x07c00908, 0x05810208, 0x07c00948, 0x07807188, 0x0609c108,
+	0x0809c00a, 0x08007401, 0x0649c008, 0x0a6fc008, 0x0c7806c0,
+	0x00000000, 0x07803bc8, 0x090821c8, 0x0aa18047, 0x06800047,
+	0x09482207, 0x0680000a, 0x0c07d7c0, 0x06c0000a, 0x0cb8000d,
+	0x07c03bc8, 0x064c2907, 0x0be14407, 0x064c2307, 0x0bef4047,
+	0x0cc00000, 0x064c2007, 0x0cc00000, 0x06800007, 0x040011c7,
+	0x06800008, 0x0a20c047, 0x058011c7, 0x024071c8, 0x0cc00000,
+	0x00000000, 0x064c0007, 0x0a2fc047, 0x00000000, 0x064c3a07,
+	0x090061c7, 0x0aaec647, 0x00000000, 0x080c0a01, 0x080c2800,
+	0x080c0002, 0x0c7fb100, 0x00000000, 0x0684000a, 0x0c07cfc0,
+	0x06c0000a, 0x069fffc2, 0x07c03b42, 0x07c03b82, 0x07c03c42,
+	0x07c00a02, 0x07c00a42, 0x07c00a82, 0x07c03c82, 0x07c01742,
+	0x07c017c2, 0x068003c2, 0x07c02fc2, 0x064c1e02, 0x09802702,
+	0x060c1e02, 0x0680c002, 0x06094002, 0x06803003, 0x06804002,
+	0x0d000003, 0x06094102, 0x06800002, 0x06094002, 0x0c0005c0,
+	0x00000000, 0x08002501, 0x08002609, 0x08002708, 0x0800290d,
+	0x08002d15, 0x08002c14, 0x0649b802, 0x06800fc3, 0x09508083,
+	0x0609b802, 0x08002609, 0x08002b17, 0x06830002, 0x06032602,
+	0x08032261, 0x06800042, 0x06c00082, 0x06032102, 0x06800032,
+	0x0cc00000, 0x0680001b, 0x06800203, 0x07c03bc3, 0x06800712,
+	0x06800033, 0x07c02bf3, 0x07c01933, 0x07c01973, 0x07c01df3,
+	0x07c01e33, 0x0649c203, 0x0a654003, 0x06800803, 0x068f000a,
+	0x06c0470a, 0x06810002, 0x06800049, 0x06a02bcb, 0x0c07bc00,
+	0x00000000, 0x0d07ff83, 0x0200a08a, 0x06804003, 0x06af000a,
+	0x06c0470a, 0x06808002, 0x06800049, 0x06a02bcb, 0x0c07b980,
+	0x00000000, 0x0d07ff83, 0x0200a08a, 0x064e1203, 0x091e10c3,
+	0x0bef8043, 0x064c0903, 0x06803002, 0x063f0002, 0x06800002,
+	0x063f0002, 0x06803fc2, 0x060c0903, 0x06800002, 0x060c0c02,
+	0x06c04042, 0x060c0d02, 0x080c0101, 0x06840442, 0x060c2e02,
+	0x064c4010, 0x064c4211, 0x02411411, 0x04008451, 0x07c01a11,
+	0x05810451, 0x07c01a51, 0x064c1e02, 0x09802702, 0x060c1e02,
+	0x064e0e02, 0x09802242, 0x060e0e02, 0x0cc00000, 0x00000000,
+	0x07802bc2, 0x0aa0c002, 0x06800102, 0x06030502, 0x0b60c11b,
+	0x0cc00000, 0x00000000, 0x00800000, 0x00000000, 0x0c079c40,
+	0x00000000, 0x080c0a01, 0x080c2800, 0x080c0002, 0x0cc00000,
+	0x00400000, 0x064c441c, 0x0910171c, 0x0a6f801c, 0x0c7f8840,
+	0x00000000, 0x0cc00000, 0x00400000, 0x064e1214, 0x091e1514,
+	0x0bef0054, 0x078029d5, 0x0649d914, 0x0900c514, 0x0acfe554,
+	0x07802494, 0x0aa50094, 0x0aa08194, 0x0c782d00, 0x0c7824c0,
+	0x07802715, 0x06800015, 0x06c04015, 0x07802857, 0x097c1557,
+	0x060e1215, 0x07802d15, 0x0a20c055, 0x06800018, 0x06900018,
+	0x06c046d8, 0x02018d18, 0x06800014, 0x07c02a94, 0x0c782540,
+	0x06800114, 0x07802a95, 0x0aa08095, 0x0c781340, 0x078024d6,
+	0x0aeb4096, 0x07802857, 0x0aa4c712, 0x07802ad4, 0x05406514,
+	0x07802d15, 0x05801555, 0x0be0c055, 0x06800015, 0x06900015,
+	0x06c046d5, 0x02015d15, 0x02014554, 0x04440514, 0x060e1314,
+	0x0aa44017, 0x040c0614, 0x06805c16, 0x060c2116, 0x0c780340,
+	0x04040618, 0x05405514, 0x07802d15, 0x0be0c055, 0x06800015,
+	0x06900015, 0x06c046d5, 0x02015d15, 0x02014554, 0x04420514,
+	0x060e1314, 0x04060614, 0x07802596, 0x0aa14016, 0x06a2c215,
+	0x0aa0c056, 0x06a2c015, 0x06a2c115, 0x0aa10017, 0x06c04015,
+	0x068003d4, 0x09506554, 0x097c1557, 0x060e1215, 0x064e0e14,
+	0x098142d4, 0x060e0e14, 0x06800014, 0x07c02a94, 0x06800114,
+	0x0c781ec0, 0x07c02494, 0x078025d5, 0x078029d6, 0x0e000595,
+	0x05401516, 0x07802857, 0x0aa0c017, 0x02014594, 0x02014594,
+	0x0f000540, 0x02415515, 0x07802694, 0x05409514, 0x02014554,
+	0x05403554, 0x02015d15, 0x060e1315, 0x07802596, 0x0aa34016,
+	0x06a44215, 0x0aa2c056, 0x06a44015, 0x0c780240, 0x06a44115,
+	0x0a6580d5, 0x078026d4, 0x064e0c16, 0x09010596, 0x0b8e5594,
+	0x0cc00000, 0x00400000, 0x0aa10017, 0x06c0c015, 0x068005d4,
+	0x09506554, 0x097c1557, 0x060e1215, 0x064e0e14, 0x098142d4,
+	0x060e0e14, 0x06800018, 0x06800014, 0x07c02a94, 0x06800154,
+	0x0c781380, 0x07c02494, 0x07802515, 0x0aa1c015, 0x04401555,
+	0x07c02515, 0x078024d5, 0x04401555, 0x0c780f80, 0x07c024d5,
+	0x07802615, 0x078029d6, 0x0e000595, 0x07c02655, 0x04001515,
+	0x07c02614, 0x0f000540, 0x07802694, 0x05409514, 0x02014554,
+	0x05403554, 0x02015d15, 0x060e1315, 0x07802596, 0x0aa14016,
+	0x06b16215, 0x0aa0c056, 0x06b16015, 0x06b16115, 0x07803056,
+	0x0aa2c016, 0x078026d4, 0x064e0c16, 0x09010596, 0x0b805594,
+	0x07c02715, 0x06800194, 0x0c7fd680, 0x07c02494, 0x04001514,
+	0x07c026d4, 0x07c02715, 0x06c00015, 0x060e1215, 0x06800054,
+	0x0c780840, 0x07c02494, 0x0ba74114, 0x07802855, 0x0a608015,
+	0x0c7ff400, 0x078026d5, 0x04001555, 0x07c026d5, 0x0aa0c114,
+	0x06800015, 0x080c2170, 0x0c7804c0, 0x07c02855, 0x064e0e14,
+	0x09814314, 0x0cc00000, 0x060e0e14, 0x0a6c0054, 0x078024d5,
+	0x0a608015, 0x0c780900, 0x04401555, 0x0b2f8055, 0x07c024d5,
+	0x0c07fd40, 0x00000000, 0x07802a54, 0x0aa0c0d4, 0x00000000,
+	0x080c2170, 0x06800014, 0x07c02494, 0x0cc00000, 0x00400000,
+	0x091c1518, 0x0aa0c014, 0x06900018, 0x06800018, 0x06c046d8,
+	0x0c780bc0, 0x02018d18, 0x0aa0c712, 0x090a8518, 0x090c7518,
+	0x07802c56, 0x0b829594, 0x0a8f4594, 0x0f000540, 0x064e0e14,
+	0x098142d4, 0x060e0e14, 0x091c1518, 0x0aa28014, 0x06900018,
+	0x0c780200, 0x06800018, 0x078025d5, 0x078029d6, 0x0aa70018,
+	0x0e000595, 0x0c7ffb40, 0x00000000, 0x06c046d8, 0x02018d18,
+	0x07802694, 0x05409514, 0x078029d6, 0x02415595, 0x02014554,
+	0x05403554, 0x02015d15, 0x060e1315, 0x07802714, 0x09004554,
+	0x0aa14015, 0x06a14214, 0x0aa0c115, 0x06a14014, 0x06a14114,
+	0x06c08014, 0x060e0d18, 0x0aa0c712, 0x04020618, 0x04020618,
+	0x0c7ff300, 0x060e1214, 0x07802694, 0x05409514, 0x0f000540,
+	0x02014554, 0x078025d5, 0x04001555, 0x07c025d5, 0x05403554,
+	0x02015d15, 0x060e1315, 0x07802714, 0x0a618018, 0x09c141d4,
+	0x060e1214, 0x068000d4, 0x0c7feec0, 0x07c02494, 0x06c08014,
+	0x09c14394, 0x060e0d18, 0x0aae4712, 0x04020618, 0x0c7ffdc0,
+	0x04020618, 0x0683ffca, 0x0a61000a, 0x0440128a, 0x0c780140,
+	0x080e1200, 0x064e1209, 0x091e1249, 0x0bee8049, 0x064e0009,
+	0x064e030a, 0x064e0e0b, 0x064e0c0c, 0x083f0040, 0x083f0000,
+	0x064c180d, 0x0980d20d, 0x060c180d, 0x09c0d20d, 0x060c180d,
+	0x0680020d, 0x0d00000d, 0x00000000, 0x060e0009, 0x060e030a,
+	0x060e0e0b, 0x0cc00000, 0x060e0c0c, 0x0c000cc0, 0x00000000,
+	0x06810109, 0x06c34749, 0x06090709, 0x06490b09, 0x09809009,
+	0x09809089, 0x06090b09, 0x09c09009, 0x09c09089, 0x06090b09,
+	0x06800009, 0x06c046c9, 0x02009d09, 0x06094409, 0x06900009,
+	0x06c046c9, 0x02009d09, 0x06094509, 0x0cc00000, 0x00000000,
+	0x0c000e00, 0x00000000, 0x06497f08, 0x068000c7, 0x09702207,
+	0x09808688, 0x06097f08, 0x06498e08, 0x09c080c8, 0x06098e08,
+	0x07802c47, 0x0b20c187, 0x00000000, 0x098080c8, 0x09c08788,
+	0x06098e08, 0x06820888, 0x06c00208, 0x068001c9, 0x07802c47,
+	0x0b20c407, 0x06800447, 0x06800c07, 0x09706207, 0x09808648,
+	0x06095108, 0x06095009, 0x0cc00000, 0x08095000, 0x0683ffc8,
+	0x06490909, 0x0a210049, 0x0aa0c008, 0x0c7fff40, 0x04401208,
+	0x0683ffc8, 0x06490909, 0x09343249, 0x0a2241c9, 0x0aa20008,
+	0x06490b09, 0x098090c9, 0x06090b09, 0x09c090c9, 0x06090b09,
+	0x0c7ffdc0, 0x04401208, 0x06490b09, 0x09809009, 0x09809089,
+	0x06090b09, 0x09c09009, 0x09c09089, 0x06090b09, 0x0cc00000,
+	0x00000000, 0x0683ffc9, 0x0649bb08, 0x0920c208, 0x06495307,
+	0x090011c7, 0x020081c8, 0x0aa10008, 0x0aa0c009, 0x0c7ffe40,
+	0x04401249, 0x0cc00000, 0x00000000, 0x04000289, 0x02408289,
+	0x0b64a008, 0x00000000, 0x0c077280, 0x080c2301, 0x02408289,
+	0x0b60d008, 0x00000000, 0x07400247, 0x0aa280c7, 0x04001249,
+	0x0c077080, 0x080c2301, 0x02408289, 0x0b60d008, 0x00000000,
+	0x07400247, 0x0c7ffbc0, 0x04001249, 0x068000c7, 0x0404028a,
+	0x07400287, 0x0cc00000, 0x00000000, 0x0680000a, 0x04001249,
+	0x0fc011c0, 0x0aa20047, 0x0680004b, 0x06494207, 0x090841c7,
+	0x0340b1cb, 0x054082cb, 0x0c780340, 0x0609410b, 0x0c076a80,
+	0x080c2301, 0x0c076c00, 0x00000000, 0x040002c7, 0x0c076940,
+	0x080c2301, 0x0c076ac0, 0x00000000, 0x095091cb, 0x06094107,
+	0x0fc011c0, 0x0aa24047, 0x0680004b, 0x06494207, 0x091041c7,
+	0x0340b1cb, 0x054082cb, 0x0609410b, 0x0c780600, 0x0609410b,
+	0x0c076540, 0x080c2301, 0x0c0766c0, 0x00000000, 0x040002c7,
+	0x0c076400, 0x080c2301, 0x0c076580, 0x00000000, 0x095091cb,
+	0x06094107, 0x0c076280, 0x080c2301, 0x0c076400, 0x00000000,
+	0x040002c7, 0x0c076140, 0x080c2301, 0x0c0762c0, 0x00000000,
+	0x095091cb, 0x06094107, 0x0400128a, 0x0b8cb24a, 0x0cc00000,
+	0x00000000, 0x0649c707, 0x0aa28007, 0x044011c7, 0x0809c700,
+	0x06804008, 0x054031c7, 0x02007207, 0x040011c7, 0x070001c8,
+	0x09c082c8, 0x074001c8, 0x0649c807, 0x0aa28007, 0x044011c7,
+	0x0809c800, 0x06804008, 0x054031c7, 0x02007207, 0x040011c7,
+	0x070001c8, 0x09c082c8, 0x074001c8, 0x0cc00000, 0x00000000,
+	0x0200d308, 0x0440134d, 0x0700034d, 0x0540234d, 0x0200d349,
+	0x0700034e, 0x0400040e, 0x0400134d, 0x0700034d, 0x0900234d,
+	0x094a240d, 0x09408390, 0x09508390, 0x09608390, 0x09708390,
+	0x06800210, 0x0d000010, 0x060c220e, 0x0cc00000, 0x00000000,
+	0x0649cd09, 0x06800047, 0x054101c7, 0x020091c9, 0x0609cd09,
+	0x069fffc7, 0x07c03b47, 0x07c03b87, 0x07c03c47, 0x07c00a07,
+	0x07c00a47, 0x07c00a87, 0x07c03c87, 0x07c01747, 0x06800207,
+	0x0c7f53c0, 0x07c03bc7, 0x07803c0a, 0x0a60c00a, 0x0c780c80,
+	0x0680004a, 0x07802dca, 0x0aa0800a, 0x0c780b80, 0x0649cf07,
+	0x0a2180c7, 0x07803c07, 0x0aa0c007, 0x0680004a, 0x0680000a,
+	0x0c7809c0, 0x07807347, 0x07801f48, 0x0a803207, 0x0c7808c0,
+	0x0680004a, 0x07802407, 0x07801f08, 0x0a803207, 0x0c780780,
+	0x0680004a, 0x07802047, 0x07802e08, 0x02009207, 0x0aa18009,
+	0x0a803247, 0x0a802248, 0x0c7800c0, 0x0c780540, 0x0680004a,
+	0x07802007, 0x07802e48, 0x0a803207, 0x0c780400, 0x0680004a,
+	0x0a618147, 0x07801f87, 0x07801fc8, 0x0a803207, 0x0c780280,
+	0x0680004a, 0x07802147, 0x0aa1c087, 0x07801807, 0x0a4033c7,
+	0x07801847, 0x0a803407, 0x0c780080, 0x0680004a, 0x0cc00000,
+	0x07c02dca, 0x06490908, 0x0581f208, 0x0a6f8008, 0x00000000,
+	0x06490708, 0x09808648, 0x09c08488, 0x06090708, 0x068400c8,
+	0x096e820b, 0x097e120a, 0x07802407, 0x040011c7, 0x048031c7,
+	0x09542207, 0x0580124a, 0x06094809, 0x06094908, 0x06800008,
+	0x098092c8, 0x07801987, 0x09405247, 0x058051c7, 0x040011c7,
+	0x097c2207, 0x06094809, 0x06094908, 0x0c07be00, 0x00000000,
+	0x06490708, 0x09c08648, 0x09808488, 0x06090708, 0x0cc00000,
+	0x00000000, 0x0649cf07, 0x06800048, 0x0a2100c7, 0x07c01e48,
+	0x0cc00000, 0x00000000, 0x07801988, 0x0aa0c008, 0x0a210807,
+	0x00000000, 0x0cc00000, 0x00000000, 0x0c07b900, 0x00000000,
+	0x0c07b140, 0x00000000, 0x0680001b, 0x0780294e, 0x0a61038e,
+	0x07802c4e, 0x0c780380, 0x0980b00b, 0x0ae6011b, 0x0c07f180,
+	0x00000000, 0x0400128a, 0x0b80438a, 0x00000000, 0x0680000a,
+	0x040012cb, 0x0b8f834b, 0x0b8f730a, 0x0c780380, 0x00000000,
+	0x0ae3011b, 0x0c07ee80, 0x044012cb, 0x0c07ee00, 0x040012cb,
+	0x0400128a, 0x0b80438a, 0x00000000, 0x0680000a, 0x040022cb,
+	0x0b8f634b, 0x0b8f530a, 0x0cc00000, 0x0680001b, 0x07803c07,
+	0x07802e88, 0x0a402207, 0x0c7809c0, 0x07c02e87, 0x07802c49,
+	0x0780294a, 0x0a60c30a, 0x07802c8a, 0x0540128a, 0x06800008,
+	0x0b80a247, 0x095084c7, 0x02407247, 0x0b8fd288, 0x04001208,
+	0x0649cd07, 0x040011c7, 0x0609cd07, 0x0cc00000, 0x06800047,
+	0x0aa0c007, 0x06800049, 0x07c02d89, 0x0aa0c712, 0x07c02cc7,
+	0x05401208, 0x094084c8, 0x07c02d08, 0x0780188a, 0x078018cb,
+	0x07802ccc, 0x07802d0d, 0x0c07ebc0, 0x06800009, 0x07802cc7,
+	0x0aa18007, 0x044011c7, 0x0ba0c707, 0x0c7fffc0, 0x0441c1c7,
+	0x07c02b07, 0x07802cc7, 0x07c01887, 0x07802d07, 0x07c018c7,
+	0x0cc00000, 0x06800007, 0x0c780380, 0x06800087, 0x0c780300,
+	0x06800147, 0x0c780280, 0x06800187, 0x0c071fc0, 0x080c2301,
+	0x07c03c07, 0x0c071f00, 0x080c2301, 0x0aad41c7, 0x0aad8007,
+	0x0aadc047, 0x07c01ec7, 0x07803bc8, 0x09061248, 0x07c02dc9,
+	0x0a250208, 0x07803c08, 0x0aa08008, 0x0c7f1fc0, 0x0649cf09,
+	0x0a20c0c9, 0x0aa2c087, 0x0c7f1ec0, 0x07802008, 0x0aa20148,
+	0x07801c48, 0x0a614008, 0x0aa08087, 0x0c7f1d40, 0x06800048,
+	0x07c01c48, 0x07c01c08, 0x0649c909, 0x04001249, 0x0609c909,
+	0x06800009, 0x07c01d89, 0x0c079a00, 0x00000000, 0x0c07a040,
+	0x00000000, 0x0c071640, 0x080c2301, 0x07803b8d, 0x0a806347,
+	0x07803bc8, 0x06800049, 0x07c02dc9, 0x0c780080, 0x07c03b87,
+	0x09082248, 0x0aa1c049, 0x0680000a, 0x0c06ea00, 0x06c0000a,
+	0x06800049, 0x09482209, 0x07c03bc8, 0x06af000a, 0x06c0470a,
+	0x054091c7, 0x0200a1ca, 0x06804009, 0x06b0c00b, 0x0c06e3c0,
+	0x00000000, 0x0780c007, 0x06905348, 0x0a803207, 0x0c7f1300,
+	0x07c03b8d, 0x0780c047, 0x09105207, 0x07803b4e, 0x0a803388,
+	0x0c7802c0, 0x07c03b48, 0x07803bc7, 0x0be20047, 0x068c000a,
+	0x06c0470a, 0x06808009, 0x06b0400b, 0x0c06df00, 0x00000000,
+	0x0c780900, 0x068f000a, 0x06c0470a, 0x07803b48, 0x0540a1c8,
+	0x0200a1ca, 0x06806009, 0x06b0400b, 0x0c06dc80, 0x00000000,
+	0x07804007, 0x06905348, 0x0a805207, 0x00000000, 0x07c03b8d,
+	0x0c7f0b40, 0x07c03b4e, 0x0680000a, 0x0c00f200, 0x00000000,
+	0x0c016b00, 0x00000000, 0x07803bc7, 0x0be34107, 0x068c000a,
+	0x06c0470a, 0x06804009, 0x06b0400b, 0x0c06d780, 0x00000000,
+	0x068cc00a, 0x06c0470a, 0x06802009, 0x06b0a00b, 0x0c06d600,
+	0x00000000, 0x0c013140, 0x00000000, 0x07803bc7, 0x0be34107,
+	0x068d000a, 0x06c0470a, 0x06804009, 0x06b0c00b, 0x0c06d380,
+	0x00000000, 0x0c780180, 0x068c000a, 0x06c0470a, 0x0680c009,
+	0x0c06d200, 0x06b0400b, 0x078020c8, 0x0f8001c8, 0x0649cf0a,
+	0x0be6808a, 0x07803bca, 0x0be6020a, 0x0780200a, 0x0aa5814a,
+	0x07801f4a, 0x0a814287, 0x0400128a, 0x06800049, 0x03409209,
+	0x04401249, 0x0280a289, 0x0a80e287, 0x0780394a, 0x0a63000a,
+	0x0649cf0a, 0x0be0d00a, 0x0c7fa580, 0x00000000, 0x07801eca,
+	0x0a61008a, 0x0680004a, 0x0c780100, 0x07c00b8a, 0x0680004a,
+	0x07c00b4a, 0x07c01f47, 0x07802107, 0x0a61c007, 0x068000c9,
+	0x0fc011c0, 0x0aa10007, 0x00000000, 0x0fc011c0, 0x04001247,
+	0x07c01f09, 0x07802007, 0x0a614147, 0x00000000, 0x0c06f3c0,
+	0x080c2301, 0x07c01f87, 0x07802147, 0x0a65c007, 0x07802187,
+	0x0f8001c7, 0x07807388, 0x07c01808, 0x07c07387, 0x078074c7,
+	0x07c01847, 0x06800007, 0x07c074c7, 0x07c07507, 0x078021c7,
+	0x0aa2c007, 0x07801f07, 0x0a6240c7, 0x00000000, 0x0c06eec0,
+	0x080c2301, 0x0c06f040, 0x00000000, 0x07c074c7, 0x058101c7,
+	0x07c07507, 0x0780738f, 0x078074d0, 0x07802147, 0x06800048,
+	0x0a422207, 0x07807547, 0x07c01807, 0x078075c7, 0x07c01847,
+	0x06800007, 0x07c07547, 0x07c07587, 0x07c075c7, 0x07c07607,
+	0x07803a87, 0x0aa54047, 0x00000000, 0x0c06e8c0, 0x080c2301,
+	0x0c06ea40, 0x00000000, 0x07c07547, 0x058101c7, 0x07c07587,
+	0x078021c7, 0x0aa2c007, 0x07801f07, 0x0a6240c7, 0x00000000,
+	0x0c06e5c0, 0x080c2301, 0x0c06e740, 0x00000000, 0x07c075c7,
+	0x058101c7, 0x07c07607, 0x0780754f, 0x078075d0, 0x0c079400,
+	0x00000000, 0x07802dc7, 0x0a608007, 0x0c782200, 0x07801e87,
+	0x069fffc8, 0x0b803207, 0x040011c7, 0x06800147, 0x07c01e87,
+	0x07802d07, 0x078023c8, 0x0b802207, 0x0c780200, 0x0780188a,
+	0x078018cb, 0x0680000c, 0x078023cd, 0x06800049, 0x0c07a540,
+	0x07c01e49, 0x07801d08, 0x0649cf09, 0x0aa28008, 0x07803c0a,
+	0x0aa0800a, 0x0c781c40, 0x04401208, 0x07c01d08, 0x0aa08008,
+	0x0c781b40, 0x09c09089, 0x0609cf09, 0x0a22c309, 0x0780204a,
+	0x0a62400a, 0x07802e0a, 0x0aa1c00a, 0x07801f0a, 0x0aa0c0ca,
+	0x0680004a, 0x0680008a, 0x0c781840, 0x07c01d0a, 0x0680000a,
+	0x07c01d0a, 0x0688000a, 0x0c06b140, 0x06c0000a, 0x07803bc7,
+	0x0be54107, 0x068001ca, 0x06031e0a, 0x0680001b, 0x0649ce09,
+	0x0aa10009, 0x00000000, 0x0809ce00, 0x08007401, 0x06431e09,
+	0x0bee4049, 0x00000000, 0x0649cf07, 0x0a2200c7, 0x07801d87,
+	0x0aa18007, 0x07801ec7, 0x0aa10087, 0x06800207, 0x0c7ed5c0,
+	0x07c03bc7, 0x06800013, 0x07c02cd3, 0x07c02d13, 0x07c02e93,
+	0x07c01893, 0x07c018d3, 0x06803fc7, 0x07c02b07, 0x06800007,
+	0x07c02547, 0x07c025c7, 0x07c02607, 0x07802c07, 0x040011c7,
+	0x07c024c7, 0x06800047, 0x060e0c07, 0x07c026c7, 0x07c02507,
+	0x068003c7, 0x07c02807, 0x06805c07, 0x060c2107, 0x080c2170,
+	0x06800087, 0x07c02a47, 0x06800018, 0x0649cf07, 0x0be1d007,
+	0x00000000, 0x07801ec7, 0x0aa28187, 0x06800007, 0x0c780200,
+	0x07c01e47, 0x07801ec7, 0x0a60c087, 0x06800007, 0x07c00b47,
+	0x07800b47, 0x07c01e47, 0x068003c7, 0x07c02fc7, 0x06800407,
+	0x060c2407, 0x06800007, 0x07807048, 0x06804009, 0x05403287,
+	0x0200a289, 0x0400128a, 0x0700028b, 0x060c220b, 0x0400128a,
+	0x0700028b, 0x0400128a, 0x0700028c, 0x096102cc, 0x060c220b,
+	0x0400128a, 0x0700028b, 0x0400128a, 0x0700028c, 0x096102cc,
+	0x060c220b, 0x040011c7, 0x0b8ee207, 0x00000000, 0x07801d07,
+	0x0aa08007, 0x0c7ec3c0, 0x06800007, 0x07c01947, 0x06a00007,
+	0x060c3d07, 0x07802dc7, 0x0a618007, 0x00000000, 0x0c0790c0,
+	0x00000000, 0x0aa08007, 0x0c7ec100, 0x07802047, 0x07c02e07,
+	0x07802007, 0x07c02e47, 0x07801ec7, 0x07c02087, 0x07801f47,
+	0x07c07347, 0x07801f07, 0x07c02407, 0x07801f87, 0x07c01fc7,
+	0x0780248a, 0x0a6fc00a, 0x00000000, 0x0c072f40, 0x00000000,
+	0x07802dc7, 0x0aa10007, 0x00000000, 0x0c072740, 0x00000000,
+	0x0c073300, 0x00000000, 0x07802087, 0x06840009, 0x0682629a,
+	0x0aa1c087, 0x06800008, 0x0682305a, 0x0aa10147, 0x06800048,
+	0x06800088, 0x06840009, 0x07c02788, 0x07c02689, 0x06800007,
+	0x07c02a87, 0x07802c8a, 0x07802107, 0x0a630007, 0x07802409,
+	0x0aa280c9, 0x0540128a, 0x0580128a, 0x06490707, 0x09807087,
+	0x098070c7, 0x06090707, 0x06495107, 0x098073c7, 0x06095107,
+	0x07c023ca, 0x07802947, 0x094421c9, 0x07c02947, 0x0a648387,
+	0x068000c9, 0x06495107, 0x094041c9, 0x06800009, 0x097821c9,
+	0x06095107, 0x06490707, 0x09807447, 0x06090707, 0x06498e07,
+	0x09807787, 0x09c070c7, 0x06098e07, 0x07802087, 0x0aa0c087,
+	0x0682519a, 0x068214da, 0x07803bc8, 0x090821c8, 0x0aa18087,
+	0x06800087, 0x09482207, 0x0690000a, 0x0c067fc0, 0x06c0000a,
+	0x0c784bc0, 0x07c03bc8, 0x07802dc7, 0x0aa18007, 0x00000000,
+	0x0c077a00, 0x00000000, 0x0aa08007, 0x0c7eaa40, 0x06800007,
+	0x07803bc8, 0x09082208, 0x0aa10008, 0x0684000a, 0x0c067bc0,
+	0x06c0000a, 0x07c03bc7, 0x07802d87, 0x0aa34007, 0x07802c47,
+	0x0b22c2c7, 0x07802cc7, 0x0a614007, 0x06495108, 0x09c08608,
+	0x0c7800c0, 0x07c02d87, 0x09808608, 0x06095108, 0x08095017,
+	0x08095000, 0x0c784400, 0x00000000, 0x0540928c, 0x0200a24a,
+	0x06c046ca, 0x0200ad0a, 0x0400130c, 0x0481f30c, 0x07c02b4c,
+	0x0643500c, 0x0580f30c, 0x0bef804c, 0x00000000, 0x0643530c,
+	0x0900c30c, 0x0a6f800c, 0x00000000, 0x0603510a, 0x06803f0a,
+	0x0603520a, 0x0c792ac0, 0x0603500b, 0x0cc00000, 0x00000000,
+	0x07802cc9, 0x07c02ac9, 0x07802889, 0x07c03049, 0x07802809,
+	0x0aa08009, 0x0cc00000, 0x064e0e09, 0x09809309, 0x098092c9,
+	0x0cc00000, 0x060e0e09, 0x06435007, 0x0580f1c7, 0x0bef8047,
+	0x0aa14712, 0x06800007, 0x07802d07, 0x050011c7, 0x048011c7,
+	0x0b60c709, 0x06808008, 0x0680c008, 0x0c78ec00, 0x00000000,
+	0x0c7806c0, 0x07802807, 0x0aaf8387, 0x00000000, 0x07802947,
+	0x0aaec387, 0x064e0407, 0x091c2207, 0x0a24c0c8, 0x080c3e07,
+	0x064c3f07, 0x064c3f09, 0x09004249, 0x0581b1c7, 0x0a234047,
+	0x090241c7, 0x0a210088, 0x0aa20289, 0x0aa1c309, 0x0be18087,
+	0x0a21c048, 0x0aa102c9, 0x0aa0c309, 0x0be08047, 0x0c7800c0,
+	0x06800049, 0x07c01e49, 0x0cc00000, 0x00000000, 0x07800dc8,
+	0x0aa0c048, 0x0c780780, 0x00000000, 0x06800008, 0x07c00dc8,
+	0x07800d89, 0x07801f08, 0x09610248, 0x0609d509, 0x0aa18048,
+	0x0aa20088, 0x00000000, 0x0680774a, 0x0c780180, 0x00000000,
+	0x068077ca, 0x0c7800c0, 0x00000000, 0x0680784a, 0x07000288,
+	0x0400128a, 0x07000289, 0x09610209, 0x0609d608, 0x0649d308,
+	0x098083c8, 0x0609d308, 0x08007401, 0x0649d308, 0x0a6fc008,
+	0x00000000, 0x0cc00000, 0x00000000, 0x0680000c, 0x0680002a,
+	0x064c2907, 0x0a20c407, 0x0c7e8780, 0x00000000, 0x0fc081c0,
+	0x0aaeffc7, 0x0200c1cc, 0x064c2907, 0x0a20c407, 0x0c7e85c0,
+	0x00000000, 0x0fc081c0, 0x0aaeffc7, 0x0202a1ea, 0x0aa5400c,
+	0x0aa1418c, 0x0462d1cc, 0x0c500880, 0x0a61004c, 0x0c780e80,
+	0x06800047, 0x07c01c47, 0x064c0007, 0x0be14207, 0x064c2907,
+	0x0be0c407, 0x0d07ff2a, 0x0fc081c0, 0x064c0007, 0x0be10207,
+	0x064c2907, 0x0be08407, 0x0c7ff780, 0x0c7e7fc0, 0x00000000,
+	0x0c067b80, 0x080c2301, 0x064c232b, 0x05810aeb, 0x048ffaeb,
+	0x068f000a, 0x06c0470a, 0x0540a1c7, 0x0200a1ca, 0x06804009,
+	0x0c064c40, 0x06b0400b, 0x07804007, 0x06905348, 0x0a80f207,
+	0x0c7e7b80, 0x0c067780, 0x080c2301, 0x064c232b, 0x05810aeb,
+	0x048ffaeb, 0x0fc011c0, 0x0aa14047, 0x04001aeb, 0x0fc071c0,
+	0x04007aeb, 0x07c017c7, 0x0c780140, 0x00000000, 0x0680004a,
+	0x0c005f40, 0x00000000, 0x048071eb, 0x0580322b, 0x0aa14007,
+	0x06800209, 0x04001208, 0x024071c9, 0x0f8001c7, 0x0262a22a,
+	0x0c57f440, 0x0c7ff280, 0x0680002b, 0x07803d0d, 0x0a22830d,
+	0x07802f87, 0x09005207, 0x04001208, 0x0c00cf80, 0x0202b22b,
+	0x090a5207, 0x04001208, 0x0c00ce80, 0x0202b22b, 0x0a21440d,
+	0x00000000, 0x0fc041c0, 0x07c02fc7, 0x04004aeb, 0x0c7ff940,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x07802787, 0x07802408,
+	0x094c21c8, 0x060c0407, 0x080c0a01, 0x07802347, 0x0a610007,
+	0x07802387, 0x0c780b00, 0x060c0a07, 0x0fc071c0, 0x080c2940,
+	0x07802387, 0x09807187, 0x098073c7, 0x060c0a07, 0x09c073c7,
+	0x09807387, 0x0c00b600, 0x060c0a07, 0x07802788, 0x064c0a07,
+	0x091c21c7, 0x0a6f8007, 0x07802a21, 0x06c00021, 0x06800022,
+	0x06c00022, 0x06800023, 0x06c00023, 0x06800024, 0x06c00024,
+	0x06bfffe5, 0x0a628008, 0x07802947, 0x06800309, 0x0aa18387,
+	0x07c029c9, 0x06800189, 0x07c029c9, 0x0c785980, 0x060c0713,
+	0x0c784ac0, 0x06800309, 0x0aa18387, 0x07c029c9, 0x06800189,
+	0x07c029c9, 0x0c7825c0, 0x060c0713, 0x0c780bc0, 0x00000000,
+	0x0c00ad80, 0x080c0600, 0x07802a21, 0x06c00021, 0x06800022,
+	0x06c00022, 0x06800023, 0x06c00023, 0x06800024, 0x06c00024,
+	0x06bfffe5, 0x07802788, 0x0a628008, 0x07802947, 0x06800309,
+	0x0aa18387, 0x07c029c9, 0x06800189, 0x07c029c9, 0x0c7851c0,
+	0x060c0713, 0x0c784300, 0x06800309, 0x0aa18387, 0x07c029c9,
+	0x06800189, 0x07c029c9, 0x0c781e00, 0x060c0713, 0x0c780400,
+	0x00000000, 0x064c0321, 0x064c0322, 0x064c0323, 0x064c0324,
+	0x064c2725, 0x0a224053, 0x07802447, 0x07c02987, 0x0400099d,
+	0x040009de, 0x04000a1f, 0x04000a60, 0x0c781400, 0x060c0713,
+	0x0683ffc7, 0x044011c7, 0x0aa0c007, 0x0780248a, 0x0a6f400a,
+	0x068000ca, 0x07802747, 0x09510287, 0x07802cc7, 0x09708287,
+	0x06031e0a, 0x0aa08007, 0x0c780b00, 0x080c0700, 0x07802a08,
+	0x06c00008, 0x060c0208, 0x06800008, 0x06c00008, 0x060c0208,
+	0x06800008, 0x06c00008, 0x060c0208, 0x06800008, 0x06c00008,
+	0x060c0208, 0x06bfffc9, 0x060c0326, 0x060c0327, 0x060c0328,
+	0x060c0329, 0x07802988, 0x09610209, 0x060c2708, 0x080c0701,
+	0x07802a08, 0x06c00008, 0x060c0208, 0x06800008, 0x06c00008,
+	0x060c0208, 0x06800008, 0x06c00008, 0x060c0208, 0x06800008,
+	0x06c00008, 0x060c0208, 0x060c031d, 0x060c031e, 0x060c031f,
+	0x060c0320, 0x0780244a, 0x09610289, 0x060c270a, 0x0c780580,
+	0x060c0713, 0x064c2709, 0x09210249, 0x060c0326, 0x060c0327,
+	0x060c0328, 0x060c0329, 0x07802988, 0x09610209, 0x060c2708,
+	0x080c0701, 0x064c2709, 0x09210249, 0x060c031d, 0x060c031e,
+	0x060c031f, 0x060c0320, 0x07802448, 0x09610209, 0x060c2708,
+	0x060c0713, 0x06431e09, 0x0befc049, 0x07802307, 0x09021247,
+	0x094411c9, 0x04c301c7, 0x0c780f00, 0x060c2507, 0x0683ffc8,
+	0x080c3e01, 0x064c3f07, 0x093e11c7, 0x0aaf4007, 0x064c2307,
+	0x09304247, 0x0aa0c009, 0x0aee4008, 0x04401208, 0x0cc00000,
+	0x00000000, 0x064c0321, 0x064c0322, 0x064c0323, 0x064c0324,
+	0x064c2725, 0x060c0713, 0x09210265, 0x07802cc7, 0x0a638007,
+	0x07802a08, 0x06c00008, 0x060c0208, 0x06800008, 0x06c00008,
+	0x060c0208, 0x06800008, 0x06c00008, 0x060c0208, 0x06800008,
+	0x06c00008, 0x060c0208, 0x06bfffc9, 0x060c031d, 0x060c031e,
+	0x060c031f, 0x060c0320, 0x07802448, 0x09610209, 0x060c2708,
+	0x07802307, 0x09021247, 0x094411c9, 0x04c301c7, 0x060c2507,
+	0x0683ffc9, 0x0780248a, 0x0aa1000a, 0x0aa0c0ca, 0x0a6f4009,
+	0x04401249, 0x068000ca, 0x07802749, 0x09510289, 0x07802cc9,
+	0x09708289, 0x06031e0a, 0x07802807, 0x0c07f140, 0x07c02887,
+	0x0b608008, 0x0c7ddec0, 0x090a1207, 0x090241c7, 0x095211c8,
+	0x0780194b, 0x0aa0c00b, 0x07c02807, 0x0c781040, 0x0aa64247,
+	0x060c2507, 0x0aa64287, 0x0aa58347, 0x0aa1c048, 0x0aa58387,
+	0x0a60c007, 0x0c7801c0, 0x00000000, 0x080c2605, 0x080c2606,
+	0x080c2602, 0x080c260f, 0x080c2603, 0x07802a48, 0x0aa100c8,
+	0x06800089, 0x0c782b80, 0x07c02a49, 0x0780248b, 0x0a6fc00b,
+	0x00000000, 0x07c02a88, 0x0c782a00, 0x07c02a49, 0x080c2602,
+	0x080c260f, 0x080c2603, 0x07802a48, 0x0aa50088, 0x068000c9,
+	0x07802cc8, 0x0aa0c008, 0x0c782780, 0x07c02a49, 0x0aa08712,
+	0x0bef4053, 0x0683ffcb, 0x078026c8, 0x064e0c09, 0x09010249,
+	0x0b804248, 0x0aa0c00b, 0x0c7ffec0, 0x044012cb, 0x06800088,
+	0x068000c9, 0x0680180b, 0x060c210b, 0x0683ffcc, 0x0aa2c00c,
+	0x064e110b, 0x091012cb, 0x0a6f400b, 0x0440130c, 0x064e110b,
+	0x091012cb, 0x0a6e400b, 0x0780248b, 0x0a6dc00b, 0x00000000,
+	0x07c02a88, 0x0c782040, 0x07c02a49, 0x06800007, 0x07c02807,
+	0x060c2507, 0x06431e07, 0x0befc047, 0x068fdfc8, 0x06fcffc8,
+	0x064e0407, 0x02807207, 0x0c7ff140, 0x060e0407, 0x064c0321,
+	0x064c0322, 0x064c2725, 0x0a230053, 0x07802447, 0x07c02987,
+	0x0400099d, 0x040009de, 0x060c0713, 0x07802307, 0x09021247,
+	0x094411c9, 0x04c301c7, 0x0c781640, 0x060c2507, 0x07802cc7,
+	0x0a658007, 0x080c0700, 0x07802a08, 0x06c00008, 0x060c0208,
+	0x080c0200, 0x06bfffc9, 0x060c0326, 0x060c0327, 0x0780298a,
+	0x09610289, 0x060c270a, 0x080c0701, 0x060c0208, 0x080c0200,
+	0x060c031d, 0x060c031e, 0x0780244a, 0x09610289, 0x060c270a,
+	0x0c780480, 0x060c0713, 0x064c2709, 0x09210249, 0x060c0326,
+	0x060c0327, 0x07802988, 0x09610209, 0x060c2708, 0x080c0701,
+	0x064c2709, 0x09210249, 0x060c031d, 0x060c031e, 0x07802448,
+	0x09610209, 0x060c2708, 0x060c0713, 0x07802307, 0x09021247,
+	0x094411c9, 0x04c301c7, 0x060c2507, 0x0780248a, 0x0a6fc00a,
+	0x068000ca, 0x07802749, 0x09510289, 0x07802cc9, 0x09708289,
+	0x0c780900, 0x06031e0a, 0x064c0321, 0x064c0322, 0x064c2725,
+	0x060c0713, 0x09210265, 0x07802cc7, 0x0a618007, 0x07802a08,
+	0x06c00008, 0x060c0208, 0x080c0200, 0x06bfffc9, 0x060c031d,
+	0x060c031e, 0x07802448, 0x09610209, 0x060c2708, 0x07802307,
+	0x09021247, 0x094411c9, 0x04c301c7, 0x060c2507, 0x0683ffc9,
+	0x04401249, 0x0aa10009, 0x0780248a, 0x0aa080ca, 0x0a6f000a,
+	0x068000ca, 0x07802749, 0x09510289, 0x07802cc9, 0x09708289,
+	0x06031e0a, 0x07802807, 0x0c07c200, 0x07c02887, 0x090241c7,
+	0x0b614008, 0x07c02807, 0x06bfffc8, 0x0c7daec0, 0x07c03c08,
+	0x0aa10287, 0x060c2507, 0x080c2602, 0x080c260f, 0x080c2603,
+	0x04c001c7, 0x09807207, 0x060c2107, 0x07802547, 0x0aa14007,
+	0x06a01008, 0x0aa0c047, 0x06a22008, 0x06a40008, 0x06431e09,
+	0x0befc049, 0x06c00108, 0x07802949, 0x0a670389, 0x0a26c053,
+	0x0c0750c0, 0x00000000, 0x0780288a, 0x0aa1c00a, 0x07802a8a,
+	0x00800000, 0x078026c9, 0x04001249, 0x07c026c9, 0x00400000,
+	0x0b61408a, 0x00000000, 0x080c2170, 0x0c780700, 0x080c260e,
+	0x0683ffca, 0x0440128a, 0x0aa0c00a, 0x07802489, 0x0a6f4009,
+	0x078026c9, 0x04401249, 0x0c008080, 0x07c026c9, 0x0c780440,
+	0x08030580, 0x060e0508, 0x07802a88, 0x06801809, 0x09502248,
+	0x060c2109, 0x080c260e, 0x07c02587, 0x0ba0c087, 0x040011c7,
+	0x06800007, 0x0c0746c0, 0x07c02547, 0x06800088, 0x07c02488,
+	0x08030580, 0x0c074c00, 0x00000000, 0x07802747, 0x0aa14712,
+	0x040011c7, 0x07802d08, 0x0a20c048, 0x00000000, 0x07c02747,
+	0x0c07ae80, 0x07802b0d, 0x0b608008, 0x0c7fed00, 0x0ba13fcd,
+	0x06800008, 0x0c781780, 0x07c02b08, 0x06808008, 0x0ba1070d,
+	0x0400024d, 0x0441c249, 0x0680c008, 0x05403289, 0x0200a24a,
+	0x02008288, 0x07400225, 0x04001208, 0x092102e1, 0x0740020b,
+	0x04001208, 0x07400221, 0x04001208, 0x07400222, 0x04001208,
+	0x092102e2, 0x0740020b, 0x04001208, 0x07400223, 0x04001208,
+	0x092102e3, 0x0740020b, 0x04001208, 0x07400224, 0x04001208,
+	0x092102e4, 0x0740020b, 0x07802c48, 0x0ac07488, 0x07802cca,
+	0x0aa38712, 0x040002ca, 0x07802d0a, 0x0c7802c0, 0x0942f28b,
+	0x0a61000a, 0x0aa14712, 0x07802d0a, 0x0a20c04a, 0x0a6146c9,
+	0x0400128d, 0x0b60c70d, 0x0680000a, 0x0680070a, 0x07c02b0a,
+	0x0b02d488, 0x0aa0800a, 0x0a67c70a, 0x07802b4a, 0x0a20c04a,
+	0x06a0800b, 0x06a0c00b, 0x06b00009, 0x07802b8c, 0x0540928c,
+	0x0200a24a, 0x06c046ca, 0x0200ad0a, 0x06435009, 0x0580f249,
+	0x0bef8049, 0x00000000, 0x0603510a, 0x06803f0a, 0x0603520a,
+	0x0603500b, 0x0400130c, 0x0481f30c, 0x07c02b8c, 0x07802b4c,
+	0x07802c47, 0x07802ccb, 0x024072c7, 0x0b20c0c7, 0x00000000,
+	0x068000c7, 0x095c2307, 0x07c02b4c, 0x07802b4c, 0x091c22cc,
+	0x0aa2800b, 0x044012cb, 0x095c230b, 0x0a61c00b, 0x07c02b4c,
+	0x0a20c04c, 0x06b0800b, 0x06b0c00b, 0x0c072540, 0x06b00009,
+	0x0680001b, 0x07802947, 0x0aa5c387, 0x07802cc7, 0x040011c7,
+	0x07c02cc7, 0x07802e88, 0x04001208, 0x07c02e88, 0x07802c48,
+	0x0b828207, 0x06800007, 0x07c02cc7, 0x07802d08, 0x04001208,
+	0x078023c9, 0x0b822248, 0x07c02d08, 0x07802487, 0x0a6fc007,
+	0x00000000, 0x06430507, 0x0a2f0107, 0x0c7dc300, 0x064c0007,
+	0x07802d08, 0x0be10048, 0x040011c8, 0x0c780580, 0x07c02d07,
+	0x044011c8, 0x07c02d07, 0x07802cc7, 0x040011c7, 0x07c02cc7,
+	0x07802e88, 0x04001208, 0x07c02e88, 0x07802c48, 0x0b80b207,
+	0x06800007, 0x07c02cc7, 0x07802d08, 0x04002208, 0x078023c9,
+	0x0b805248, 0x07c02d08, 0x06800007, 0x0c7ff880, 0x07c02e87,
+	0x064c3b07, 0x0920c1c7, 0x0b218a07, 0x0680004a, 0x07c01e4a,
+	0x07c01d8a, 0x0680204a, 0x07c0194a, 0x07802cc7, 0x095084c7,
+	0x07802d09, 0x094084c9, 0x07801909, 0x0aa14009, 0x04401249,
+	0x0a60c009, 0x07c01909, 0x0c7ef480, 0x07802c49, 0x0b014489,
+	0x06808008, 0x0a628712, 0x0c780840, 0x00000000, 0x07802d0a,
+	0x0a20c04a, 0x0500128a, 0x040011c7, 0x054011c7, 0x0c780840,
+	0x094011ca, 0x040011c7, 0x0a410247, 0x07802b09, 0x07802d07,
+	0x0a25c047, 0x040021c9, 0x0c7f1980, 0x06800007, 0x0aa5c712,
+	0x07802d0a, 0x0a2bc04a, 0x04001287, 0x0a4ed24a, 0x0c780480,
+	0x06800007, 0x0c7f1540, 0x00000000, 0x0a628047, 0x040021c9,
+	0x07802d07, 0x0be1c047, 0x040021c9, 0x0c7f1580, 0x06800047,
+	0x0aadc007, 0x07802b09, 0x040011c9, 0x0ba10707, 0x0b6cce07,
+	0x0680c008, 0x0441c1c7, 0x05403247, 0x020091c9, 0x02008248,
+	0x07000209, 0x07c02449, 0x04001208, 0x07000209, 0x04001208,
+	0x0700021d, 0x09610749, 0x04001208, 0x0700021e, 0x04001208,
+	0x07000209, 0x09610789, 0x04001208, 0x0700021f, 0x04001208,
+	0x07000209, 0x096107c9, 0x04001208, 0x07000220, 0x04001208,
+	0x07000209, 0x09610809, 0x0c7d5a00, 0x00000000, 0x07802dc7,
+	0x0aa18007, 0x07802087, 0x0a614087, 0x00000000, 0x08098002,
+	0x080980f0, 0x0c780a40, 0x080c2400, 0x064c2207, 0x09305207,
+	0x093a2287, 0x09205247, 0x092a22c7, 0x054022cb, 0x02c0a2ca,
+	0x09105347, 0x091a22c7, 0x054042cb, 0x02c0a2ca, 0x09005387,
+	0x090a22c7, 0x054062cb, 0x02c0a2ca, 0x07802087, 0x0a63c187,
+	0x080c2408, 0x064c2207, 0x048032ca, 0x0aa340cb, 0x00000000,
+	0x0480f28a, 0x09305347, 0x093a22c7, 0x054042cb, 0x02c0a2ca,
+	0x09205387, 0x092a22c7, 0x054062cb, 0x02c0a2ca, 0x0c780240,
+	0x00000000, 0x0480328a, 0x09305247, 0x093a22c7, 0x054022cb,
+	0x0c7800c0, 0x02c0a2ca, 0x0c780580, 0x05418208, 0x0609b308,
+	0x0649b308, 0x05418249, 0x0609b309, 0x0649b309, 0x0541834d,
+	0x0609b30d, 0x0649b30d, 0x0541838e, 0x0609b30e, 0x0649b30e,
+	0x08098002, 0x06bfffcb, 0x054102cb, 0x06bfffcc, 0x02c0c2cc,
+	0x0609820c, 0x048032ca, 0x0a6480cb, 0x0c780080, 0x0c780640,
+	0x054102c8, 0x058102cb, 0x05410308, 0x02c0c2cc, 0x0609810c,
+	0x054042ca, 0x0609800b, 0x0a811248, 0x00000000, 0x054102c9,
+	0x058102cb, 0x05410309, 0x02c0c2cc, 0x0c7802c0, 0x0609820c,
+	0x054102c8, 0x058102cb, 0x05410309, 0x02c0c2cc, 0x0609810c,
+	0x054042ca, 0x04c042cb, 0x0c7800c0, 0x0609800b, 0x0c780340,
+	0x048032ca, 0x054182cb, 0x02c0b20b, 0x0483030a, 0x0541430c,
+	0x02c0c34c, 0x0a80630b, 0x054102cd, 0x058102cb, 0x0541030e,
+	0x02c0c2cc, 0x0609820c, 0x0780294b, 0x0a60c38b, 0x06800712,
+	0x05801492, 0x06bfffcb, 0x06800021, 0x07802a1d, 0x0680001e,
+	0x06800022, 0x0680001f, 0x06800023, 0x06800020, 0x06800024,
+	0x0400099d, 0x040009de, 0x04000a1f, 0x04000a60, 0x0680800a,
+	0x0680070e, 0x0740028b, 0x0400128a, 0x074002a1, 0x0400128a,
+	0x0740029d, 0x0400128a, 0x0740029e, 0x0400128a, 0x074002a2,
+	0x0400128a, 0x0740029f, 0x0400128a, 0x074002a3, 0x0400128a,
+	0x074002a0, 0x0400128a, 0x074002a4, 0x0d07fbce, 0x0400128a,
+	0x07c0244b, 0x07c0298b, 0x096102cb, 0x080c0700, 0x060c270b,
+	0x09610761, 0x060c021d, 0x096107a2, 0x0780278e, 0x0aa1800e,
+	0x060c021e, 0x096107e3, 0x060c021f, 0x09610824, 0x060c0220,
+	0x080c0701, 0x060c270b, 0x060c021d, 0x0aa1000e, 0x060c021e,
+	0x060c021f, 0x060c0220, 0x07802c4e, 0x0b00948e, 0x06b00007,
+	0x06c046c7, 0x02007d07, 0x06035107, 0x06803f07, 0x06035207,
+	0x06a08007, 0x06035007, 0x07802cc7, 0x0aa24007, 0x06803fc7,
+	0x07802947, 0x0aa1c387, 0x07802cc7, 0x044011c7, 0x0ba0c707,
+	0x0c7fffc0, 0x0441c1c7, 0x07c02b07, 0x06800007, 0x07c02747,
+	0x0ac0b48e, 0x07802b07, 0x0b613fc7, 0x0ba0c707, 0x0441c1c7,
+	0x07c02b07, 0x06435007, 0x0580f1c7, 0x0bef8047, 0x0cc00000,
+	0x00000000, 0x06435007, 0x0580f1c7, 0x0bef8047, 0x00000000,
+	0x06435307, 0x0900c1c7, 0x0a6f8007, 0x06b00007, 0x06c046c7,
+	0x02007d07, 0x06035107, 0x06803f07, 0x06035207, 0x06b0c007,
+	0x06035007, 0x054011d2, 0x0ac051ce, 0x06800087, 0x07c02b47,
+	0x0c7ff8c0, 0x07c02b87, 0x06b10008, 0x06c046c8, 0x02008d08,
+	0x05401252, 0x02009489, 0x0680008a, 0x07c02b4a, 0x068000ca,
+	0x06435007, 0x0580f1c7, 0x0bef8047, 0x06803f07, 0x06035108,
+	0x06035207, 0x06a08007, 0x06035007, 0x0ac0324e, 0x0c7ff400,
+	0x07c02b8a, 0x06808007, 0x020081c8, 0x02009489, 0x0c7ffc80,
+	0x0400128a, 0x0780254b, 0x0a60c00b, 0x044011cb, 0x06800087,
+	0x0aa14007, 0x06a01008, 0x0aa0c047, 0x06a22008, 0x06a40008,
+	0x06c00108, 0x060e0508, 0x07c02587, 0x07802a88, 0x06801809,
+	0x09502248, 0x060c2109, 0x080c260e, 0x06800049, 0x07c02849,
+	0x07802cc9, 0x07c02ac9, 0x07802889, 0x07c03049, 0x06800088,
+	0x0cc00000, 0x07c02488, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x06bfff40, 0x06032400,
+	0x00400000, 0x0c780000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0cc00000,
+	0x00400000, 0x0c780080, 0x06431e07, 0x09027207, 0x0a668048,
+	0x068fdfca, 0x06fcffca, 0x064e0408, 0x02808288, 0x09110287,
+	0x064c0909, 0x0ac0924a, 0x0b80324a, 0x0c7801c0, 0x09808688,
+	0x0400128a, 0x098083c8, 0x0a40324a, 0x0440128a, 0x098086c8,
+	0x0aa1000a, 0x09308287, 0x0a60c00a, 0x0400128a, 0x09808388,
+	0x0b80324a, 0x00000000, 0x098081c8, 0x0c780500, 0x060e0408,
+	0x0a614248, 0x00000000, 0x0c009240, 0x00000000, 0x0c780380,
+	0x0a62c288, 0x06431f20, 0x06433f21, 0x0e000860, 0x00000000,
+	0x00000000, 0x0f000800, 0x06031f20, 0x0f010840, 0x0c780100,
+	0x06033f21, 0x0c780080, 0x00000000, 0x08031e00, 0x0cc00000,
+	0x00400000, 0x0680400f, 0x0680a00e, 0x0680ec0d, 0x0680f60c,
+	0x0780704b, 0x0680000a, 0x06800009, 0x06800008, 0x0780776f,
+	0x07807780, 0x09610bc0, 0x0780736e, 0x078020c0, 0x06800041,
+	0x0342d001, 0x07807300, 0x06800081, 0x0b831040, 0x05403c4a,
+	0x02031c4f, 0x04001c71, 0x07000c44, 0x06800c00, 0x0bc25004,
+	0x09042004, 0x068000c1, 0x0a422040, 0x09101004, 0x04001c31,
+	0x02030030, 0x02030030, 0x07000c2c, 0x04001c30, 0x07000c00,
+	0x09610b00, 0x04005c71, 0x07000c6b, 0x0b003bab, 0x00000000,
+	0x0242bb6b, 0x0202a209, 0x05402c2a, 0x02030c0e, 0x07400c0a,
+	0x068000c0, 0x04001c30, 0x07400c00, 0x04001c30, 0x07400c2b,
+	0x0581002b, 0x04001c30, 0x07400c00, 0x0ac05bec, 0x0203024d,
+	0x07400c2a, 0x04001249, 0x0c780100, 0x0203020c, 0x07400c2a,
+	0x04001208, 0x0400128a, 0x0b8d52ca, 0x02000209, 0x07c070c9,
+	0x0cc00000, 0x07c07100, 0x0aa14040, 0x06800047, 0x06800006,
+	0x0c780100, 0x00000000, 0x06800007, 0x06800046, 0x05403c4a,
+	0x02031c4f, 0x04001c71, 0x07000c44, 0x09101004, 0x04001c31,
+	0x02030030, 0x02030030, 0x07000c2c, 0x04001c30, 0x07000c00,
+	0x09610b00, 0x04005c71, 0x07000c6b, 0x0b003bab, 0x00000000,
+	0x0242bb6b, 0x0be60404, 0x0a25c104, 0x0202a209, 0x05402c2a,
+	0x02030c0e, 0x07400c0a, 0x06800040, 0x04001c30, 0x07400c00,
+	0x0540102b, 0x020001c0, 0x04001c30, 0x07400c00, 0x05810000,
+	0x04001c30, 0x07400c00, 0x0ac05bec, 0x0203024d, 0x07400c2a,
+	0x04001249, 0x0c780100, 0x0203020c, 0x07400c2a, 0x04001208,
+	0x0be60804, 0x0a25c204, 0x0202a209, 0x05402c2a, 0x02030c0e,
+	0x07400c0a, 0x06800080, 0x04001c30, 0x07400c00, 0x0540102b,
+	0x02000180, 0x04001c30, 0x07400c00, 0x05810000, 0x04001c30,
+	0x07400c00, 0x0ac05bec, 0x0203024d, 0x07400c2a, 0x04001249,
+	0x0c780100, 0x0203020c, 0x07400c2a, 0x04001208, 0x0400128a,
+	0x0b8be2ca, 0x02000209, 0x07c070c9, 0x0cc00000, 0x07c07100,
+	0x0680400f, 0x0680a00e, 0x0680ec0d, 0x0780704b, 0x0680000a,
+	0x07807109, 0x07807300, 0x0ba6c080, 0x05403c4a, 0x02031c4f,
+	0x04001c71, 0x07000c44, 0x09082004, 0x0a6440c0, 0x04006c71,
+	0x07000c6b, 0x05402c09, 0x02030c0e, 0x07400c0a, 0x068001c0,
+	0x04001c30, 0x07400c00, 0x04001c30, 0x07400c2b, 0x0581002b,
+	0x04001c30, 0x07400c00, 0x0203024d, 0x07400c09, 0x04001249,
+	0x0400128a, 0x0b8e92ca, 0x0cc00000, 0x07c07149, 0x0aa14040,
+	0x06800047, 0x06800006, 0x0c780100, 0x00000000, 0x06800007,
+	0x06800046, 0x05403c4a, 0x02031c4f, 0x04001c71, 0x07000c44,
+	0x04006c71, 0x07000c6b, 0x0a244404, 0x05402c09, 0x02030c0e,
+	0x07400c0a, 0x06800140, 0x04001c30, 0x07400c00, 0x0540102b,
+	0x020001c0, 0x04001c30, 0x07400c00, 0x05810000, 0x04001c30,
+	0x07400c00, 0x0203024d, 0x07400c09, 0x04001249, 0x0a244804,
+	0x05402c09, 0x02030c0e, 0x07400c0a, 0x06800180, 0x04001c30,
+	0x07400c00, 0x0540102b, 0x02000180, 0x04001c30, 0x07400c00,
+	0x05810000, 0x04001c30, 0x07400c00, 0x0203024d, 0x07400c09,
+	0x04001249, 0x0400128a, 0x0b8d72ca, 0x0cc00000, 0x07c07149,
+	0x0680ec0f, 0x0680f60e, 0x0780710a, 0x078070c9, 0x06800008,
+	0x0240a24a, 0x0200e28e, 0x0a60c009, 0x0cc00000, 0x00000000,
+	0x070003c0, 0x07400380, 0x040013cf, 0x0400138e, 0x04001208,
+	0x0b8fb248, 0x0cc00000, 0x00000000, 0x0680ec0f, 0x0680f60e,
+	0x0780710a, 0x078070c9, 0x06800008, 0x0240a24a, 0x0200f24f,
+	0x0a60c00a, 0x0cc00000, 0x00000000, 0x07000380, 0x074003c0,
+	0x040013cf, 0x0400138e, 0x04001208, 0x0b8fb288, 0x0cc00000,
+	0x00000000, 0x0680ec0f, 0x0680f60e, 0x0780710a, 0x07807149,
+	0x0200f28f, 0x0200e28e, 0x0a40324a, 0x0cc00000, 0x00000000,
+	0x070003c0, 0x07400380, 0x040013cf, 0x0400138e, 0x0400128a,
+	0x0b8fb24a, 0x0cc00000, 0x00000000, 0x0b60808e, 0x0c780e00,
+	0x0680a00c, 0x0680400b, 0x0680000a, 0x0a83438a, 0x0400124a,
+	0x0202f28f, 0x07000bee, 0x0540222e, 0x0200820c, 0x04002208,
+	0x0700022d, 0x04001208, 0x07000200, 0x09610b40, 0x0a814389,
+	0x0202c24f, 0x07000b2b, 0x0540222b, 0x0200820c, 0x04002208,
+	0x0700022a, 0x04001208, 0x07000200, 0x09610a80, 0x0a60c00d,
+	0x0b807aad, 0x0c7800c0, 0x0ac05aad, 0x00000000, 0x07400b2e,
+	0x04000bab, 0x04000b6a, 0x04001249, 0x0c7ffb40, 0x07807300,
+	0x0b644080, 0x0a24004a, 0x0540222e, 0x0200820c, 0x04002208,
+	0x07000207, 0x0a22c047, 0x04401b6f, 0x07000b6c, 0x0540222c,
+	0x0200820c, 0x04002208, 0x07000207, 0x0be10047, 0x00000000,
+	0x07400b6e, 0x04000bac, 0x07400bee, 0x0400128a, 0x0c7ff340,
+	0x0cc00000, 0x00000000, 0x0b60808e, 0x0c781680, 0x0680a00c,
+	0x0680400b, 0x0680000a, 0x0a85638a, 0x0400124a, 0x0202f28f,
+	0x07000bee, 0x0540222e, 0x0200820c, 0x07000207, 0x04001208,
+	0x07000206, 0x054031c7, 0x020071cb, 0x09002146, 0x0a6280c5,
+	0x00000000, 0x040011c7, 0x070001c4, 0x09101c44, 0x040011c7,
+	0x02007c47, 0x02007c47, 0x0c780100, 0x00000000, 0x02007147,
+	0x02007147, 0x070001ed, 0x040011c7, 0x070001c0, 0x09610b40,
+	0x0a825389, 0x0202c24f, 0x07000b2b, 0x0540222b, 0x0200820c,
+	0x07000207, 0x04001208, 0x07000206, 0x054031c7, 0x020071cb,
+	0x09002146, 0x0a6280c5, 0x00000000, 0x040011c7, 0x070001c4,
+	0x09101c44, 0x040011c7, 0x02007c47, 0x02007c47, 0x0c780100,
+	0x00000000, 0x02007147, 0x02007147, 0x070001ea, 0x040011c7,
+	0x070001c0, 0x09610a80, 0x0a60c00d, 0x0b807aad, 0x0c7800c0,
+	0x0ac05aad, 0x00000000, 0x07400b2e, 0x04000bab, 0x04000b6a,
+	0x04001249, 0x0c7ff700, 0x07807300, 0x0b644080, 0x0a24004a,
+	0x0540222e, 0x0200820c, 0x04002208, 0x07000207, 0x0a22c047,
+	0x04401b6f, 0x07000b6c, 0x0540222c, 0x0200820c, 0x04002208,
+	0x07000207, 0x0be10047, 0x00000000, 0x07400b6e, 0x04000bac,
+	0x07400bee, 0x0400128a, 0x0c7feac0, 0x0cc00000, 0x00000000,
+	0x0400120a, 0x0200720f, 0x070001c9, 0x05402189, 0x0200618c,
+	0x04002186, 0x07000185, 0x09001005, 0x0a4092c0, 0x04401c47,
+	0x07000c40, 0x074001c0, 0x04401208, 0x0acfc288, 0x040001f1,
+	0x0cc00000, 0x074001c9, 0x04001208, 0x0b8ef388, 0x0cc00000,
+	0x00000000, 0x0780710e, 0x0440134e, 0x0680a00c, 0x0680000a,
+	0x0b60808e, 0x0c7804c0, 0x0200928f, 0x07000248, 0x054021c8,
+	0x020071cc, 0x040021c7, 0x070001c6, 0x0be1804a, 0x0be24046,
+	0x00000000, 0x0c07f700, 0x0680004b, 0x0c780140, 0x0a210046,
+	0x00000000, 0x0c07f5c0, 0x0680000b, 0x0400128a, 0x0b8ef34a,
+	0x0cc00000, 0x00000000, 0x06800008, 0x0700040a, 0x0200720f,
+	0x070001c9, 0x05402189, 0x020061af, 0x04001186, 0x07000185,
+	0x09041005, 0x0a418a80, 0x04001186, 0x07000185, 0x04001186,
+	0x07000180, 0x09610140, 0x0a412305, 0x0a80e348, 0x0ac07348,
+	0x00000000, 0x0200734f, 0x0a80a34a, 0x0400128a, 0x0440120a,
+	0x0200720f, 0x04401c47, 0x07000c40, 0x074001c0, 0x04401208,
+	0x0acfc348, 0x040001f1, 0x074001c9, 0x0cc00000, 0x0740040a,
+	0x04001208, 0x0b8e0288, 0x0cc00000, 0x00000000, 0x0680a02f,
+	0x078020c0, 0x06800041, 0x0342e001, 0x0780736d, 0x07807300,
+	0x0b614080, 0x00000000, 0x05401bae, 0x05401b6d, 0x04001b6d,
+	0x0242cbad, 0x04000aed, 0x0680000d, 0x0680002a, 0x07000380,
+	0x0400138e, 0x0aa10000, 0x0aa30040, 0x0aa50080, 0x0c780680,
+	0x07000380, 0x0400138e, 0x04001000, 0x0242b02b, 0x0b411b2b,
+	0x0400032b, 0x0202bbab, 0x0c780380, 0x0400032b, 0x07000380,
+	0x0400138e, 0x04001000, 0x0202b02b, 0x0b808b6b, 0x0400032b,
+	0x0242bbab, 0x0c780140, 0x0400032b, 0x0680006a, 0x0700038c,
+	0x0400138e, 0x0c07ec40, 0x00000000, 0x0c7ff880, 0x0400134d,
+	0x0cc00000, 0x00000000, 0x0c077280, 0x00000000, 0x0c079600,
+	0x00000000, 0x07802080, 0x0aa64180, 0x00000000, 0x0c07ae80,
+	0x00000000, 0x07807140, 0x07c07240, 0x0680ec0f, 0x0780710e,
+	0x0680004d, 0x0c07b580, 0x00000000, 0x0680ec0f, 0x0780714e,
+	0x07807100, 0x0200f00f, 0x0240e00e, 0x0680000d, 0x0c07b380,
+	0x00000000, 0x0680ec0f, 0x0680c00e, 0x0c07ed80, 0x06807250,
+	0x0cc00000, 0x00000000, 0x0680ec0f, 0x078070ce, 0x0680004d,
+	0x0c07bf80, 0x00000000, 0x0680f60f, 0x0780710e, 0x078070c0,
+	0x0240e00e, 0x0680000d, 0x0c07bdc0, 0x00000000, 0x0680ec0f,
+	0x0780714e, 0x07807100, 0x0200f00f, 0x0240e00e, 0x0680000d,
+	0x0c07ad00, 0x00000000, 0x0c07a3c0, 0x00000000, 0x0c079ec0,
+	0x00000000, 0x0c07a740, 0x00000000, 0x07807140, 0x07c07240,
+	0x07c07280, 0x07807300, 0x0b618080, 0x00000000, 0x0c07d4c0,
+	0x0680ec0f, 0x0c07d440, 0x0680f60f, 0x078070c0, 0x07807101,
+	0x07807170, 0x0ba280b0, 0x0aa0c000, 0x0a802040, 0x0c7801c0,
+	0x0680f60f, 0x0400138f, 0x070003c0, 0x07000381, 0x07400380,
+	0x074003c1, 0x0680ec0f, 0x0680c00e, 0x0c07dfc0, 0x06807250,
+	0x0680f60f, 0x0680d08e, 0x0c07dec0, 0x06807290, 0x0cc00000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000
+};
diff --git a/drivers/amlogic/amports/arch/ucode/h264/gxtvbb_h264data_linux.h b/drivers/amlogic/amports/arch/ucode/h264/gxtvbb_h264data_linux.h
new file mode 100644
index 0000000..8cf9825
--- /dev/null
+++ b/drivers/amlogic/amports/arch/ucode/h264/gxtvbb_h264data_linux.h
@@ -0,0 +1,207 @@
+static const u32 MicroCode[] __initconst = {
+	0x07802787, 0x07802408, 0x094c21c8, 0x060c0407, 0x080c0a01,
+	0x07802347, 0x0a610007, 0x07802387, 0x0c780b00, 0x060c0a07,
+	0x0fc071c0, 0x080c2940, 0x07802387, 0x09807187, 0x098073c7,
+	0x060c0a07, 0x09c073c7, 0x09807387, 0x0c00b600, 0x060c0a07,
+	0x07802788, 0x064c0a07, 0x091c21c7, 0x0a6f8007, 0x07802a21,
+	0x06c00021, 0x06800022, 0x06c00022, 0x06800023, 0x06c00023,
+	0x06800024, 0x06c00024, 0x06bfffe5, 0x0a628008, 0x07802947,
+	0x06800309, 0x0aa18387, 0x07c029c9, 0x06800189, 0x07c029c9,
+	0x0c785980, 0x060c0713, 0x0c784ac0, 0x06800309, 0x0aa18387,
+	0x07c029c9, 0x06800189, 0x07c029c9, 0x0c7825c0, 0x060c0713,
+	0x0c780bc0, 0x00000000, 0x0c00ad80, 0x080c0600, 0x07802a21,
+	0x06c00021, 0x06800022, 0x06c00022, 0x06800023, 0x06c00023,
+	0x06800024, 0x06c00024, 0x06bfffe5, 0x07802788, 0x0a628008,
+	0x07802947, 0x06800309, 0x0aa18387, 0x07c029c9, 0x06800189,
+	0x07c029c9, 0x0c7851c0, 0x060c0713, 0x0c784300, 0x06800309,
+	0x0aa18387, 0x07c029c9, 0x06800189, 0x07c029c9, 0x0c781e00,
+	0x060c0713, 0x0c780400, 0x00000000, 0x064c0321, 0x064c0322,
+	0x064c0323, 0x064c0324, 0x064c2725, 0x0a224053, 0x07802447,
+	0x07c02987, 0x0400099d, 0x040009de, 0x04000a1f, 0x04000a60,
+	0x0c781400, 0x060c0713, 0x0683ffc7, 0x044011c7, 0x0aa0c007,
+	0x0780248a, 0x0a6f400a, 0x068000ca, 0x07802747, 0x09510287,
+	0x07802cc7, 0x09708287, 0x06031e0a, 0x0aa08007, 0x0c780b00,
+	0x080c0700, 0x07802a08, 0x06c00008, 0x060c0208, 0x06800008,
+	0x06c00008, 0x060c0208, 0x06800008, 0x06c00008, 0x060c0208,
+	0x06800008, 0x06c00008, 0x060c0208, 0x06bfffc9, 0x060c0326,
+	0x060c0327, 0x060c0328, 0x060c0329, 0x07802988, 0x09610209,
+	0x060c2708, 0x080c0701, 0x07802a08, 0x06c00008, 0x060c0208,
+	0x06800008, 0x06c00008, 0x060c0208, 0x06800008, 0x06c00008,
+	0x060c0208, 0x06800008, 0x06c00008, 0x060c0208, 0x060c031d,
+	0x060c031e, 0x060c031f, 0x060c0320, 0x0780244a, 0x09610289,
+	0x060c270a, 0x0c780580, 0x060c0713, 0x064c2709, 0x09210249,
+	0x060c0326, 0x060c0327, 0x060c0328, 0x060c0329, 0x07802988,
+	0x09610209, 0x060c2708, 0x080c0701, 0x064c2709, 0x09210249,
+	0x060c031d, 0x060c031e, 0x060c031f, 0x060c0320, 0x07802448,
+	0x09610209, 0x060c2708, 0x060c0713, 0x06431e09, 0x0befc049,
+	0x07802307, 0x09021247, 0x094411c9, 0x04c301c7, 0x0c780f00,
+	0x060c2507, 0x0683ffc8, 0x080c3e01, 0x064c3f07, 0x093e11c7,
+	0x0aaf4007, 0x064c2307, 0x09304247, 0x0aa0c009, 0x0aee4008,
+	0x04401208, 0x0cc00000, 0x00000000, 0x064c0321, 0x064c0322,
+	0x064c0323, 0x064c0324, 0x064c2725, 0x060c0713, 0x09210265,
+	0x07802cc7, 0x0a638007, 0x07802a08, 0x06c00008, 0x060c0208,
+	0x06800008, 0x06c00008, 0x060c0208, 0x06800008, 0x06c00008,
+	0x060c0208, 0x06800008, 0x06c00008, 0x060c0208, 0x06bfffc9,
+	0x060c031d, 0x060c031e, 0x060c031f, 0x060c0320, 0x07802448,
+	0x09610209, 0x060c2708, 0x07802307, 0x09021247, 0x094411c9,
+	0x04c301c7, 0x060c2507, 0x0683ffc9, 0x0780248a, 0x0aa1000a,
+	0x0aa0c0ca, 0x0a6f4009, 0x04401249, 0x068000ca, 0x07802749,
+	0x09510289, 0x07802cc9, 0x09708289, 0x06031e0a, 0x07802807,
+	0x0c07f140, 0x07c02887, 0x0b608008, 0x0c7ddec0, 0x090a1207,
+	0x090241c7, 0x095211c8, 0x0780194b, 0x0aa0c00b, 0x07c02807,
+	0x0c781040, 0x0aa64247, 0x060c2507, 0x0aa64287, 0x0aa58347,
+	0x0aa1c048, 0x0aa58387, 0x0a60c007, 0x0c7801c0, 0x00000000,
+	0x080c2605, 0x080c2606, 0x080c2602, 0x080c260f, 0x080c2603,
+	0x07802a48, 0x0aa100c8, 0x06800089, 0x0c782b80, 0x07c02a49,
+	0x0780248b, 0x0a6fc00b, 0x00000000, 0x07c02a88, 0x0c782a00,
+	0x07c02a49, 0x080c2602, 0x080c260f, 0x080c2603, 0x07802a48,
+	0x0aa50088, 0x068000c9, 0x07802cc8, 0x0aa0c008, 0x0c782780,
+	0x07c02a49, 0x0aa08712, 0x0bef4053, 0x0683ffcb, 0x078026c8,
+	0x064e0c09, 0x09010249, 0x0b804248, 0x0aa0c00b, 0x0c7ffec0,
+	0x044012cb, 0x06800088, 0x068000c9, 0x0680180b, 0x060c210b,
+	0x0683ffcc, 0x0aa2c00c, 0x064e110b, 0x091012cb, 0x0a6f400b,
+	0x0440130c, 0x064e110b, 0x091012cb, 0x0a6e400b, 0x0780248b,
+	0x0a6dc00b, 0x00000000, 0x07c02a88, 0x0c782040, 0x07c02a49,
+	0x06800007, 0x07c02807, 0x060c2507, 0x06431e07, 0x0befc047,
+	0x068fdfc8, 0x06fcffc8, 0x064e0407, 0x02807207, 0x0c7ff140,
+	0x060e0407, 0x064c0321, 0x064c0322, 0x064c2725, 0x0a230053,
+	0x07802447, 0x07c02987, 0x0400099d, 0x040009de, 0x060c0713,
+	0x07802307, 0x09021247, 0x094411c9, 0x04c301c7, 0x0c781640,
+	0x060c2507, 0x07802cc7, 0x0a658007, 0x080c0700, 0x07802a08,
+	0x06c00008, 0x060c0208, 0x080c0200, 0x06bfffc9, 0x060c0326,
+	0x060c0327, 0x0780298a, 0x09610289, 0x060c270a, 0x080c0701,
+	0x060c0208, 0x080c0200, 0x060c031d, 0x060c031e, 0x0780244a,
+	0x09610289, 0x060c270a, 0x0c780480, 0x060c0713, 0x064c2709,
+	0x09210249, 0x060c0326, 0x060c0327, 0x07802988, 0x09610209,
+	0x060c2708, 0x080c0701, 0x064c2709, 0x09210249, 0x060c031d,
+	0x060c031e, 0x07802448, 0x09610209, 0x060c2708, 0x060c0713,
+	0x07802307, 0x09021247, 0x094411c9, 0x04c301c7, 0x060c2507,
+	0x0780248a, 0x0a6fc00a, 0x068000ca, 0x07802749, 0x09510289,
+	0x07802cc9, 0x09708289, 0x0c780900, 0x06031e0a, 0x064c0321,
+	0x064c0322, 0x064c2725, 0x060c0713, 0x09210265, 0x07802cc7,
+	0x0a618007, 0x07802a08, 0x06c00008, 0x060c0208, 0x080c0200,
+	0x06bfffc9, 0x060c031d, 0x060c031e, 0x07802448, 0x09610209,
+	0x060c2708, 0x07802307, 0x09021247, 0x094411c9, 0x04c301c7,
+	0x060c2507, 0x0683ffc9, 0x04401249, 0x0aa10009, 0x0780248a,
+	0x0aa080ca, 0x0a6f000a, 0x068000ca, 0x07802749, 0x09510289,
+	0x07802cc9, 0x09708289, 0x06031e0a, 0x07802807, 0x0c07c200,
+	0x07c02887, 0x090241c7, 0x0b614008, 0x07c02807, 0x06bfffc8,
+	0x0c7daec0, 0x07c03c08, 0x0aa10287, 0x060c2507, 0x080c2602,
+	0x080c260f, 0x080c2603, 0x04c001c7, 0x09807207, 0x060c2107,
+	0x07802547, 0x0aa14007, 0x06a01008, 0x0aa0c047, 0x06a22008,
+	0x06a40008, 0x06431e09, 0x0befc049, 0x06c00108, 0x07802949,
+	0x0a670389, 0x0a26c053, 0x0c0750c0, 0x00000000, 0x0780288a,
+	0x0aa1c00a, 0x07802a8a, 0x00800000, 0x078026c9, 0x04001249,
+	0x07c026c9, 0x00400000, 0x0b61408a, 0x00000000, 0x080c2170,
+	0x0c780700, 0x080c260e, 0x0683ffca, 0x0440128a, 0x0aa0c00a,
+	0x07802489, 0x0a6f4009, 0x078026c9, 0x04401249, 0x0c008080,
+	0x07c026c9, 0x0c780440, 0x08030580, 0x060e0508, 0x07802a88,
+	0x06801809, 0x09502248, 0x060c2109, 0x080c260e, 0x07c02587,
+	0x0ba0c087, 0x040011c7, 0x06800007, 0x0c0746c0, 0x07c02547,
+	0x06800088, 0x07c02488, 0x08030580, 0x0c074c00, 0x00000000,
+	0x07802747, 0x0aa14712, 0x040011c7, 0x07802d08, 0x0a20c048,
+	0x00000000, 0x07c02747, 0x0c07ae80, 0x07802b0d, 0x0b608008,
+	0x0c7fed00, 0x0ba13fcd, 0x06800008, 0x0c781780, 0x07c02b08,
+	0x06808008, 0x0ba1070d, 0x0400024d, 0x0441c249, 0x0680c008,
+	0x05403289, 0x0200a24a, 0x02008288, 0x07400225, 0x04001208,
+	0x092102e1, 0x0740020b, 0x04001208, 0x07400221, 0x04001208,
+	0x07400222, 0x04001208, 0x092102e2, 0x0740020b, 0x04001208,
+	0x07400223, 0x04001208, 0x092102e3, 0x0740020b, 0x04001208,
+	0x07400224, 0x04001208, 0x092102e4, 0x0740020b, 0x07802c48,
+	0x0ac07488, 0x07802cca, 0x0aa38712, 0x040002ca, 0x07802d0a,
+	0x0c7802c0, 0x0942f28b, 0x0a61000a, 0x0aa14712, 0x07802d0a,
+	0x0a20c04a, 0x0a6146c9, 0x0400128d, 0x0b60c70d, 0x0680000a,
+	0x0680070a, 0x07c02b0a, 0x0b02d488, 0x0aa0800a, 0x0a67c70a,
+	0x07802b4a, 0x0a20c04a, 0x06a0800b, 0x06a0c00b, 0x06b00009,
+	0x07802b8c, 0x0540928c, 0x0200a24a, 0x06c046ca, 0x0200ad0a,
+	0x06435009, 0x0580f249, 0x0bef8049, 0x00000000, 0x0603510a,
+	0x06803f0a, 0x0603520a, 0x0603500b, 0x0400130c, 0x0481f30c,
+	0x07c02b8c, 0x07802b4c, 0x07802c47, 0x07802ccb, 0x024072c7,
+	0x0b20c0c7, 0x00000000, 0x068000c7, 0x095c2307, 0x07c02b4c,
+	0x07802b4c, 0x091c22cc, 0x0aa2800b, 0x044012cb, 0x095c230b,
+	0x0a61c00b, 0x07c02b4c, 0x0a20c04c, 0x06b0800b, 0x06b0c00b,
+	0x0c072540, 0x06b00009, 0x0680001b, 0x07802947, 0x0aa5c387,
+	0x07802cc7, 0x040011c7, 0x07c02cc7, 0x07802e88, 0x04001208,
+	0x07c02e88, 0x07802c48, 0x0b828207, 0x06800007, 0x07c02cc7,
+	0x07802d08, 0x04001208, 0x078023c9, 0x0b822248, 0x07c02d08,
+	0x07802487, 0x0a6fc007, 0x00000000, 0x06430507, 0x0a2f0107,
+	0x0c7dc300, 0x064c0007, 0x07802d08, 0x0be10048, 0x040011c8,
+	0x0c780580, 0x07c02d07, 0x044011c8, 0x07c02d07, 0x07802cc7,
+	0x040011c7, 0x07c02cc7, 0x07802e88, 0x04001208, 0x07c02e88,
+	0x07802c48, 0x0b80b207, 0x06800007, 0x07c02cc7, 0x07802d08,
+	0x04002208, 0x078023c9, 0x0b805248, 0x07c02d08, 0x06800007,
+	0x0c7ff880, 0x07c02e87, 0x064c3b07, 0x0920c1c7, 0x0b218a07,
+	0x0680004a, 0x07c01e4a, 0x07c01d8a, 0x0680204a, 0x07c0194a,
+	0x07802cc7, 0x095084c7, 0x07802d09, 0x094084c9, 0x07801909,
+	0x0aa14009, 0x04401249, 0x0a60c009, 0x07c01909, 0x0c7ef480,
+	0x07802c49, 0x0b014489, 0x06808008, 0x0a628712, 0x0c780840,
+	0x00000000, 0x07802d0a, 0x0a20c04a, 0x0500128a, 0x040011c7,
+	0x054011c7, 0x0c780840, 0x094011ca, 0x040011c7, 0x0a410247,
+	0x07802b09, 0x07802d07, 0x0a25c047, 0x040021c9, 0x0c7f1980,
+	0x06800007, 0x0aa5c712, 0x07802d0a, 0x0a2bc04a, 0x04001287,
+	0x0a4ed24a, 0x0c780480, 0x06800007, 0x0c7f1540, 0x00000000,
+	0x0a628047, 0x040021c9, 0x07802d07, 0x0be1c047, 0x040021c9,
+	0x0c7f1580, 0x06800047, 0x0aadc007, 0x07802b09, 0x040011c9,
+	0x0ba10707, 0x0b6cce07, 0x0680c008, 0x0441c1c7, 0x05403247,
+	0x020091c9, 0x02008248, 0x07000209, 0x07c02449, 0x04001208,
+	0x07000209, 0x04001208, 0x0700021d, 0x09610749, 0x04001208,
+	0x0700021e, 0x04001208, 0x07000209, 0x09610789, 0x04001208,
+	0x0700021f, 0x04001208, 0x07000209, 0x096107c9, 0x04001208,
+	0x07000220, 0x04001208, 0x07000209, 0x09610809, 0x0c7d5a00,
+	0x00000000, 0x07802dc7, 0x0aa18007, 0x07802087, 0x0a614087,
+	0x00000000, 0x08098002, 0x080980f0, 0x0c780a40, 0x080c2400,
+	0x064c2207, 0x09305207, 0x093a2287, 0x09205247, 0x092a22c7,
+	0x054022cb, 0x02c0a2ca, 0x09105347, 0x091a22c7, 0x054042cb,
+	0x02c0a2ca, 0x09005387, 0x090a22c7, 0x054062cb, 0x02c0a2ca,
+	0x07802087, 0x0a63c187, 0x080c2408, 0x064c2207, 0x048032ca,
+	0x0aa340cb, 0x00000000, 0x0480f28a, 0x09305347, 0x093a22c7,
+	0x054042cb, 0x02c0a2ca, 0x09205387, 0x092a22c7, 0x054062cb,
+	0x02c0a2ca, 0x0c780240, 0x00000000, 0x0480328a, 0x09305247,
+	0x093a22c7, 0x054022cb, 0x0c7800c0, 0x02c0a2ca, 0x0c780580,
+	0x05418208, 0x0609b308, 0x0649b308, 0x05418249, 0x0609b309,
+	0x0649b309, 0x0541834d, 0x0609b30d, 0x0649b30d, 0x0541838e,
+	0x0609b30e, 0x0649b30e, 0x08098002, 0x06bfffcb, 0x054102cb,
+	0x06bfffcc, 0x02c0c2cc, 0x0609820c, 0x048032ca, 0x0a6480cb,
+	0x0c780080, 0x0c780640, 0x054102c8, 0x058102cb, 0x05410308,
+	0x02c0c2cc, 0x0609810c, 0x054042ca, 0x0609800b, 0x0a811248,
+	0x00000000, 0x054102c9, 0x058102cb, 0x05410309, 0x02c0c2cc,
+	0x0c7802c0, 0x0609820c, 0x054102c8, 0x058102cb, 0x05410309,
+	0x02c0c2cc, 0x0609810c, 0x054042ca, 0x04c042cb, 0x0c7800c0,
+	0x0609800b, 0x0c780340, 0x048032ca, 0x054182cb, 0x02c0b20b,
+	0x0483030a, 0x0541430c, 0x02c0c34c, 0x0a80630b, 0x054102cd,
+	0x058102cb, 0x0541030e, 0x02c0c2cc, 0x0609820c, 0x0780294b,
+	0x0a60c38b, 0x06800712, 0x05801492, 0x06bfffcb, 0x06800021,
+	0x07802a1d, 0x0680001e, 0x06800022, 0x0680001f, 0x06800023,
+	0x06800020, 0x06800024, 0x0400099d, 0x040009de, 0x04000a1f,
+	0x04000a60, 0x0680800a, 0x0680070e, 0x0740028b, 0x0400128a,
+	0x074002a1, 0x0400128a, 0x0740029d, 0x0400128a, 0x0740029e,
+	0x0400128a, 0x074002a2, 0x0400128a, 0x0740029f, 0x0400128a,
+	0x074002a3, 0x0400128a, 0x074002a0, 0x0400128a, 0x074002a4,
+	0x0d07fbce, 0x0400128a, 0x07c0244b, 0x07c0298b, 0x096102cb,
+	0x080c0700, 0x060c270b, 0x09610761, 0x060c021d, 0x096107a2,
+	0x0780278e, 0x0aa1800e, 0x060c021e, 0x096107e3, 0x060c021f,
+	0x09610824, 0x060c0220, 0x080c0701, 0x060c270b, 0x060c021d,
+	0x0aa1000e, 0x060c021e, 0x060c021f, 0x060c0220, 0x07802c4e,
+	0x0b00948e, 0x06b00007, 0x06c046c7, 0x02007d07, 0x06035107,
+	0x06803f07, 0x06035207, 0x06a08007, 0x06035007, 0x07802cc7,
+	0x0aa24007, 0x06803fc7, 0x07802947, 0x0aa1c387, 0x07802cc7,
+	0x044011c7, 0x0ba0c707, 0x0c7fffc0, 0x0441c1c7, 0x07c02b07,
+	0x06800007, 0x07c02747, 0x0ac0b48e, 0x07802b07, 0x0b613fc7,
+	0x0ba0c707, 0x0441c1c7, 0x07c02b07, 0x06435007, 0x0580f1c7,
+	0x0bef8047, 0x0cc00000, 0x00000000, 0x06435007, 0x0580f1c7,
+	0x0bef8047, 0x00000000, 0x06435307, 0x0900c1c7, 0x0a6f8007,
+	0x06b00007, 0x06c046c7, 0x02007d07, 0x06035107, 0x06803f07,
+	0x06035207, 0x06b0c007, 0x06035007, 0x054011d2, 0x0ac051ce,
+	0x06800087, 0x07c02b47, 0x0c7ff8c0, 0x07c02b87, 0x06b10008,
+	0x06c046c8, 0x02008d08, 0x05401252, 0x02009489, 0x0680008a,
+	0x07c02b4a, 0x068000ca, 0x06435007, 0x0580f1c7, 0x0bef8047,
+	0x06803f07, 0x06035108, 0x06035207, 0x06a08007, 0x06035007,
+	0x0ac0324e, 0x0c7ff400, 0x07c02b8a, 0x06808007, 0x020081c8,
+	0x02009489, 0x0c7ffc80, 0x0400128a, 0x0780254b, 0x0a60c00b,
+	0x044011cb, 0x06800087, 0x0aa14007, 0x06a01008, 0x0aa0c047,
+	0x06a22008, 0x06a40008, 0x06c00108, 0x060e0508, 0x07c02587,
+	0x07802a88, 0x06801809, 0x09502248, 0x060c2109, 0x080c260e,
+	0x06800049, 0x07c02849, 0x07802cc9, 0x07c02ac9, 0x07802889,
+	0x07c03049, 0x06800088, 0x0cc00000, 0x07c02488, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000
+};
diff --git a/drivers/amlogic/amports/arch/ucode/h264/gxtvbb_h264header_linux.h b/drivers/amlogic/amports/arch/ucode/h264/gxtvbb_h264header_linux.h
new file mode 100644
index 0000000..6d85f295
--- /dev/null
+++ b/drivers/amlogic/amports/arch/ucode/h264/gxtvbb_h264header_linux.h
@@ -0,0 +1,207 @@
+static const u32 MicroCode[] __initconst = {
+	0x06804011, 0x06905347, 0x07400447, 0x04002451, 0x0fc101c0,
+	0x09108247, 0x0a60e509, 0x0c7e5ec0, 0x00000000, 0x07400447,
+	0x04001451, 0x0fc08280, 0x07c00d0a, 0x0c065980, 0x080c2301,
+	0x0b2087c7, 0x0c7e5c80, 0x04000407, 0x09505287, 0x0740044a,
+	0x04001451, 0x0ba59909, 0x0c065740, 0x080c2301, 0x05001387,
+	0x07803ccd, 0x09502347, 0x07c03ccd, 0x0c0655c0, 0x080c2301,
+	0x0c065540, 0x080c2301, 0x0fc011c0, 0x0fc01340, 0x0942134e,
+	0x0740044d, 0x04001451, 0x0aa1800d, 0x0680000e, 0x068001c7,
+	0x07c01d47, 0x0c009bc0, 0x06800009, 0x0c065200, 0x080c2301,
+	0x04004247, 0x07400449, 0x04001451, 0x0c0650c0, 0x080c2301,
+	0x07400447, 0x04001451, 0x06800088, 0x0a835207, 0x06800008,
+	0x0a82e207, 0x00000000, 0x0fc011c0, 0x07400447, 0x04001451,
+	0x0c064dc0, 0x080c2301, 0x0c064f40, 0x00000000, 0x07400447,
+	0x04001451, 0x058101c7, 0x07400447, 0x04001451, 0x0c064b80,
+	0x080c2301, 0x0c064d00, 0x00000000, 0x07400447, 0x04001451,
+	0x058101c7, 0x07400447, 0x04001451, 0x0c064940, 0x080c2301,
+	0x0aa68007, 0x0aa12007, 0x05807207, 0x0aa08008, 0x0c7e4b80,
+	0x07400447, 0x04001451, 0x04000287, 0x06808009, 0x0c064680,
+	0x080c2301, 0x0c064800, 0x00000000, 0x07400247, 0x04001249,
+	0x058101c7, 0x07400247, 0x0d07fe0a, 0x04001249, 0x0c7801c0,
+	0x00000000, 0x0c064380, 0x080c2301, 0x040041c7, 0x07400447,
+	0x04001451, 0x0c064240, 0x080c2301, 0x04000247, 0x0fc011c0,
+	0x09501247, 0x07400449, 0x04001451, 0x0c064080, 0x080c2301,
+	0x04000347, 0x0c063fc0, 0x080c2301, 0x04000387, 0x0c780700,
+	0x00000000, 0x06031f0d, 0x06033f0e, 0x0c05e7c0, 0x08031e15,
+	0x06431f07, 0x06a40008, 0x0b014207, 0x06804009, 0x0b00b24d,
+	0x00000000, 0x0649cf09, 0x0a208089, 0x0c7e3f40, 0x00000000,
+	0x0809c007, 0x0609c10d, 0x08007401, 0x0c780000, 0x00800000,
+	0x0400034e, 0x0b21a40d, 0x0649cf09, 0x0a208089, 0x0c7e3c80,
+	0x0c7ffdc0, 0x0809c008, 0x0400124d, 0x07400449, 0x04001451,
+	0x0400124e, 0x07400449, 0x04001451, 0x0fc011c0, 0x0a610007,
+	0x00000000, 0x0fc01200, 0x094211c8, 0x0fc01200, 0x094411c8,
+	0x07400447, 0x04001451, 0x0fc011c0, 0x0aa20007, 0x06800108,
+	0x0c063380, 0x080c2301, 0x07400447, 0x0d07ff48, 0x04001451,
+	0x0c780140, 0x06800007, 0x07400447, 0x0d07ffc8, 0x04001451,
+	0x06804048, 0x07400211, 0x0fc01200, 0x0a60c008, 0x0c7817c0,
+	0x07400448, 0x0fc011c0, 0x09421207, 0x07400448, 0x0aa30007,
+	0x04001451, 0x0fc081c0, 0x07400447, 0x0a623fc7, 0x04001451,
+	0x0fc101c0, 0x07400447, 0x04001451, 0x0fc101c0, 0x07400447,
+	0x04001451, 0x0fc011c0, 0x0aa0c007, 0x00000000, 0x0fc011c0,
+	0x0fc011c0, 0x0aa38007, 0x00000000, 0x0680000e, 0x0fc051c0,
+	0x09405387, 0x0540838e, 0x0980e34e, 0x0a21c047, 0x00000000,
+	0x0fc101c0, 0x07c00987, 0x0fc081c0, 0x09408387, 0x07c009ce,
+	0x0fc011c0, 0x0aa14007, 0x0c062680, 0x080c2301, 0x0c062600,
+	0x080c2301, 0x0fc011c0, 0x07400447, 0x04001451, 0x0aa40007,
+	0x07c00687, 0x0fc101c0, 0x07400447, 0x04001451, 0x0fc101c0,
+	0x07400447, 0x04001451, 0x0fc101c0, 0x07400447, 0x04001451,
+	0x0fc101c0, 0x07400447, 0x04001451, 0x0fc011c0, 0x07c00687,
+	0x0680000e, 0x0fc011c0, 0x0aa18007, 0x09401387, 0x0c008140,
+	0x00000000, 0x090aa207, 0x07c02f88, 0x0fc011c0, 0x0aa1c007,
+	0x09421387, 0x0c007f80, 0x00000000, 0x0be0c04e, 0x090aa207,
+	0x07c02f88, 0x0a20c0ce, 0x00000000, 0x0fc011c0, 0x0fc011c0,
+	0x09441387, 0x0fc011c0, 0x09461387, 0x0740044e, 0x04001451,
+	0x0aa24007, 0x06800188, 0x0fc011c0, 0x0c0619c0, 0x080c2301,
+	0x0d07ff88, 0x00000000, 0x07400447, 0x04001451, 0x07803b47,
+	0x0a404407, 0x07803bc7, 0x09807007, 0x07c03bc7, 0x068f000a,
+	0x06c0470a, 0x0540a1d0, 0x0200a1ca, 0x06806009, 0x0c05e900,
+	0x06a0400b, 0x0c7e1900, 0x00000000, 0x0aa1000a, 0x06804047,
+	0x0c782180, 0x070001d1, 0x06804091, 0x07000447, 0x04001451,
+	0x07c039c7, 0x09108247, 0x07000448, 0x04001451, 0x090081c8,
+	0x07c03a07, 0x064c2908, 0x09c080c8, 0x060c2908, 0x0b60d909,
+	0x0c780680, 0x080e0000, 0x0700044d, 0x04001451, 0x064c2908,
+	0x090211cd, 0x09461207, 0x060c2908, 0x0aa3000d, 0x0680000e,
+	0x06800009, 0x06c00049, 0x060e0209, 0x068001c7, 0x07c01d47,
+	0x0c006300, 0x06800009, 0x06800009, 0x06c00049, 0x060e0209,
+	0x064e0007, 0x096e91cd, 0x060e0007, 0x064e0307, 0x095081ce,
+	0x060e0307, 0x07000449, 0x04001451, 0x07c020c9, 0x07000447,
+	0x04001451, 0x07c02147, 0x06800088, 0x0a819207, 0x06800008,
+	0x0a814207, 0x07000447, 0x04001451, 0x07c03a87, 0x07000447,
+	0x04001451, 0x07c03807, 0x07000447, 0x04001451, 0x07c03847,
+	0x07000447, 0x04001451, 0x07c03887, 0x07000447, 0x04001451,
+	0x07c038c7, 0x07000447, 0x04001451, 0x07c03987, 0x0c780100,
+	0x07000447, 0x04001451, 0x07c02187, 0x07000449, 0x04001451,
+	0x090081c9, 0x07c03907, 0x091011c9, 0x07c03947, 0x07000447,
+	0x04001451, 0x060c0907, 0x07c02c47, 0x04401247, 0x07c02c09,
+	0x07000449, 0x04001451, 0x07c02c89, 0x0700044d, 0x04001451,
+	0x090011cd, 0x0a60c007, 0x07c02107, 0x05401249, 0x04000289,
+	0x07802c48, 0x09610288, 0x0609520a, 0x05404289, 0x0968c288,
+	0x0609080a, 0x06031f08, 0x06033f09, 0x0c05a440, 0x08031e15,
+	0x06431f08, 0x0a610007, 0x07c03a48, 0x0902120d, 0x094211c8,
+	0x07c02947, 0x090411cd, 0x0aa10007, 0x054011c7, 0x07802108,
+	0x094411c8, 0x07c02307, 0x06800087, 0x07802108, 0x02408207,
+	0x07000447, 0x04001451, 0x07000449, 0x04001451, 0x09508247,
+	0x05401249, 0x07c01a89, 0x07000447, 0x04001451, 0x07000449,
+	0x04001451, 0x09508247, 0x03409209, 0x07c01ac9, 0x07000447,
+	0x04001451, 0x0be0c047, 0x0c780900, 0x05801347, 0x05801347,
+	0x0a22c04d, 0x07000447, 0x04001451, 0x07c03d47, 0x0a61ffc7,
+	0x07000447, 0x04001451, 0x07c03d87, 0x07000447, 0x04001451,
+	0x07c03dc7, 0x07000447, 0x04001451, 0x0a238047, 0x09421347,
+	0x07000447, 0x04001451, 0x07c03e47, 0x07000447, 0x04001451,
+	0x07c03e07, 0x07000447, 0x04001451, 0x07c03ec7, 0x07000447,
+	0x04001451, 0x07c03e87, 0x07000447, 0x04001451, 0x09444347,
+	0x0a20c207, 0x07000447, 0x07c01b87, 0x0cc00000, 0x07c03d0d,
+	0x0680c011, 0x06905347, 0x07400447, 0x04001451, 0x0c05e780,
+	0x080c2301, 0x0b20bfc7, 0x0c7dea80, 0x04000407, 0x04000247,
+	0x0c05e600, 0x080c2301, 0x09505247, 0x0fc011c0, 0x095a1247,
+	0x0fc011c0, 0x095c1247, 0x07400449, 0x04001451, 0x0c05e3c0,
+	0x080c2301, 0x0aa0c007, 0x0c7de6c0, 0x00000000, 0x0c05e280,
+	0x080c2301, 0x04000207, 0x0c05e1c0, 0x080c2301, 0x094a5207,
+	0x0fc011c0, 0x09541207, 0x0fc021c0, 0x09562207, 0x07400448,
+	0x04001451, 0x0c05df80, 0x080c2301, 0x04000247, 0x0c05dec0,
+	0x080c2301, 0x09508247, 0x07400449, 0x04001451, 0x0c05dd80,
+	0x080c2301, 0x04000247, 0x0fc011c0, 0x09501247, 0x0fc011c0,
+	0x09521247, 0x0fc011c0, 0x09541247, 0x07400449, 0x064c2907,
+	0x091c21c7, 0x0a60c0c7, 0x0c780580, 0x04001451, 0x098092c9,
+	0x07400449, 0x04001451, 0x0fc011c0, 0x06800149, 0x05401347,
+	0x02009349, 0x07c01d49, 0x0fc01340, 0x094211cd, 0x07400447,
+	0x04001451, 0x0aa1000d, 0x0680000e, 0x0c001f80, 0x06800009,
+	0x0c05d5c0, 0x080c2301, 0x07400447, 0x04001451, 0x07803b87,
+	0x0a404407, 0x07803bc7, 0x09807047, 0x07c03bc7, 0x06af000a,
+	0x06c0470a, 0x054091d0, 0x0200a1ca, 0x06804009, 0x06a0c00b,
+	0x0c05a540, 0x00000000, 0x0c7dd540, 0x00000000, 0x0680c051,
+	0x07000449, 0x04001451, 0x091a11c9, 0x07c02347, 0x0aa0c007,
+	0x06800007, 0x0687ffc7, 0x07c02a07, 0x091c11c9, 0x07c021c7,
+	0x06800808, 0x07000449, 0x04001451, 0x090051c9, 0x07c03ac7,
+	0x09505207, 0x090a51c9, 0x07c03b07, 0x09605207, 0x07802947,
+	0x096a2207, 0x060c2108, 0x091411c9, 0x07c028c7, 0x091621c9,
+	0x07c02907, 0x07000449, 0x04001451, 0x090081c9, 0x0c05cb80,
+	0x00000000, 0x07c02247, 0x091081c9, 0x0c05ca80, 0x00000000,
+	0x07000449, 0x04001451, 0x090081c9, 0x0c05c940, 0x00000000,
+	0x06801008, 0x09505207, 0x060c2108, 0x06801408, 0x09505207,
+	0x060c2108, 0x091011c9, 0x07c02287, 0x091211c9, 0x064e0e08,
+	0x09401207, 0x060e0e08, 0x091411c9, 0x07c02207, 0x0580b1c9,
+	0x0be18047, 0x06800007, 0x07802308, 0x09c08008, 0x0cc00000,
+	0x07c02308, 0x07000449, 0x04001451, 0x090011c9, 0x0680014d,
+	0x05401387, 0x0200d38d, 0x07c01d4d, 0x07802308, 0x09401207,
+	0x07c02308, 0x09021349, 0x0aa2800d, 0x0680000e, 0x06801c09,
+	0x06c00049, 0x060e0209, 0x0c0013c0, 0x06800009, 0x06800009,
+	0x06c00049, 0x060e0209, 0x064e0007, 0x095c91cd, 0x060e0007,
+	0x064e0307, 0x094081ce, 0x060e0307, 0x07000447, 0x04001451,
+	0x0c05bc40, 0x00000000, 0x06801408, 0x09505207, 0x0cc00000,
+	0x060c2108, 0x0ba0c189, 0x0680020c, 0x0680080c, 0x07801d47,
+	0x0b8041c9, 0x04001249, 0x0cc00000, 0x00000000, 0x0540134d,
+	0x0540138e, 0x0fc01200, 0x07400448, 0x04001451, 0x09401348,
+	0x0aac8008, 0x0680020a, 0x0680020b, 0x0ba0c189, 0x068003cc,
+	0x06800fcc, 0x0aa4400b, 0x00000000, 0x0c05b340, 0x080c2301,
+	0x07400447, 0x04001451, 0x0c05b440, 0x00000000, 0x02007287,
+	0x048ff2c7, 0x0a61800b, 0x0aa0cfcc, 0x0b614189, 0x0a6103cc,
+	0x0c7ff780, 0x0980e00e, 0x0400028b, 0x054083cf, 0x0be0c04c,
+	0x094083ca, 0x06c0000f, 0x0aeac00c, 0x0440130c, 0x07801d47,
+	0x0b8031c9, 0x0cc00000, 0x00000000, 0x0c7ff640, 0x04001249,
+	0x0ba0c189, 0x0680020c, 0x0680080c, 0x064e020a, 0x0200a30a,
+	0x06c0004a, 0x060e020a, 0x0ba101c9, 0x04001249, 0x0cc00000,
+	0x00000000, 0x0540134d, 0x0540138e, 0x07801d48, 0x0ac04209,
+	0x06800008, 0x07000448, 0x04001451, 0x09401348, 0x0aab4008,
+	0x0680020a, 0x0680020b, 0x0ba0c189, 0x068003cc, 0x06800fcc,
+	0x0aa3400b, 0x07000447, 0x0c05a7c0, 0x04001451, 0x02007287,
+	0x048ff2c7, 0x0a61800b, 0x0aa0cfcc, 0x0b614189, 0x0a6103cc,
+	0x0c7ff740, 0x0980e00e, 0x0400028b, 0x054083cf, 0x0be1004c,
+	0x094083ca, 0x06c0000f, 0x060e020f, 0x0aeb800c, 0x0440130c,
+	0x0ba0c1c9, 0x0cc00000, 0x00000000, 0x0c7ff6c0, 0x04001249,
+	0x0b210408, 0x00000000, 0x0fc10240, 0x04410208, 0x0cc00000,
+	0x0f800208, 0x0c059e80, 0x080c2301, 0x04001347, 0x0fc081c0,
+	0x0c059d80, 0x080c2301, 0x0c059d00, 0x080c2301, 0x0d07ff0d,
+	0x0fc011c0, 0x0fc051c0, 0x0cc00000, 0x0fc0f1c0, 0x07803c47,
+	0x07803c88, 0x0780174b, 0x07800a4d, 0x07800a8e, 0x07802c49,
+	0x07803a4a, 0x0780390c, 0x07803e8f, 0x07803ed0, 0x07803e11,
+	0x0a409247, 0x0a408288, 0x0a40730b, 0x0a4063cd, 0x0a40540e,
+	0x00000000, 0x07800a07, 0x0a402447, 0x0c7825c0, 0x06800007,
+	0x07c07087, 0x07803bc7, 0x09807087, 0x07c03bc7, 0x069fffc7,
+	0x07c03c49, 0x07c03c8a, 0x07c0174c, 0x07c00a4f, 0x07c00a90,
+	0x07c00a11, 0x0a83f207, 0x0688000a, 0x0c056c80, 0x06c0000a,
+	0x068c000a, 0x06c0470a, 0x06804009, 0x0c0564c0, 0x06b0400b,
+	0x0680044a, 0x06031e0a, 0x0649ce09, 0x0aa10009, 0x00000000,
+	0x0809ce00, 0x08007401, 0x06431e0a, 0x0bee804a, 0x00000000,
+	0x07803a47, 0x0a634047, 0x07807187, 0x06804089, 0x054031c7,
+	0x020091c9, 0x07000247, 0x091011c7, 0x020091c9, 0x0740024a,
+	0x04001249, 0x06801fca, 0x0740024a, 0x07c0178a, 0x07807047,
+	0x07c07187, 0x068003ca, 0x06031e0a, 0x0649ce09, 0x0aa10009,
+	0x00000000, 0x0809ce00, 0x08007401, 0x06431e09, 0x0bee8049,
+	0x00000000, 0x0649ce09, 0x0a6dc009, 0x00000000, 0x0c062880,
+	0x00000000, 0x0649c007, 0x0bef7fc7, 0x07803a47, 0x0a60c047,
+	0x0c780000, 0x00800000, 0x068000c7, 0x0609c007, 0x08007401,
+	0x0c0625c0, 0x0680001b, 0x0649c007, 0x0bef7fc7, 0x07802c47,
+	0x07803a48, 0x095101c8, 0x07803908, 0x097071c8, 0x07802308,
+	0x09021208, 0x097e11c8, 0x0609c107, 0x07803d07, 0x07802108,
+	0x095e11c8, 0x07800688, 0x094c11c8, 0x07803cc8, 0x09102208,
+	0x095a21c8, 0x07803d48, 0x096101c8, 0x0609c207, 0x07803d87,
+	0x07803dc8, 0x096101c8, 0x0609c307, 0x07803e07, 0x07803e48,
+	0x096101c8, 0x0609c407, 0x07803e87, 0x07803ec8, 0x096101c8,
+	0x0609c507, 0x07801ac7, 0x07801a88, 0x096101c8, 0x0609c607,
+	0x07800d07, 0x0609ca07, 0x078009c7, 0x07800988, 0x09610207,
+	0x0609d108, 0x06800047, 0x0609c007, 0x08007401, 0x06800007,
+	0x06800008, 0x06804009, 0x04001249, 0x07400248, 0x040011c7,
+	0x0baf8607, 0x04008249, 0x0680001b, 0x0649c008, 0x0befbfc8,
+	0x091081c8, 0x07c03187, 0x092081c8, 0x07c07047, 0x093081c8,
+	0x07803cc8, 0x09408207, 0x07c03cc8, 0x06800007, 0x07c071c7,
+	0x07c07207, 0x0649c107, 0x07c078c7, 0x058101c7, 0x07c07907,
+	0x0649c407, 0x07c07947, 0x058101c7, 0x07c07987, 0x07803cc8,
+	0x09008208, 0x07802307, 0x090211c7, 0x054011c7, 0x034081c8,
+	0x07803907, 0x07803189, 0x0b004247, 0x00000000, 0x040001c9,
+	0x07c03907, 0x0b803207, 0x044011c8, 0x07c03907, 0x0cc00000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000
+};
diff --git a/drivers/amlogic/amports/arch/ucode/h264/gxtvbb_h264list_linux.h b/drivers/amlogic/amports/arch/ucode/h264/gxtvbb_h264list_linux.h
new file mode 100644
index 0000000..80d76d3
--- /dev/null
+++ b/drivers/amlogic/amports/arch/ucode/h264/gxtvbb_h264list_linux.h
@@ -0,0 +1,207 @@
+static const u32 MicroCode[] __initconst = {
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x06bfff40, 0x06032400, 0x00400000, 0x0c780000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x0cc00000, 0x00400000, 0x0c780080,
+	0x06431e07, 0x09027207, 0x0a668048, 0x068fdfca, 0x06fcffca,
+	0x064e0408, 0x02808288, 0x09110287, 0x064c0909, 0x0ac0924a,
+	0x0b80324a, 0x0c7801c0, 0x09808688, 0x0400128a, 0x098083c8,
+	0x0a40324a, 0x0440128a, 0x098086c8, 0x0aa1000a, 0x09308287,
+	0x0a60c00a, 0x0400128a, 0x09808388, 0x0b80324a, 0x00000000,
+	0x098081c8, 0x0c780500, 0x060e0408, 0x0a614248, 0x00000000,
+	0x0c009240, 0x00000000, 0x0c780380, 0x0a62c288, 0x06431f20,
+	0x06433f21, 0x0e000860, 0x00000000, 0x00000000, 0x0f000800,
+	0x06031f20, 0x0f010840, 0x0c780100, 0x06033f21, 0x0c780080,
+	0x00000000, 0x08031e00, 0x0cc00000, 0x00400000, 0x0680400f,
+	0x0680a00e, 0x0680ec0d, 0x0680f60c, 0x0780704b, 0x0680000a,
+	0x06800009, 0x06800008, 0x0780776f, 0x07807780, 0x09610bc0,
+	0x0780736e, 0x078020c0, 0x06800041, 0x0342d001, 0x07807300,
+	0x06800081, 0x0b831040, 0x05403c4a, 0x02031c4f, 0x04001c71,
+	0x07000c44, 0x06800c00, 0x0bc25004, 0x09042004, 0x068000c1,
+	0x0a422040, 0x09101004, 0x04001c31, 0x02030030, 0x02030030,
+	0x07000c2c, 0x04001c30, 0x07000c00, 0x09610b00, 0x04005c71,
+	0x07000c6b, 0x0b003bab, 0x00000000, 0x0242bb6b, 0x0202a209,
+	0x05402c2a, 0x02030c0e, 0x07400c0a, 0x068000c0, 0x04001c30,
+	0x07400c00, 0x04001c30, 0x07400c2b, 0x0581002b, 0x04001c30,
+	0x07400c00, 0x0ac05bec, 0x0203024d, 0x07400c2a, 0x04001249,
+	0x0c780100, 0x0203020c, 0x07400c2a, 0x04001208, 0x0400128a,
+	0x0b8d52ca, 0x02000209, 0x07c070c9, 0x0cc00000, 0x07c07100,
+	0x0aa14040, 0x06800047, 0x06800006, 0x0c780100, 0x00000000,
+	0x06800007, 0x06800046, 0x05403c4a, 0x02031c4f, 0x04001c71,
+	0x07000c44, 0x09101004, 0x04001c31, 0x02030030, 0x02030030,
+	0x07000c2c, 0x04001c30, 0x07000c00, 0x09610b00, 0x04005c71,
+	0x07000c6b, 0x0b003bab, 0x00000000, 0x0242bb6b, 0x0be60404,
+	0x0a25c104, 0x0202a209, 0x05402c2a, 0x02030c0e, 0x07400c0a,
+	0x06800040, 0x04001c30, 0x07400c00, 0x0540102b, 0x020001c0,
+	0x04001c30, 0x07400c00, 0x05810000, 0x04001c30, 0x07400c00,
+	0x0ac05bec, 0x0203024d, 0x07400c2a, 0x04001249, 0x0c780100,
+	0x0203020c, 0x07400c2a, 0x04001208, 0x0be60804, 0x0a25c204,
+	0x0202a209, 0x05402c2a, 0x02030c0e, 0x07400c0a, 0x06800080,
+	0x04001c30, 0x07400c00, 0x0540102b, 0x02000180, 0x04001c30,
+	0x07400c00, 0x05810000, 0x04001c30, 0x07400c00, 0x0ac05bec,
+	0x0203024d, 0x07400c2a, 0x04001249, 0x0c780100, 0x0203020c,
+	0x07400c2a, 0x04001208, 0x0400128a, 0x0b8be2ca, 0x02000209,
+	0x07c070c9, 0x0cc00000, 0x07c07100, 0x0680400f, 0x0680a00e,
+	0x0680ec0d, 0x0780704b, 0x0680000a, 0x07807109, 0x07807300,
+	0x0ba6c080, 0x05403c4a, 0x02031c4f, 0x04001c71, 0x07000c44,
+	0x09082004, 0x0a6440c0, 0x04006c71, 0x07000c6b, 0x05402c09,
+	0x02030c0e, 0x07400c0a, 0x068001c0, 0x04001c30, 0x07400c00,
+	0x04001c30, 0x07400c2b, 0x0581002b, 0x04001c30, 0x07400c00,
+	0x0203024d, 0x07400c09, 0x04001249, 0x0400128a, 0x0b8e92ca,
+	0x0cc00000, 0x07c07149, 0x0aa14040, 0x06800047, 0x06800006,
+	0x0c780100, 0x00000000, 0x06800007, 0x06800046, 0x05403c4a,
+	0x02031c4f, 0x04001c71, 0x07000c44, 0x04006c71, 0x07000c6b,
+	0x0a244404, 0x05402c09, 0x02030c0e, 0x07400c0a, 0x06800140,
+	0x04001c30, 0x07400c00, 0x0540102b, 0x020001c0, 0x04001c30,
+	0x07400c00, 0x05810000, 0x04001c30, 0x07400c00, 0x0203024d,
+	0x07400c09, 0x04001249, 0x0a244804, 0x05402c09, 0x02030c0e,
+	0x07400c0a, 0x06800180, 0x04001c30, 0x07400c00, 0x0540102b,
+	0x02000180, 0x04001c30, 0x07400c00, 0x05810000, 0x04001c30,
+	0x07400c00, 0x0203024d, 0x07400c09, 0x04001249, 0x0400128a,
+	0x0b8d72ca, 0x0cc00000, 0x07c07149, 0x0680ec0f, 0x0680f60e,
+	0x0780710a, 0x078070c9, 0x06800008, 0x0240a24a, 0x0200e28e,
+	0x0a60c009, 0x0cc00000, 0x00000000, 0x070003c0, 0x07400380,
+	0x040013cf, 0x0400138e, 0x04001208, 0x0b8fb248, 0x0cc00000,
+	0x00000000, 0x0680ec0f, 0x0680f60e, 0x0780710a, 0x078070c9,
+	0x06800008, 0x0240a24a, 0x0200f24f, 0x0a60c00a, 0x0cc00000,
+	0x00000000, 0x07000380, 0x074003c0, 0x040013cf, 0x0400138e,
+	0x04001208, 0x0b8fb288, 0x0cc00000, 0x00000000, 0x0680ec0f,
+	0x0680f60e, 0x0780710a, 0x07807149, 0x0200f28f, 0x0200e28e,
+	0x0a40324a, 0x0cc00000, 0x00000000, 0x070003c0, 0x07400380,
+	0x040013cf, 0x0400138e, 0x0400128a, 0x0b8fb24a, 0x0cc00000,
+	0x00000000, 0x0b60808e, 0x0c780e00, 0x0680a00c, 0x0680400b,
+	0x0680000a, 0x0a83438a, 0x0400124a, 0x0202f28f, 0x07000bee,
+	0x0540222e, 0x0200820c, 0x04002208, 0x0700022d, 0x04001208,
+	0x07000200, 0x09610b40, 0x0a814389, 0x0202c24f, 0x07000b2b,
+	0x0540222b, 0x0200820c, 0x04002208, 0x0700022a, 0x04001208,
+	0x07000200, 0x09610a80, 0x0a60c00d, 0x0b807aad, 0x0c7800c0,
+	0x0ac05aad, 0x00000000, 0x07400b2e, 0x04000bab, 0x04000b6a,
+	0x04001249, 0x0c7ffb40, 0x07807300, 0x0b644080, 0x0a24004a,
+	0x0540222e, 0x0200820c, 0x04002208, 0x07000207, 0x0a22c047,
+	0x04401b6f, 0x07000b6c, 0x0540222c, 0x0200820c, 0x04002208,
+	0x07000207, 0x0be10047, 0x00000000, 0x07400b6e, 0x04000bac,
+	0x07400bee, 0x0400128a, 0x0c7ff340, 0x0cc00000, 0x00000000,
+	0x0b60808e, 0x0c781680, 0x0680a00c, 0x0680400b, 0x0680000a,
+	0x0a85638a, 0x0400124a, 0x0202f28f, 0x07000bee, 0x0540222e,
+	0x0200820c, 0x07000207, 0x04001208, 0x07000206, 0x054031c7,
+	0x020071cb, 0x09002146, 0x0a6280c5, 0x00000000, 0x040011c7,
+	0x070001c4, 0x09101c44, 0x040011c7, 0x02007c47, 0x02007c47,
+	0x0c780100, 0x00000000, 0x02007147, 0x02007147, 0x070001ed,
+	0x040011c7, 0x070001c0, 0x09610b40, 0x0a825389, 0x0202c24f,
+	0x07000b2b, 0x0540222b, 0x0200820c, 0x07000207, 0x04001208,
+	0x07000206, 0x054031c7, 0x020071cb, 0x09002146, 0x0a6280c5,
+	0x00000000, 0x040011c7, 0x070001c4, 0x09101c44, 0x040011c7,
+	0x02007c47, 0x02007c47, 0x0c780100, 0x00000000, 0x02007147,
+	0x02007147, 0x070001ea, 0x040011c7, 0x070001c0, 0x09610a80,
+	0x0a60c00d, 0x0b807aad, 0x0c7800c0, 0x0ac05aad, 0x00000000,
+	0x07400b2e, 0x04000bab, 0x04000b6a, 0x04001249, 0x0c7ff700,
+	0x07807300, 0x0b644080, 0x0a24004a, 0x0540222e, 0x0200820c,
+	0x04002208, 0x07000207, 0x0a22c047, 0x04401b6f, 0x07000b6c,
+	0x0540222c, 0x0200820c, 0x04002208, 0x07000207, 0x0be10047,
+	0x00000000, 0x07400b6e, 0x04000bac, 0x07400bee, 0x0400128a,
+	0x0c7feac0, 0x0cc00000, 0x00000000, 0x0400120a, 0x0200720f,
+	0x070001c9, 0x05402189, 0x0200618c, 0x04002186, 0x07000185,
+	0x09001005, 0x0a4092c0, 0x04401c47, 0x07000c40, 0x074001c0,
+	0x04401208, 0x0acfc288, 0x040001f1, 0x0cc00000, 0x074001c9,
+	0x04001208, 0x0b8ef388, 0x0cc00000, 0x00000000, 0x0780710e,
+	0x0440134e, 0x0680a00c, 0x0680000a, 0x0b60808e, 0x0c7804c0,
+	0x0200928f, 0x07000248, 0x054021c8, 0x020071cc, 0x040021c7,
+	0x070001c6, 0x0be1804a, 0x0be24046, 0x00000000, 0x0c07f700,
+	0x0680004b, 0x0c780140, 0x0a210046, 0x00000000, 0x0c07f5c0,
+	0x0680000b, 0x0400128a, 0x0b8ef34a, 0x0cc00000, 0x00000000,
+	0x06800008, 0x0700040a, 0x0200720f, 0x070001c9, 0x05402189,
+	0x020061af, 0x04001186, 0x07000185, 0x09041005, 0x0a418a80,
+	0x04001186, 0x07000185, 0x04001186, 0x07000180, 0x09610140,
+	0x0a412305, 0x0a80e348, 0x0ac07348, 0x00000000, 0x0200734f,
+	0x0a80a34a, 0x0400128a, 0x0440120a, 0x0200720f, 0x04401c47,
+	0x07000c40, 0x074001c0, 0x04401208, 0x0acfc348, 0x040001f1,
+	0x074001c9, 0x0cc00000, 0x0740040a, 0x04001208, 0x0b8e0288,
+	0x0cc00000, 0x00000000, 0x0680a02f, 0x078020c0, 0x06800041,
+	0x0342e001, 0x0780736d, 0x07807300, 0x0b614080, 0x00000000,
+	0x05401bae, 0x05401b6d, 0x04001b6d, 0x0242cbad, 0x04000aed,
+	0x0680000d, 0x0680002a, 0x07000380, 0x0400138e, 0x0aa10000,
+	0x0aa30040, 0x0aa50080, 0x0c780680, 0x07000380, 0x0400138e,
+	0x04001000, 0x0242b02b, 0x0b411b2b, 0x0400032b, 0x0202bbab,
+	0x0c780380, 0x0400032b, 0x07000380, 0x0400138e, 0x04001000,
+	0x0202b02b, 0x0b808b6b, 0x0400032b, 0x0242bbab, 0x0c780140,
+	0x0400032b, 0x0680006a, 0x0700038c, 0x0400138e, 0x0c07ec40,
+	0x00000000, 0x0c7ff880, 0x0400134d, 0x0cc00000, 0x00000000,
+	0x0c077280, 0x00000000, 0x0c079600, 0x00000000, 0x07802080,
+	0x0aa64180, 0x00000000, 0x0c07ae80, 0x00000000, 0x07807140,
+	0x07c07240, 0x0680ec0f, 0x0780710e, 0x0680004d, 0x0c07b580,
+	0x00000000, 0x0680ec0f, 0x0780714e, 0x07807100, 0x0200f00f,
+	0x0240e00e, 0x0680000d, 0x0c07b380, 0x00000000, 0x0680ec0f,
+	0x0680c00e, 0x0c07ed80, 0x06807250, 0x0cc00000, 0x00000000,
+	0x0680ec0f, 0x078070ce, 0x0680004d, 0x0c07bf80, 0x00000000,
+	0x0680f60f, 0x0780710e, 0x078070c0, 0x0240e00e, 0x0680000d,
+	0x0c07bdc0, 0x00000000, 0x0680ec0f, 0x0780714e, 0x07807100,
+	0x0200f00f, 0x0240e00e, 0x0680000d, 0x0c07ad00, 0x00000000,
+	0x0c07a3c0, 0x00000000, 0x0c079ec0, 0x00000000, 0x0c07a740,
+	0x00000000, 0x07807140, 0x07c07240, 0x07c07280, 0x07807300,
+	0x0b618080, 0x00000000, 0x0c07d4c0, 0x0680ec0f, 0x0c07d440,
+	0x0680f60f, 0x078070c0, 0x07807101, 0x07807170, 0x0ba280b0,
+	0x0aa0c000, 0x0a802040, 0x0c7801c0, 0x0680f60f, 0x0400138f,
+	0x070003c0, 0x07000381, 0x07400380, 0x074003c1, 0x0680ec0f,
+	0x0680c00e, 0x0c07dfc0, 0x06807250, 0x0680f60f, 0x0680d08e,
+	0x0c07dec0, 0x06807290, 0x0cc00000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000
+};
diff --git a/drivers/amlogic/amports/arch/ucode/h264/gxtvbb_h264mmc_linux.h b/drivers/amlogic/amports/arch/ucode/h264/gxtvbb_h264mmc_linux.h
new file mode 100644
index 0000000..f99eeb4
--- /dev/null
+++ b/drivers/amlogic/amports/arch/ucode/h264/gxtvbb_h264mmc_linux.h
@@ -0,0 +1,207 @@
+static const u32 MicroCode[] __initconst = {
+	0x06bfff40, 0x06032400, 0x00400000, 0x0c780000, 0x00000000,
+	0x09027207, 0x0a6140c8, 0x00000000, 0x0c00d840, 0x00000000,
+	0x0c780540, 0x0a614148, 0x00000000, 0x0c0038c0, 0x00000000,
+	0x0c780400, 0x0a614188, 0x00000000, 0x0c006c80, 0x00000000,
+	0x0c7802c0, 0x0a6141c8, 0x00000000, 0x0c0079c0, 0x00000000,
+	0x0c780180, 0x0a628208, 0x00000000, 0x0c000c40, 0x00000000,
+	0x00000000, 0x08031e00, 0x0cc00000, 0x00400000, 0x0c7ff8c0,
+	0x06431e07, 0x0a62c288, 0x06431f20, 0x06433f21, 0x0e000860,
+	0x00000000, 0x00000000, 0x0f000800, 0x06031f20, 0x0f010840,
+	0x0c7ffc80, 0x06033f21, 0x078077c5, 0x04002c4e, 0x07400c45,
+	0x07807800, 0x04003c4e, 0x07400c40, 0x0cc00000, 0x09610140,
+	0x07807846, 0x04004c4e, 0x07400c46, 0x07807880, 0x04005c4e,
+	0x07400c40, 0x0cc00000, 0x09610180, 0x0680400f, 0x0780704e,
+	0x040013cf, 0x06800000, 0x07c07080, 0x07c071c0, 0x07c07200,
+	0x070003c1, 0x0940b040, 0x074003c1, 0x0d07ff4e, 0x040083cf,
+	0x0cc00000, 0x00000000, 0x0649c900, 0x05808000, 0x05408000,
+	0x0609c900, 0x078031d0, 0x0680400f, 0x0780718e, 0x0540338e,
+	0x0200e38f, 0x04001c4e, 0x07000c4d, 0x078072c0, 0x090a1040,
+	0x090c1c00, 0x02c0cc01, 0x0780730b, 0x0aa1000b, 0x0aa7404b,
+	0x0c780b40, 0x00000000, 0x0980d00d, 0x0c07f340, 0x0944134c,
+	0x0a22008d, 0x09481350, 0x04004c4e, 0x07000c46, 0x04005c4e,
+	0x07000c40, 0x0c780d00, 0x09610180, 0x0c07f2c0, 0x0980d28d,
+	0x07000380, 0x09c00300, 0x07400380, 0x07807200, 0x02000300,
+	0x07c07200, 0x0649cf00, 0x0be11000, 0x06800040, 0x078071c0,
+	0x04001000, 0x0c780940, 0x07c071c0, 0x0980d04d, 0x0c07eec0,
+	0x0946134c, 0x0a22004d, 0x094a1350, 0x04002c4e, 0x07000c45,
+	0x04003c4e, 0x07000c40, 0x0c780680, 0x09610140, 0x0c07ea40,
+	0x0980d28d, 0x07000380, 0x09800300, 0x0c7ff9c0, 0x07400380,
+	0x0980d00d, 0x0980d04d, 0x0944134c, 0x0946134c, 0x0c07e7c0,
+	0x09481350, 0x0c07e940, 0x094a1350, 0x0980d28d, 0x07807200,
+	0x02000300, 0x07c07200, 0x0649cf00, 0x0be11000, 0x06800040,
+	0x078071c0, 0x04001000, 0x07c071c0, 0x04006c4e, 0x07807340,
+	0x07400c40, 0x04007c4e, 0x07400c51, 0x094c234b, 0x05801010,
+	0x05409000, 0x02c0d00d, 0x07801e40, 0x07000381, 0x09501040,
+	0x0400100e, 0x07000000, 0x0be100c0, 0x00000000, 0x07802080,
+	0x09523040, 0x07400381, 0x07802fc0, 0x09584340, 0x0900200d,
+	0x0a6100c0, 0x0be0c30d, 0x06800000, 0x09402340, 0x09c0d20d,
+	0x04001c4e, 0x0ac03185, 0x0c780140, 0x07400c4d, 0x0980d20d,
+	0x0c780080, 0x07400c4d, 0x0649cf00, 0x0a2440c0, 0x0900200d,
+	0x0680000b, 0x0940634b, 0x07400c4d, 0x0c002080, 0x0780718d,
+	0x040012cb, 0x0aa1c00b, 0x06804080, 0x0609c000, 0x0609ce00,
+	0x0649cf00, 0x0be08080, 0x0c780000, 0x06800040, 0x07c01d80,
+	0x0cc00000, 0x00000000, 0x0680400f, 0x0780704e, 0x078020c0,
+	0x06800041, 0x0340d001, 0x0780734c, 0x06803fcb, 0x06800008,
+	0x05403c48, 0x02031c4f, 0x04001c71, 0x07000c70, 0x0a230330,
+	0x0be2cc30, 0x04005c71, 0x07000c41, 0x0b803301, 0x00000000,
+	0x02401341, 0x0aa0ffcb, 0x0b80404a, 0x00000000, 0x04000281,
+	0x040002c8, 0x04001208, 0x0b8ef388, 0x0cc00000, 0x00000000,
+	0x0780720d, 0x0780390c, 0x0b82230d, 0x0c07f840, 0x00000000,
+	0x0400024a, 0x0aa7bfcb, 0x0680400f, 0x05403c4b, 0x02031c4f,
+	0x04001c71, 0x07000c70, 0x06800000, 0x09404c00, 0x07400c70,
+	0x07807200, 0x04401000, 0x07c07200, 0x04401071, 0x07000040,
+	0x09005000, 0x06800041, 0x03401001, 0x07807080, 0x03000040,
+	0x07c07080, 0x06810000, 0x0bc09030, 0x078071c0, 0x04401000,
+	0x07c071c0, 0x0649cf00, 0x0be11000, 0x0be0c080, 0x0c07f080,
+	0x0a8e3289, 0x0cc00000, 0x00000000, 0x0680400f, 0x0780704e,
+	0x06803fcd, 0x0680000c, 0x06800008, 0x05403c48, 0x02031c4f,
+	0x04001c71, 0x07000c70, 0x06810000, 0x0a00e030, 0x04001c71,
+	0x09101030, 0x02031031, 0x02031031, 0x07000c41, 0x04001c71,
+	0x07000c40, 0x09610040, 0x0aa0ffcd, 0x0b80404c, 0x00000000,
+	0x04000301, 0x04000348, 0x04001208, 0x0b8ec388, 0x0cc00000,
+	0x00000000, 0x0649c701, 0x0aa24001, 0x04401041, 0x0809c700,
+	0x05403041, 0x020013c1, 0x04001041, 0x07000070, 0x09c302f0,
+	0x07400070, 0x0649c801, 0x0aa24001, 0x04401041, 0x0809c800,
+	0x05403041, 0x020013c1, 0x04001041, 0x07000070, 0x09c302f0,
+	0x07400070, 0x0cc00000, 0x00000000, 0x0680400f, 0x05403c4d,
+	0x02031c4f, 0x04001c71, 0x07000c40, 0x06800081, 0x09542001,
+	0x07400c40, 0x04401c31, 0x07000c04, 0x0649cf30, 0x0a20c830,
+	0x05808044, 0x0be20041, 0x07801c01, 0x0aa10001, 0x0a216004,
+	0x06800001, 0x07c01c01, 0x05809040, 0x0a218041, 0x06800001,
+	0x09523001, 0x07400c40, 0x0c781700, 0x044012cb, 0x0c07f400,
+	0x00000000, 0x0649c001, 0x0bef7fc1, 0x09101044, 0x0a60c00b,
+	0x05409041, 0x0809d100, 0x09123c04, 0x0540210b, 0x03430130,
+	0x0649d104, 0x02c04c04, 0x0609d104, 0x0940504d, 0x09184c00,
+	0x0aa583f0, 0x068001c4, 0x0aa50030, 0x06800004, 0x0b648170,
+	0x04404130, 0x0649cf04, 0x0be24084, 0x0b6380f0, 0x04002130,
+	0x0aa30070, 0x06800144, 0x0b6280b0, 0x06800184, 0x0c780200,
+	0x068001c4, 0x04401131, 0x07000104, 0x0580c104, 0x0a20c044,
+	0x06800144, 0x06800184, 0x094a3044, 0x07802130, 0x0aa0c030,
+	0x00000000, 0x09801201, 0x090c2c00, 0x0a60c0b0, 0x00000000,
+	0x09801201, 0x04401c71, 0x07000c70, 0x090a2c30, 0x09542070,
+	0x078017f0, 0x09583070, 0x06803230, 0x02030370, 0x07000c30,
+	0x09610070, 0x06800030, 0x02030370, 0x07000c04, 0x0aa1c00b,
+	0x0aa2404b, 0x0aa3408b, 0x0aa3c0cb, 0x0aa4c10b, 0x0aa5414b,
+	0x00000000, 0x0609ca04, 0x0c780580, 0x0609c101, 0x0649ca30,
+	0x09610c04, 0x0609ca30, 0x0c780440, 0x0609c201, 0x0609cb04,
+	0x0c780380, 0x0609c301, 0x0649cb30, 0x09610c04, 0x0609cb30,
+	0x0c780240, 0x0609c401, 0x0609cc04, 0x0c780180, 0x0609c501,
+	0x0649cc30, 0x09610c04, 0x0609cc30, 0x0609c601, 0x0649cf01,
+	0x0be09001, 0x0be100c0, 0x078071c0, 0x04401000, 0x07c071c0,
+	0x0cc00000, 0x00000000, 0x0680000b, 0x07803d0d, 0x0a21880d,
+	0x0780318c, 0x07801b8d, 0x0b00334c, 0x00000000, 0x07801b8c,
+	0x078071cd, 0x0649cf00, 0x0be0d000, 0x0b01d30d, 0x0c7800c0,
+	0x0680004c, 0x0b81330d, 0x00000000, 0x0c07d080, 0x00000000,
+	0x0a617fcd, 0x0c079a00, 0x00000000, 0x0c780300, 0x00000000,
+	0x07800b00, 0x0400004c, 0x09401040, 0x07c00b01, 0x05810041,
+	0x0c07da00, 0x07c00ac1, 0x040012cb, 0x0aa0818b, 0x0c7ff840,
+	0x0aa1400b, 0x06800080, 0x0950800b, 0x0609c000, 0x0609ce00,
+	0x0cc00000, 0x00000000, 0x07800b0c, 0x0bee004c, 0x07802fcc,
+	0x0aa0c00c, 0x0780210c, 0x0a6d004c, 0x078071cc, 0x0bac808c,
+	0x0c07c880, 0x00000000, 0x0aabffcd, 0x07800b00, 0x07800af0,
+	0x09610030, 0x04002000, 0x0b0e000c, 0x0c7ffa40, 0x00000000,
+	0x0680000b, 0x078071cd, 0x0aa4400d, 0x0c07c540, 0x00000000,
+	0x0a61bfcd, 0x00000000, 0x0c078e80, 0x00000000, 0x0c780280,
+	0x00000000, 0x07807180, 0x0a807340, 0x00000000, 0x0c07cf00,
+	0x00000000, 0x040012cb, 0x0aa0818b, 0x0c7ffbc0, 0x0aa1c00b,
+	0x06800080, 0x0950800b, 0x0609c000, 0x0609ce00, 0x0c7ffa40,
+	0x0680000b, 0x0cc00000, 0x00000000, 0x0680400f, 0x0780704e,
+	0x06800008, 0x06800007, 0x07807186, 0x078072c0, 0x0a225800,
+	0x07c07087, 0x05403c46, 0x02031c4f, 0x07000c70, 0x09005c30,
+	0x06800041, 0x03401c01, 0x07c07081, 0x05403c48, 0x02031c4f,
+	0x04001c71, 0x07000c70, 0x0a23c0f0, 0x0a406188, 0x06800000,
+	0x09444c00, 0x07400c70, 0x0c780280, 0x06800047, 0x06800000,
+	0x09406c00, 0x07400c70, 0x06810000, 0x0bc04030, 0x078071c0,
+	0x04401000, 0x07c071c0, 0x04001208, 0x0b8ec388, 0x0cc00000,
+	0x07c07207, 0x0680400f, 0x0780704e, 0x06800008, 0x06800007,
+	0x07807186, 0x05403c48, 0x02031c4f, 0x04001c71, 0x07000c70,
+	0x06810000, 0x0a007030, 0x0a805188, 0x00000000, 0x09c302b0,
+	0x0c7800c0, 0x07400c70, 0x06800047, 0x04001208, 0x0b8f3388,
+	0x0cc00000, 0x07c071c7, 0x0400138e, 0x0780734d, 0x0240e38d,
+	0x07807300, 0x0b610080, 0x00000000, 0x0200e34e, 0x0400138e,
+	0x06800008, 0x07807109, 0x0680a00a, 0x0a403209, 0x0cc00000,
+	0x00000000, 0x05402108, 0x0200410a, 0x04002c44, 0x07000c40,
+	0x04001c71, 0x07000c41, 0x09610001, 0x0a42a380, 0x07000105,
+	0x06804031, 0x05403005, 0x02006031, 0x04001186, 0x07000187,
+	0x04001c44, 0x07000c70, 0x09002030, 0x0aa14040, 0x0aa18080,
+	0x06800000, 0x0c780180, 0x094421c0, 0x0c780100, 0x09c07087,
+	0x0c780080, 0x09c070c7, 0x0be4c307, 0x06800000, 0x094021c0,
+	0x07807200, 0x04401000, 0x07c07200, 0x04401046, 0x07000040,
+	0x09005000, 0x06800041, 0x03401001, 0x07807080, 0x03000040,
+	0x07c07080, 0x06810000, 0x0bc04007, 0x078071c0, 0x04401000,
+	0x07c071c0, 0x0649cf00, 0x0be14080, 0x07400187, 0x0be0d000,
+	0x04001208, 0x0b8ce248, 0x0cc00000, 0x00000000, 0x07807108,
+	0x07807149, 0x0680a00a, 0x0a403209, 0x0cc00000, 0x00000000,
+	0x05402108, 0x0200410a, 0x04002c44, 0x07000c40, 0x04001c71,
+	0x07000c41, 0x09610001, 0x0a42a380, 0x07000105, 0x06804031,
+	0x05403005, 0x02006031, 0x04001186, 0x07000187, 0x04001c44,
+	0x07000c70, 0x09002030, 0x0aa14040, 0x0aa1c080, 0x06800000,
+	0x0c780200, 0x094441c0, 0x09c07087, 0x0c780140, 0x09c07107,
+	0x09c070c7, 0x0c780080, 0x09c07147, 0x0be4c307, 0x06800000,
+	0x094021c0, 0x07807200, 0x04401000, 0x07c07200, 0x04401046,
+	0x07000040, 0x09005000, 0x06800041, 0x03401001, 0x07807080,
+	0x03000040, 0x07c07080, 0x06810000, 0x0bc04007, 0x078071c0,
+	0x04401000, 0x07c071c0, 0x0cc00000, 0x07400187, 0x04001208,
+	0x0b8ce248, 0x0cc00000, 0x00000000, 0x0680000d, 0x07807300,
+	0x0b60c080, 0x00000000, 0x0680004d, 0x07807108, 0x07807149,
+	0x0680a00a, 0x0a403209, 0x0cc00000, 0x00000000, 0x05402108,
+	0x0200410a, 0x04002c44, 0x07000c40, 0x04001c71, 0x07000c41,
+	0x09610001, 0x03800340, 0x0a41c380, 0x07000105, 0x06804031,
+	0x05403005, 0x02006031, 0x04001186, 0x07000187, 0x0a24c307,
+	0x06800000, 0x094061c0, 0x07807200, 0x04401000, 0x07c07200,
+	0x04401046, 0x07000040, 0x09005000, 0x06800041, 0x03401001,
+	0x07807080, 0x03000040, 0x07c07080, 0x06810000, 0x0bc04007,
+	0x078071c0, 0x04401000, 0x07c071c0, 0x0cc00000, 0x07400187,
+	0x04001208, 0x0b8db248, 0x0cc00000, 0x00000000, 0x0400134d,
+	0x0780734c, 0x0240d34c, 0x07807300, 0x0b610080, 0x00000000,
+	0x0200d30d, 0x0400134d, 0x06800008, 0x07807109, 0x0680a00a,
+	0x0a403209, 0x0cc00000, 0x00000000, 0x05402108, 0x0200410a,
+	0x04002c44, 0x07000c40, 0x04001c71, 0x07000c41, 0x09610001,
+	0x0a417340, 0x07000105, 0x06804031, 0x05403005, 0x02006031,
+	0x04001186, 0x07000187, 0x04001c44, 0x07000c70, 0x09002030,
+	0x0aa14040, 0x0aa18080, 0x068000c0, 0x0c780180, 0x094821c0,
+	0x0c780100, 0x09807107, 0x0c780080, 0x09807147, 0x04006c46,
+	0x07400c4e, 0x0cc00000, 0x07400187, 0x04001208, 0x0b8e1248,
+	0x0cc00000, 0x00000000, 0x0440138e, 0x0680000d, 0x07807300,
+	0x0b60c080, 0x00000000, 0x0680004d, 0x07807108, 0x07807149,
+	0x0680a00a, 0x0a403209, 0x0cc00000, 0x00000000, 0x05402108,
+	0x0200410a, 0x04002c44, 0x07000c40, 0x04001c71, 0x07000c41,
+	0x09610001, 0x03800340, 0x0b01b380, 0x07000105, 0x06804031,
+	0x05403005, 0x02006031, 0x04001186, 0x07000187, 0x0a250307,
+	0x06800000, 0x094061c0, 0x07807200, 0x04401000, 0x07c07200,
+	0x04401046, 0x07000040, 0x09005000, 0x06800041, 0x03401001,
+	0x07807080, 0x03000040, 0x07c07080, 0x06810000, 0x0bc04007,
+	0x078071c0, 0x04401000, 0x07c071c0, 0x07400187, 0x04001208,
+	0x0b8dc248, 0x0cc00000, 0x00000000, 0x06800010, 0x078020b1,
+	0x0a6240b1, 0x0649cf31, 0x0a21d031, 0x07800bb1, 0x0aa14031,
+	0x0c07aa80, 0x07c00b90, 0x0c07a300, 0x00000000, 0x0649cf31,
+	0x0be100b1, 0x078072f1, 0x09005031, 0x0a638140, 0x06800011,
+	0x0c07a800, 0x00000000, 0x0780e100, 0x0be18080, 0x09001400,
+	0x0c079fc0, 0x00000000, 0x0c781800, 0x00000000, 0x0c07af40,
+	0x00000000, 0x0c781700, 0x06800000, 0x090a2071, 0x0780e130,
+	0x0a858001, 0x0a857030, 0x0680e10f, 0x070003c0, 0x0aa2c040,
+	0x0aa3c080, 0x0aa4c0c0, 0x0aa68100, 0x00000000, 0x04605040,
+	0x0c500740, 0x00000000, 0x04606040, 0x0c5010c0, 0x0c781280,
+	0x04001c4f, 0x0c07af00, 0x07000c4e, 0x0c7ffc40, 0x040023cf,
+	0x04001c4f, 0x0c07be80, 0x07000c4e, 0x0c7ffb00, 0x040023cf,
+	0x04002c4f, 0x0c07cc00, 0x07000c4e, 0x04001c4f, 0x0c07d800,
+	0x07000c4d, 0x0c7ff900, 0x040033cf, 0x04001c4f, 0x07000c4e,
+	0x0c07e280, 0x00000000, 0x0c7ff780, 0x040023cf, 0x0c079a80,
+	0x00000000, 0x0c079300, 0x00000000, 0x06800007, 0x07807331,
+	0x0b250071, 0x07807770, 0x07807780, 0x09610c00, 0x07807841,
+	0x07807880, 0x09610040, 0x02401c01, 0x07c07841, 0x05810001,
+	0x07c07880, 0x078077c1, 0x07807800, 0x09610040, 0x02401c01,
+	0x07c077c1, 0x05810001, 0x07c07800, 0x0c7801c0, 0x07c07441,
+	0x07c07447, 0x07c077c7, 0x07c07807, 0x07c07847, 0x07c07887,
+	0x07c07347, 0x07c07487, 0x07c07647, 0x07c07687, 0x07c076c7,
+	0x07c07707, 0x07c07747, 0x07c07787, 0x0c7fed40, 0x040013cf,
+	0x04001c4f, 0x07000c4e, 0x0c07be00, 0x00000000, 0x06800050,
+	0x0400044e, 0x0c7feb40, 0x040023cf, 0x0680400f, 0x0780718e,
+	0x0540338e, 0x0200e38f, 0x04001c4e, 0x07000c40, 0x0a2140c0,
+	0x0c071940, 0x07c031d0, 0x0cc00000, 0x00000000, 0x078072f1,
+	0x09005031, 0x090a2071, 0x0aa10140, 0x0aa0c001, 0x0c073fc0,
+	0x00000000, 0x0649cf00, 0x0a219000, 0x0c071600, 0x07c031d0,
+	0x0c077340, 0x00000000, 0x0c780140, 0x0c077280, 0x00000000,
+	0x0c071440, 0x07c031d0, 0x0cc00000, 0x00000000
+};
diff --git a/drivers/amlogic/amports/arch/ucode/h264/gxtvbb_h264slice_linux.h b/drivers/amlogic/amports/arch/ucode/h264/gxtvbb_h264slice_linux.h
new file mode 100644
index 0000000..d486253
--- /dev/null
+++ b/drivers/amlogic/amports/arch/ucode/h264/gxtvbb_h264slice_linux.h
@@ -0,0 +1,207 @@
+static const u32 MicroCode[] __initconst = {
+	0x07802007, 0x07802048, 0x094a21c8, 0x07c072c7, 0x07802407,
+	0x044011c7, 0x07802948, 0x02808207, 0x09021208, 0x02007207,
+	0x07c07307, 0x07802dc7, 0x0aa08047, 0x0c782e00, 0x07802007,
+	0x0a608147, 0x0c781a00, 0x07801c47, 0x0aa0c007, 0x0c781940,
+	0x00000000, 0x0649cf07, 0x0a2080c7, 0x0c781840, 0x07803940,
+	0x0a608000, 0x0c781780, 0x0780736a, 0x078074b1, 0x0a85bab1,
+	0x078072eb, 0x0780732c, 0x0780e12d, 0x0780756e, 0x07807580,
+	0x09610b80, 0x078075ef, 0x07807600, 0x09610bc0, 0x06800090,
+	0x07c031d0, 0x06801840, 0x07c072c0, 0x06800080, 0x07c07300,
+	0x06800000, 0x07c0e100, 0x07c07540, 0x07c07580, 0x07c075c0,
+	0x07c07600, 0x078074b1, 0x04001c71, 0x078020c0, 0x06800041,
+	0x0340f001, 0x044013cf, 0x028313f1, 0x0a834ab1, 0x07c07371,
+	0x07802140, 0x0a60c000, 0x0c780100, 0x07c074b1, 0x0c00a980,
+	0x00000000, 0x068000f3, 0x0c008a80, 0x07c02bf3, 0x07807187,
+	0x07807048, 0x0a403207, 0x0c7e0200, 0x00000000, 0x06800033,
+	0x07c02bf3, 0x068002c0, 0x06031e00, 0x00000000, 0x06431e00,
+	0x0befc040, 0x00000000, 0x0649cf00, 0x0a20d000, 0x06800340,
+	0x06800440, 0x06031e00, 0x0649ce00, 0x0aa10009, 0x00000000,
+	0x0809ce00, 0x08007401, 0x06431e00, 0x0bee8040, 0x00000000,
+	0x0649cf00, 0x0a20d000, 0x06800440, 0x06800340, 0x06031e00,
+	0x0649ce00, 0x0aa10009, 0x00000000, 0x0809ce00, 0x08007401,
+	0x06431e00, 0x0bee8040, 0x00000000, 0x0c7ff1c0, 0x00000000,
+	0x07c0736a, 0x07c072eb, 0x07c0732c, 0x07c0e12d, 0x07c0756e,
+	0x0581002e, 0x07c07580, 0x07c075ef, 0x0581002f, 0x07c07600,
+	0x0c009b80, 0x00000000, 0x080c3000, 0x07807748, 0x07807789,
+	0x09610209, 0x060c3208, 0x078077c8, 0x07807809, 0x09610209,
+	0x060c3208, 0x07807848, 0x07807889, 0x09610209, 0x060c3208,
+	0x06800073, 0x0c007940, 0x07c02bf3, 0x07807187, 0x07807048,
+	0x0a403207, 0x0c7df0c0, 0x00000000, 0x06800033, 0x07c02bf3,
+	0x0aa1000a, 0x00000000, 0x0c780900, 0x00000000, 0x0c07aa40,
+	0x00000000, 0x07800c48, 0x0aa1c008, 0x07800bc8, 0x07800c09,
+	0x09610209, 0x06800009, 0x0c780100, 0x07c00c49, 0x0c062580,
+	0x00000000, 0x0649cf09, 0x0be29009, 0x07800cc9, 0x0a620009,
+	0x06800049, 0x07c00cc9, 0x0809c009, 0x0609c108, 0x08007401,
+	0x0649c009, 0x0a6fc009, 0x07c03088, 0x05810208, 0x07c030c8,
+	0x06803208, 0x07803089, 0x020081c8, 0x07400209, 0x06800008,
+	0x078030c9, 0x020081c8, 0x07400209, 0x06800009, 0x07c03089,
+	0x07c030c9, 0x054181c7, 0x0609b307, 0x068c000a, 0x0c060740,
+	0x06c0000a, 0x0649b307, 0x054081c7, 0x058081c7, 0x0609b207,
+	0x0609b007, 0x0609b107, 0x06800007, 0x07c01c47, 0x078072c7,
+	0x0be09807, 0x0c780840, 0x06bfffc9, 0x06803008, 0x07802307,
+	0x090211c7, 0x054011c7, 0x038081c8, 0x07807307, 0x0a60c087,
+	0x06800007, 0x06800047, 0x038081c8, 0x07803c07, 0x06031f07,
+	0x06033f08, 0x0c05d080, 0x08031e15, 0x078079c9, 0x07807a0a,
+	0x0961024a, 0x06431f07, 0x02009247, 0x078078c7, 0x07807908,
+	0x096101c8, 0x0b8071c9, 0x07807947, 0x07807988, 0x096101c8,
+	0x0b4031c9, 0x0c7800c0, 0x00000000, 0x06bfffc9, 0x064c3d08,
+	0x09161208, 0x0a6f8008, 0x00000000, 0x060c3809, 0x07802207,
+	0x0aa10007, 0x00000000, 0x0c062040, 0x080c2301, 0x07803ac7,
+	0x07c073c7, 0x07803b07, 0x07c07407, 0x07802087, 0x0aa10187,
+	0x06800148, 0x0a83c207, 0x0c781700, 0x00000000, 0x0fc011c0,
+	0x06800808, 0x096e1207, 0x078073c7, 0x09505207, 0x0fc011c0,
+	0x0aa24007, 0x07807407, 0x0c061b40, 0x080c2301, 0x07c073c7,
+	0x09505207, 0x0c061a40, 0x080c2301, 0x07c07407, 0x09605207,
+	0x07802947, 0x096a2207, 0x060c2108, 0x068000c7, 0x07c0c007,
+	0x0fc011c0, 0x0aa10007, 0x00000000, 0x0c06a3c0, 0x0680c009,
+	0x068000c7, 0x07c0d087, 0x0fc011c0, 0x0aa10007, 0x00000000,
+	0x0c06a200, 0x0680d089, 0x07802907, 0x0a60c087, 0x06800008,
+	0x06815408, 0x09402207, 0x0a644047, 0x06094208, 0x0c061340,
+	0x080c2301, 0x09484207, 0x0c061280, 0x080c2301, 0x09504207,
+	0x06094208, 0x0680c007, 0x06094007, 0x0c06a3c0, 0x078073c9,
+	0x0680d807, 0x06094007, 0x0c06a2c0, 0x07807409, 0x0c7808c0,
+	0x00000000, 0x0fc011c0, 0x06800808, 0x0aa14007, 0x078073c7,
+	0x0c060e00, 0x080c2301, 0x07c073c7, 0x09505207, 0x07802947,
+	0x096a2207, 0x060c2108, 0x068000c7, 0x07c0c007, 0x0fc011c0,
+	0x0aa10007, 0x00000000, 0x0c069780, 0x0680c009, 0x078028c7,
+	0x04000207, 0x0aa34007, 0x06094208, 0x0c060980, 0x080c2301,
+	0x09484207, 0x0c0608c0, 0x080c2301, 0x09504207, 0x06094208,
+	0x0680c007, 0x06094007, 0x0c069a00, 0x078073c9, 0x06494007,
+	0x09c07247, 0x06094007, 0x07802047, 0x0aa7c007, 0x07802007,
+	0x06800148, 0x0a82a207, 0x00000000, 0x06800007, 0x07c0e107,
+	0x0fc011c0, 0x0aa5c007, 0x0680e109, 0x04000289, 0x02407289,
+	0x0b610a47, 0x06800007, 0x0c060240, 0x080c2301, 0x0aa3c007,
+	0x07400247, 0x0aae4147, 0x04001249, 0x04000207, 0x0c060080,
+	0x080c2301, 0x07400247, 0x0a6cc0c8, 0x04001249, 0x0c05ff40,
+	0x080c2301, 0x07400247, 0x0c7ffb80, 0x04001249, 0x0649cf07,
+	0x0a20c0c7, 0x06800007, 0x07c0e107, 0x07802347, 0x0aa2c007,
+	0x07802087, 0x0aa24087, 0x06800c08, 0x0c05fbc0, 0x080c2301,
+	0x09402207, 0x0c780100, 0x060c2108, 0x0fc021c0, 0x07c0e107,
+	0x068004ca, 0x06031e0a, 0x0649ce09, 0x0aa10009, 0x00000000,
+	0x0809ce00, 0x08007401, 0x06431e09, 0x0bee8049, 0x00000000,
+	0x07801e87, 0x0a608047, 0x0c782bc0, 0x0680a009, 0x0680400a,
+	0x0680ec08, 0x080c2400, 0x0c069d00, 0x078070cc, 0x080c2400,
+	0x0680000b, 0x0780724c, 0x078073cd, 0x0400134d, 0x0b80334c,
+	0x00000000, 0x0400030d, 0x0200d2c8, 0x0700034d, 0x0540234d,
+	0x0200d349, 0x0700034e, 0x05408410, 0x02010390, 0x0649cf07,
+	0x0a225007, 0x00000000, 0x054033ce, 0x0200f3ca, 0x070003cf,
+	0x091013cf, 0x0aa0c00f, 0x0680004f, 0x07c01e4f, 0x0400134d,
+	0x0700034d, 0x0900234d, 0x094a240d, 0x040013cb, 0x0be0c0cf,
+	0x00000000, 0x060c2210, 0x0a60c00b, 0x00000000, 0x07c01990,
+	0x040012cb, 0x0b8e330b, 0x0a2240cc, 0x090022cc, 0x0680010c,
+	0x0240c2cc, 0x090082d0, 0x05408410, 0x0d07ffcc, 0x0940840b,
+	0x060c2210, 0x07802087, 0x06800188, 0x0a802207, 0x0c781d80,
+	0x0680f608, 0x080c2408, 0x0c068f40, 0x0780728c, 0x080c2408,
+	0x0680000b, 0x0780740d, 0x0400134d, 0x0b80334c, 0x00000000,
+	0x0400030d, 0x0200d2c8, 0x0700034d, 0x0540234d, 0x0200d349,
+	0x0700034e, 0x05408410, 0x02010390, 0x0400134d, 0x0700034d,
+	0x0900234d, 0x0649cf07, 0x0a225007, 0x00000000, 0x054033ce,
+	0x0200f3ca, 0x070003cf, 0x091013cf, 0x0aa0c00f, 0x0680004f,
+	0x07c01e4f, 0x046002cb, 0x0c481140, 0x07803a47, 0x0540338e,
+	0x0200e38a, 0x0700038f, 0x090053cf, 0x06031f07, 0x06033f0f,
+	0x0c058840, 0x08031e15, 0x0780732b, 0x0a60c0ab, 0x0680002c,
+	0x0680006c, 0x06431f07, 0x07803c0f, 0x054013cf, 0x0380fb0f,
+	0x020073c7, 0x0680180f, 0x06031f07, 0x06033f0f, 0x0c0584c0,
+	0x08031e15, 0x06431f07, 0x06433f0f, 0x097081cf, 0x0780230f,
+	0x090213cf, 0x054013cf, 0x038073c7, 0x078078cf, 0x020073c7,
+	0x0780790f, 0x054103cf, 0x020073c7, 0x058031c7, 0x040013ce,
+	0x070003cf, 0x090c2a8f, 0x097c21ea, 0x0ba5c0ab, 0x040023ce,
+	0x070003ec, 0x040033ce, 0x070003ef, 0x09610b2f, 0x040043ce,
+	0x070003ed, 0x040053ce, 0x070003ef, 0x09610b6f, 0x0780776e,
+	0x078077af, 0x09610baf, 0x0b403b2e, 0x0242fb2e, 0x0242fbac,
+	0x0b403b6e, 0x0242cb6e, 0x0242cbad, 0x0b807b2f, 0x0c780180,
+	0x09807747, 0x044013cd, 0x0ba0c0aa, 0x097a11cf, 0x097a11eb,
+	0x060c3907, 0x094a240d, 0x040013cb, 0x0be0c0cf, 0x00000000,
+	0x060c2210, 0x040012cb, 0x0b8a030b, 0x0a2240cc, 0x090022cc,
+	0x0680010c, 0x0240c2cc, 0x090082d0, 0x05408410, 0x0d07ffcc,
+	0x0940840b, 0x060c2210, 0x0649cf0a, 0x0a21500a, 0x0780208a,
+	0x0a60c08a, 0x0680000a, 0x07c01e4a, 0x068c000a, 0x06c0470a,
+	0x0680c009, 0x0c059c40, 0x06a0400b, 0x0c05c880, 0x080c2301,
+	0x0c05ca00, 0x00000000, 0x0401a1c7, 0x07802248, 0x02007207,
+	0x07c02387, 0x07802287, 0x0aa40007, 0x06800009, 0x0c05c5c0,
+	0x080c2301, 0x0aa30047, 0x09402247, 0x0c05c4c0, 0x080c2301,
+	0x0c05c640, 0x00000000, 0x094c4247, 0x0c05c380, 0x080c2301,
+	0x0c05c500, 0x00000000, 0x09444247, 0x060c3109, 0x0c7f1a00,
+	0x00000000, 0x0c0662c0, 0x00000000, 0x0680400f, 0x0780704e,
+	0x0780734d, 0x0780730c, 0x078072c0, 0x090a1040, 0x090c1c00,
+	0x02c0bc01, 0x07807188, 0x0aa0c00c, 0x0aa3c04c, 0x0c780900,
+	0x05403c48, 0x020313f1, 0x04001c71, 0x07000c40, 0x09061040,
+	0x04005c71, 0x07000c70, 0x0be4c040, 0x0a248080, 0x0a4112c1,
+	0x0a410370, 0x0cc00000, 0x0680004a, 0x05403c48, 0x020313f1,
+	0x04001c71, 0x07000c40, 0x09041040, 0x04005c71, 0x07000c70,
+	0x0be18080, 0x0a214040, 0x0a4042c1, 0x0a403370, 0x0cc00000,
+	0x0680004a, 0x04803000, 0x0aa20000, 0x0aa1c0c0, 0x00000000,
+	0x04405c71, 0x07000c40, 0x09800000, 0x09800040, 0x07400c40,
+	0x06800008, 0x06830007, 0x05403c48, 0x020313f1, 0x04001c71,
+	0x07000c40, 0x0be180c0, 0x0bc051c0, 0x06800000, 0x07400c40,
+	0x0c780140, 0x07c07188, 0x04001208, 0x0b8f5388, 0x0c780d40,
+	0x07807780, 0x0580f000, 0x0a20c040, 0x06800001, 0x09801181,
+	0x07802000, 0x0a60c140, 0x04401c31, 0x09801141, 0x07801c40,
+	0x094e1040, 0x07400c01, 0x0aa7400b, 0x06801801, 0x07802300,
+	0x09021000, 0x05401000, 0x03801001, 0x07803cca, 0x0900828a,
+	0x0340a00a, 0x078078c5, 0x07807900, 0x09610140, 0x07803a40,
+	0x06031f00, 0x06033f01, 0x0c055480, 0x08031e15, 0x06800046,
+	0x07807087, 0x06431f04, 0x06800009, 0x03400246, 0x0bc0f1c0,
+	0x04401071, 0x07000070, 0x09405c09, 0x07400070, 0x02c07007,
+	0x07c07087, 0x0649c900, 0x09c007c0, 0x0609c900, 0x07c079c5,
+	0x05810145, 0x07c07a05, 0x0cc00000, 0x0680000a, 0x02005105,
+	0x04001249, 0x0b8ee289, 0x0649c900, 0x098007c0, 0x0609c900,
+	0x0cc00000, 0x07c0718e, 0x07802171, 0x04600031, 0x0c480b80,
+	0x07802180, 0x06800041, 0x0340f001, 0x0580138f, 0x078072c0,
+	0x09005000, 0x0a618140, 0x06800000, 0x07c00b00, 0x07c07640,
+	0x07c07680, 0x07c07440, 0x0780764d, 0x07807680, 0x09610340,
+	0x0780734c, 0x0780744b, 0x078073b1, 0x0b4052f1, 0x02400c4b,
+	0x0b807380, 0x0c780180, 0x0200d3cd, 0x024002f1, 0x0b003380,
+	0x0c780080, 0x0240d3cd, 0x040002f1, 0x078072c0, 0x090a2000,
+	0x0aa14000, 0x0581000d, 0x07c0764d, 0x07c07680, 0x07c0744b,
+	0x07807331, 0x0b6100b1, 0x020052cd, 0x0c781e00, 0x04000185,
+	0x078074c0, 0x07807501, 0x09610001, 0x0c781cc0, 0x02006005,
+	0x078020c0, 0x06800041, 0x0340f001, 0x078072c0, 0x09005000,
+	0x0a620140, 0x06800000, 0x07c00b00, 0x07c07480, 0x07c076c0,
+	0x07c07700, 0x07c07540, 0x07c07580, 0x0780748e, 0x078076cd,
+	0x07807700, 0x09610340, 0x0780734c, 0x0b40338c, 0x00000000,
+	0x0200d3cd, 0x04602031, 0x0c501200, 0x0780398b, 0x0460000b,
+	0x0c500a80, 0x0680000a, 0x06800009, 0x0200830d, 0x078072c0,
+	0x090a2000, 0x0a610000, 0x0aa0c008, 0x00000000, 0x04401208,
+	0x04000c4b, 0x06808030, 0x07000c00, 0x04001c30, 0x07000c01,
+	0x09610001, 0x04001c30, 0x0d07fef1, 0x02009009, 0x0a608008,
+	0x0c780580, 0x04401208, 0x06800007, 0x0b8052c8, 0x00000000,
+	0x040011c7, 0x0c7fff40, 0x024082c8, 0x06031f07, 0x06033f09,
+	0x0c053340, 0x08031e15, 0x04001c48, 0x06808030, 0x06431f0a,
+	0x07000c00, 0x04001c30, 0x07000c01, 0x09610001, 0x04001c30,
+	0x0d07fef1, 0x0200a00a, 0x078072c0, 0x090a2000, 0x0a614000,
+	0x07803800, 0x07803841, 0x09610001, 0x0200a00a, 0x07807545,
+	0x07807580, 0x09610140, 0x0200514a, 0x07807331, 0x0a60c031,
+	0x0c780780, 0x04000185, 0x07803886, 0x078038c0, 0x09610180,
+	0x02006185, 0x0b60c0b1, 0x0c7805c0, 0x04000146, 0x078075c0,
+	0x07807601, 0x09610001, 0x0c780480, 0x02006006, 0x078072c0,
+	0x09005000, 0x0a614140, 0x06800005, 0x07c00b05, 0x0c7802c0,
+	0x06800006, 0x0200b30d, 0x054012cb, 0x078072c0, 0x090a2000,
+	0x0a60c000, 0x00000000, 0x044012cb, 0x0400014b, 0x0400018b,
+	0x07c076cd, 0x0581000d, 0x07c07700, 0x0b803185, 0x04000105,
+	0x04000106, 0x040002c4, 0x02c0b14b, 0x02c0b18b, 0x0a20c04b,
+	0x0680004b, 0x07c00b0b, 0x07c07744, 0x05810004, 0x07c07780,
+	0x07c077c5, 0x05810005, 0x07c07800, 0x07c07846, 0x05810006,
+	0x07c07880, 0x0cc00000, 0x07c0748c, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000
+};
diff --git a/drivers/amlogic/amports/arch/ucode/h264/h264c_linux.h b/drivers/amlogic/amports/arch/ucode/h264/h264c_linux.h
index fafa39d..0b426ed 100644
--- a/drivers/amlogic/amports/arch/ucode/h264/h264c_linux.h
+++ b/drivers/amlogic/amports/arch/ucode/h264/h264c_linux.h
@@ -1,31 +1,14 @@
-/*
- * drivers/amlogic/amports/arch/m8_m8m2/h264/h264c_linux.h
- *
- * Copyright (C) 2015 Amlogic, Inc. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
- * more details.
- *
-*/
-
 static const u32 MicroCode[] __initconst = {
 	0x06810001, 0x06800000, 0x0d000001, 0x07400040, 0x064c0800,
-	0x09800300, 0x00000000, 0x060c0800, 0x0649d019, 0x0c005fc0,
+	0x09800300, 0x00000000, 0x060c0800, 0x0649d019, 0x0c006600,
 	0x0649c134, 0x06880000, 0x060c2900, 0x080c0002, 0x06bfda80,
-	0x07c02d40, 0x06030400, 0x00400000, 0x0c007740, 0x00000000,
+	0x07c02d40, 0x06030400, 0x00400000, 0x0c007d80, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0c7ffe80,
 	0x00000000, 0x06431e35, 0x0befc075, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x0c780500, 0x00000000, 0x0cc00000,
 	0x00400000, 0x0c780d40, 0x064c0007, 0x0cc00000, 0x00400000,
-	0x0c787780, 0x00000000, 0x0cc00000, 0x00400000, 0x0cc00000,
-	0x00400000, 0x0c787600, 0x00000000, 0x0c7873c0, 0x00000000,
+	0x0c787dc0, 0x00000000, 0x0cc00000, 0x00400000, 0x0cc00000,
+	0x00400000, 0x0c787c40, 0x00000000, 0x0c787a00, 0x00000000,
 	0x0cc00000, 0x00400000, 0x0aa44133, 0x0aa0c033, 0x0c7fff00,
 	0x0680001b, 0x0649cf1c, 0x0bee405c, 0x064c431c, 0x0ae0ffdc,
 	0x0c7ffd80, 0x0680001b, 0x064c411c, 0x0968c71c, 0x0a40bc9c,
@@ -37,12 +20,12 @@ static const u32 MicroCode[] __initconst = {
 	0x06030409, 0x00400000, 0x064c4309, 0x05801249, 0x0baf9809,
 	0x00000000, 0x0a2c0047, 0x07802bc9, 0x0aa14009, 0x0a608049,
 	0x0c7a08c0, 0x0a6080c9, 0x0c79f700, 0x0a208807, 0x0c782b40,
-	0x0be51007, 0x0a208207, 0x0c784440, 0x0683ffca, 0x0aa4000a,
+	0x0be51007, 0x0a208207, 0x0c784a80, 0x0683ffca, 0x0aa4000a,
 	0x0440128a, 0x064e0f07, 0x09003207, 0x09063247, 0x0b403209,
 	0x02409209, 0x04008249, 0x0ba180c9, 0x0aedc0c9, 0x080c3e00,
 	0x064c3f07, 0x090021c7, 0x0a6cc0c7, 0x0cb8001a, 0x00000000,
 	0x0c000280, 0x00000000, 0x06bfffca, 0x07903c08, 0x0a402288,
-	0x0c784040, 0x0be08207, 0x0c7ffa00, 0x0c783dc0, 0x00000000,
+	0x0c784680, 0x0be08207, 0x0c7ffa00, 0x0c784400, 0x00000000,
 	0x0649cd09, 0x04001249, 0x0609cd09, 0x0c000780, 0x064c380e,
 	0x064c0809, 0x064c090b, 0x0680040a, 0x063f000a, 0x0680000a,
 	0x063f000a, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
@@ -51,7 +34,7 @@ static const u32 MicroCode[] __initconst = {
 	0x080c0101, 0x0684044a, 0x060c2e0a, 0x060c380e, 0x0c001880,
 	0x00000000, 0x0cc00000, 0x00000000, 0x0683ffc9, 0x0aa18009,
 	0x0649470a, 0x0910828a, 0x07802cc8, 0x0a4fc20a, 0x04401249,
-	0x0cc00000, 0x00000000, 0x0c009480, 0x00000000, 0x06490b09,
+	0x0cc00000, 0x00000000, 0x0c009ac0, 0x00000000, 0x06490b09,
 	0x09809009, 0x09809089, 0x06090b09, 0x09c09009, 0x09c09089,
 	0x06090b09, 0x08095007, 0x08095000, 0x0683ffc9, 0x06498f0a,
 	0x0aa0c009, 0x0a6f800a, 0x04401249, 0x064c3d0a, 0x0580a28a,
@@ -76,25 +59,30 @@ static const u32 MicroCode[] __initconst = {
 	0x060c000a, 0x064c2908, 0x09c08348, 0x09808208, 0x060c2908,
 	0x09808348, 0x09c08208, 0x060c2908, 0x064c080a, 0x0980a34a,
 	0x060c080a, 0x0c07e240, 0x00000000, 0x0c07f700, 0x00000000,
-	0x080c0600, 0x0fc081c0, 0x090a2207, 0x07c02048, 0x0481f1c7,
-	0x07c02007, 0x0aa38147, 0x0aa34047, 0x0a60c187, 0x0c780b80,
-	0x0681d2cd, 0x0a60c1c7, 0x0c780ac0, 0x0682000d, 0x0a60c207,
-	0x0c780a00, 0x068271cd, 0x0a608247, 0x0c780740, 0x0c780f40,
-	0x0c78dfc0, 0x00000000, 0x064c4408, 0x09101208, 0x0aaf8048,
-	0x064c5109, 0x064c460a, 0x07801a48, 0x05410208, 0x07801a0b,
-	0x020082c8, 0x0580a208, 0x06031f08, 0x06033f09, 0x0c07b300,
-	0x08031e15, 0x06431f08, 0x06433f09, 0x09708209, 0x0540a208,
-	0x02008288, 0x064c4309, 0x02408248, 0x064c4009, 0x02408248,
-	0x0cc00000, 0x0440a208, 0x0c07f9c0, 0x00000000, 0x07c00bc8,
-	0x05810208, 0x07c00c08, 0x06800048, 0x0c7806c0, 0x07c00c48,
+	0x080c0600, 0x0fc081c0, 0x0649cf0a, 0x0a21500a, 0x0a611e47,
+	0x0a20c80a, 0x0c780dc0, 0x00000000, 0x090a2207, 0x07c02048,
+	0x0481f1c7, 0x07c02007, 0x0aa38147, 0x0aa34047, 0x0a60c187,
+	0x0c781040, 0x0681ca8d, 0x0a60c1c7, 0x0c780f80, 0x0682000d,
+	0x0a60c207, 0x0c780ec0, 0x0682738d, 0x0a608247, 0x0c780740,
+	0x0c781400, 0x0c78e480, 0x00000000, 0x064c4408, 0x09101208,
+	0x0aaf8048, 0x064c5109, 0x064c460a, 0x07801a48, 0x05410208,
+	0x07801a0b, 0x020082c8, 0x0580a208, 0x06031f08, 0x06033f09,
+	0x0c07b180, 0x08031e15, 0x06431f08, 0x06433f09, 0x09708209,
+	0x0540a208, 0x02008288, 0x064c4309, 0x02408248, 0x064c4009,
+	0x02408248, 0x0cc00000, 0x0440a208, 0x0c07f9c0, 0x00000000,
+	0x07c00bc8, 0x05810208, 0x07c00c08, 0x06800048, 0x0c780b80,
+	0x07c00c48, 0x0c07f7c0, 0x00000000, 0x07800909, 0x0780094a,
+	0x0961024a, 0x0609c209, 0x0680a149, 0x02008248, 0x07c00908,
+	0x05810208, 0x07c00948, 0x07807188, 0x0609c108, 0x0809c00a,
+	0x08007401, 0x0649c008, 0x0a6fc008, 0x0c7806c0, 0x00000000,
 	0x07803bc8, 0x090821c8, 0x0aa18047, 0x06800047, 0x09482207,
-	0x0680000a, 0x0c07de00, 0x06c0000a, 0x0cb8000d, 0x07c03bc8,
+	0x0680000a, 0x0c07d7c0, 0x06c0000a, 0x0cb8000d, 0x07c03bc8,
 	0x064c2907, 0x0be14407, 0x064c2307, 0x0bef4047, 0x0cc00000,
 	0x064c2007, 0x0cc00000, 0x06800007, 0x040011c7, 0x06800008,
 	0x0a20c047, 0x058011c7, 0x024071c8, 0x0cc00000, 0x00000000,
 	0x064c0007, 0x0a2fc047, 0x00000000, 0x064c3a07, 0x090061c7,
 	0x0aaec647, 0x00000000, 0x080c0a01, 0x080c2800, 0x080c0002,
-	0x0c7fb280, 0x00000000, 0x0684000a, 0x0c07d600, 0x06c0000a,
+	0x0c7fac40, 0x00000000, 0x0684000a, 0x0c07cfc0, 0x06c0000a,
 	0x069fffc2, 0x07c03b42, 0x07c03b82, 0x07c03c42, 0x07c00a02,
 	0x07c00a42, 0x07c00a82, 0x07c03c82, 0x07c01742, 0x07c017c2,
 	0x068003c2, 0x07c02fc2, 0x0680c002, 0x06094002, 0x06803003,
@@ -107,18 +95,18 @@ static const u32 MicroCode[] __initconst = {
 	0x06800712, 0x06800033, 0x07c02bf3, 0x07c01933, 0x07c01973,
 	0x07c01df3, 0x07c01e33, 0x0649c203, 0x0a654003, 0x06800803,
 	0x0697000a, 0x06c0444a, 0x06810002, 0x06800049, 0x06a02bcb,
-	0x0c07c300, 0x00000000, 0x0d07ff83, 0x0200a08a, 0x06804003,
+	0x0c07bcc0, 0x00000000, 0x0d07ff83, 0x0200a08a, 0x06804003,
 	0x06b7000a, 0x06c0444a, 0x06808002, 0x06800049, 0x06a02bcb,
-	0x0c07c080, 0x00000000, 0x0d07ff83, 0x0200a08a, 0x064e1203,
+	0x0c07ba40, 0x00000000, 0x0d07ff83, 0x0200a08a, 0x064e1203,
 	0x091e10c3, 0x0bef8043, 0x064c0903, 0x06803002, 0x063f0002,
 	0x06800002, 0x063f0002, 0x06803fc2, 0x060c0903, 0x06800002,
 	0x060c0c02, 0x06c04042, 0x060c0d02, 0x080c0101, 0x06840442,
 	0x060c2e02, 0x064c4010, 0x064c4211, 0x02411411, 0x04008451,
 	0x07c01a11, 0x05810451, 0x07c01a51, 0x0cc00000, 0x00000000,
 	0x07802bc2, 0x0aa0c002, 0x06800102, 0x06030502, 0x0b60c11b,
-	0x0cc00000, 0x00000000, 0x00800000, 0x00000000, 0x0c07a3c0,
+	0x0cc00000, 0x00000000, 0x00800000, 0x00000000, 0x0c079d80,
 	0x00000000, 0x080c0a01, 0x080c2800, 0x080c0002, 0x0cc00000,
-	0x00400000, 0x064c441c, 0x0910171c, 0x0a6f801c, 0x0c7f8c00,
+	0x00400000, 0x064c441c, 0x0910171c, 0x0a6f801c, 0x0c7f85c0,
 	0x00000000, 0x0cc00000, 0x00400000, 0x064e1214, 0x091e1514,
 	0x0bef0054, 0x078029d5, 0x0649d914, 0x0900c514, 0x0acfe554,
 	0x07802494, 0x0aa44094, 0x0c7828c0, 0x06800015, 0x06c04015,
@@ -269,147 +257,142 @@ static const u32 MicroCode[] __initconst = {
 	0x00000000, 0x0c07a040, 0x00000000, 0x0c072200, 0x080c2301,
 	0x07803b8d, 0x0a806347, 0x07803bc8, 0x06800049, 0x07c02dc9,
 	0x0c780080, 0x07c03b87, 0x09082248, 0x0aa1c049, 0x0680000a,
-	0x0c06fc00, 0x06c0000a, 0x06800049, 0x09482209, 0x07c03bc8,
+	0x0c06f5c0, 0x06c0000a, 0x06800049, 0x09482209, 0x07c03bc8,
 	0x06b7000a, 0x06c0444a, 0x054091c7, 0x0200a1ca, 0x06804009,
-	0x06b0c00b, 0x0c06f5c0, 0x00000000, 0x0780c007, 0x06905348,
+	0x06b0c00b, 0x0c06ef80, 0x00000000, 0x0780c007, 0x06905348,
 	0x0a803207, 0x0c7f1ec0, 0x07c03b8d, 0x0780c047, 0x09105207,
 	0x07803b4e, 0x0a803388, 0x0c7802c0, 0x07c03b48, 0x07803bc7,
 	0x0be20047, 0x0694000a, 0x06c0444a, 0x06808009, 0x06b0400b,
-	0x0c06f100, 0x00000000, 0x0c780900, 0x0697000a, 0x06c0444a,
+	0x0c06eac0, 0x00000000, 0x0c780900, 0x0697000a, 0x06c0444a,
 	0x07803b48, 0x0540a1c8, 0x0200a1ca, 0x06806009, 0x06b0400b,
-	0x0c06ee80, 0x00000000, 0x07804007, 0x06905348, 0x0a805207,
+	0x0c06e840, 0x00000000, 0x07804007, 0x06905348, 0x0a805207,
 	0x00000000, 0x07c03b8d, 0x0c7f1700, 0x07c03b4e, 0x0680000a,
-	0x0c00fcc0, 0x00000000, 0x0c0175c0, 0x00000000, 0x07803bc7,
+	0x0c00f840, 0x00000000, 0x0c017140, 0x00000000, 0x07803bc7,
 	0x0be34107, 0x0694000a, 0x06c0444a, 0x06804009, 0x06b0400b,
-	0x0c06e980, 0x00000000, 0x0694c00a, 0x06c0444a, 0x06802009,
-	0x06b0a00b, 0x0c06e800, 0x00000000, 0x0c013c00, 0x00000000,
+	0x0c06e340, 0x00000000, 0x0694c00a, 0x06c0444a, 0x06802009,
+	0x06b0a00b, 0x0c06e1c0, 0x00000000, 0x0c013780, 0x00000000,
 	0x07803bc7, 0x0be34107, 0x0695000a, 0x06c0444a, 0x06804009,
-	0x06b0c00b, 0x0c06e580, 0x00000000, 0x0c780180, 0x0694000a,
-	0x06c0444a, 0x0680c009, 0x0c06e400, 0x06b0400b, 0x078020c8,
-	0x0f8001c8, 0x0649cf0a, 0x0be5900a, 0x07803bca, 0x0be5020a,
-	0x0780200a, 0x0aa4814a, 0x07801f4a, 0x0a810287, 0x0400128a,
-	0x06800049, 0x03409209, 0x04401249, 0x0280a289, 0x0a80a287,
-	0x0780394a, 0x0a62000a, 0x07801eca, 0x0a61008a, 0x0680004a,
-	0x0c780100, 0x07c00b8a, 0x0680004a, 0x07c00b4a, 0x07c01f47,
-	0x07802107, 0x0a61c007, 0x068000c9, 0x0fc011c0, 0x0aa10007,
-	0x00000000, 0x0fc011c0, 0x04001247, 0x07c01f09, 0x07802007,
-	0x0a614147, 0x00000000, 0x0c070080, 0x080c2301, 0x07c01f87,
-	0x07802147, 0x0a65c007, 0x07802187, 0x0f8001c7, 0x07807388,
-	0x07c01808, 0x07c07387, 0x078074c7, 0x07c01847, 0x06800007,
-	0x07c074c7, 0x07c07507, 0x078021c7, 0x0aa2c007, 0x07801f07,
-	0x0a6240c7, 0x00000000, 0x0c06fb80, 0x080c2301, 0x0c06fd00,
-	0x00000000, 0x07c074c7, 0x058101c7, 0x07c07507, 0x0780738f,
-	0x078074d0, 0x07802147, 0x06800048, 0x0a422207, 0x07807547,
-	0x07c01807, 0x078075c7, 0x07c01847, 0x06800007, 0x07c07547,
-	0x07c07587, 0x07c075c7, 0x07c07607, 0x07803a87, 0x0aa54047,
-	0x00000000, 0x0c06f580, 0x080c2301, 0x0c06f700, 0x00000000,
-	0x07c07547, 0x058101c7, 0x07c07587, 0x078021c7, 0x0aa2c007,
-	0x07801f07, 0x0a6240c7, 0x00000000, 0x0c06f280, 0x080c2301,
-	0x0c06f400, 0x00000000, 0x07c075c7, 0x058101c7, 0x07c07607,
-	0x0780754f, 0x078075d0, 0x0c079500, 0x00000000, 0x07802dc7,
-	0x0a608007, 0x0c782000, 0x07801e87, 0x069fffc8, 0x0b803207,
-	0x040011c7, 0x06800147, 0x07c01e87, 0x07802d07, 0x078023c8,
-	0x0b802207, 0x0c780200, 0x0780188a, 0x078018cb, 0x0680000c,
-	0x078023cd, 0x06800049, 0x0c07a640, 0x07c01e49, 0x07801d08,
-	0x0649cf09, 0x0aa28008, 0x07803c0a, 0x0aa0800a, 0x0c781a40,
-	0x04401208, 0x07c01d08, 0x0aa08008, 0x0c781940, 0x09c09089,
-	0x0609cf09, 0x0a22c309, 0x0780204a, 0x0a62400a, 0x07802e0a,
-	0x0aa1c00a, 0x07801f0a, 0x0aa0c0ca, 0x0680004a, 0x0680008a,
-	0x0c781640, 0x07c01d0a, 0x0680000a, 0x07c01d0a, 0x0688000a,
-	0x0c06c440, 0x06c0000a, 0x07803bc7, 0x0be54107, 0x068001ca,
-	0x06031e0a, 0x0680001b, 0x0649ce09, 0x0aa10009, 0x00000000,
-	0x0809ce00, 0x08007401, 0x06431e09, 0x0bee4049, 0x00000000,
-	0x0649cf07, 0x0a2200c7, 0x07801d87, 0x0aa18007, 0x07801ec7,
-	0x0aa10087, 0x06800207, 0x0c7ee280, 0x07c03bc7, 0x06800013,
-	0x07c02cd3, 0x07c02d13, 0x07c02e93, 0x07c01893, 0x07c018d3,
-	0x06803fc7, 0x07c02b07, 0x06800007, 0x07c02547, 0x07c025c7,
-	0x07c02607, 0x07802c07, 0x040011c7, 0x07c024c7, 0x06800047,
-	0x060e0c07, 0x07c026c7, 0x07c02507, 0x068003c7, 0x07c02807,
-	0x06805c07, 0x060c2107, 0x080c2170, 0x06800087, 0x07c02a47,
-	0x06800018, 0x07801ec7, 0x0a60c087, 0x06800007, 0x07c00b47,
-	0x07800b47, 0x07c01e47, 0x068003c7, 0x07c02fc7, 0x06800407,
-	0x060c2407, 0x06800007, 0x07807048, 0x06804009, 0x05403287,
-	0x0200a289, 0x0400128a, 0x0700028b, 0x060c220b, 0x0400128a,
-	0x0700028b, 0x0400128a, 0x0700028c, 0x096102cc, 0x060c220b,
-	0x0400128a, 0x0700028b, 0x0400128a, 0x0700028c, 0x096102cc,
-	0x060c220b, 0x040011c7, 0x0b8ee207, 0x00000000, 0x07801d07,
-	0x0aa08007, 0x0c7ed280, 0x06800007, 0x07c01947, 0x06a00007,
-	0x060c3d07, 0x07802dc7, 0x0a618007, 0x00000000, 0x0c0793c0,
-	0x00000000, 0x0aa08007, 0x0c7ecfc0, 0x07802047, 0x07c02e07,
-	0x07802007, 0x07c02e47, 0x07801ec7, 0x07c02087, 0x07801f47,
-	0x07c07347, 0x07801f07, 0x07c02407, 0x07801f87, 0x07c01fc7,
-	0x0780248a, 0x0a6fc00a, 0x00000000, 0x0c073440, 0x00000000,
-	0x07802dc7, 0x0aa10007, 0x00000000, 0x0c072c40, 0x00000000,
-	0x0c073800, 0x00000000, 0x07802087, 0x06840009, 0x0682625a,
-	0x0aa1c087, 0x06800008, 0x0682305a, 0x0aa10147, 0x06800048,
-	0x06800088, 0x06840009, 0x07c02788, 0x07c02689, 0x06800007,
-	0x07c02a87, 0x07802c8a, 0x07802107, 0x0a630007, 0x07802409,
-	0x0aa280c9, 0x0540128a, 0x0580128a, 0x06490707, 0x09807087,
-	0x098070c7, 0x06090707, 0x06495107, 0x098073c7, 0x06095107,
-	0x07c023ca, 0x07802947, 0x094421c9, 0x07c02947, 0x0a644387,
-	0x068000c9, 0x06495107, 0x094041c9, 0x06800009, 0x097821c9,
-	0x06095107, 0x06490707, 0x09807447, 0x06090707, 0x06498e07,
-	0x09807787, 0x06098e07, 0x07802087, 0x0aa0c087, 0x0682515a,
-	0x068214da, 0x07803bc8, 0x090821c8, 0x0aa18087, 0x06800087,
-	0x09482207, 0x0690000a, 0x0c069500, 0x06c0000a, 0x0c785c40,
-	0x07c03bc8, 0x07802dc7, 0x0aa18007, 0x00000000, 0x0c077d40,
-	0x00000000, 0x0aa08007, 0x0c7eb940, 0x06800007, 0x07803bc8,
-	0x09082208, 0x0aa10008, 0x0684000a, 0x0c069100, 0x06c0000a,
-	0x07c03bc7, 0x07802d87, 0x0aa34007, 0x07802c47, 0x0b22c2c7,
-	0x07802cc7, 0x0a614007, 0x06495108, 0x09c08608, 0x0c7800c0,
-	0x07c02d87, 0x09808608, 0x06095108, 0x08095017, 0x08095000,
-	0x0c785480, 0x00000000, 0x0c7806c0, 0x07802807, 0x0aaf8387,
-	0x00000000, 0x07802947, 0x0aaec387, 0x064e0407, 0x091c2207,
-	0x0a24c0c8, 0x080c3e07, 0x064c3f07, 0x064c3f09, 0x09004249,
-	0x0581b1c7, 0x0a234047, 0x090241c7, 0x0a210088, 0x0aa20289,
-	0x0aa1c309, 0x0be18087, 0x0a21c048, 0x0aa102c9, 0x0aa0c309,
-	0x0be08047, 0x0c7800c0, 0x06800049, 0x07c01e49, 0x0cc00000,
-	0x00000000, 0x06800f07, 0x06800008, 0x068007c9, 0x074001c8,
-	0x0d07ffc9, 0x040011c7, 0x0649d30a, 0x0480724a, 0x0aa18009,
-	0x0649d30c, 0x07c00e0c, 0x0400828a, 0x0580328a, 0x0540328a,
-	0x0b61500a, 0x0400024a, 0x05801249, 0x0c7800c0, 0x05401249,
-	0x06801009, 0x0240a24a, 0x07c00eca, 0x06800f07, 0x05801249,
-	0x07c00e89, 0x0aa2800c, 0x00000000, 0x0fc08200, 0x05408208,
-	0x0440130c, 0x0aa1800c, 0x00000000, 0x0fc082c0, 0x0c780100,
-	0x0440130c, 0x06800008, 0x0680000b, 0x0940820b, 0x074001c8,
-	0x0d07fc89, 0x040011c7, 0x07c00e0c, 0x0680000d, 0x07800e47,
-	0x07800e8b, 0x054012cb, 0x020082c7, 0x06880009, 0x02408248,
-	0x0b21c008, 0x0400020b, 0x06880008, 0x024091c8, 0x04000209,
-	0x0c7800c0, 0x05801249, 0x07800e89, 0x0649d20a, 0x0200a1ca,
-	0x06a00f0b, 0x0200b34b, 0x0c067240, 0x00000000, 0x04000248,
-	0x02007247, 0x0688000a, 0x02408287, 0x0ba0c008, 0x00000000,
-	0x06800007, 0x07c00e47, 0x07800e8b, 0x05801249, 0x0200d24d,
-	0x0240b24b, 0x0a68000b, 0x07c00e8b, 0x07800eca, 0x0aa0c00a,
-	0x0c7fefc0, 0x07800e0c, 0x0649d307, 0x07800d88, 0x020081c8,
-	0x07c00d88, 0x07800e48, 0x096101c8, 0x0609d307, 0x06800047,
-	0x07c00dc7, 0x0cc00000, 0x00000000, 0x07800dc8, 0x0aa0c048,
-	0x0c780780, 0x00000000, 0x06800008, 0x07c00dc8, 0x07800d89,
-	0x07801f08, 0x09610248, 0x0609d509, 0x0aa18048, 0x0aa20088,
-	0x00000000, 0x0680774a, 0x0c780180, 0x00000000, 0x068077ca,
-	0x0c7800c0, 0x00000000, 0x0680784a, 0x07000288, 0x0400128a,
-	0x07000289, 0x09610209, 0x0609d608, 0x0649d308, 0x098083c8,
-	0x0609d308, 0x08007401, 0x0649d308, 0x0a6fc008, 0x00000000,
-	0x0cc00000, 0x00000000, 0x0680000c, 0x0680002a, 0x064c2907,
-	0x0a20c407, 0x0c7e8b40, 0x00000000, 0x0fc081c0, 0x0aaeffc7,
-	0x0200c1cc, 0x064c2907, 0x0a20c407, 0x0c7e8980, 0x00000000,
-	0x0fc081c0, 0x0aaeffc7, 0x0202a1ea, 0x0aa6000c, 0x0aa4c10c,
-	0x0aa1418c, 0x0462d1cc, 0x0c500900, 0x0a61004c, 0x0c780f00,
-	0x06800047, 0x07c01c47, 0x064c0007, 0x0be14207, 0x064c2907,
-	0x0be0c407, 0x0d07ff2a, 0x0fc081c0, 0x064c0007, 0x0be18207,
-	0x064c2907, 0x0be10407, 0x0c7ff740, 0x0c07d780, 0x0609d32a,
-	0x0c7e82c0, 0x00000000, 0x0c067e80, 0x080c2301, 0x064c232b,
-	0x05810aeb, 0x048ffaeb, 0x0697000a, 0x06c0444a, 0x0540a1c7,
-	0x0200a1ca, 0x06804009, 0x0c065580, 0x06b0400b, 0x07804007,
-	0x06905348, 0x0a80f207, 0x0c7e7e80, 0x0c067a80, 0x080c2301,
-	0x064c232b, 0x05810aeb, 0x048ffaeb, 0x0fc011c0, 0x0aa14047,
-	0x04001aeb, 0x0fc071c0, 0x04007aeb, 0x07c017c7, 0x0c780140,
-	0x00000000, 0x0680004a, 0x0c006140, 0x00000000, 0x048071eb,
-	0x0580322b, 0x0aa14007, 0x06800209, 0x04001208, 0x024071c9,
-	0x0f8001c7, 0x0262a22a, 0x0c57f3c0, 0x0c7ff200, 0x0680002b,
-	0x07803d0d, 0x0a22830d, 0x07802f87, 0x09005207, 0x04001208,
-	0x0c00d180, 0x0202b22b, 0x090a5207, 0x04001208, 0x0c00d080,
-	0x0202b22b, 0x0a21440d, 0x00000000, 0x0fc041c0, 0x07c02fc7,
-	0x04004aeb, 0x0c7ff940, 0x00000000, 0x00000000, 0x00000000,
+	0x06b0c00b, 0x0c06df40, 0x00000000, 0x0c780180, 0x0694000a,
+	0x06c0444a, 0x0680c009, 0x0c06ddc0, 0x06b0400b, 0x078020c8,
+	0x0f8001c8, 0x0649cf0a, 0x0be6808a, 0x07803bca, 0x0be6020a,
+	0x0780200a, 0x0aa5814a, 0x07801f4a, 0x0a814287, 0x0400128a,
+	0x06800049, 0x03409209, 0x04401249, 0x0280a289, 0x0a80e287,
+	0x0780394a, 0x0a63000a, 0x0649cf0a, 0x0be0d00a, 0x0c7fa580,
+	0x00000000, 0x07801eca, 0x0a61008a, 0x0680004a, 0x0c780100,
+	0x07c00b8a, 0x0680004a, 0x07c00b4a, 0x07c01f47, 0x07802107,
+	0x0a61c007, 0x068000c9, 0x0fc011c0, 0x0aa10007, 0x00000000,
+	0x0fc011c0, 0x04001247, 0x07c01f09, 0x07802007, 0x0a614147,
+	0x00000000, 0x0c06ff80, 0x080c2301, 0x07c01f87, 0x07802147,
+	0x0a65c007, 0x07802187, 0x0f8001c7, 0x07807388, 0x07c01808,
+	0x07c07387, 0x078074c7, 0x07c01847, 0x06800007, 0x07c074c7,
+	0x07c07507, 0x078021c7, 0x0aa2c007, 0x07801f07, 0x0a6240c7,
+	0x00000000, 0x0c06fa80, 0x080c2301, 0x0c06fc00, 0x00000000,
+	0x07c074c7, 0x058101c7, 0x07c07507, 0x0780738f, 0x078074d0,
+	0x07802147, 0x06800048, 0x0a422207, 0x07807547, 0x07c01807,
+	0x078075c7, 0x07c01847, 0x06800007, 0x07c07547, 0x07c07587,
+	0x07c075c7, 0x07c07607, 0x07803a87, 0x0aa54047, 0x00000000,
+	0x0c06f480, 0x080c2301, 0x0c06f600, 0x00000000, 0x07c07547,
+	0x058101c7, 0x07c07587, 0x078021c7, 0x0aa2c007, 0x07801f07,
+	0x0a6240c7, 0x00000000, 0x0c06f180, 0x080c2301, 0x0c06f300,
+	0x00000000, 0x07c075c7, 0x058101c7, 0x07c07607, 0x0780754f,
+	0x078075d0, 0x0c079400, 0x00000000, 0x07802dc7, 0x0a608007,
+	0x0c782200, 0x07801e87, 0x069fffc8, 0x0b803207, 0x040011c7,
+	0x06800147, 0x07c01e87, 0x07802d07, 0x078023c8, 0x0b802207,
+	0x0c780200, 0x0780188a, 0x078018cb, 0x0680000c, 0x078023cd,
+	0x06800049, 0x0c07a540, 0x07c01e49, 0x07801d08, 0x0649cf09,
+	0x0aa28008, 0x07803c0a, 0x0aa0800a, 0x0c781c40, 0x04401208,
+	0x07c01d08, 0x0aa08008, 0x0c781b40, 0x09c09089, 0x0609cf09,
+	0x0a22c309, 0x0780204a, 0x0a62400a, 0x07802e0a, 0x0aa1c00a,
+	0x07801f0a, 0x0aa0c0ca, 0x0680004a, 0x0680008a, 0x0c781840,
+	0x07c01d0a, 0x0680000a, 0x07c01d0a, 0x0688000a, 0x0c06bd00,
+	0x06c0000a, 0x07803bc7, 0x0be54107, 0x068001ca, 0x06031e0a,
+	0x0680001b, 0x0649ce09, 0x0aa10009, 0x00000000, 0x0809ce00,
+	0x08007401, 0x06431e09, 0x0bee4049, 0x00000000, 0x0649cf07,
+	0x0a2200c7, 0x07801d87, 0x0aa18007, 0x07801ec7, 0x0aa10087,
+	0x06800207, 0x0c7ee180, 0x07c03bc7, 0x06800013, 0x07c02cd3,
+	0x07c02d13, 0x07c02e93, 0x07c01893, 0x07c018d3, 0x06803fc7,
+	0x07c02b07, 0x06800007, 0x07c02547, 0x07c025c7, 0x07c02607,
+	0x07802c07, 0x040011c7, 0x07c024c7, 0x06800047, 0x060e0c07,
+	0x07c026c7, 0x07c02507, 0x068003c7, 0x07c02807, 0x06805c07,
+	0x060c2107, 0x080c2170, 0x06800087, 0x07c02a47, 0x06800018,
+	0x0649cf07, 0x0be1d007, 0x00000000, 0x07801ec7, 0x0aa28187,
+	0x06800007, 0x0c780200, 0x07c01e47, 0x07801ec7, 0x0a60c087,
+	0x06800007, 0x07c00b47, 0x07800b47, 0x07c01e47, 0x068003c7,
+	0x07c02fc7, 0x06800407, 0x060c2407, 0x06800007, 0x07807048,
+	0x06804009, 0x05403287, 0x0200a289, 0x0400128a, 0x0700028b,
+	0x060c220b, 0x0400128a, 0x0700028b, 0x0400128a, 0x0700028c,
+	0x096102cc, 0x060c220b, 0x0400128a, 0x0700028b, 0x0400128a,
+	0x0700028c, 0x096102cc, 0x060c220b, 0x040011c7, 0x0b8ee207,
+	0x00000000, 0x07801d07, 0x0aa08007, 0x0c7ecf80, 0x06800007,
+	0x07c01947, 0x06a00007, 0x060c3d07, 0x07802dc7, 0x0a618007,
+	0x00000000, 0x0c0790c0, 0x00000000, 0x0aa08007, 0x0c7eccc0,
+	0x07802047, 0x07c02e07, 0x07802007, 0x07c02e47, 0x07801ec7,
+	0x07c02087, 0x07801f47, 0x07c07347, 0x07801f07, 0x07c02407,
+	0x07801f87, 0x07c01fc7, 0x0780248a, 0x0a6fc00a, 0x00000000,
+	0x0c073140, 0x00000000, 0x07802dc7, 0x0aa2c007, 0x00000000,
+	0x0c072940, 0x00000000, 0x06498e07, 0x06800fc8, 0x097061c8,
+	0x06098e07, 0x06800008, 0x097061c8, 0x06098e07, 0x0c073340,
+	0x00000000, 0x07802087, 0x06840009, 0x0682625a, 0x0aa1c087,
+	0x06800008, 0x0682305a, 0x0aa10147, 0x06800048, 0x06800088,
+	0x06840009, 0x07c02788, 0x07c02689, 0x06800007, 0x07c02a87,
+	0x07802c8a, 0x07802107, 0x0a630007, 0x07802409, 0x0aa280c9,
+	0x0540128a, 0x0580128a, 0x06490707, 0x09807087, 0x098070c7,
+	0x06090707, 0x06495107, 0x098073c7, 0x06095107, 0x07c023ca,
+	0x07802947, 0x094421c9, 0x07c02947, 0x0a644387, 0x068000c9,
+	0x06495107, 0x094041c9, 0x06800009, 0x097821c9, 0x06095107,
+	0x06490707, 0x09807447, 0x06090707, 0x06498e07, 0x09807787,
+	0x06098e07, 0x07802087, 0x0aa0c087, 0x0682515a, 0x068214da,
+	0x07803bc8, 0x090821c8, 0x0aa18087, 0x06800087, 0x09482207,
+	0x0690000a, 0x0c068a00, 0x06c0000a, 0x0c785140, 0x07c03bc8,
+	0x07802dc7, 0x0aa18007, 0x00000000, 0x0c077880, 0x00000000,
+	0x0aa08007, 0x0c7eb480, 0x06800007, 0x07803bc8, 0x09082208,
+	0x0aa10008, 0x0684000a, 0x0c068600, 0x06c0000a, 0x07c03bc7,
+	0x07802d87, 0x0aa34007, 0x07802c47, 0x0b22c2c7, 0x07802cc7,
+	0x0a614007, 0x06495108, 0x09c08608, 0x0c7800c0, 0x07c02d87,
+	0x09808608, 0x06095108, 0x08095017, 0x08095000, 0x0c784980,
+	0x00000000, 0x07802cc9, 0x07c02ac9, 0x07802889, 0x0cc00000,
+	0x07c03049, 0x0aa14712, 0x06800007, 0x07802d07, 0x050011c7,
+	0x048011c7, 0x0b60c709, 0x06808008, 0x0680c008, 0x0c78f280,
+	0x00000000, 0x0c7806c0, 0x07802807, 0x0aaf8387, 0x00000000,
+	0x07802947, 0x0aaec387, 0x064e0407, 0x091c2207, 0x0a24c0c8,
+	0x080c3e07, 0x064c3f07, 0x064c3f09, 0x09004249, 0x0581b1c7,
+	0x0a234047, 0x090241c7, 0x0a210088, 0x0aa20289, 0x0aa1c309,
+	0x0be18087, 0x0a21c048, 0x0aa102c9, 0x0aa0c309, 0x0be08047,
+	0x0c7800c0, 0x06800049, 0x07c01e49, 0x0cc00000, 0x00000000,
+	0x07800dc8, 0x0aa0c048, 0x0c780780, 0x00000000, 0x06800008,
+	0x07c00dc8, 0x07800d89, 0x07801f08, 0x09610248, 0x0609d509,
+	0x0aa18048, 0x0aa20088, 0x00000000, 0x0680774a, 0x0c780180,
+	0x00000000, 0x068077ca, 0x0c7800c0, 0x00000000, 0x0680784a,
+	0x07000288, 0x0400128a, 0x07000289, 0x09610209, 0x0609d608,
+	0x0649d308, 0x098083c8, 0x0609d308, 0x08007401, 0x0649d308,
+	0x0a6fc008, 0x00000000, 0x0cc00000, 0x00000000, 0x0680000c,
+	0x0680002a, 0x064c2907, 0x0a20c407, 0x0c7e99c0, 0x00000000,
+	0x0fc081c0, 0x0aaeffc7, 0x0200c1cc, 0x064c2907, 0x0a20c407,
+	0x0c7e9800, 0x00000000, 0x0fc081c0, 0x0aaeffc7, 0x0202a1ea,
+	0x0aa5400c, 0x0aa1418c, 0x0462d1cc, 0x0c500880, 0x0a61004c,
+	0x0c780e80, 0x06800047, 0x07c01c47, 0x064c0007, 0x0be14207,
+	0x064c2907, 0x0be0c407, 0x0d07ff2a, 0x0fc081c0, 0x064c0007,
+	0x0be10207, 0x064c2907, 0x0be08407, 0x0c7ff780, 0x0c7e9200,
+	0x00000000, 0x0c068dc0, 0x080c2301, 0x064c232b, 0x05810aeb,
+	0x048ffaeb, 0x0697000a, 0x06c0444a, 0x0540a1c7, 0x0200a1ca,
+	0x06804009, 0x0c065e80, 0x06b0400b, 0x07804007, 0x06905348,
+	0x0a80f207, 0x0c7e8dc0, 0x0c0689c0, 0x080c2301, 0x064c232b,
+	0x05810aeb, 0x048ffaeb, 0x0fc011c0, 0x0aa14047, 0x04001aeb,
+	0x0fc071c0, 0x04007aeb, 0x07c017c7, 0x0c780140, 0x00000000,
+	0x0680004a, 0x0c006c00, 0x00000000, 0x048071eb, 0x0580322b,
+	0x0aa14007, 0x06800209, 0x04001208, 0x024071c9, 0x0f8001c7,
+	0x0262a22a, 0x0c57f440, 0x0c7ff280, 0x0680002b, 0x07803d0d,
+	0x0a22830d, 0x07802f87, 0x09005207, 0x04001208, 0x0c00dc40,
+	0x0202b22b, 0x090a5207, 0x04001208, 0x0c00db40, 0x0202b22b,
+	0x0a21440d, 0x00000000, 0x0fc041c0, 0x07c02fc7, 0x04004aeb,
+	0x0c7ff940, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
@@ -429,14 +412,14 @@ static const u32 MicroCode[] __initconst = {
 	0x094c21c8, 0x060c0407, 0x080c0a01, 0x07802347, 0x0a610007,
 	0x07802387, 0x0c780b00, 0x060c0a07, 0x0fc071c0, 0x080c2940,
 	0x07802387, 0x09807187, 0x098073c7, 0x060c0a07, 0x09c073c7,
-	0x09807387, 0x0c00b100, 0x060c0a07, 0x07802788, 0x064c0a07,
+	0x09807387, 0x0c00af00, 0x060c0a07, 0x07802788, 0x064c0a07,
 	0x091c21c7, 0x0a6f8007, 0x07802a21, 0x06c00021, 0x06800022,
 	0x06c00022, 0x06800023, 0x06c00023, 0x06800024, 0x06c00024,
 	0x06bfffe5, 0x0a628008, 0x07802947, 0x06800309, 0x0aa18387,
 	0x07c029c9, 0x06800189, 0x07c029c9, 0x0c785940, 0x060c0713,
 	0x0c784a80, 0x06800309, 0x0aa18387, 0x07c029c9, 0x06800189,
 	0x07c029c9, 0x0c7825c0, 0x060c0713, 0x0c780bc0, 0x00000000,
-	0x0c00a880, 0x080c0600, 0x07802a21, 0x06c00021, 0x06800022,
+	0x0c00a680, 0x080c0600, 0x07802a21, 0x06c00021, 0x06800022,
 	0x06c00022, 0x06800023, 0x06c00023, 0x06800024, 0x06c00024,
 	0x06bfffe5, 0x07802788, 0x0a628008, 0x07802947, 0x06800309,
 	0x0aa18387, 0x07c029c9, 0x06800189, 0x07c029c9, 0x0c785180,
@@ -520,12 +503,12 @@ static const u32 MicroCode[] __initconst = {
 	0x07802a8a, 0x00800000, 0x078026c9, 0x04001249, 0x07c026c9,
 	0x00400000, 0x0b61408a, 0x00000000, 0x080c2170, 0x0c7807c0,
 	0x080c260e, 0x0683ffca, 0x0440128a, 0x0aa0c00a, 0x07802489,
-	0x0a6f4009, 0x078026c9, 0x04401249, 0x0c0082c0, 0x07c026c9,
+	0x0a6f4009, 0x078026c9, 0x04401249, 0x0c0080c0, 0x07c026c9,
 	0x0c780500, 0x08030580, 0x060e0508, 0x07802a88, 0x06801809,
 	0x09502248, 0x060c2109, 0x080c260e, 0x06800088, 0x07c02587,
 	0x0ba0c087, 0x040011c7, 0x06800007, 0x07c02547, 0x07802cc7,
 	0x07c02ac7, 0x07802887, 0x07c03047, 0x07c02488, 0x08030580,
-	0x0c073000, 0x00000000, 0x07802747, 0x0aa14712, 0x040011c7,
+	0x0c073ec0, 0x00000000, 0x07802747, 0x0aa14712, 0x040011c7,
 	0x07802d08, 0x0a20c048, 0x00000000, 0x07c02747, 0x0c07aec0,
 	0x07802b0d, 0x0b608008, 0x0c7fecc0, 0x0ba13fcd, 0x06800008,
 	0x0c7810c0, 0x07c02b08, 0x06808008, 0x0ba1070d, 0x0400024d,
@@ -541,12 +524,12 @@ static const u32 MicroCode[] __initconst = {
 	0x0aa0800a, 0x0a64070a, 0x07802b4a, 0x0a20c04a, 0x06a0800b,
 	0x06a0c00b, 0x06b80009, 0x07802b8c, 0x0540928c, 0x0200a24a,
 	0x06c0440a, 0x0200ad0a, 0x0603510a, 0x06803f0a, 0x0603520a,
-	0x0c006300, 0x0603500b, 0x0680001b, 0x07802947, 0x0aa5c387,
+	0x0c006100, 0x0603500b, 0x0680001b, 0x07802947, 0x0aa5c387,
 	0x07802cc7, 0x040011c7, 0x07c02cc7, 0x07802e88, 0x04001208,
 	0x07c02e88, 0x07802c48, 0x0b828207, 0x06800007, 0x07c02cc7,
 	0x07802d08, 0x04001208, 0x078023c9, 0x0b822248, 0x07c02d08,
 	0x07802487, 0x0a6fc007, 0x00000000, 0x06430507, 0x0a2f0107,
-	0x0c7dc880, 0x064c0007, 0x07802d08, 0x0be10048, 0x040011c8,
+	0x0c7dcec0, 0x064c0007, 0x07802d08, 0x0be10048, 0x040011c8,
 	0x0c780580, 0x07c02d07, 0x044011c8, 0x07c02d07, 0x07802cc7,
 	0x040011c7, 0x07c02cc7, 0x07802e88, 0x04001208, 0x07c02e88,
 	0x07802c48, 0x0b80b207, 0x06800007, 0x07c02cc7, 0x07802d08,
@@ -554,83 +537,83 @@ static const u32 MicroCode[] __initconst = {
 	0x0c7ff880, 0x07c02e87, 0x064c3b07, 0x0920c1c7, 0x0b218a07,
 	0x0680004a, 0x07c01e4a, 0x07c01d8a, 0x0680204a, 0x07c0194a,
 	0x07802cc7, 0x095084c7, 0x07802d09, 0x094084c9, 0x07801909,
-	0x0aa14009, 0x04401249, 0x0a60c009, 0x07c01909, 0x0c7eeb40,
-	0x07802c49, 0x0b014489, 0x06808008, 0x0a628712, 0x0c780a40,
+	0x0aa14009, 0x04401249, 0x0a60c009, 0x07c01909, 0x0c7ef480,
+	0x07802c49, 0x0b014489, 0x06808008, 0x0a628712, 0x0c780840,
 	0x00000000, 0x07802d0a, 0x0a20c04a, 0x0500128a, 0x040011c7,
-	0x054011c7, 0x0c780a40, 0x094011ca, 0x040011c7, 0x0a418247,
-	0x07802b09, 0x07802d07, 0x0a27c047, 0x040021c9, 0x0c780380,
-	0x06800007, 0x0aa7c712, 0x07802d0a, 0x0a2bc04a, 0x04001287,
-	0x0a4ed24a, 0x0c780680, 0x06800007, 0x0aa14712, 0x06800007,
-	0x07802d07, 0x050011c7, 0x048011c7, 0x0b60c709, 0x06808008,
-	0x0680c008, 0x0c780400, 0x00000000, 0x0a628047, 0x040021c9,
-	0x07802d07, 0x0be1c047, 0x040021c9, 0x0c7ffd80, 0x06800047,
-	0x0aabc007, 0x07802b09, 0x040011c9, 0x0ba10707, 0x0b6ace07,
-	0x0680c008, 0x0441c1c7, 0x05403247, 0x020091c9, 0x02008248,
-	0x07000209, 0x07c02449, 0x04001208, 0x07000209, 0x04001208,
-	0x0700021d, 0x09610749, 0x04001208, 0x0700021e, 0x04001208,
-	0x07000209, 0x09610789, 0x04001208, 0x0700021f, 0x04001208,
-	0x07000209, 0x096107c9, 0x04001208, 0x07000220, 0x04001208,
-	0x07000209, 0x09610809, 0x0c7d5f00, 0x00000000, 0x07802dc7,
-	0x0aa18007, 0x07802087, 0x0a614087, 0x00000000, 0x08098002,
-	0x080980f0, 0x0c780a40, 0x080c2400, 0x064c2207, 0x09305207,
-	0x093a2287, 0x09205247, 0x092a22c7, 0x054022cb, 0x02c0a2ca,
-	0x09105347, 0x091a22c7, 0x054042cb, 0x02c0a2ca, 0x09005387,
-	0x090a22c7, 0x054062cb, 0x02c0a2ca, 0x07802087, 0x0a63c187,
-	0x080c2408, 0x064c2207, 0x048032ca, 0x0aa340cb, 0x00000000,
-	0x0480f28a, 0x09305347, 0x093a22c7, 0x054042cb, 0x02c0a2ca,
-	0x09205387, 0x092a22c7, 0x054062cb, 0x02c0a2ca, 0x0c780240,
-	0x00000000, 0x0480328a, 0x09305247, 0x093a22c7, 0x054022cb,
-	0x0c7800c0, 0x02c0a2ca, 0x0c780580, 0x05418208, 0x0609b308,
-	0x0649b308, 0x05418249, 0x0609b309, 0x0649b309, 0x0541834d,
-	0x0609b30d, 0x0649b30d, 0x0541838e, 0x0609b30e, 0x0649b30e,
-	0x08098002, 0x06bfffcb, 0x054102cb, 0x06bfffcc, 0x02c0c2cc,
-	0x0609820c, 0x048032ca, 0x0a6480cb, 0x0c780080, 0x0c780640,
-	0x054102c8, 0x058102cb, 0x05410308, 0x02c0c2cc, 0x0609810c,
-	0x054042ca, 0x0609800b, 0x0a811248, 0x00000000, 0x054102c9,
-	0x058102cb, 0x05410309, 0x02c0c2cc, 0x0c7802c0, 0x0609820c,
-	0x054102c8, 0x058102cb, 0x05410309, 0x02c0c2cc, 0x0609810c,
-	0x054042ca, 0x04c042cb, 0x0c7800c0, 0x0609800b, 0x0c780340,
-	0x048032ca, 0x054182cb, 0x02c0b20b, 0x0483030a, 0x0541430c,
-	0x02c0c34c, 0x0a80630b, 0x054102cd, 0x058102cb, 0x0541030e,
-	0x02c0c2cc, 0x0609820c, 0x0780294b, 0x0a60c38b, 0x06800712,
-	0x05801492, 0x06bfffcb, 0x06800021, 0x07802a1d, 0x0680001e,
-	0x06800022, 0x0680001f, 0x06800023, 0x06800020, 0x06800024,
-	0x0400099d, 0x040009de, 0x04000a1f, 0x04000a60, 0x0680800a,
-	0x0680070e, 0x0740028b, 0x0400128a, 0x074002a1, 0x0400128a,
-	0x0740029d, 0x0400128a, 0x0740029e, 0x0400128a, 0x074002a2,
-	0x0400128a, 0x0740029f, 0x0400128a, 0x074002a3, 0x0400128a,
-	0x074002a0, 0x0400128a, 0x074002a4, 0x0d07fbce, 0x0400128a,
-	0x07c0244b, 0x07c0298b, 0x096102cb, 0x080c0700, 0x060c270b,
-	0x09610761, 0x060c021d, 0x096107a2, 0x0780278e, 0x0aa1800e,
-	0x060c021e, 0x096107e3, 0x060c021f, 0x09610824, 0x060c0220,
-	0x080c0701, 0x060c270b, 0x060c021d, 0x0aa1000e, 0x060c021e,
-	0x060c021f, 0x060c0220, 0x07802c4e, 0x0b00948e, 0x06b80007,
-	0x06c04407, 0x02007d07, 0x06035107, 0x06803f07, 0x06035207,
-	0x06a08007, 0x06035007, 0x07802cc7, 0x0aa24007, 0x06803fc7,
-	0x07802947, 0x0aa1c387, 0x07802cc7, 0x044011c7, 0x0ba0c707,
-	0x0c7fffc0, 0x0441c1c7, 0x07c02b07, 0x06800007, 0x07c02747,
-	0x0ac0b48e, 0x07802b07, 0x0b613fc7, 0x0ba0c707, 0x0441c1c7,
-	0x07c02b07, 0x06435007, 0x0580f1c7, 0x0bef8047, 0x0cc00000,
-	0x00000000, 0x06435007, 0x0580f1c7, 0x0bef8047, 0x00000000,
-	0x06435307, 0x0900c1c7, 0x0a6f8007, 0x06b80007, 0x06c04407,
-	0x02007d07, 0x06035107, 0x06803f07, 0x06035207, 0x06b0c007,
-	0x06035007, 0x054011d2, 0x0ac051ce, 0x06800087, 0x07c02b47,
-	0x0c7ff8c0, 0x07c02b87, 0x06b90008, 0x06c04408, 0x02008d08,
-	0x05401252, 0x02009489, 0x0680008a, 0x07c02b4a, 0x068000ca,
-	0x06435007, 0x0580f1c7, 0x0bef8047, 0x06803f07, 0x06035108,
-	0x06035207, 0x06a08007, 0x06035007, 0x0ac0324e, 0x0c7ff400,
-	0x07c02b8a, 0x06808007, 0x020081c8, 0x02009489, 0x0c7ffc80,
-	0x0400128a, 0x0400130c, 0x0480f30c, 0x07c02b8c, 0x0980b38b,
-	0x07802b4c, 0x0540928c, 0x0200a24a, 0x06c0440a, 0x0200ad0a,
-	0x0400130c, 0x0480f30c, 0x07c02b4c, 0x0643500c, 0x0580f30c,
-	0x0bef804c, 0x00000000, 0x0643530c, 0x0900c30c, 0x0a6f800c,
-	0x00000000, 0x0603510a, 0x06803f0a, 0x0603520a, 0x0c7fedc0,
-	0x0603500b, 0x0780254b, 0x0a60c00b, 0x044011cb, 0x06800087,
-	0x0aa14007, 0x06a01008, 0x0aa0c047, 0x06a22008, 0x06a40008,
-	0x06c00108, 0x060e0508, 0x07c02587, 0x07802a88, 0x06801809,
-	0x09502248, 0x060c2109, 0x080c260e, 0x06800049, 0x07c02849,
-	0x07802cc8, 0x07c02ac8, 0x07802888, 0x07c03048, 0x06800088,
-	0x0cc00000, 0x07c02488, 0x00000000, 0x00000000, 0x00000000,
+	0x054011c7, 0x0c780840, 0x094011ca, 0x040011c7, 0x0a410247,
+	0x07802b09, 0x07802d07, 0x0a25c047, 0x040021c9, 0x0c7f1300,
+	0x06800007, 0x0aa5c712, 0x07802d0a, 0x0a2bc04a, 0x04001287,
+	0x0a4ed24a, 0x0c780480, 0x06800007, 0x0c7f0f80, 0x00000000,
+	0x0a628047, 0x040021c9, 0x07802d07, 0x0be1c047, 0x040021c9,
+	0x0c7f0f00, 0x06800047, 0x0aadc007, 0x07802b09, 0x040011c9,
+	0x0ba10707, 0x0b6cce07, 0x0680c008, 0x0441c1c7, 0x05403247,
+	0x020091c9, 0x02008248, 0x07000209, 0x07c02449, 0x04001208,
+	0x07000209, 0x04001208, 0x0700021d, 0x09610749, 0x04001208,
+	0x0700021e, 0x04001208, 0x07000209, 0x09610789, 0x04001208,
+	0x0700021f, 0x04001208, 0x07000209, 0x096107c9, 0x04001208,
+	0x07000220, 0x04001208, 0x07000209, 0x09610809, 0x0c7d6100,
+	0x00000000, 0x07802dc7, 0x0aa18007, 0x07802087, 0x0a614087,
+	0x00000000, 0x08098002, 0x080980f0, 0x0c780a40, 0x080c2400,
+	0x064c2207, 0x09305207, 0x093a2287, 0x09205247, 0x092a22c7,
+	0x054022cb, 0x02c0a2ca, 0x09105347, 0x091a22c7, 0x054042cb,
+	0x02c0a2ca, 0x09005387, 0x090a22c7, 0x054062cb, 0x02c0a2ca,
+	0x07802087, 0x0a63c187, 0x080c2408, 0x064c2207, 0x048032ca,
+	0x0aa340cb, 0x00000000, 0x0480f28a, 0x09305347, 0x093a22c7,
+	0x054042cb, 0x02c0a2ca, 0x09205387, 0x092a22c7, 0x054062cb,
+	0x02c0a2ca, 0x0c780240, 0x00000000, 0x0480328a, 0x09305247,
+	0x093a22c7, 0x054022cb, 0x0c7800c0, 0x02c0a2ca, 0x0c780580,
+	0x05418208, 0x0609b308, 0x0649b308, 0x05418249, 0x0609b309,
+	0x0649b309, 0x0541834d, 0x0609b30d, 0x0649b30d, 0x0541838e,
+	0x0609b30e, 0x0649b30e, 0x08098002, 0x06bfffcb, 0x054102cb,
+	0x06bfffcc, 0x02c0c2cc, 0x0609820c, 0x048032ca, 0x0a6480cb,
+	0x0c780080, 0x0c780640, 0x054102c8, 0x058102cb, 0x05410308,
+	0x02c0c2cc, 0x0609810c, 0x054042ca, 0x0609800b, 0x0a811248,
+	0x00000000, 0x054102c9, 0x058102cb, 0x05410309, 0x02c0c2cc,
+	0x0c7802c0, 0x0609820c, 0x054102c8, 0x058102cb, 0x05410309,
+	0x02c0c2cc, 0x0609810c, 0x054042ca, 0x04c042cb, 0x0c7800c0,
+	0x0609800b, 0x0c780340, 0x048032ca, 0x054182cb, 0x02c0b20b,
+	0x0483030a, 0x0541430c, 0x02c0c34c, 0x0a80630b, 0x054102cd,
+	0x058102cb, 0x0541030e, 0x02c0c2cc, 0x0609820c, 0x0780294b,
+	0x0a60c38b, 0x06800712, 0x05801492, 0x06bfffcb, 0x06800021,
+	0x07802a1d, 0x0680001e, 0x06800022, 0x0680001f, 0x06800023,
+	0x06800020, 0x06800024, 0x0400099d, 0x040009de, 0x04000a1f,
+	0x04000a60, 0x0680800a, 0x0680070e, 0x0740028b, 0x0400128a,
+	0x074002a1, 0x0400128a, 0x0740029d, 0x0400128a, 0x0740029e,
+	0x0400128a, 0x074002a2, 0x0400128a, 0x0740029f, 0x0400128a,
+	0x074002a3, 0x0400128a, 0x074002a0, 0x0400128a, 0x074002a4,
+	0x0d07fbce, 0x0400128a, 0x07c0244b, 0x07c0298b, 0x096102cb,
+	0x080c0700, 0x060c270b, 0x09610761, 0x060c021d, 0x096107a2,
+	0x0780278e, 0x0aa1800e, 0x060c021e, 0x096107e3, 0x060c021f,
+	0x09610824, 0x060c0220, 0x080c0701, 0x060c270b, 0x060c021d,
+	0x0aa1000e, 0x060c021e, 0x060c021f, 0x060c0220, 0x07802c4e,
+	0x0b00948e, 0x06b80007, 0x06c04407, 0x02007d07, 0x06035107,
+	0x06803f07, 0x06035207, 0x06a08007, 0x06035007, 0x07802cc7,
+	0x0aa24007, 0x06803fc7, 0x07802947, 0x0aa1c387, 0x07802cc7,
+	0x044011c7, 0x0ba0c707, 0x0c7fffc0, 0x0441c1c7, 0x07c02b07,
+	0x06800007, 0x07c02747, 0x0ac0b48e, 0x07802b07, 0x0b613fc7,
+	0x0ba0c707, 0x0441c1c7, 0x07c02b07, 0x06435007, 0x0580f1c7,
+	0x0bef8047, 0x0cc00000, 0x00000000, 0x06435007, 0x0580f1c7,
+	0x0bef8047, 0x00000000, 0x06435307, 0x0900c1c7, 0x0a6f8007,
+	0x06b80007, 0x06c04407, 0x02007d07, 0x06035107, 0x06803f07,
+	0x06035207, 0x06b0c007, 0x06035007, 0x054011d2, 0x0ac051ce,
+	0x06800087, 0x07c02b47, 0x0c7ff8c0, 0x07c02b87, 0x06b90008,
+	0x06c04408, 0x02008d08, 0x05401252, 0x02009489, 0x0680008a,
+	0x07c02b4a, 0x068000ca, 0x06435007, 0x0580f1c7, 0x0bef8047,
+	0x06803f07, 0x06035108, 0x06035207, 0x06a08007, 0x06035007,
+	0x0ac0324e, 0x0c7ff400, 0x07c02b8a, 0x06808007, 0x020081c8,
+	0x02009489, 0x0c7ffc80, 0x0400128a, 0x0400130c, 0x0480f30c,
+	0x07c02b8c, 0x0980b38b, 0x07802b4c, 0x0540928c, 0x0200a24a,
+	0x06c0440a, 0x0200ad0a, 0x0400130c, 0x0480f30c, 0x07c02b4c,
+	0x0643500c, 0x0580f30c, 0x0bef804c, 0x00000000, 0x0643530c,
+	0x0900c30c, 0x0a6f800c, 0x00000000, 0x0603510a, 0x06803f0a,
+	0x0603520a, 0x0c7fedc0, 0x0603500b, 0x0780254b, 0x0a60c00b,
+	0x044011cb, 0x06800087, 0x0aa14007, 0x06a01008, 0x0aa0c047,
+	0x06a22008, 0x06a40008, 0x06c00108, 0x060e0508, 0x07c02587,
+	0x07802a88, 0x06801809, 0x09502248, 0x060c2109, 0x080c260e,
+	0x06800049, 0x07c02849, 0x07802cc8, 0x07c02ac8, 0x07802888,
+	0x07c03048, 0x06800088, 0x0cc00000, 0x07c02488, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x06bfff40, 0x06032400,
@@ -836,6 +819,4 @@ static const u32 MicroCode[] __initconst = {
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000
-
 };
-
diff --git a/drivers/amlogic/amports/arch/ucode/h264/h264data_linux.h b/drivers/amlogic/amports/arch/ucode/h264/h264data_linux.h
index 2784481..3e71bb0 100644
--- a/drivers/amlogic/amports/arch/ucode/h264/h264data_linux.h
+++ b/drivers/amlogic/amports/arch/ucode/h264/h264data_linux.h
@@ -1,32 +1,15 @@
-/*
- * drivers/amlogic/amports/arch/m8_m8m2/h264/h264data_linux.h
- *
- * Copyright (C) 2015 Amlogic, Inc. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
- * more details.
- *
-*/
-
 static const u32 MicroCode[] __initconst = {
 	0x07802787, 0x07802408, 0x094c21c8, 0x060c0407, 0x080c0a01,
 	0x07802347, 0x0a610007, 0x07802387, 0x0c780b00, 0x060c0a07,
 	0x0fc071c0, 0x080c2940, 0x07802387, 0x09807187, 0x098073c7,
-	0x060c0a07, 0x09c073c7, 0x09807387, 0x0c00b100, 0x060c0a07,
+	0x060c0a07, 0x09c073c7, 0x09807387, 0x0c00af00, 0x060c0a07,
 	0x07802788, 0x064c0a07, 0x091c21c7, 0x0a6f8007, 0x07802a21,
 	0x06c00021, 0x06800022, 0x06c00022, 0x06800023, 0x06c00023,
 	0x06800024, 0x06c00024, 0x06bfffe5, 0x0a628008, 0x07802947,
 	0x06800309, 0x0aa18387, 0x07c029c9, 0x06800189, 0x07c029c9,
 	0x0c785940, 0x060c0713, 0x0c784a80, 0x06800309, 0x0aa18387,
 	0x07c029c9, 0x06800189, 0x07c029c9, 0x0c7825c0, 0x060c0713,
-	0x0c780bc0, 0x00000000, 0x0c00a880, 0x080c0600, 0x07802a21,
+	0x0c780bc0, 0x00000000, 0x0c00a680, 0x080c0600, 0x07802a21,
 	0x06c00021, 0x06800022, 0x06c00022, 0x06800023, 0x06c00023,
 	0x06800024, 0x06c00024, 0x06bfffe5, 0x07802788, 0x0a628008,
 	0x07802947, 0x06800309, 0x0aa18387, 0x07c029c9, 0x06800189,
@@ -111,11 +94,11 @@ static const u32 MicroCode[] __initconst = {
 	0x04001249, 0x07c026c9, 0x00400000, 0x0b61408a, 0x00000000,
 	0x080c2170, 0x0c7807c0, 0x080c260e, 0x0683ffca, 0x0440128a,
 	0x0aa0c00a, 0x07802489, 0x0a6f4009, 0x078026c9, 0x04401249,
-	0x0c0082c0, 0x07c026c9, 0x0c780500, 0x08030580, 0x060e0508,
+	0x0c0080c0, 0x07c026c9, 0x0c780500, 0x08030580, 0x060e0508,
 	0x07802a88, 0x06801809, 0x09502248, 0x060c2109, 0x080c260e,
 	0x06800088, 0x07c02587, 0x0ba0c087, 0x040011c7, 0x06800007,
 	0x07c02547, 0x07802cc7, 0x07c02ac7, 0x07802887, 0x07c03047,
-	0x07c02488, 0x08030580, 0x0c073000, 0x00000000, 0x07802747,
+	0x07c02488, 0x08030580, 0x0c073ec0, 0x00000000, 0x07802747,
 	0x0aa14712, 0x040011c7, 0x07802d08, 0x0a20c048, 0x00000000,
 	0x07c02747, 0x0c07aec0, 0x07802b0d, 0x0b608008, 0x0c7fecc0,
 	0x0ba13fcd, 0x06800008, 0x0c7810c0, 0x07c02b08, 0x06808008,
@@ -131,12 +114,12 @@ static const u32 MicroCode[] __initconst = {
 	0x07c02b0a, 0x0b012488, 0x0aa0800a, 0x0a64070a, 0x07802b4a,
 	0x0a20c04a, 0x06a0800b, 0x06a0c00b, 0x06b80009, 0x07802b8c,
 	0x0540928c, 0x0200a24a, 0x06c0440a, 0x0200ad0a, 0x0603510a,
-	0x06803f0a, 0x0603520a, 0x0c006300, 0x0603500b, 0x0680001b,
+	0x06803f0a, 0x0603520a, 0x0c006100, 0x0603500b, 0x0680001b,
 	0x07802947, 0x0aa5c387, 0x07802cc7, 0x040011c7, 0x07c02cc7,
 	0x07802e88, 0x04001208, 0x07c02e88, 0x07802c48, 0x0b828207,
 	0x06800007, 0x07c02cc7, 0x07802d08, 0x04001208, 0x078023c9,
 	0x0b822248, 0x07c02d08, 0x07802487, 0x0a6fc007, 0x00000000,
-	0x06430507, 0x0a2f0107, 0x0c7dc880, 0x064c0007, 0x07802d08,
+	0x06430507, 0x0a2f0107, 0x0c7dcec0, 0x064c0007, 0x07802d08,
 	0x0be10048, 0x040011c8, 0x0c780580, 0x07c02d07, 0x044011c8,
 	0x07c02d07, 0x07802cc7, 0x040011c7, 0x07c02cc7, 0x07802e88,
 	0x04001208, 0x07c02e88, 0x07802c48, 0x0b80b207, 0x06800007,
@@ -145,81 +128,80 @@ static const u32 MicroCode[] __initconst = {
 	0x0920c1c7, 0x0b218a07, 0x0680004a, 0x07c01e4a, 0x07c01d8a,
 	0x0680204a, 0x07c0194a, 0x07802cc7, 0x095084c7, 0x07802d09,
 	0x094084c9, 0x07801909, 0x0aa14009, 0x04401249, 0x0a60c009,
-	0x07c01909, 0x0c7eeb40, 0x07802c49, 0x0b014489, 0x06808008,
-	0x0a628712, 0x0c780a40, 0x00000000, 0x07802d0a, 0x0a20c04a,
-	0x0500128a, 0x040011c7, 0x054011c7, 0x0c780a40, 0x094011ca,
-	0x040011c7, 0x0a418247, 0x07802b09, 0x07802d07, 0x0a27c047,
-	0x040021c9, 0x0c780380, 0x06800007, 0x0aa7c712, 0x07802d0a,
-	0x0a2bc04a, 0x04001287, 0x0a4ed24a, 0x0c780680, 0x06800007,
-	0x0aa14712, 0x06800007, 0x07802d07, 0x050011c7, 0x048011c7,
-	0x0b60c709, 0x06808008, 0x0680c008, 0x0c780400, 0x00000000,
-	0x0a628047, 0x040021c9, 0x07802d07, 0x0be1c047, 0x040021c9,
-	0x0c7ffd80, 0x06800047, 0x0aabc007, 0x07802b09, 0x040011c9,
-	0x0ba10707, 0x0b6ace07, 0x0680c008, 0x0441c1c7, 0x05403247,
-	0x020091c9, 0x02008248, 0x07000209, 0x07c02449, 0x04001208,
-	0x07000209, 0x04001208, 0x0700021d, 0x09610749, 0x04001208,
-	0x0700021e, 0x04001208, 0x07000209, 0x09610789, 0x04001208,
-	0x0700021f, 0x04001208, 0x07000209, 0x096107c9, 0x04001208,
-	0x07000220, 0x04001208, 0x07000209, 0x09610809, 0x0c7d5f00,
-	0x00000000, 0x07802dc7, 0x0aa18007, 0x07802087, 0x0a614087,
-	0x00000000, 0x08098002, 0x080980f0, 0x0c780a40, 0x080c2400,
-	0x064c2207, 0x09305207, 0x093a2287, 0x09205247, 0x092a22c7,
-	0x054022cb, 0x02c0a2ca, 0x09105347, 0x091a22c7, 0x054042cb,
-	0x02c0a2ca, 0x09005387, 0x090a22c7, 0x054062cb, 0x02c0a2ca,
-	0x07802087, 0x0a63c187, 0x080c2408, 0x064c2207, 0x048032ca,
-	0x0aa340cb, 0x00000000, 0x0480f28a, 0x09305347, 0x093a22c7,
-	0x054042cb, 0x02c0a2ca, 0x09205387, 0x092a22c7, 0x054062cb,
-	0x02c0a2ca, 0x0c780240, 0x00000000, 0x0480328a, 0x09305247,
-	0x093a22c7, 0x054022cb, 0x0c7800c0, 0x02c0a2ca, 0x0c780580,
-	0x05418208, 0x0609b308, 0x0649b308, 0x05418249, 0x0609b309,
-	0x0649b309, 0x0541834d, 0x0609b30d, 0x0649b30d, 0x0541838e,
-	0x0609b30e, 0x0649b30e, 0x08098002, 0x06bfffcb, 0x054102cb,
-	0x06bfffcc, 0x02c0c2cc, 0x0609820c, 0x048032ca, 0x0a6480cb,
-	0x0c780080, 0x0c780640, 0x054102c8, 0x058102cb, 0x05410308,
-	0x02c0c2cc, 0x0609810c, 0x054042ca, 0x0609800b, 0x0a811248,
-	0x00000000, 0x054102c9, 0x058102cb, 0x05410309, 0x02c0c2cc,
-	0x0c7802c0, 0x0609820c, 0x054102c8, 0x058102cb, 0x05410309,
-	0x02c0c2cc, 0x0609810c, 0x054042ca, 0x04c042cb, 0x0c7800c0,
-	0x0609800b, 0x0c780340, 0x048032ca, 0x054182cb, 0x02c0b20b,
-	0x0483030a, 0x0541430c, 0x02c0c34c, 0x0a80630b, 0x054102cd,
-	0x058102cb, 0x0541030e, 0x02c0c2cc, 0x0609820c, 0x0780294b,
-	0x0a60c38b, 0x06800712, 0x05801492, 0x06bfffcb, 0x06800021,
-	0x07802a1d, 0x0680001e, 0x06800022, 0x0680001f, 0x06800023,
-	0x06800020, 0x06800024, 0x0400099d, 0x040009de, 0x04000a1f,
-	0x04000a60, 0x0680800a, 0x0680070e, 0x0740028b, 0x0400128a,
-	0x074002a1, 0x0400128a, 0x0740029d, 0x0400128a, 0x0740029e,
-	0x0400128a, 0x074002a2, 0x0400128a, 0x0740029f, 0x0400128a,
-	0x074002a3, 0x0400128a, 0x074002a0, 0x0400128a, 0x074002a4,
-	0x0d07fbce, 0x0400128a, 0x07c0244b, 0x07c0298b, 0x096102cb,
-	0x080c0700, 0x060c270b, 0x09610761, 0x060c021d, 0x096107a2,
-	0x0780278e, 0x0aa1800e, 0x060c021e, 0x096107e3, 0x060c021f,
-	0x09610824, 0x060c0220, 0x080c0701, 0x060c270b, 0x060c021d,
-	0x0aa1000e, 0x060c021e, 0x060c021f, 0x060c0220, 0x07802c4e,
-	0x0b00948e, 0x06b80007, 0x06c04407, 0x02007d07, 0x06035107,
-	0x06803f07, 0x06035207, 0x06a08007, 0x06035007, 0x07802cc7,
-	0x0aa24007, 0x06803fc7, 0x07802947, 0x0aa1c387, 0x07802cc7,
-	0x044011c7, 0x0ba0c707, 0x0c7fffc0, 0x0441c1c7, 0x07c02b07,
-	0x06800007, 0x07c02747, 0x0ac0b48e, 0x07802b07, 0x0b613fc7,
-	0x0ba0c707, 0x0441c1c7, 0x07c02b07, 0x06435007, 0x0580f1c7,
-	0x0bef8047, 0x0cc00000, 0x00000000, 0x06435007, 0x0580f1c7,
-	0x0bef8047, 0x00000000, 0x06435307, 0x0900c1c7, 0x0a6f8007,
-	0x06b80007, 0x06c04407, 0x02007d07, 0x06035107, 0x06803f07,
-	0x06035207, 0x06b0c007, 0x06035007, 0x054011d2, 0x0ac051ce,
-	0x06800087, 0x07c02b47, 0x0c7ff8c0, 0x07c02b87, 0x06b90008,
-	0x06c04408, 0x02008d08, 0x05401252, 0x02009489, 0x0680008a,
-	0x07c02b4a, 0x068000ca, 0x06435007, 0x0580f1c7, 0x0bef8047,
-	0x06803f07, 0x06035108, 0x06035207, 0x06a08007, 0x06035007,
-	0x0ac0324e, 0x0c7ff400, 0x07c02b8a, 0x06808007, 0x020081c8,
-	0x02009489, 0x0c7ffc80, 0x0400128a, 0x0400130c, 0x0480f30c,
-	0x07c02b8c, 0x0980b38b, 0x07802b4c, 0x0540928c, 0x0200a24a,
-	0x06c0440a, 0x0200ad0a, 0x0400130c, 0x0480f30c, 0x07c02b4c,
-	0x0643500c, 0x0580f30c, 0x0bef804c, 0x00000000, 0x0643530c,
-	0x0900c30c, 0x0a6f800c, 0x00000000, 0x0603510a, 0x06803f0a,
-	0x0603520a, 0x0c7fedc0, 0x0603500b, 0x0780254b, 0x0a60c00b,
-	0x044011cb, 0x06800087, 0x0aa14007, 0x06a01008, 0x0aa0c047,
-	0x06a22008, 0x06a40008, 0x06c00108, 0x060e0508, 0x07c02587,
-	0x07802a88, 0x06801809, 0x09502248, 0x060c2109, 0x080c260e,
-	0x06800049, 0x07c02849, 0x07802cc8, 0x07c02ac8, 0x07802888,
-	0x07c03048, 0x06800088, 0x0cc00000, 0x07c02488
+	0x07c01909, 0x0c7ef480, 0x07802c49, 0x0b014489, 0x06808008,
+	0x0a628712, 0x0c780840, 0x00000000, 0x07802d0a, 0x0a20c04a,
+	0x0500128a, 0x040011c7, 0x054011c7, 0x0c780840, 0x094011ca,
+	0x040011c7, 0x0a410247, 0x07802b09, 0x07802d07, 0x0a25c047,
+	0x040021c9, 0x0c7f1300, 0x06800007, 0x0aa5c712, 0x07802d0a,
+	0x0a2bc04a, 0x04001287, 0x0a4ed24a, 0x0c780480, 0x06800007,
+	0x0c7f0f80, 0x00000000, 0x0a628047, 0x040021c9, 0x07802d07,
+	0x0be1c047, 0x040021c9, 0x0c7f0f00, 0x06800047, 0x0aadc007,
+	0x07802b09, 0x040011c9, 0x0ba10707, 0x0b6cce07, 0x0680c008,
+	0x0441c1c7, 0x05403247, 0x020091c9, 0x02008248, 0x07000209,
+	0x07c02449, 0x04001208, 0x07000209, 0x04001208, 0x0700021d,
+	0x09610749, 0x04001208, 0x0700021e, 0x04001208, 0x07000209,
+	0x09610789, 0x04001208, 0x0700021f, 0x04001208, 0x07000209,
+	0x096107c9, 0x04001208, 0x07000220, 0x04001208, 0x07000209,
+	0x09610809, 0x0c7d6100, 0x00000000, 0x07802dc7, 0x0aa18007,
+	0x07802087, 0x0a614087, 0x00000000, 0x08098002, 0x080980f0,
+	0x0c780a40, 0x080c2400, 0x064c2207, 0x09305207, 0x093a2287,
+	0x09205247, 0x092a22c7, 0x054022cb, 0x02c0a2ca, 0x09105347,
+	0x091a22c7, 0x054042cb, 0x02c0a2ca, 0x09005387, 0x090a22c7,
+	0x054062cb, 0x02c0a2ca, 0x07802087, 0x0a63c187, 0x080c2408,
+	0x064c2207, 0x048032ca, 0x0aa340cb, 0x00000000, 0x0480f28a,
+	0x09305347, 0x093a22c7, 0x054042cb, 0x02c0a2ca, 0x09205387,
+	0x092a22c7, 0x054062cb, 0x02c0a2ca, 0x0c780240, 0x00000000,
+	0x0480328a, 0x09305247, 0x093a22c7, 0x054022cb, 0x0c7800c0,
+	0x02c0a2ca, 0x0c780580, 0x05418208, 0x0609b308, 0x0649b308,
+	0x05418249, 0x0609b309, 0x0649b309, 0x0541834d, 0x0609b30d,
+	0x0649b30d, 0x0541838e, 0x0609b30e, 0x0649b30e, 0x08098002,
+	0x06bfffcb, 0x054102cb, 0x06bfffcc, 0x02c0c2cc, 0x0609820c,
+	0x048032ca, 0x0a6480cb, 0x0c780080, 0x0c780640, 0x054102c8,
+	0x058102cb, 0x05410308, 0x02c0c2cc, 0x0609810c, 0x054042ca,
+	0x0609800b, 0x0a811248, 0x00000000, 0x054102c9, 0x058102cb,
+	0x05410309, 0x02c0c2cc, 0x0c7802c0, 0x0609820c, 0x054102c8,
+	0x058102cb, 0x05410309, 0x02c0c2cc, 0x0609810c, 0x054042ca,
+	0x04c042cb, 0x0c7800c0, 0x0609800b, 0x0c780340, 0x048032ca,
+	0x054182cb, 0x02c0b20b, 0x0483030a, 0x0541430c, 0x02c0c34c,
+	0x0a80630b, 0x054102cd, 0x058102cb, 0x0541030e, 0x02c0c2cc,
+	0x0609820c, 0x0780294b, 0x0a60c38b, 0x06800712, 0x05801492,
+	0x06bfffcb, 0x06800021, 0x07802a1d, 0x0680001e, 0x06800022,
+	0x0680001f, 0x06800023, 0x06800020, 0x06800024, 0x0400099d,
+	0x040009de, 0x04000a1f, 0x04000a60, 0x0680800a, 0x0680070e,
+	0x0740028b, 0x0400128a, 0x074002a1, 0x0400128a, 0x0740029d,
+	0x0400128a, 0x0740029e, 0x0400128a, 0x074002a2, 0x0400128a,
+	0x0740029f, 0x0400128a, 0x074002a3, 0x0400128a, 0x074002a0,
+	0x0400128a, 0x074002a4, 0x0d07fbce, 0x0400128a, 0x07c0244b,
+	0x07c0298b, 0x096102cb, 0x080c0700, 0x060c270b, 0x09610761,
+	0x060c021d, 0x096107a2, 0x0780278e, 0x0aa1800e, 0x060c021e,
+	0x096107e3, 0x060c021f, 0x09610824, 0x060c0220, 0x080c0701,
+	0x060c270b, 0x060c021d, 0x0aa1000e, 0x060c021e, 0x060c021f,
+	0x060c0220, 0x07802c4e, 0x0b00948e, 0x06b80007, 0x06c04407,
+	0x02007d07, 0x06035107, 0x06803f07, 0x06035207, 0x06a08007,
+	0x06035007, 0x07802cc7, 0x0aa24007, 0x06803fc7, 0x07802947,
+	0x0aa1c387, 0x07802cc7, 0x044011c7, 0x0ba0c707, 0x0c7fffc0,
+	0x0441c1c7, 0x07c02b07, 0x06800007, 0x07c02747, 0x0ac0b48e,
+	0x07802b07, 0x0b613fc7, 0x0ba0c707, 0x0441c1c7, 0x07c02b07,
+	0x06435007, 0x0580f1c7, 0x0bef8047, 0x0cc00000, 0x00000000,
+	0x06435007, 0x0580f1c7, 0x0bef8047, 0x00000000, 0x06435307,
+	0x0900c1c7, 0x0a6f8007, 0x06b80007, 0x06c04407, 0x02007d07,
+	0x06035107, 0x06803f07, 0x06035207, 0x06b0c007, 0x06035007,
+	0x054011d2, 0x0ac051ce, 0x06800087, 0x07c02b47, 0x0c7ff8c0,
+	0x07c02b87, 0x06b90008, 0x06c04408, 0x02008d08, 0x05401252,
+	0x02009489, 0x0680008a, 0x07c02b4a, 0x068000ca, 0x06435007,
+	0x0580f1c7, 0x0bef8047, 0x06803f07, 0x06035108, 0x06035207,
+	0x06a08007, 0x06035007, 0x0ac0324e, 0x0c7ff400, 0x07c02b8a,
+	0x06808007, 0x020081c8, 0x02009489, 0x0c7ffc80, 0x0400128a,
+	0x0400130c, 0x0480f30c, 0x07c02b8c, 0x0980b38b, 0x07802b4c,
+	0x0540928c, 0x0200a24a, 0x06c0440a, 0x0200ad0a, 0x0400130c,
+	0x0480f30c, 0x07c02b4c, 0x0643500c, 0x0580f30c, 0x0bef804c,
+	0x00000000, 0x0643530c, 0x0900c30c, 0x0a6f800c, 0x00000000,
+	0x0603510a, 0x06803f0a, 0x0603520a, 0x0c7fedc0, 0x0603500b,
+	0x0780254b, 0x0a60c00b, 0x044011cb, 0x06800087, 0x0aa14007,
+	0x06a01008, 0x0aa0c047, 0x06a22008, 0x06a40008, 0x06c00108,
+	0x060e0508, 0x07c02587, 0x07802a88, 0x06801809, 0x09502248,
+	0x060c2109, 0x080c260e, 0x06800049, 0x07c02849, 0x07802cc8,
+	0x07c02ac8, 0x07802888, 0x07c03048, 0x06800088, 0x0cc00000,
+	0x07c02488, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000
 };
-
diff --git a/drivers/amlogic/amports/arch/ucode/h264/h264header_linux.h b/drivers/amlogic/amports/arch/ucode/h264/h264header_linux.h
index 2c3c2b1..b9d5b7c 100644
--- a/drivers/amlogic/amports/arch/ucode/h264/h264header_linux.h
+++ b/drivers/amlogic/amports/arch/ucode/h264/h264header_linux.h
@@ -1,213 +1,196 @@
-/*
- * drivers/amlogic/amports/arch/m8_m8m2/h264/h264header_linux.h
- *
- * Copyright (C) 2015 Amlogic, Inc. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
- * more details.
- *
-*/
-
 static const u32 MicroCode[] __initconst = {
 	0x06804011, 0x06905347, 0x07400447, 0x04002451, 0x0fc101c0,
-	0x09108247, 0x0a60e509, 0x0c7e5d40, 0x00000000, 0x07400447,
-	0x04001451, 0x0fc08280, 0x07c00d0a, 0x0c065800, 0x080c2301,
-	0x0b2087c7, 0x0c7e5b00, 0x04000407, 0x09505287, 0x0740044a,
-	0x04001451, 0x0ba59909, 0x0c0655c0, 0x080c2301, 0x05001387,
-	0x07803ccd, 0x09502347, 0x07c03ccd, 0x0c065440, 0x080c2301,
-	0x0c0653c0, 0x080c2301, 0x0fc011c0, 0x0fc01340, 0x0942134e,
+	0x09108247, 0x0a60e509, 0x0c7e6380, 0x00000000, 0x07400447,
+	0x04001451, 0x0fc08280, 0x07c00d0a, 0x0c065e40, 0x080c2301,
+	0x0b2087c7, 0x0c7e6140, 0x04000407, 0x09505287, 0x0740044a,
+	0x04001451, 0x0ba59909, 0x0c065c00, 0x080c2301, 0x05001387,
+	0x07803ccd, 0x09502347, 0x07c03ccd, 0x0c065a80, 0x080c2301,
+	0x0c065a00, 0x080c2301, 0x0fc011c0, 0x0fc01340, 0x0942134e,
 	0x0740044d, 0x04001451, 0x0aa1800d, 0x0680000e, 0x068001c7,
-	0x07c01d47, 0x0c009940, 0x06800009, 0x0c065080, 0x080c2301,
-	0x04004247, 0x07400449, 0x04001451, 0x0c064f40, 0x080c2301,
+	0x07c01d47, 0x0c009b00, 0x06800009, 0x0c0656c0, 0x080c2301,
+	0x04004247, 0x07400449, 0x04001451, 0x0c065580, 0x080c2301,
 	0x07400447, 0x04001451, 0x06800088, 0x0a835207, 0x06800008,
 	0x0a82e207, 0x00000000, 0x0fc011c0, 0x07400447, 0x04001451,
-	0x0c064c40, 0x080c2301, 0x0c064dc0, 0x00000000, 0x07400447,
-	0x04001451, 0x058101c7, 0x07400447, 0x04001451, 0x0c064a00,
-	0x080c2301, 0x0c064b80, 0x00000000, 0x07400447, 0x04001451,
-	0x058101c7, 0x07400447, 0x04001451, 0x0c0647c0, 0x080c2301,
-	0x0aa68007, 0x0aa12007, 0x05807207, 0x0aa08008, 0x0c7e4a00,
-	0x07400447, 0x04001451, 0x04000287, 0x06808009, 0x0c064500,
-	0x080c2301, 0x0c064680, 0x00000000, 0x07400247, 0x04001249,
+	0x0c065280, 0x080c2301, 0x0c065400, 0x00000000, 0x07400447,
+	0x04001451, 0x058101c7, 0x07400447, 0x04001451, 0x0c065040,
+	0x080c2301, 0x0c0651c0, 0x00000000, 0x07400447, 0x04001451,
+	0x058101c7, 0x07400447, 0x04001451, 0x0c064e00, 0x080c2301,
+	0x0aa68007, 0x0aa12007, 0x05807207, 0x0aa08008, 0x0c7e5040,
+	0x07400447, 0x04001451, 0x04000287, 0x06808009, 0x0c064b40,
+	0x080c2301, 0x0c064cc0, 0x00000000, 0x07400247, 0x04001249,
 	0x058101c7, 0x07400247, 0x0d07fe0a, 0x04001249, 0x0c7801c0,
-	0x00000000, 0x0c064200, 0x080c2301, 0x040041c7, 0x07400447,
-	0x04001451, 0x0c0640c0, 0x080c2301, 0x04000247, 0x0fc011c0,
-	0x09501247, 0x07400449, 0x04001451, 0x0c063f00, 0x080c2301,
-	0x04000347, 0x0c063e40, 0x080c2301, 0x04000387, 0x06031f0d,
+	0x00000000, 0x0c064840, 0x080c2301, 0x040041c7, 0x07400447,
+	0x04001451, 0x0c064700, 0x080c2301, 0x04000247, 0x0fc011c0,
+	0x09501247, 0x07400449, 0x04001451, 0x0c064540, 0x080c2301,
+	0x04000347, 0x0c064480, 0x080c2301, 0x04000387, 0x06031f0d,
 	0x06033f0e, 0x0c05e840, 0x08031e15, 0x06431f07, 0x0687c948,
 	0x0b013207, 0x0b22ddcd, 0x00000000, 0x0649cf09, 0x0a208089,
-	0x0c7e3e80, 0x00000000, 0x0809c007, 0x0609c10d, 0x08007401,
+	0x0c7e44c0, 0x00000000, 0x0809c007, 0x0609c10d, 0x08007401,
 	0x0c780000, 0x00800000, 0x0400034e, 0x0b2190cd, 0x0649cf09,
-	0x0a208089, 0x0c7e3bc0, 0x0c7ffdc0, 0x0809c008, 0x0400124d,
+	0x0a208089, 0x0c7e4200, 0x0c7ffdc0, 0x0809c008, 0x0400124d,
 	0x07400449, 0x04001451, 0x0400124e, 0x07400449, 0x04001451,
 	0x0fc011c0, 0x0a610007, 0x00000000, 0x0fc01200, 0x094211c8,
 	0x0fc01200, 0x094411c8, 0x07400447, 0x04001451, 0x0fc011c0,
-	0x0aa20007, 0x06800108, 0x0c0632c0, 0x080c2301, 0x07400447,
+	0x0aa20007, 0x06800108, 0x0c063900, 0x080c2301, 0x07400447,
 	0x0d07ff48, 0x04001451, 0x0c780140, 0x06800007, 0x07400447,
 	0x0d07ffc8, 0x04001451, 0x06804048, 0x07400211, 0x0fc01200,
-	0x0a60c008, 0x0c781600, 0x07400448, 0x0fc011c0, 0x09421207,
+	0x0a60c008, 0x0c7817c0, 0x07400448, 0x0fc011c0, 0x09421207,
 	0x07400448, 0x0aa30007, 0x04001451, 0x0fc081c0, 0x07400447,
 	0x0a623fc7, 0x04001451, 0x0fc101c0, 0x07400447, 0x04001451,
 	0x0fc101c0, 0x07400447, 0x04001451, 0x0fc011c0, 0x0aa0c007,
-	0x00000000, 0x0fc011c0, 0x0fc011c0, 0x0aa1c007, 0x00000000,
-	0x0fc051c0, 0x0a210047, 0x00000000, 0x0fc101c0, 0x0fc081c0,
-	0x0fc011c0, 0x0aa14007, 0x0c062780, 0x080c2301, 0x0c062700,
-	0x080c2301, 0x0fc011c0, 0x07400447, 0x04001451, 0x0aa40007,
-	0x07c00687, 0x0fc101c0, 0x07400447, 0x04001451, 0x0fc101c0,
+	0x00000000, 0x0fc011c0, 0x0fc011c0, 0x0aa38007, 0x00000000,
+	0x0680000e, 0x0fc051c0, 0x09405387, 0x0540838e, 0x0980e34e,
+	0x0a21c047, 0x00000000, 0x0fc101c0, 0x07c00987, 0x0fc081c0,
+	0x09408387, 0x07c009ce, 0x0fc011c0, 0x0aa14007, 0x0c062c00,
+	0x080c2301, 0x0c062b80, 0x080c2301, 0x0fc011c0, 0x07400447,
+	0x04001451, 0x0aa40007, 0x07c00687, 0x0fc101c0, 0x07400447,
+	0x04001451, 0x0fc101c0, 0x07400447, 0x04001451, 0x0fc101c0,
 	0x07400447, 0x04001451, 0x0fc101c0, 0x07400447, 0x04001451,
-	0x0fc101c0, 0x07400447, 0x04001451, 0x0fc011c0, 0x07c00687,
-	0x0680000e, 0x0fc011c0, 0x0aa18007, 0x09401387, 0x0c008140,
-	0x00000000, 0x090aa207, 0x07c02f88, 0x0fc011c0, 0x0aa1c007,
-	0x09421387, 0x0c007f80, 0x00000000, 0x0be0c04e, 0x090aa207,
-	0x07c02f88, 0x0a20c0ce, 0x00000000, 0x0fc011c0, 0x0fc011c0,
-	0x09441387, 0x0fc011c0, 0x09461387, 0x0740044e, 0x04001451,
-	0x0aa24007, 0x06800188, 0x0fc011c0, 0x0c061ac0, 0x080c2301,
-	0x0d07ff88, 0x00000000, 0x07400447, 0x04001451, 0x07803b47,
-	0x0a404407, 0x07803bc7, 0x09807007, 0x07c03bc7, 0x0697000a,
-	0x06c0444a, 0x0540a1d0, 0x0200a1ca, 0x06806009, 0x0c05f040,
-	0x06a0400b, 0x0c7e1a00, 0x00000000, 0x0aa1000a, 0x06804047,
-	0x0c782180, 0x070001d1, 0x06804091, 0x07000447, 0x04001451,
-	0x07c039c7, 0x09108247, 0x07000448, 0x04001451, 0x090081c8,
-	0x07c03a07, 0x064c2908, 0x09c080c8, 0x060c2908, 0x0b60d909,
-	0x0c780680, 0x080e0000, 0x0700044d, 0x04001451, 0x064c2908,
-	0x090211cd, 0x09461207, 0x060c2908, 0x0aa3000d, 0x0680000e,
-	0x06800009, 0x06c00049, 0x060e0209, 0x068001c7, 0x07c01d47,
-	0x0c006300, 0x06800009, 0x06800009, 0x06c00049, 0x060e0209,
-	0x064e0007, 0x096e91cd, 0x060e0007, 0x064e0307, 0x095081ce,
-	0x060e0307, 0x07000449, 0x04001451, 0x07c020c9, 0x07000447,
-	0x04001451, 0x07c02147, 0x06800088, 0x0a819207, 0x06800008,
-	0x0a814207, 0x07000447, 0x04001451, 0x07c03a87, 0x07000447,
-	0x04001451, 0x07c03807, 0x07000447, 0x04001451, 0x07c03847,
-	0x07000447, 0x04001451, 0x07c03887, 0x07000447, 0x04001451,
-	0x07c038c7, 0x07000447, 0x04001451, 0x07c03987, 0x0c780100,
-	0x07000447, 0x04001451, 0x07c02187, 0x07000449, 0x04001451,
-	0x090081c9, 0x07c03907, 0x091011c9, 0x07c03947, 0x07000447,
-	0x04001451, 0x060c0907, 0x07c02c47, 0x04401247, 0x07c02c09,
-	0x07000449, 0x04001451, 0x07c02c89, 0x0700044d, 0x04001451,
-	0x090011cd, 0x0a60c007, 0x07c02107, 0x05401249, 0x04000289,
-	0x07802c48, 0x09610288, 0x0609520a, 0x05404289, 0x0968c288,
-	0x0609080a, 0x06031f08, 0x06033f09, 0x0c05a6c0, 0x08031e15,
-	0x06431f08, 0x0a610007, 0x07c03a48, 0x0902120d, 0x094211c8,
-	0x07c02947, 0x090411cd, 0x0aa10007, 0x054011c7, 0x07802108,
-	0x094411c8, 0x07c02307, 0x06800087, 0x07802108, 0x02408207,
-	0x07000447, 0x04001451, 0x07000449, 0x04001451, 0x09508247,
-	0x05401249, 0x07c01a89, 0x07000447, 0x04001451, 0x07000449,
-	0x04001451, 0x09508247, 0x03409209, 0x07c01ac9, 0x07000447,
-	0x04001451, 0x0be0c047, 0x0c780900, 0x05801347, 0x05801347,
-	0x0a22c04d, 0x07000447, 0x04001451, 0x07c03d47, 0x0a61ffc7,
-	0x07000447, 0x04001451, 0x07c03d87, 0x07000447, 0x04001451,
-	0x07c03dc7, 0x07000447, 0x04001451, 0x0a238047, 0x09421347,
-	0x07000447, 0x04001451, 0x07c03e47, 0x07000447, 0x04001451,
-	0x07c03e07, 0x07000447, 0x04001451, 0x07c03ec7, 0x07000447,
-	0x04001451, 0x07c03e87, 0x07000447, 0x04001451, 0x09444347,
-	0x0a20c207, 0x07000447, 0x07c01b87, 0x0cc00000, 0x07c03d0d,
-	0x0680c011, 0x06905347, 0x07400447, 0x04001451, 0x0c05e880,
-	0x080c2301, 0x0b20bfc7, 0x0c7deb80, 0x04000407, 0x04000247,
-	0x0c05e700, 0x080c2301, 0x09505247, 0x0fc011c0, 0x095a1247,
-	0x0fc011c0, 0x095c1247, 0x07400449, 0x04001451, 0x0c05e4c0,
-	0x080c2301, 0x0aa0c007, 0x0c7de7c0, 0x00000000, 0x0c05e380,
-	0x080c2301, 0x04000207, 0x0c05e2c0, 0x080c2301, 0x094a5207,
-	0x0fc011c0, 0x09541207, 0x0fc021c0, 0x09562207, 0x07400448,
-	0x04001451, 0x0c05e080, 0x080c2301, 0x04000247, 0x0c05dfc0,
-	0x080c2301, 0x09508247, 0x07400449, 0x04001451, 0x0c05de80,
-	0x080c2301, 0x04000247, 0x0fc011c0, 0x09501247, 0x0fc011c0,
-	0x09521247, 0x0fc011c0, 0x09541247, 0x07400449, 0x064c2907,
-	0x091c21c7, 0x0a60c0c7, 0x0c780580, 0x04001451, 0x098092c9,
-	0x07400449, 0x04001451, 0x0fc011c0, 0x06800149, 0x05401347,
-	0x02009349, 0x07c01d49, 0x0fc01340, 0x094211cd, 0x07400447,
-	0x04001451, 0x0aa1000d, 0x0680000e, 0x0c001f80, 0x06800009,
-	0x0c05d6c0, 0x080c2301, 0x07400447, 0x04001451, 0x07803b87,
-	0x0a404407, 0x07803bc7, 0x09807047, 0x07c03bc7, 0x06b7000a,
-	0x06c0444a, 0x054091d0, 0x0200a1ca, 0x06804009, 0x06a0c00b,
-	0x0c05ac80, 0x00000000, 0x0c7dd640, 0x00000000, 0x0680c051,
-	0x07000449, 0x04001451, 0x091a11c9, 0x07c02347, 0x0aa0c007,
-	0x06800007, 0x0687ffc7, 0x07c02a07, 0x091c11c9, 0x07c021c7,
-	0x06800808, 0x07000449, 0x04001451, 0x090051c9, 0x07c03ac7,
-	0x09505207, 0x090a51c9, 0x07c03b07, 0x09605207, 0x07802947,
-	0x096a2207, 0x060c2108, 0x091411c9, 0x07c028c7, 0x091621c9,
-	0x07c02907, 0x07000449, 0x04001451, 0x090081c9, 0x0c05cc80,
-	0x00000000, 0x07c02247, 0x091081c9, 0x0c05cb80, 0x00000000,
-	0x07000449, 0x04001451, 0x090081c9, 0x0c05ca40, 0x00000000,
-	0x06801008, 0x09505207, 0x060c2108, 0x06801408, 0x09505207,
-	0x060c2108, 0x091011c9, 0x07c02287, 0x091211c9, 0x064e0e08,
-	0x09401207, 0x060e0e08, 0x091411c9, 0x07c02207, 0x0580b1c9,
-	0x0be18047, 0x06800007, 0x07802308, 0x09c08008, 0x0cc00000,
-	0x07c02308, 0x07000449, 0x04001451, 0x090011c9, 0x0680014d,
-	0x05401387, 0x0200d38d, 0x07c01d4d, 0x07802308, 0x09401207,
-	0x07c02308, 0x09021349, 0x0aa2800d, 0x0680000e, 0x06801c09,
-	0x06c00049, 0x060e0209, 0x0c0013c0, 0x06800009, 0x06800009,
-	0x06c00049, 0x060e0209, 0x064e0007, 0x095c91cd, 0x060e0007,
-	0x064e0307, 0x094081ce, 0x060e0307, 0x07000447, 0x04001451,
-	0x0c05bd40, 0x00000000, 0x06801408, 0x09505207, 0x0cc00000,
-	0x060c2108, 0x0ba0c189, 0x0680020c, 0x0680080c, 0x07801d47,
-	0x0b8041c9, 0x04001249, 0x0cc00000, 0x00000000, 0x0540134d,
-	0x0540138e, 0x0fc01200, 0x07400448, 0x04001451, 0x09401348,
-	0x0aac8008, 0x0680020a, 0x0680020b, 0x0ba0c189, 0x068003cc,
-	0x06800fcc, 0x0aa4400b, 0x00000000, 0x0c05b440, 0x080c2301,
-	0x07400447, 0x04001451, 0x0c05b540, 0x00000000, 0x02007287,
-	0x048ff2c7, 0x0a61800b, 0x0aa0cfcc, 0x0b614189, 0x0a6103cc,
-	0x0c7ff780, 0x0980e00e, 0x0400028b, 0x054083cf, 0x0be0c04c,
-	0x094083ca, 0x06c0000f, 0x0aeac00c, 0x0440130c, 0x07801d47,
-	0x0b8031c9, 0x0cc00000, 0x00000000, 0x0c7ff640, 0x04001249,
-	0x0ba0c189, 0x0680020c, 0x0680080c, 0x064e020a, 0x0200a30a,
-	0x06c0004a, 0x060e020a, 0x0ba101c9, 0x04001249, 0x0cc00000,
-	0x00000000, 0x0540134d, 0x0540138e, 0x07801d48, 0x0ac04209,
-	0x06800008, 0x07000448, 0x04001451, 0x09401348, 0x0aab4008,
-	0x0680020a, 0x0680020b, 0x0ba0c189, 0x068003cc, 0x06800fcc,
-	0x0aa3400b, 0x07000447, 0x0c05a8c0, 0x04001451, 0x02007287,
-	0x048ff2c7, 0x0a61800b, 0x0aa0cfcc, 0x0b614189, 0x0a6103cc,
-	0x0c7ff740, 0x0980e00e, 0x0400028b, 0x054083cf, 0x0be1004c,
-	0x094083ca, 0x06c0000f, 0x060e020f, 0x0aeb800c, 0x0440130c,
-	0x0ba0c1c9, 0x0cc00000, 0x00000000, 0x0c7ff6c0, 0x04001249,
-	0x0b210408, 0x00000000, 0x0fc10240, 0x04410208, 0x0cc00000,
-	0x0f800208, 0x0c059f80, 0x080c2301, 0x04001347, 0x0fc081c0,
-	0x0c059e80, 0x080c2301, 0x0c059e00, 0x080c2301, 0x0d07ff0d,
-	0x0fc011c0, 0x0fc051c0, 0x0cc00000, 0x0fc0f1c0, 0x07803c47,
-	0x07803c88, 0x0780174b, 0x07800a4d, 0x07800a8e, 0x07802c49,
-	0x07803a4a, 0x0780390c, 0x07803e8f, 0x07803ed0, 0x07803e11,
-	0x0a409247, 0x0a408288, 0x0a40730b, 0x0a4063cd, 0x0a40540e,
-	0x00000000, 0x07800a07, 0x0a402447, 0x0c7824c0, 0x06800007,
-	0x07c07087, 0x07803bc7, 0x09807087, 0x07c03bc7, 0x069fffc7,
-	0x07c03c49, 0x07c03c8a, 0x07c0174c, 0x07c00a4f, 0x07c00a90,
-	0x07c00a11, 0x0a83f207, 0x0688000a, 0x0c0573c0, 0x06c0000a,
-	0x0694000a, 0x06c0444a, 0x06804009, 0x0c056c00, 0x06b0400b,
-	0x0680044a, 0x06031e0a, 0x0649ce09, 0x0aa10009, 0x00000000,
-	0x0809ce00, 0x08007401, 0x06431e0a, 0x0bee804a, 0x00000000,
-	0x07803a47, 0x0a634047, 0x07807187, 0x06804089, 0x054031c7,
-	0x020091c9, 0x07000247, 0x091011c7, 0x020091c9, 0x0740024a,
-	0x04001249, 0x06801fca, 0x0740024a, 0x07c0178a, 0x07807047,
-	0x07c07187, 0x068003ca, 0x06031e0a, 0x0649ce09, 0x0aa10009,
-	0x00000000, 0x0809ce00, 0x08007401, 0x06431e09, 0x0bee8049,
-	0x00000000, 0x0649ce09, 0x0a6dc009, 0x00000000, 0x0c061dc0,
-	0x00000000, 0x0649c007, 0x0bef7fc7, 0x07803a47, 0x0a60c047,
-	0x0c780000, 0x00800000, 0x068000c7, 0x0609c007, 0x08007401,
-	0x0c061b00, 0x0680001b, 0x0649c007, 0x0bef7fc7, 0x07802c47,
-	0x07803a48, 0x095101c8, 0x07803908, 0x097071c8, 0x07802308,
-	0x09021208, 0x097e11c8, 0x0609c107, 0x07803d07, 0x07802108,
-	0x095e11c8, 0x07800688, 0x094c11c8, 0x07803cc8, 0x09102208,
-	0x095a21c8, 0x07803d48, 0x096101c8, 0x0609c207, 0x07803d87,
-	0x07803dc8, 0x096101c8, 0x0609c307, 0x07803e07, 0x07803e48,
-	0x096101c8, 0x0609c407, 0x07803e87, 0x07803ec8, 0x096101c8,
-	0x0609c507, 0x07801ac7, 0x07801a88, 0x096101c8, 0x0609c607,
-	0x07800d07, 0x0609ca07, 0x06800047, 0x0609c007, 0x08007401,
-	0x06800007, 0x06800008, 0x06804009, 0x04001249, 0x07400248,
-	0x040011c7, 0x0baf8607, 0x04008249, 0x0680001b, 0x0649c008,
-	0x0befbfc8, 0x091081c8, 0x07c03187, 0x092081c8, 0x07c07047,
-	0x093081c8, 0x07803cc8, 0x09408207, 0x07c03cc8, 0x06800007,
-	0x07c071c7, 0x07c07207, 0x0649c107, 0x07c078c7, 0x058101c7,
-	0x07c07907, 0x0649c407, 0x07c07947, 0x058101c7, 0x07c07987,
-	0x07803cc8, 0x09008208, 0x07802307, 0x090211c7, 0x054011c7,
-	0x034081c8, 0x07803907, 0x07803189, 0x0b004247, 0x00000000,
-	0x040001c9, 0x07c03907, 0x0b803207, 0x044011c8, 0x07c03907,
-	0x0cc00000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x0fc011c0, 0x07c00687, 0x0680000e, 0x0fc011c0, 0x0aa18007,
+	0x09401387, 0x0c008140, 0x00000000, 0x090aa207, 0x07c02f88,
+	0x0fc011c0, 0x0aa1c007, 0x09421387, 0x0c007f80, 0x00000000,
+	0x0be0c04e, 0x090aa207, 0x07c02f88, 0x0a20c0ce, 0x00000000,
+	0x0fc011c0, 0x0fc011c0, 0x09441387, 0x0fc011c0, 0x09461387,
+	0x0740044e, 0x04001451, 0x0aa24007, 0x06800188, 0x0fc011c0,
+	0x0c061f40, 0x080c2301, 0x0d07ff88, 0x00000000, 0x07400447,
+	0x04001451, 0x07803b47, 0x0a404407, 0x07803bc7, 0x09807007,
+	0x07c03bc7, 0x0697000a, 0x06c0444a, 0x0540a1d0, 0x0200a1ca,
+	0x06806009, 0x0c05ee80, 0x06a0400b, 0x0c7e1e80, 0x00000000,
+	0x0aa1000a, 0x06804047, 0x0c782180, 0x070001d1, 0x06804091,
+	0x07000447, 0x04001451, 0x07c039c7, 0x09108247, 0x07000448,
+	0x04001451, 0x090081c8, 0x07c03a07, 0x064c2908, 0x09c080c8,
+	0x060c2908, 0x0b60d909, 0x0c780680, 0x080e0000, 0x0700044d,
+	0x04001451, 0x064c2908, 0x090211cd, 0x09461207, 0x060c2908,
+	0x0aa3000d, 0x0680000e, 0x06800009, 0x06c00049, 0x060e0209,
+	0x068001c7, 0x07c01d47, 0x0c006300, 0x06800009, 0x06800009,
+	0x06c00049, 0x060e0209, 0x064e0007, 0x096e91cd, 0x060e0007,
+	0x064e0307, 0x095081ce, 0x060e0307, 0x07000449, 0x04001451,
+	0x07c020c9, 0x07000447, 0x04001451, 0x07c02147, 0x06800088,
+	0x0a819207, 0x06800008, 0x0a814207, 0x07000447, 0x04001451,
+	0x07c03a87, 0x07000447, 0x04001451, 0x07c03807, 0x07000447,
+	0x04001451, 0x07c03847, 0x07000447, 0x04001451, 0x07c03887,
+	0x07000447, 0x04001451, 0x07c038c7, 0x07000447, 0x04001451,
+	0x07c03987, 0x0c780100, 0x07000447, 0x04001451, 0x07c02187,
+	0x07000449, 0x04001451, 0x090081c9, 0x07c03907, 0x091011c9,
+	0x07c03947, 0x07000447, 0x04001451, 0x060c0907, 0x07c02c47,
+	0x04401247, 0x07c02c09, 0x07000449, 0x04001451, 0x07c02c89,
+	0x0700044d, 0x04001451, 0x090011cd, 0x0a60c007, 0x07c02107,
+	0x05401249, 0x04000289, 0x07802c48, 0x09610288, 0x0609520a,
+	0x05404289, 0x0968c288, 0x0609080a, 0x06031f08, 0x06033f09,
+	0x0c05a500, 0x08031e15, 0x06431f08, 0x0a610007, 0x07c03a48,
+	0x0902120d, 0x094211c8, 0x07c02947, 0x090411cd, 0x0aa10007,
+	0x054011c7, 0x07802108, 0x094411c8, 0x07c02307, 0x06800087,
+	0x07802108, 0x02408207, 0x07000447, 0x04001451, 0x07000449,
+	0x04001451, 0x09508247, 0x05401249, 0x07c01a89, 0x07000447,
+	0x04001451, 0x07000449, 0x04001451, 0x09508247, 0x03409209,
+	0x07c01ac9, 0x07000447, 0x04001451, 0x0be0c047, 0x0c780900,
+	0x05801347, 0x05801347, 0x0a22c04d, 0x07000447, 0x04001451,
+	0x07c03d47, 0x0a61ffc7, 0x07000447, 0x04001451, 0x07c03d87,
+	0x07000447, 0x04001451, 0x07c03dc7, 0x07000447, 0x04001451,
+	0x0a238047, 0x09421347, 0x07000447, 0x04001451, 0x07c03e47,
+	0x07000447, 0x04001451, 0x07c03e07, 0x07000447, 0x04001451,
+	0x07c03ec7, 0x07000447, 0x04001451, 0x07c03e87, 0x07000447,
+	0x04001451, 0x09444347, 0x0a20c207, 0x07000447, 0x07c01b87,
+	0x0cc00000, 0x07c03d0d, 0x0680c011, 0x06905347, 0x07400447,
+	0x04001451, 0x0c05ed00, 0x080c2301, 0x0b20bfc7, 0x0c7df000,
+	0x04000407, 0x04000247, 0x0c05eb80, 0x080c2301, 0x09505247,
+	0x0fc011c0, 0x095a1247, 0x0fc011c0, 0x095c1247, 0x07400449,
+	0x04001451, 0x0c05e940, 0x080c2301, 0x0aa0c007, 0x0c7dec40,
+	0x00000000, 0x0c05e800, 0x080c2301, 0x04000207, 0x0c05e740,
+	0x080c2301, 0x094a5207, 0x0fc011c0, 0x09541207, 0x0fc021c0,
+	0x09562207, 0x07400448, 0x04001451, 0x0c05e500, 0x080c2301,
+	0x04000247, 0x0c05e440, 0x080c2301, 0x09508247, 0x07400449,
+	0x04001451, 0x0c05e300, 0x080c2301, 0x04000247, 0x0fc011c0,
+	0x09501247, 0x0fc011c0, 0x09521247, 0x0fc011c0, 0x09541247,
+	0x07400449, 0x064c2907, 0x091c21c7, 0x0a60c0c7, 0x0c780580,
+	0x04001451, 0x098092c9, 0x07400449, 0x04001451, 0x0fc011c0,
+	0x06800149, 0x05401347, 0x02009349, 0x07c01d49, 0x0fc01340,
+	0x094211cd, 0x07400447, 0x04001451, 0x0aa1000d, 0x0680000e,
+	0x0c001f80, 0x06800009, 0x0c05db40, 0x080c2301, 0x07400447,
+	0x04001451, 0x07803b87, 0x0a404407, 0x07803bc7, 0x09807047,
+	0x07c03bc7, 0x06b7000a, 0x06c0444a, 0x054091d0, 0x0200a1ca,
+	0x06804009, 0x06a0c00b, 0x0c05aac0, 0x00000000, 0x0c7ddac0,
+	0x00000000, 0x0680c051, 0x07000449, 0x04001451, 0x091a11c9,
+	0x07c02347, 0x0aa0c007, 0x06800007, 0x0687ffc7, 0x07c02a07,
+	0x091c11c9, 0x07c021c7, 0x06800808, 0x07000449, 0x04001451,
+	0x090051c9, 0x07c03ac7, 0x09505207, 0x090a51c9, 0x07c03b07,
+	0x09605207, 0x07802947, 0x096a2207, 0x060c2108, 0x091411c9,
+	0x07c028c7, 0x091621c9, 0x07c02907, 0x07000449, 0x04001451,
+	0x090081c9, 0x0c05d100, 0x00000000, 0x07c02247, 0x091081c9,
+	0x0c05d000, 0x00000000, 0x07000449, 0x04001451, 0x090081c9,
+	0x0c05cec0, 0x00000000, 0x06801008, 0x09505207, 0x060c2108,
+	0x06801408, 0x09505207, 0x060c2108, 0x091011c9, 0x07c02287,
+	0x091211c9, 0x064e0e08, 0x09401207, 0x060e0e08, 0x091411c9,
+	0x07c02207, 0x0580b1c9, 0x0be18047, 0x06800007, 0x07802308,
+	0x09c08008, 0x0cc00000, 0x07c02308, 0x07000449, 0x04001451,
+	0x090011c9, 0x0680014d, 0x05401387, 0x0200d38d, 0x07c01d4d,
+	0x07802308, 0x09401207, 0x07c02308, 0x09021349, 0x0aa2800d,
+	0x0680000e, 0x06801c09, 0x06c00049, 0x060e0209, 0x0c0013c0,
+	0x06800009, 0x06800009, 0x06c00049, 0x060e0209, 0x064e0007,
+	0x095c91cd, 0x060e0007, 0x064e0307, 0x094081ce, 0x060e0307,
+	0x07000447, 0x04001451, 0x0c05c1c0, 0x00000000, 0x06801408,
+	0x09505207, 0x0cc00000, 0x060c2108, 0x0ba0c189, 0x0680020c,
+	0x0680080c, 0x07801d47, 0x0b8041c9, 0x04001249, 0x0cc00000,
+	0x00000000, 0x0540134d, 0x0540138e, 0x0fc01200, 0x07400448,
+	0x04001451, 0x09401348, 0x0aac8008, 0x0680020a, 0x0680020b,
+	0x0ba0c189, 0x068003cc, 0x06800fcc, 0x0aa4400b, 0x00000000,
+	0x0c05b8c0, 0x080c2301, 0x07400447, 0x04001451, 0x0c05b9c0,
+	0x00000000, 0x02007287, 0x048ff2c7, 0x0a61800b, 0x0aa0cfcc,
+	0x0b614189, 0x0a6103cc, 0x0c7ff780, 0x0980e00e, 0x0400028b,
+	0x054083cf, 0x0be0c04c, 0x094083ca, 0x06c0000f, 0x0aeac00c,
+	0x0440130c, 0x07801d47, 0x0b8031c9, 0x0cc00000, 0x00000000,
+	0x0c7ff640, 0x04001249, 0x0ba0c189, 0x0680020c, 0x0680080c,
+	0x064e020a, 0x0200a30a, 0x06c0004a, 0x060e020a, 0x0ba101c9,
+	0x04001249, 0x0cc00000, 0x00000000, 0x0540134d, 0x0540138e,
+	0x07801d48, 0x0ac04209, 0x06800008, 0x07000448, 0x04001451,
+	0x09401348, 0x0aab4008, 0x0680020a, 0x0680020b, 0x0ba0c189,
+	0x068003cc, 0x06800fcc, 0x0aa3400b, 0x07000447, 0x0c05ad40,
+	0x04001451, 0x02007287, 0x048ff2c7, 0x0a61800b, 0x0aa0cfcc,
+	0x0b614189, 0x0a6103cc, 0x0c7ff740, 0x0980e00e, 0x0400028b,
+	0x054083cf, 0x0be1004c, 0x094083ca, 0x06c0000f, 0x060e020f,
+	0x0aeb800c, 0x0440130c, 0x0ba0c1c9, 0x0cc00000, 0x00000000,
+	0x0c7ff6c0, 0x04001249, 0x0b210408, 0x00000000, 0x0fc10240,
+	0x04410208, 0x0cc00000, 0x0f800208, 0x0c05a400, 0x080c2301,
+	0x04001347, 0x0fc081c0, 0x0c05a300, 0x080c2301, 0x0c05a280,
+	0x080c2301, 0x0d07ff0d, 0x0fc011c0, 0x0fc051c0, 0x0cc00000,
+	0x0fc0f1c0, 0x07803c47, 0x07803c88, 0x0780174b, 0x07800a4d,
+	0x07800a8e, 0x07802c49, 0x07803a4a, 0x0780390c, 0x07803e8f,
+	0x07803ed0, 0x07803e11, 0x0a409247, 0x0a408288, 0x0a40730b,
+	0x0a4063cd, 0x0a40540e, 0x00000000, 0x07800a07, 0x0a402447,
+	0x0c7825c0, 0x06800007, 0x07c07087, 0x07803bc7, 0x09807087,
+	0x07c03bc7, 0x069fffc7, 0x07c03c49, 0x07c03c8a, 0x07c0174c,
+	0x07c00a4f, 0x07c00a90, 0x07c00a11, 0x0a83f207, 0x0688000a,
+	0x0c057200, 0x06c0000a, 0x0694000a, 0x06c0444a, 0x06804009,
+	0x0c056a40, 0x06b0400b, 0x0680044a, 0x06031e0a, 0x0649ce09,
+	0x0aa10009, 0x00000000, 0x0809ce00, 0x08007401, 0x06431e0a,
+	0x0bee804a, 0x00000000, 0x07803a47, 0x0a634047, 0x07807187,
+	0x06804089, 0x054031c7, 0x020091c9, 0x07000247, 0x091011c7,
+	0x020091c9, 0x0740024a, 0x04001249, 0x06801fca, 0x0740024a,
+	0x07c0178a, 0x07807047, 0x07c07187, 0x068003ca, 0x06031e0a,
+	0x0649ce09, 0x0aa10009, 0x00000000, 0x0809ce00, 0x08007401,
+	0x06431e09, 0x0bee8049, 0x00000000, 0x0649ce09, 0x0a6dc009,
+	0x00000000, 0x0c062240, 0x00000000, 0x0649c007, 0x0bef7fc7,
+	0x07803a47, 0x0a60c047, 0x0c780000, 0x00800000, 0x068000c7,
+	0x0609c007, 0x08007401, 0x0c061f80, 0x0680001b, 0x0649c007,
+	0x0bef7fc7, 0x07802c47, 0x07803a48, 0x095101c8, 0x07803908,
+	0x097071c8, 0x07802308, 0x09021208, 0x097e11c8, 0x0609c107,
+	0x07803d07, 0x07802108, 0x095e11c8, 0x07800688, 0x094c11c8,
+	0x07803cc8, 0x09102208, 0x095a21c8, 0x07803d48, 0x096101c8,
+	0x0609c207, 0x07803d87, 0x07803dc8, 0x096101c8, 0x0609c307,
+	0x07803e07, 0x07803e48, 0x096101c8, 0x0609c407, 0x07803e87,
+	0x07803ec8, 0x096101c8, 0x0609c507, 0x07801ac7, 0x07801a88,
+	0x096101c8, 0x0609c607, 0x07800d07, 0x0609ca07, 0x078009c7,
+	0x07800988, 0x09610207, 0x0609d108, 0x06800047, 0x0609c007,
+	0x08007401, 0x06800007, 0x06800008, 0x06804009, 0x04001249,
+	0x07400248, 0x040011c7, 0x0baf8607, 0x04008249, 0x0680001b,
+	0x0649c008, 0x0befbfc8, 0x091081c8, 0x07c03187, 0x092081c8,
+	0x07c07047, 0x093081c8, 0x07803cc8, 0x09408207, 0x07c03cc8,
+	0x06800007, 0x07c071c7, 0x07c07207, 0x0649c107, 0x07c078c7,
+	0x058101c7, 0x07c07907, 0x0649c407, 0x07c07947, 0x058101c7,
+	0x07c07987, 0x07803cc8, 0x09008208, 0x07802307, 0x090211c7,
+	0x054011c7, 0x034081c8, 0x07803907, 0x07803189, 0x0b004247,
+	0x00000000, 0x040001c9, 0x07c03907, 0x0b803207, 0x044011c8,
+	0x07c03907, 0x0cc00000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
@@ -222,4 +205,3 @@ static const u32 MicroCode[] __initconst = {
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000
 };
-
diff --git a/drivers/amlogic/amports/arch/ucode/h264/h264list_linux.h b/drivers/amlogic/amports/arch/ucode/h264/h264list_linux.h
index d46b5ec..80d76d3 100644
--- a/drivers/amlogic/amports/arch/ucode/h264/h264list_linux.h
+++ b/drivers/amlogic/amports/arch/ucode/h264/h264list_linux.h
@@ -1,20 +1,3 @@
-/*
- * drivers/amlogic/amports/arch/m8_m8m2/h264/h264list_linux.h
- *
- * Copyright (C) 2015 Amlogic, Inc. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
- * more details.
- *
-*/
-
 static const u32 MicroCode[] __initconst = {
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
@@ -222,4 +205,3 @@ static const u32 MicroCode[] __initconst = {
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000
 };
-
diff --git a/drivers/amlogic/amports/arch/ucode/h264/h264mmc_linux.h b/drivers/amlogic/amports/arch/ucode/h264/h264mmc_linux.h
index 60d5731..f99eeb4 100644
--- a/drivers/amlogic/amports/arch/ucode/h264/h264mmc_linux.h
+++ b/drivers/amlogic/amports/arch/ucode/h264/h264mmc_linux.h
@@ -1,26 +1,9 @@
-/*
- * drivers/amlogic/amports/arch/m8_m8m2/h264/h264mmc_linux.h
- *
- * Copyright (C) 2015 Amlogic, Inc. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
- * more details.
- *
-*/
-
 static const u32 MicroCode[] __initconst = {
 	0x06bfff40, 0x06032400, 0x00400000, 0x0c780000, 0x00000000,
-	0x09027207, 0x0a6140c8, 0x00000000, 0x0c00d900, 0x00000000,
-	0x0c780540, 0x0a614148, 0x00000000, 0x0c003900, 0x00000000,
-	0x0c780400, 0x0a614188, 0x00000000, 0x0c006cc0, 0x00000000,
-	0x0c7802c0, 0x0a6141c8, 0x00000000, 0x0c007a40, 0x00000000,
+	0x09027207, 0x0a6140c8, 0x00000000, 0x0c00d840, 0x00000000,
+	0x0c780540, 0x0a614148, 0x00000000, 0x0c0038c0, 0x00000000,
+	0x0c780400, 0x0a614188, 0x00000000, 0x0c006c80, 0x00000000,
+	0x0c7802c0, 0x0a6141c8, 0x00000000, 0x0c0079c0, 0x00000000,
 	0x0c780180, 0x0a628208, 0x00000000, 0x0c000c40, 0x00000000,
 	0x00000000, 0x08031e00, 0x0cc00000, 0x00400000, 0x0c7ff8c0,
 	0x06431e07, 0x0a62c288, 0x06431f20, 0x06433f21, 0x0e000860,
@@ -35,191 +18,190 @@ static const u32 MicroCode[] __initconst = {
 	0x0609c900, 0x078031d0, 0x0680400f, 0x0780718e, 0x0540338e,
 	0x0200e38f, 0x04001c4e, 0x07000c4d, 0x078072c0, 0x090a1040,
 	0x090c1c00, 0x02c0cc01, 0x0780730b, 0x0aa1000b, 0x0aa7404b,
-	0x0c780b80, 0x00000000, 0x0980d00d, 0x0c07f340, 0x0944134c,
+	0x0c780b40, 0x00000000, 0x0980d00d, 0x0c07f340, 0x0944134c,
 	0x0a22008d, 0x09481350, 0x04004c4e, 0x07000c46, 0x04005c4e,
-	0x07000c40, 0x0c780d40, 0x09610180, 0x0c07f2c0, 0x0980d28d,
+	0x07000c40, 0x0c780d00, 0x09610180, 0x0c07f2c0, 0x0980d28d,
 	0x07000380, 0x09c00300, 0x07400380, 0x07807200, 0x02000300,
 	0x07c07200, 0x0649cf00, 0x0be11000, 0x06800040, 0x078071c0,
-	0x04001000, 0x0c780980, 0x07c071c0, 0x0980d04d, 0x0c07eec0,
+	0x04001000, 0x0c780940, 0x07c071c0, 0x0980d04d, 0x0c07eec0,
 	0x0946134c, 0x0a22004d, 0x094a1350, 0x04002c4e, 0x07000c45,
-	0x04003c4e, 0x07000c40, 0x0c7806c0, 0x09610140, 0x0c07ea40,
-	0x0980d28d, 0x07000380, 0x09800300, 0x07400380, 0x0c7ff980,
-	0x00000000, 0x0980d00d, 0x0980d04d, 0x0944134c, 0x0946134c,
-	0x0c07e780, 0x09481350, 0x0c07e900, 0x094a1350, 0x0980d28d,
-	0x07807200, 0x02000300, 0x07c07200, 0x0649cf00, 0x0be11000,
-	0x06800040, 0x078071c0, 0x04001000, 0x07c071c0, 0x04006c4e,
-	0x07807340, 0x07400c40, 0x04007c4e, 0x07400c51, 0x094c234b,
-	0x05801010, 0x05409000, 0x02c0d00d, 0x07801e40, 0x07000381,
-	0x09501040, 0x0400100e, 0x07000000, 0x0be100c0, 0x00000000,
-	0x07802080, 0x09523040, 0x07400381, 0x07802fc0, 0x09584340,
-	0x0900200d, 0x0a6100c0, 0x0be0c30d, 0x06800000, 0x09402340,
-	0x09c0d20d, 0x04001c4e, 0x0ac03185, 0x0c780140, 0x07400c4d,
-	0x0980d20d, 0x0c780080, 0x07400c4d, 0x0649cf00, 0x0a2440c0,
-	0x0900200d, 0x0680000b, 0x0940634b, 0x07400c4d, 0x0c002080,
-	0x0780718d, 0x040012cb, 0x0aa1c00b, 0x06804080, 0x0609c000,
-	0x0609ce00, 0x0649cf00, 0x0be08080, 0x0c780000, 0x06800040,
-	0x07c01d80, 0x0cc00000, 0x00000000, 0x0680400f, 0x0780704e,
-	0x078020c0, 0x06800041, 0x0340d001, 0x0780734c, 0x06803fcb,
-	0x06800008, 0x05403c48, 0x02031c4f, 0x04001c71, 0x07000c70,
-	0x0a230330, 0x0be2cc30, 0x04005c71, 0x07000c41, 0x0b803301,
-	0x00000000, 0x02401341, 0x0aa0ffcb, 0x0b80404a, 0x00000000,
-	0x04000281, 0x040002c8, 0x04001208, 0x0b8ef388, 0x0cc00000,
-	0x00000000, 0x0780720d, 0x0780390c, 0x0b82230d, 0x0c07f840,
-	0x00000000, 0x0400024a, 0x0aa7bfcb, 0x0680400f, 0x05403c4b,
-	0x02031c4f, 0x04001c71, 0x07000c70, 0x06800000, 0x09404c00,
-	0x07400c70, 0x07807200, 0x04401000, 0x07c07200, 0x04401071,
-	0x07000040, 0x09005000, 0x06800041, 0x03401001, 0x07807080,
-	0x03000040, 0x07c07080, 0x06810000, 0x0bc09030, 0x078071c0,
-	0x04401000, 0x07c071c0, 0x0649cf00, 0x0be11000, 0x0be0c080,
-	0x0c07f080, 0x0a8e3289, 0x0cc00000, 0x00000000, 0x0680400f,
-	0x0780704e, 0x06803fcd, 0x0680000c, 0x06800008, 0x05403c48,
-	0x02031c4f, 0x04001c71, 0x07000c70, 0x06810000, 0x0a00e030,
-	0x04001c71, 0x09101030, 0x02031031, 0x02031031, 0x07000c41,
-	0x04001c71, 0x07000c40, 0x09610040, 0x0aa0ffcd, 0x0b80404c,
-	0x00000000, 0x04000301, 0x04000348, 0x04001208, 0x0b8ec388,
-	0x0cc00000, 0x00000000, 0x0649c701, 0x0aa24001, 0x04401041,
-	0x0809c700, 0x05403041, 0x020013c1, 0x04001041, 0x07000070,
-	0x09c302f0, 0x07400070, 0x0649c801, 0x0aa24001, 0x04401041,
-	0x0809c800, 0x05403041, 0x020013c1, 0x04001041, 0x07000070,
-	0x09c302f0, 0x07400070, 0x0cc00000, 0x00000000, 0x0680400f,
-	0x05403c4d, 0x02031c4f, 0x04001c71, 0x07000c40, 0x06800081,
-	0x09542001, 0x07400c40, 0x04401c31, 0x07000c04, 0x0649cf30,
-	0x0a20c830, 0x05808044, 0x0be20041, 0x07801c01, 0x0aa10001,
-	0x0a216004, 0x06800001, 0x07c01c01, 0x05809040, 0x0a218041,
-	0x06800001, 0x09523001, 0x07400c40, 0x0c781700, 0x044012cb,
-	0x0c07f400, 0x00000000, 0x0649c001, 0x0bef7fc1, 0x09101044,
-	0x0a60c00b, 0x05409041, 0x0809d100, 0x09123c04, 0x0540210b,
-	0x03430130, 0x0649d104, 0x02c04c04, 0x0609d104, 0x0940504d,
-	0x09184c00, 0x0aa583f0, 0x068001c4, 0x0aa50030, 0x06800004,
-	0x0b648170, 0x04404130, 0x0649cf04, 0x0be24084, 0x0b6380f0,
-	0x04002130, 0x0aa30070, 0x06800144, 0x0b6280b0, 0x06800184,
-	0x0c780200, 0x068001c4, 0x04401131, 0x07000104, 0x0580c104,
-	0x0a20c044, 0x06800144, 0x06800184, 0x094a3044, 0x07802130,
-	0x0aa0c030, 0x00000000, 0x09801201, 0x090c2c00, 0x0a60c0b0,
-	0x00000000, 0x09801201, 0x04401c71, 0x07000c70, 0x090a2c30,
-	0x09542070, 0x078017f0, 0x09583070, 0x06803230, 0x02030370,
-	0x07000c30, 0x09610070, 0x06800030, 0x02030370, 0x07000c04,
-	0x0aa1c00b, 0x0aa2404b, 0x0aa3408b, 0x0aa3c0cb, 0x0aa4c10b,
-	0x0aa5414b, 0x00000000, 0x0609ca04, 0x0c780580, 0x0609c101,
-	0x0649ca30, 0x09610c04, 0x0609ca30, 0x0c780440, 0x0609c201,
-	0x0609cb04, 0x0c780380, 0x0609c301, 0x0649cb30, 0x09610c04,
-	0x0609cb30, 0x0c780240, 0x0609c401, 0x0609cc04, 0x0c780180,
-	0x0609c501, 0x0649cc30, 0x09610c04, 0x0609cc30, 0x0609c601,
-	0x0649cf01, 0x0be09001, 0x0be100c0, 0x078071c0, 0x04401000,
-	0x07c071c0, 0x0cc00000, 0x00000000, 0x0680000b, 0x07803d0d,
-	0x0a21880d, 0x0780318c, 0x07801b8d, 0x0b00334c, 0x00000000,
-	0x07801b8c, 0x078071cd, 0x0649cf00, 0x0be0d000, 0x0b01e30d,
-	0x0c7800c0, 0x0680004c, 0x0b81430d, 0x00000000, 0x0c07d080,
-	0x00000000, 0x0a61bfcd, 0x00000000, 0x0c079980, 0x00000000,
-	0x0c780300, 0x00000000, 0x07800b00, 0x0400004c, 0x09401040,
-	0x07c00b01, 0x05810041, 0x0c07d9c0, 0x07c00ac1, 0x040012cb,
-	0x0aa0818b, 0x0c7ff800, 0x0aa1400b, 0x06800080, 0x0950800b,
-	0x0609c000, 0x0609ce00, 0x0cc00000, 0x00000000, 0x07800b0c,
-	0x0bee004c, 0x07802fcc, 0x0aa0c00c, 0x0780210c, 0x0a6d004c,
-	0x078071cc, 0x0bac808c, 0x0c07c840, 0x00000000, 0x0aabffcd,
-	0x07800b00, 0x07800af0, 0x09610030, 0x04002000, 0x0b0e000c,
-	0x0c7ffa40, 0x00000000, 0x0680000b, 0x078071cd, 0x0aa4800d,
-	0x00000000, 0x0c07c4c0, 0x00000000, 0x0a61bfcd, 0x00000000,
-	0x0c078dc0, 0x00000000, 0x0c780280, 0x00000000, 0x07807180,
-	0x0a807340, 0x00000000, 0x0c07ce80, 0x00000000, 0x040012cb,
-	0x0aa0818b, 0x0c7ffb80, 0x0aa1c00b, 0x06800080, 0x0950800b,
-	0x0609c000, 0x0609ce00, 0x0c7ffa00, 0x0680000b, 0x0cc00000,
-	0x00000000, 0x0680400f, 0x0780704e, 0x06800008, 0x06800007,
-	0x07807186, 0x078072c0, 0x0a225800, 0x07c07087, 0x05403c46,
-	0x02031c4f, 0x07000c70, 0x09005c30, 0x06800041, 0x03401c01,
-	0x07c07081, 0x05403c48, 0x02031c4f, 0x04001c71, 0x07000c70,
-	0x0a23c0f0, 0x0a406188, 0x06800000, 0x09444c00, 0x07400c70,
-	0x0c780280, 0x06800047, 0x06800000, 0x09406c00, 0x07400c70,
-	0x06810000, 0x0bc04030, 0x078071c0, 0x04401000, 0x07c071c0,
-	0x04001208, 0x0b8ec388, 0x0cc00000, 0x07c07207, 0x0680400f,
-	0x0780704e, 0x06800008, 0x06800007, 0x07807186, 0x05403c48,
-	0x02031c4f, 0x04001c71, 0x07000c70, 0x06810000, 0x0a007030,
-	0x0a805188, 0x00000000, 0x09c302b0, 0x0c7800c0, 0x07400c70,
-	0x06800047, 0x04001208, 0x0b8f3388, 0x0cc00000, 0x07c071c7,
-	0x0400138e, 0x0780734d, 0x0240e38d, 0x07807300, 0x0b610080,
-	0x00000000, 0x0200e34e, 0x0400138e, 0x06800008, 0x07807109,
-	0x0680a00a, 0x0a403209, 0x0cc00000, 0x00000000, 0x05402108,
-	0x0200410a, 0x04002c44, 0x07000c40, 0x04001c71, 0x07000c41,
-	0x09610001, 0x0a42a380, 0x07000105, 0x06804031, 0x05403005,
-	0x02006031, 0x04001186, 0x07000187, 0x04001c44, 0x07000c70,
-	0x09002030, 0x0aa14040, 0x0aa18080, 0x06800000, 0x0c780180,
-	0x094421c0, 0x0c780100, 0x09c07087, 0x0c780080, 0x09c070c7,
-	0x0be4c307, 0x06800000, 0x094021c0, 0x07807200, 0x04401000,
-	0x07c07200, 0x04401046, 0x07000040, 0x09005000, 0x06800041,
-	0x03401001, 0x07807080, 0x03000040, 0x07c07080, 0x06810000,
-	0x0bc04007, 0x078071c0, 0x04401000, 0x07c071c0, 0x0649cf00,
-	0x0be14080, 0x07400187, 0x0be0d000, 0x04001208, 0x0b8ce248,
-	0x0cc00000, 0x00000000, 0x07807108, 0x07807149, 0x0680a00a,
-	0x0a403209, 0x0cc00000, 0x00000000, 0x05402108, 0x0200410a,
-	0x04002c44, 0x07000c40, 0x04001c71, 0x07000c41, 0x09610001,
-	0x0a42a380, 0x07000105, 0x06804031, 0x05403005, 0x02006031,
-	0x04001186, 0x07000187, 0x04001c44, 0x07000c70, 0x09002030,
-	0x0aa14040, 0x0aa1c080, 0x06800000, 0x0c780200, 0x094441c0,
-	0x09c07087, 0x0c780140, 0x09c07107, 0x09c070c7, 0x0c780080,
-	0x09c07147, 0x0be4c307, 0x06800000, 0x094021c0, 0x07807200,
-	0x04401000, 0x07c07200, 0x04401046, 0x07000040, 0x09005000,
-	0x06800041, 0x03401001, 0x07807080, 0x03000040, 0x07c07080,
-	0x06810000, 0x0bc04007, 0x078071c0, 0x04401000, 0x07c071c0,
-	0x0cc00000, 0x07400187, 0x04001208, 0x0b8ce248, 0x0cc00000,
-	0x00000000, 0x0680000d, 0x07807300, 0x0b60c080, 0x00000000,
-	0x0680004d, 0x07807108, 0x07807149, 0x0680a00a, 0x0a403209,
-	0x0cc00000, 0x00000000, 0x05402108, 0x0200410a, 0x04002c44,
-	0x07000c40, 0x04001c71, 0x07000c41, 0x09610001, 0x03800340,
-	0x0a41c380, 0x07000105, 0x06804031, 0x05403005, 0x02006031,
-	0x04001186, 0x07000187, 0x0a24c307, 0x06800000, 0x094061c0,
-	0x07807200, 0x04401000, 0x07c07200, 0x04401046, 0x07000040,
+	0x04003c4e, 0x07000c40, 0x0c780680, 0x09610140, 0x0c07ea40,
+	0x0980d28d, 0x07000380, 0x09800300, 0x0c7ff9c0, 0x07400380,
+	0x0980d00d, 0x0980d04d, 0x0944134c, 0x0946134c, 0x0c07e7c0,
+	0x09481350, 0x0c07e940, 0x094a1350, 0x0980d28d, 0x07807200,
+	0x02000300, 0x07c07200, 0x0649cf00, 0x0be11000, 0x06800040,
+	0x078071c0, 0x04001000, 0x07c071c0, 0x04006c4e, 0x07807340,
+	0x07400c40, 0x04007c4e, 0x07400c51, 0x094c234b, 0x05801010,
+	0x05409000, 0x02c0d00d, 0x07801e40, 0x07000381, 0x09501040,
+	0x0400100e, 0x07000000, 0x0be100c0, 0x00000000, 0x07802080,
+	0x09523040, 0x07400381, 0x07802fc0, 0x09584340, 0x0900200d,
+	0x0a6100c0, 0x0be0c30d, 0x06800000, 0x09402340, 0x09c0d20d,
+	0x04001c4e, 0x0ac03185, 0x0c780140, 0x07400c4d, 0x0980d20d,
+	0x0c780080, 0x07400c4d, 0x0649cf00, 0x0a2440c0, 0x0900200d,
+	0x0680000b, 0x0940634b, 0x07400c4d, 0x0c002080, 0x0780718d,
+	0x040012cb, 0x0aa1c00b, 0x06804080, 0x0609c000, 0x0609ce00,
+	0x0649cf00, 0x0be08080, 0x0c780000, 0x06800040, 0x07c01d80,
+	0x0cc00000, 0x00000000, 0x0680400f, 0x0780704e, 0x078020c0,
+	0x06800041, 0x0340d001, 0x0780734c, 0x06803fcb, 0x06800008,
+	0x05403c48, 0x02031c4f, 0x04001c71, 0x07000c70, 0x0a230330,
+	0x0be2cc30, 0x04005c71, 0x07000c41, 0x0b803301, 0x00000000,
+	0x02401341, 0x0aa0ffcb, 0x0b80404a, 0x00000000, 0x04000281,
+	0x040002c8, 0x04001208, 0x0b8ef388, 0x0cc00000, 0x00000000,
+	0x0780720d, 0x0780390c, 0x0b82230d, 0x0c07f840, 0x00000000,
+	0x0400024a, 0x0aa7bfcb, 0x0680400f, 0x05403c4b, 0x02031c4f,
+	0x04001c71, 0x07000c70, 0x06800000, 0x09404c00, 0x07400c70,
+	0x07807200, 0x04401000, 0x07c07200, 0x04401071, 0x07000040,
 	0x09005000, 0x06800041, 0x03401001, 0x07807080, 0x03000040,
-	0x07c07080, 0x06810000, 0x0bc04007, 0x078071c0, 0x04401000,
-	0x07c071c0, 0x0cc00000, 0x07400187, 0x04001208, 0x0b8db248,
-	0x0cc00000, 0x00000000, 0x0400134d, 0x0780734c, 0x0240d34c,
-	0x07807300, 0x0b610080, 0x00000000, 0x0200d30d, 0x0400134d,
+	0x07c07080, 0x06810000, 0x0bc09030, 0x078071c0, 0x04401000,
+	0x07c071c0, 0x0649cf00, 0x0be11000, 0x0be0c080, 0x0c07f080,
+	0x0a8e3289, 0x0cc00000, 0x00000000, 0x0680400f, 0x0780704e,
+	0x06803fcd, 0x0680000c, 0x06800008, 0x05403c48, 0x02031c4f,
+	0x04001c71, 0x07000c70, 0x06810000, 0x0a00e030, 0x04001c71,
+	0x09101030, 0x02031031, 0x02031031, 0x07000c41, 0x04001c71,
+	0x07000c40, 0x09610040, 0x0aa0ffcd, 0x0b80404c, 0x00000000,
+	0x04000301, 0x04000348, 0x04001208, 0x0b8ec388, 0x0cc00000,
+	0x00000000, 0x0649c701, 0x0aa24001, 0x04401041, 0x0809c700,
+	0x05403041, 0x020013c1, 0x04001041, 0x07000070, 0x09c302f0,
+	0x07400070, 0x0649c801, 0x0aa24001, 0x04401041, 0x0809c800,
+	0x05403041, 0x020013c1, 0x04001041, 0x07000070, 0x09c302f0,
+	0x07400070, 0x0cc00000, 0x00000000, 0x0680400f, 0x05403c4d,
+	0x02031c4f, 0x04001c71, 0x07000c40, 0x06800081, 0x09542001,
+	0x07400c40, 0x04401c31, 0x07000c04, 0x0649cf30, 0x0a20c830,
+	0x05808044, 0x0be20041, 0x07801c01, 0x0aa10001, 0x0a216004,
+	0x06800001, 0x07c01c01, 0x05809040, 0x0a218041, 0x06800001,
+	0x09523001, 0x07400c40, 0x0c781700, 0x044012cb, 0x0c07f400,
+	0x00000000, 0x0649c001, 0x0bef7fc1, 0x09101044, 0x0a60c00b,
+	0x05409041, 0x0809d100, 0x09123c04, 0x0540210b, 0x03430130,
+	0x0649d104, 0x02c04c04, 0x0609d104, 0x0940504d, 0x09184c00,
+	0x0aa583f0, 0x068001c4, 0x0aa50030, 0x06800004, 0x0b648170,
+	0x04404130, 0x0649cf04, 0x0be24084, 0x0b6380f0, 0x04002130,
+	0x0aa30070, 0x06800144, 0x0b6280b0, 0x06800184, 0x0c780200,
+	0x068001c4, 0x04401131, 0x07000104, 0x0580c104, 0x0a20c044,
+	0x06800144, 0x06800184, 0x094a3044, 0x07802130, 0x0aa0c030,
+	0x00000000, 0x09801201, 0x090c2c00, 0x0a60c0b0, 0x00000000,
+	0x09801201, 0x04401c71, 0x07000c70, 0x090a2c30, 0x09542070,
+	0x078017f0, 0x09583070, 0x06803230, 0x02030370, 0x07000c30,
+	0x09610070, 0x06800030, 0x02030370, 0x07000c04, 0x0aa1c00b,
+	0x0aa2404b, 0x0aa3408b, 0x0aa3c0cb, 0x0aa4c10b, 0x0aa5414b,
+	0x00000000, 0x0609ca04, 0x0c780580, 0x0609c101, 0x0649ca30,
+	0x09610c04, 0x0609ca30, 0x0c780440, 0x0609c201, 0x0609cb04,
+	0x0c780380, 0x0609c301, 0x0649cb30, 0x09610c04, 0x0609cb30,
+	0x0c780240, 0x0609c401, 0x0609cc04, 0x0c780180, 0x0609c501,
+	0x0649cc30, 0x09610c04, 0x0609cc30, 0x0609c601, 0x0649cf01,
+	0x0be09001, 0x0be100c0, 0x078071c0, 0x04401000, 0x07c071c0,
+	0x0cc00000, 0x00000000, 0x0680000b, 0x07803d0d, 0x0a21880d,
+	0x0780318c, 0x07801b8d, 0x0b00334c, 0x00000000, 0x07801b8c,
+	0x078071cd, 0x0649cf00, 0x0be0d000, 0x0b01d30d, 0x0c7800c0,
+	0x0680004c, 0x0b81330d, 0x00000000, 0x0c07d080, 0x00000000,
+	0x0a617fcd, 0x0c079a00, 0x00000000, 0x0c780300, 0x00000000,
+	0x07800b00, 0x0400004c, 0x09401040, 0x07c00b01, 0x05810041,
+	0x0c07da00, 0x07c00ac1, 0x040012cb, 0x0aa0818b, 0x0c7ff840,
+	0x0aa1400b, 0x06800080, 0x0950800b, 0x0609c000, 0x0609ce00,
+	0x0cc00000, 0x00000000, 0x07800b0c, 0x0bee004c, 0x07802fcc,
+	0x0aa0c00c, 0x0780210c, 0x0a6d004c, 0x078071cc, 0x0bac808c,
+	0x0c07c880, 0x00000000, 0x0aabffcd, 0x07800b00, 0x07800af0,
+	0x09610030, 0x04002000, 0x0b0e000c, 0x0c7ffa40, 0x00000000,
+	0x0680000b, 0x078071cd, 0x0aa4400d, 0x0c07c540, 0x00000000,
+	0x0a61bfcd, 0x00000000, 0x0c078e80, 0x00000000, 0x0c780280,
+	0x00000000, 0x07807180, 0x0a807340, 0x00000000, 0x0c07cf00,
+	0x00000000, 0x040012cb, 0x0aa0818b, 0x0c7ffbc0, 0x0aa1c00b,
+	0x06800080, 0x0950800b, 0x0609c000, 0x0609ce00, 0x0c7ffa40,
+	0x0680000b, 0x0cc00000, 0x00000000, 0x0680400f, 0x0780704e,
+	0x06800008, 0x06800007, 0x07807186, 0x078072c0, 0x0a225800,
+	0x07c07087, 0x05403c46, 0x02031c4f, 0x07000c70, 0x09005c30,
+	0x06800041, 0x03401c01, 0x07c07081, 0x05403c48, 0x02031c4f,
+	0x04001c71, 0x07000c70, 0x0a23c0f0, 0x0a406188, 0x06800000,
+	0x09444c00, 0x07400c70, 0x0c780280, 0x06800047, 0x06800000,
+	0x09406c00, 0x07400c70, 0x06810000, 0x0bc04030, 0x078071c0,
+	0x04401000, 0x07c071c0, 0x04001208, 0x0b8ec388, 0x0cc00000,
+	0x07c07207, 0x0680400f, 0x0780704e, 0x06800008, 0x06800007,
+	0x07807186, 0x05403c48, 0x02031c4f, 0x04001c71, 0x07000c70,
+	0x06810000, 0x0a007030, 0x0a805188, 0x00000000, 0x09c302b0,
+	0x0c7800c0, 0x07400c70, 0x06800047, 0x04001208, 0x0b8f3388,
+	0x0cc00000, 0x07c071c7, 0x0400138e, 0x0780734d, 0x0240e38d,
+	0x07807300, 0x0b610080, 0x00000000, 0x0200e34e, 0x0400138e,
 	0x06800008, 0x07807109, 0x0680a00a, 0x0a403209, 0x0cc00000,
 	0x00000000, 0x05402108, 0x0200410a, 0x04002c44, 0x07000c40,
-	0x04001c71, 0x07000c41, 0x09610001, 0x0a417340, 0x07000105,
+	0x04001c71, 0x07000c41, 0x09610001, 0x0a42a380, 0x07000105,
 	0x06804031, 0x05403005, 0x02006031, 0x04001186, 0x07000187,
 	0x04001c44, 0x07000c70, 0x09002030, 0x0aa14040, 0x0aa18080,
-	0x068000c0, 0x0c780180, 0x094821c0, 0x0c780100, 0x09807107,
-	0x0c780080, 0x09807147, 0x04006c46, 0x07400c4e, 0x0cc00000,
-	0x07400187, 0x04001208, 0x0b8e1248, 0x0cc00000, 0x00000000,
-	0x0440138e, 0x0680000d, 0x07807300, 0x0b60c080, 0x00000000,
-	0x0680004d, 0x07807108, 0x07807149, 0x0680a00a, 0x0a403209,
-	0x0cc00000, 0x00000000, 0x05402108, 0x0200410a, 0x04002c44,
-	0x07000c40, 0x04001c71, 0x07000c41, 0x09610001, 0x03800340,
-	0x0b01b380, 0x07000105, 0x06804031, 0x05403005, 0x02006031,
-	0x04001186, 0x07000187, 0x0a250307, 0x06800000, 0x094061c0,
+	0x06800000, 0x0c780180, 0x094421c0, 0x0c780100, 0x09c07087,
+	0x0c780080, 0x09c070c7, 0x0be4c307, 0x06800000, 0x094021c0,
 	0x07807200, 0x04401000, 0x07c07200, 0x04401046, 0x07000040,
 	0x09005000, 0x06800041, 0x03401001, 0x07807080, 0x03000040,
 	0x07c07080, 0x06810000, 0x0bc04007, 0x078071c0, 0x04401000,
-	0x07c071c0, 0x07400187, 0x04001208, 0x0b8dc248, 0x0cc00000,
-	0x00000000, 0x06800010, 0x078020b1, 0x0a61c0b1, 0x07800bb1,
-	0x0aa14031, 0x0c07ab00, 0x07c00b90, 0x0c07a340, 0x00000000,
-	0x078072f1, 0x09005031, 0x0a638140, 0x06800011, 0x0c07a900,
-	0x00000000, 0x0780e100, 0x0be18080, 0x09001400, 0x0c07a080,
-	0x00000000, 0x0c781800, 0x00000000, 0x0c07b040, 0x00000000,
-	0x0c781700, 0x06800000, 0x090a2071, 0x0780e130, 0x0a858001,
-	0x0a857030, 0x0680e10f, 0x070003c0, 0x0aa2c040, 0x0aa3c080,
-	0x0aa4c0c0, 0x0aa68100, 0x00000000, 0x04605040, 0x0c500740,
-	0x00000000, 0x04606040, 0x0c5010c0, 0x0c781280, 0x04001c4f,
-	0x0c07b000, 0x07000c4e, 0x0c7ffc40, 0x040023cf, 0x04001c4f,
-	0x0c07bf80, 0x07000c4e, 0x0c7ffb00, 0x040023cf, 0x04002c4f,
-	0x0c07cd00, 0x07000c4e, 0x04001c4f, 0x0c07d900, 0x07000c4d,
-	0x0c7ff900, 0x040033cf, 0x04001c4f, 0x07000c4e, 0x0c07e380,
-	0x00000000, 0x0c7ff780, 0x040023cf, 0x0c079b80, 0x00000000,
-	0x0c0793c0, 0x00000000, 0x06800007, 0x07807331, 0x0b250071,
-	0x07807770, 0x07807780, 0x09610c00, 0x07807841, 0x07807880,
-	0x09610040, 0x02401c01, 0x07c07841, 0x05810001, 0x07c07880,
-	0x078077c1, 0x07807800, 0x09610040, 0x02401c01, 0x07c077c1,
-	0x05810001, 0x07c07800, 0x0c7801c0, 0x07c07441, 0x07c07447,
-	0x07c077c7, 0x07c07807, 0x07c07847, 0x07c07887, 0x07c07347,
-	0x07c07487, 0x07c07647, 0x07c07687, 0x07c076c7, 0x07c07707,
-	0x07c07747, 0x07c07787, 0x0c7fed40, 0x040013cf, 0x04001c4f,
-	0x07000c4e, 0x0c07bf00, 0x00000000, 0x06800050, 0x0400044e,
-	0x0c7feb40, 0x040023cf, 0x0680400f, 0x0780718e, 0x0540338e,
-	0x0200e38f, 0x04001c4e, 0x07000c40, 0x0a2140c0, 0x0c071980,
-	0x07c031d0, 0x0cc00000, 0x00000000, 0x078072f1, 0x09005031,
-	0x090a2071, 0x0aa10140, 0x0aa0c001, 0x0c074040, 0x00000000,
-	0x0649cf00, 0x0a219000, 0x0c071640, 0x07c031d0, 0x0c0773c0,
-	0x00000000, 0x0c780140, 0x0c077300, 0x00000000, 0x0c071480,
-	0x07c031d0, 0x0cc00000, 0x00000000, 0x00000000
+	0x07c071c0, 0x0649cf00, 0x0be14080, 0x07400187, 0x0be0d000,
+	0x04001208, 0x0b8ce248, 0x0cc00000, 0x00000000, 0x07807108,
+	0x07807149, 0x0680a00a, 0x0a403209, 0x0cc00000, 0x00000000,
+	0x05402108, 0x0200410a, 0x04002c44, 0x07000c40, 0x04001c71,
+	0x07000c41, 0x09610001, 0x0a42a380, 0x07000105, 0x06804031,
+	0x05403005, 0x02006031, 0x04001186, 0x07000187, 0x04001c44,
+	0x07000c70, 0x09002030, 0x0aa14040, 0x0aa1c080, 0x06800000,
+	0x0c780200, 0x094441c0, 0x09c07087, 0x0c780140, 0x09c07107,
+	0x09c070c7, 0x0c780080, 0x09c07147, 0x0be4c307, 0x06800000,
+	0x094021c0, 0x07807200, 0x04401000, 0x07c07200, 0x04401046,
+	0x07000040, 0x09005000, 0x06800041, 0x03401001, 0x07807080,
+	0x03000040, 0x07c07080, 0x06810000, 0x0bc04007, 0x078071c0,
+	0x04401000, 0x07c071c0, 0x0cc00000, 0x07400187, 0x04001208,
+	0x0b8ce248, 0x0cc00000, 0x00000000, 0x0680000d, 0x07807300,
+	0x0b60c080, 0x00000000, 0x0680004d, 0x07807108, 0x07807149,
+	0x0680a00a, 0x0a403209, 0x0cc00000, 0x00000000, 0x05402108,
+	0x0200410a, 0x04002c44, 0x07000c40, 0x04001c71, 0x07000c41,
+	0x09610001, 0x03800340, 0x0a41c380, 0x07000105, 0x06804031,
+	0x05403005, 0x02006031, 0x04001186, 0x07000187, 0x0a24c307,
+	0x06800000, 0x094061c0, 0x07807200, 0x04401000, 0x07c07200,
+	0x04401046, 0x07000040, 0x09005000, 0x06800041, 0x03401001,
+	0x07807080, 0x03000040, 0x07c07080, 0x06810000, 0x0bc04007,
+	0x078071c0, 0x04401000, 0x07c071c0, 0x0cc00000, 0x07400187,
+	0x04001208, 0x0b8db248, 0x0cc00000, 0x00000000, 0x0400134d,
+	0x0780734c, 0x0240d34c, 0x07807300, 0x0b610080, 0x00000000,
+	0x0200d30d, 0x0400134d, 0x06800008, 0x07807109, 0x0680a00a,
+	0x0a403209, 0x0cc00000, 0x00000000, 0x05402108, 0x0200410a,
+	0x04002c44, 0x07000c40, 0x04001c71, 0x07000c41, 0x09610001,
+	0x0a417340, 0x07000105, 0x06804031, 0x05403005, 0x02006031,
+	0x04001186, 0x07000187, 0x04001c44, 0x07000c70, 0x09002030,
+	0x0aa14040, 0x0aa18080, 0x068000c0, 0x0c780180, 0x094821c0,
+	0x0c780100, 0x09807107, 0x0c780080, 0x09807147, 0x04006c46,
+	0x07400c4e, 0x0cc00000, 0x07400187, 0x04001208, 0x0b8e1248,
+	0x0cc00000, 0x00000000, 0x0440138e, 0x0680000d, 0x07807300,
+	0x0b60c080, 0x00000000, 0x0680004d, 0x07807108, 0x07807149,
+	0x0680a00a, 0x0a403209, 0x0cc00000, 0x00000000, 0x05402108,
+	0x0200410a, 0x04002c44, 0x07000c40, 0x04001c71, 0x07000c41,
+	0x09610001, 0x03800340, 0x0b01b380, 0x07000105, 0x06804031,
+	0x05403005, 0x02006031, 0x04001186, 0x07000187, 0x0a250307,
+	0x06800000, 0x094061c0, 0x07807200, 0x04401000, 0x07c07200,
+	0x04401046, 0x07000040, 0x09005000, 0x06800041, 0x03401001,
+	0x07807080, 0x03000040, 0x07c07080, 0x06810000, 0x0bc04007,
+	0x078071c0, 0x04401000, 0x07c071c0, 0x07400187, 0x04001208,
+	0x0b8dc248, 0x0cc00000, 0x00000000, 0x06800010, 0x078020b1,
+	0x0a6240b1, 0x0649cf31, 0x0a21d031, 0x07800bb1, 0x0aa14031,
+	0x0c07aa80, 0x07c00b90, 0x0c07a300, 0x00000000, 0x0649cf31,
+	0x0be100b1, 0x078072f1, 0x09005031, 0x0a638140, 0x06800011,
+	0x0c07a800, 0x00000000, 0x0780e100, 0x0be18080, 0x09001400,
+	0x0c079fc0, 0x00000000, 0x0c781800, 0x00000000, 0x0c07af40,
+	0x00000000, 0x0c781700, 0x06800000, 0x090a2071, 0x0780e130,
+	0x0a858001, 0x0a857030, 0x0680e10f, 0x070003c0, 0x0aa2c040,
+	0x0aa3c080, 0x0aa4c0c0, 0x0aa68100, 0x00000000, 0x04605040,
+	0x0c500740, 0x00000000, 0x04606040, 0x0c5010c0, 0x0c781280,
+	0x04001c4f, 0x0c07af00, 0x07000c4e, 0x0c7ffc40, 0x040023cf,
+	0x04001c4f, 0x0c07be80, 0x07000c4e, 0x0c7ffb00, 0x040023cf,
+	0x04002c4f, 0x0c07cc00, 0x07000c4e, 0x04001c4f, 0x0c07d800,
+	0x07000c4d, 0x0c7ff900, 0x040033cf, 0x04001c4f, 0x07000c4e,
+	0x0c07e280, 0x00000000, 0x0c7ff780, 0x040023cf, 0x0c079a80,
+	0x00000000, 0x0c079300, 0x00000000, 0x06800007, 0x07807331,
+	0x0b250071, 0x07807770, 0x07807780, 0x09610c00, 0x07807841,
+	0x07807880, 0x09610040, 0x02401c01, 0x07c07841, 0x05810001,
+	0x07c07880, 0x078077c1, 0x07807800, 0x09610040, 0x02401c01,
+	0x07c077c1, 0x05810001, 0x07c07800, 0x0c7801c0, 0x07c07441,
+	0x07c07447, 0x07c077c7, 0x07c07807, 0x07c07847, 0x07c07887,
+	0x07c07347, 0x07c07487, 0x07c07647, 0x07c07687, 0x07c076c7,
+	0x07c07707, 0x07c07747, 0x07c07787, 0x0c7fed40, 0x040013cf,
+	0x04001c4f, 0x07000c4e, 0x0c07be00, 0x00000000, 0x06800050,
+	0x0400044e, 0x0c7feb40, 0x040023cf, 0x0680400f, 0x0780718e,
+	0x0540338e, 0x0200e38f, 0x04001c4e, 0x07000c40, 0x0a2140c0,
+	0x0c071940, 0x07c031d0, 0x0cc00000, 0x00000000, 0x078072f1,
+	0x09005031, 0x090a2071, 0x0aa10140, 0x0aa0c001, 0x0c073fc0,
+	0x00000000, 0x0649cf00, 0x0a219000, 0x0c071600, 0x07c031d0,
+	0x0c077340, 0x00000000, 0x0c780140, 0x0c077280, 0x00000000,
+	0x0c071440, 0x07c031d0, 0x0cc00000, 0x00000000
 };
-
diff --git a/drivers/amlogic/amports/arch/ucode/h264/h264slice_linux.h b/drivers/amlogic/amports/arch/ucode/h264/h264slice_linux.h
index 86831ce..74914e3 100644
--- a/drivers/amlogic/amports/arch/ucode/h264/h264slice_linux.h
+++ b/drivers/amlogic/amports/arch/ucode/h264/h264slice_linux.h
@@ -1,24 +1,7 @@
-/*
- * drivers/amlogic/amports/arch/m8_m8m2/h264/h264slice_linux.h
- *
- * Copyright (C) 2015 Amlogic, Inc. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
- * more details.
- *
-*/
-
 static const u32 MicroCode[] __initconst = {
 	0x07802007, 0x07802048, 0x094a21c8, 0x07c072c7, 0x07802407,
 	0x044011c7, 0x07802948, 0x02808207, 0x09021208, 0x02007207,
-	0x07c07307, 0x07802dc7, 0x0aa08047, 0x0c782d80, 0x07802007,
+	0x07c07307, 0x07802dc7, 0x0aa08047, 0x0c782e00, 0x07802007,
 	0x0a608147, 0x0c781a00, 0x07801c47, 0x0aa0c007, 0x0c781940,
 	0x00000000, 0x0649cf07, 0x0a2080c7, 0x0c781840, 0x07803940,
 	0x0a608000, 0x0c781780, 0x0780736a, 0x078074b1, 0x0a85bab1,
@@ -28,8 +11,8 @@ static const u32 MicroCode[] __initconst = {
 	0x06800000, 0x07c0e100, 0x07c07540, 0x07c07580, 0x07c075c0,
 	0x07c07600, 0x078074b1, 0x04001c71, 0x078020c0, 0x06800041,
 	0x0340f001, 0x044013cf, 0x028313f1, 0x0a834ab1, 0x07c07371,
-	0x07802140, 0x0a60c000, 0x0c780100, 0x07c074b1, 0x0c00a700,
-	0x00000000, 0x068000f3, 0x0c008800, 0x07c02bf3, 0x07807187,
+	0x07802140, 0x0a60c000, 0x0c780100, 0x07c074b1, 0x0c00a980,
+	0x00000000, 0x068000f3, 0x0c008a80, 0x07c02bf3, 0x07807187,
 	0x07807048, 0x0a403207, 0x0c7e0200, 0x00000000, 0x06800033,
 	0x07c02bf3, 0x068002c0, 0x06031e00, 0x00000000, 0x06431e00,
 	0x0befc040, 0x00000000, 0x0649cf00, 0x0a20d000, 0x06800340,
@@ -40,105 +23,107 @@ static const u32 MicroCode[] __initconst = {
 	0x06431e00, 0x0bee8040, 0x00000000, 0x0c7ff1c0, 0x00000000,
 	0x07c0736a, 0x07c072eb, 0x07c0732c, 0x07c0e12d, 0x07c0756e,
 	0x0581002e, 0x07c07580, 0x07c075ef, 0x0581002f, 0x07c07600,
-	0x0c009900, 0x00000000, 0x080c3000, 0x07807748, 0x07807789,
+	0x0c009b80, 0x00000000, 0x080c3000, 0x07807748, 0x07807789,
 	0x09610209, 0x060c3208, 0x078077c8, 0x07807809, 0x09610209,
 	0x060c3208, 0x07807848, 0x07807889, 0x09610209, 0x060c3208,
-	0x06800073, 0x0c0076c0, 0x07c02bf3, 0x07807187, 0x07807048,
+	0x06800073, 0x0c007940, 0x07c02bf3, 0x07807187, 0x07807048,
 	0x0a403207, 0x0c7df0c0, 0x00000000, 0x06800033, 0x07c02bf3,
-	0x0aa1000a, 0x00000000, 0x0c780880, 0x00000000, 0x0c07a500,
+	0x0aa1000a, 0x00000000, 0x0c780900, 0x00000000, 0x0c079cc0,
 	0x00000000, 0x07800c48, 0x0aa1c008, 0x07800bc8, 0x07800c09,
-	0x09610209, 0x06800009, 0x0c780100, 0x07c00c49, 0x0c0628c0,
-	0x00000000, 0x07800cc9, 0x0a620009, 0x06800049, 0x07c00cc9,
-	0x0809c009, 0x0609c108, 0x08007401, 0x0649c009, 0x0a6fc009,
-	0x07c03088, 0x05810208, 0x07c030c8, 0x06803208, 0x07803089,
-	0x020081c8, 0x07400209, 0x06800008, 0x078030c9, 0x020081c8,
-	0x07400209, 0x06800009, 0x07c03089, 0x07c030c9, 0x054181c7,
-	0x0609b307, 0x068c000a, 0x0c060c80, 0x06c0000a, 0x0649b307,
-	0x054081c7, 0x058081c7, 0x0609b207, 0x0609b007, 0x0609b107,
-	0x06800007, 0x07c01c47, 0x078072c7, 0x0be09807, 0x0c780840,
-	0x06bfffc9, 0x06803008, 0x07802307, 0x090211c7, 0x054011c7,
-	0x038081c8, 0x07807307, 0x0a60c087, 0x06800007, 0x06800047,
-	0x038081c8, 0x07803c07, 0x06031f07, 0x06033f08, 0x0c05d100,
-	0x08031e15, 0x078079c9, 0x07807a0a, 0x0961024a, 0x06431f07,
-	0x02009247, 0x078078c7, 0x07807908, 0x096101c8, 0x0b8071c9,
-	0x07807947, 0x07807988, 0x096101c8, 0x0b4031c9, 0x0c7800c0,
-	0x00000000, 0x06bfffc9, 0x064c3d08, 0x09161208, 0x0a6f8008,
-	0x00000000, 0x060c3809, 0x07802207, 0x0aa10007, 0x00000000,
-	0x0c061f40, 0x080c2301, 0x07803ac7, 0x07c073c7, 0x07803b07,
-	0x07c07407, 0x07802087, 0x0aa10187, 0x06800148, 0x0a83c207,
-	0x0c781700, 0x00000000, 0x0fc011c0, 0x06800808, 0x096e1207,
-	0x078073c7, 0x09505207, 0x0fc011c0, 0x0aa24007, 0x07807407,
-	0x0c061a40, 0x080c2301, 0x07c073c7, 0x09505207, 0x0c061940,
-	0x080c2301, 0x07c07407, 0x09605207, 0x07802947, 0x096a2207,
-	0x060c2108, 0x068000c7, 0x07c0c007, 0x0fc011c0, 0x0aa10007,
-	0x00000000, 0x0c069700, 0x0680c009, 0x068000c7, 0x07c0d087,
-	0x0fc011c0, 0x0aa10007, 0x00000000, 0x0c069540, 0x0680d089,
-	0x07802907, 0x0a60c087, 0x06800008, 0x06815408, 0x09402207,
-	0x0a644047, 0x06094208, 0x0c061240, 0x080c2301, 0x09484207,
-	0x0c061180, 0x080c2301, 0x09504207, 0x06094208, 0x0680c007,
-	0x06094007, 0x0c069700, 0x078073c9, 0x0680d807, 0x06094007,
-	0x0c069600, 0x07807409, 0x0c7808c0, 0x00000000, 0x0fc011c0,
-	0x06800808, 0x0aa14007, 0x078073c7, 0x0c060d00, 0x080c2301,
-	0x07c073c7, 0x09505207, 0x07802947, 0x096a2207, 0x060c2108,
-	0x068000c7, 0x07c0c007, 0x0fc011c0, 0x0aa10007, 0x00000000,
-	0x0c068ac0, 0x0680c009, 0x078028c7, 0x04000207, 0x0aa34007,
-	0x06094208, 0x0c060880, 0x080c2301, 0x09484207, 0x0c0607c0,
-	0x080c2301, 0x09504207, 0x06094208, 0x0680c007, 0x06094007,
-	0x0c068d40, 0x078073c9, 0x06494007, 0x09c07247, 0x06094007,
-	0x07802047, 0x0aa7c007, 0x07802007, 0x06800148, 0x0a82a207,
-	0x00000000, 0x06800007, 0x07c0e107, 0x0fc011c0, 0x0aa5c007,
-	0x0680e109, 0x04000289, 0x02407289, 0x0b610a47, 0x06800007,
-	0x0c060140, 0x080c2301, 0x0aa3c007, 0x07400247, 0x0aae4147,
-	0x04001249, 0x04000207, 0x0c05ff80, 0x080c2301, 0x07400247,
-	0x0a6cc0c8, 0x04001249, 0x0c05fe40, 0x080c2301, 0x07400247,
-	0x0c7ffb80, 0x04001249, 0x0649cf07, 0x0a20c0c7, 0x06800007,
-	0x07c0e107, 0x07802347, 0x0aa2c007, 0x07802087, 0x0aa24087,
-	0x06800c08, 0x0c05fac0, 0x080c2301, 0x09402207, 0x0c780100,
-	0x060c2108, 0x0fc021c0, 0x07c0e107, 0x068004ca, 0x06031e0a,
-	0x0649ce09, 0x0aa10009, 0x00000000, 0x0809ce00, 0x08007401,
-	0x06431e09, 0x0bee8049, 0x00000000, 0x07801e87, 0x0a608047,
-	0x0c782a40, 0x0680a009, 0x0680400a, 0x0680ec08, 0x080c2400,
-	0x0c069040, 0x078070cc, 0x080c2400, 0x0680000b, 0x0780724c,
-	0x078073cd, 0x0400134d, 0x0b80334c, 0x00000000, 0x0400030d,
-	0x0200d2c8, 0x0700034d, 0x0540234d, 0x0200d349, 0x0700034e,
-	0x05408410, 0x02010390, 0x054033ce, 0x0200f3ca, 0x070003cf,
+	0x09610209, 0x06800009, 0x0c780100, 0x07c00c49, 0x0c062a40,
+	0x00000000, 0x0649cf09, 0x0be29009, 0x07800cc9, 0x0a620009,
+	0x06800049, 0x07c00cc9, 0x0809c009, 0x0609c108, 0x08007401,
+	0x0649c009, 0x0a6fc009, 0x07c03088, 0x05810208, 0x07c030c8,
+	0x06803208, 0x07803089, 0x020081c8, 0x07400209, 0x06800008,
+	0x078030c9, 0x020081c8, 0x07400209, 0x06800009, 0x07c03089,
+	0x07c030c9, 0x054181c7, 0x0609b307, 0x068c000a, 0x0c060c00,
+	0x06c0000a, 0x0649b307, 0x054081c7, 0x058081c7, 0x0609b207,
+	0x0609b007, 0x0609b107, 0x06800007, 0x07c01c47, 0x078072c7,
+	0x0be09807, 0x0c780840, 0x06bfffc9, 0x06803008, 0x07802307,
+	0x090211c7, 0x054011c7, 0x038081c8, 0x07807307, 0x0a60c087,
+	0x06800007, 0x06800047, 0x038081c8, 0x07803c07, 0x06031f07,
+	0x06033f08, 0x0c05d080, 0x08031e15, 0x078079c9, 0x07807a0a,
+	0x0961024a, 0x06431f07, 0x02009247, 0x078078c7, 0x07807908,
+	0x096101c8, 0x0b8071c9, 0x07807947, 0x07807988, 0x096101c8,
+	0x0b4031c9, 0x0c7800c0, 0x00000000, 0x06bfffc9, 0x064c3d08,
+	0x09161208, 0x0a6f8008, 0x00000000, 0x060c3809, 0x07802207,
+	0x0aa10007, 0x00000000, 0x0c062500, 0x080c2301, 0x07803ac7,
+	0x07c073c7, 0x07803b07, 0x07c07407, 0x07802087, 0x0aa10187,
+	0x06800148, 0x0a83c207, 0x0c781700, 0x00000000, 0x0fc011c0,
+	0x06800808, 0x096e1207, 0x078073c7, 0x09505207, 0x0fc011c0,
+	0x0aa24007, 0x07807407, 0x0c062000, 0x080c2301, 0x07c073c7,
+	0x09505207, 0x0c061f00, 0x080c2301, 0x07c07407, 0x09605207,
+	0x07802947, 0x096a2207, 0x060c2108, 0x068000c7, 0x07c0c007,
+	0x0fc011c0, 0x0aa10007, 0x00000000, 0x0c069cc0, 0x0680c009,
+	0x068000c7, 0x07c0d087, 0x0fc011c0, 0x0aa10007, 0x00000000,
+	0x0c069b00, 0x0680d089, 0x07802907, 0x0a60c087, 0x06800008,
+	0x06815408, 0x09402207, 0x0a644047, 0x06094208, 0x0c061800,
+	0x080c2301, 0x09484207, 0x0c061740, 0x080c2301, 0x09504207,
+	0x06094208, 0x0680c007, 0x06094007, 0x0c069cc0, 0x078073c9,
+	0x0680d807, 0x06094007, 0x0c069bc0, 0x07807409, 0x0c7808c0,
+	0x00000000, 0x0fc011c0, 0x06800808, 0x0aa14007, 0x078073c7,
+	0x0c0612c0, 0x080c2301, 0x07c073c7, 0x09505207, 0x07802947,
+	0x096a2207, 0x060c2108, 0x068000c7, 0x07c0c007, 0x0fc011c0,
+	0x0aa10007, 0x00000000, 0x0c069080, 0x0680c009, 0x078028c7,
+	0x04000207, 0x0aa34007, 0x06094208, 0x0c060e40, 0x080c2301,
+	0x09484207, 0x0c060d80, 0x080c2301, 0x09504207, 0x06094208,
+	0x0680c007, 0x06094007, 0x0c069300, 0x078073c9, 0x06494007,
+	0x09c07247, 0x06094007, 0x07802047, 0x0aa7c007, 0x07802007,
+	0x06800148, 0x0a82a207, 0x00000000, 0x06800007, 0x07c0e107,
+	0x0fc011c0, 0x0aa5c007, 0x0680e109, 0x04000289, 0x02407289,
+	0x0b610a47, 0x06800007, 0x0c060700, 0x080c2301, 0x0aa3c007,
+	0x07400247, 0x0aae4147, 0x04001249, 0x04000207, 0x0c060540,
+	0x080c2301, 0x07400247, 0x0a6cc0c8, 0x04001249, 0x0c060400,
+	0x080c2301, 0x07400247, 0x0c7ffb80, 0x04001249, 0x0649cf07,
+	0x0a20c0c7, 0x06800007, 0x07c0e107, 0x07802347, 0x0aa2c007,
+	0x07802087, 0x0aa24087, 0x06800c08, 0x0c060080, 0x080c2301,
+	0x09402207, 0x0c780100, 0x060c2108, 0x0fc021c0, 0x07c0e107,
+	0x068004ca, 0x06031e0a, 0x0649ce09, 0x0aa10009, 0x00000000,
+	0x0809ce00, 0x08007401, 0x06431e09, 0x0bee8049, 0x00000000,
+	0x07801e87, 0x0a608047, 0x0c782bc0, 0x0680a009, 0x0680400a,
+	0x0680ec08, 0x080c2400, 0x0c069600, 0x078070cc, 0x080c2400,
+	0x0680000b, 0x0780724c, 0x078073cd, 0x0400134d, 0x0b80334c,
+	0x00000000, 0x0400030d, 0x0200d2c8, 0x0700034d, 0x0540234d,
+	0x0200d349, 0x0700034e, 0x05408410, 0x02010390, 0x0649cf07,
+	0x0a225007, 0x00000000, 0x054033ce, 0x0200f3ca, 0x070003cf,
 	0x091013cf, 0x0aa0c00f, 0x0680004f, 0x07c01e4f, 0x0400134d,
 	0x0700034d, 0x0900234d, 0x094a240d, 0x040013cb, 0x0be0c0cf,
 	0x00000000, 0x060c2210, 0x0a60c00b, 0x00000000, 0x07c01990,
-	0x040012cb, 0x0b8e630b, 0x0a2240cc, 0x090022cc, 0x0680010c,
+	0x040012cb, 0x0b8e330b, 0x0a2240cc, 0x090022cc, 0x0680010c,
 	0x0240c2cc, 0x090082d0, 0x05408410, 0x0d07ffcc, 0x0940840b,
-	0x060c2210, 0x07802087, 0x06800188, 0x0a802207, 0x0c781cc0,
-	0x0680f608, 0x080c2408, 0x0c068340, 0x0780728c, 0x080c2408,
+	0x060c2210, 0x07802087, 0x06800188, 0x0a802207, 0x0c781d80,
+	0x0680f608, 0x080c2408, 0x0c068840, 0x0780728c, 0x080c2408,
 	0x0680000b, 0x0780740d, 0x0400134d, 0x0b80334c, 0x00000000,
 	0x0400030d, 0x0200d2c8, 0x0700034d, 0x0540234d, 0x0200d349,
 	0x0700034e, 0x05408410, 0x02010390, 0x0400134d, 0x0700034d,
-	0x0900234d, 0x054033ce, 0x0200f3ca, 0x070003cf, 0x091013cf,
-	0x0aa0c00f, 0x0680004f, 0x07c01e4f, 0x046002cb, 0x0c481140,
-	0x07803a47, 0x0540338e, 0x0200e38a, 0x0700038f, 0x090053cf,
-	0x06031f07, 0x06033f0f, 0x0c058a40, 0x08031e15, 0x0780732b,
-	0x0a60c0ab, 0x0680002c, 0x0680006c, 0x06431f07, 0x07803c0f,
-	0x054013cf, 0x0380fb0f, 0x020073c7, 0x0680180f, 0x06031f07,
-	0x06033f0f, 0x0c0586c0, 0x08031e15, 0x06431f07, 0x06433f0f,
-	0x097081cf, 0x0780230f, 0x090213cf, 0x054013cf, 0x038073c7,
-	0x078078cf, 0x020073c7, 0x0780790f, 0x054103cf, 0x020073c7,
-	0x058031c7, 0x040013ce, 0x070003cf, 0x090c2a8f, 0x097c21ea,
-	0x0ba5c0ab, 0x040023ce, 0x070003ec, 0x040033ce, 0x070003ef,
-	0x09610b2f, 0x040043ce, 0x070003ed, 0x040053ce, 0x070003ef,
-	0x09610b6f, 0x0780776e, 0x078077af, 0x09610baf, 0x0b403b2e,
-	0x0242fb2e, 0x0242fbac, 0x0b403b6e, 0x0242cb6e, 0x0242cbad,
-	0x0b807b2f, 0x0c780180, 0x09807747, 0x044013cd, 0x0ba0c0aa,
-	0x097a11cf, 0x097a11eb, 0x060c3907, 0x094a240d, 0x040013cb,
-	0x0be0c0cf, 0x00000000, 0x060c2210, 0x040012cb, 0x0b8a330b,
-	0x0a2240cc, 0x090022cc, 0x0680010c, 0x0240c2cc, 0x090082d0,
-	0x05408410, 0x0d07ffcc, 0x0940840b, 0x060c2210, 0x0780208a,
+	0x0900234d, 0x0649cf07, 0x0a225007, 0x00000000, 0x054033ce,
+	0x0200f3ca, 0x070003cf, 0x091013cf, 0x0aa0c00f, 0x0680004f,
+	0x07c01e4f, 0x046002cb, 0x0c481140, 0x07803a47, 0x0540338e,
+	0x0200e38a, 0x0700038f, 0x090053cf, 0x06031f07, 0x06033f0f,
+	0x0c058840, 0x08031e15, 0x0780732b, 0x0a60c0ab, 0x0680002c,
+	0x0680006c, 0x06431f07, 0x07803c0f, 0x054013cf, 0x0380fb0f,
+	0x020073c7, 0x0680180f, 0x06031f07, 0x06033f0f, 0x0c0584c0,
+	0x08031e15, 0x06431f07, 0x06433f0f, 0x097081cf, 0x0780230f,
+	0x090213cf, 0x054013cf, 0x038073c7, 0x078078cf, 0x020073c7,
+	0x0780790f, 0x054103cf, 0x020073c7, 0x058031c7, 0x040013ce,
+	0x070003cf, 0x090c2a8f, 0x097c21ea, 0x0ba5c0ab, 0x040023ce,
+	0x070003ec, 0x040033ce, 0x070003ef, 0x09610b2f, 0x040043ce,
+	0x070003ed, 0x040053ce, 0x070003ef, 0x09610b6f, 0x0780776e,
+	0x078077af, 0x09610baf, 0x0b403b2e, 0x0242fb2e, 0x0242fbac,
+	0x0b403b6e, 0x0242cb6e, 0x0242cbad, 0x0b807b2f, 0x0c780180,
+	0x09807747, 0x044013cd, 0x0ba0c0aa, 0x097a11cf, 0x097a11eb,
+	0x060c3907, 0x094a240d, 0x040013cb, 0x0be0c0cf, 0x00000000,
+	0x060c2210, 0x040012cb, 0x0b8a030b, 0x0a2240cc, 0x090022cc,
+	0x0680010c, 0x0240c2cc, 0x090082d0, 0x05408410, 0x0d07ffcc,
+	0x0940840b, 0x060c2210, 0x0649cf0a, 0x0a21500a, 0x0780208a,
 	0x0a60c08a, 0x0680000a, 0x07c01e4a, 0x0694000a, 0x06c0444a,
-	0x0680c009, 0x0c05a380, 0x06a0400b, 0x0c05c980, 0x080c2301,
-	0x0c05cb00, 0x00000000, 0x0401a1c7, 0x07802248, 0x02007207,
-	0x07c02387, 0x07802287, 0x0aa40007, 0x06800009, 0x0c05c6c0,
-	0x080c2301, 0x0aa30047, 0x09402247, 0x0c05c5c0, 0x080c2301,
-	0x0c05c740, 0x00000000, 0x094c4247, 0x0c05c480, 0x080c2301,
-	0x0c05c600, 0x00000000, 0x09444247, 0x060c3109, 0x0c7f0c00,
-	0x00000000, 0x0c065800, 0x00000000, 0x0680400f, 0x0780704e,
+	0x0680c009, 0x0c05a100, 0x06a0400b, 0x0c05cd40, 0x080c2301,
+	0x0c05cec0, 0x00000000, 0x0401a1c7, 0x07802248, 0x02007207,
+	0x07c02387, 0x07802287, 0x0aa40007, 0x06800009, 0x0c05ca80,
+	0x080c2301, 0x0aa30047, 0x09402247, 0x0c05c980, 0x080c2301,
+	0x0c05cb00, 0x00000000, 0x094c4247, 0x0c05c840, 0x080c2301,
+	0x0c05c9c0, 0x00000000, 0x09444247, 0x060c3109, 0x0c7f1480,
+	0x00000000, 0x0c065bc0, 0x00000000, 0x0680400f, 0x0780704e,
 	0x0780734d, 0x0780730c, 0x078072c0, 0x090a1040, 0x090c1c00,
 	0x02c0bc01, 0x07807188, 0x0aa0c00c, 0x0aa3c04c, 0x0c780900,
 	0x05403c48, 0x020313f1, 0x04001c71, 0x07000c40, 0x09061040,
@@ -156,7 +141,7 @@ static const u32 MicroCode[] __initconst = {
 	0x094e1040, 0x07400c01, 0x0aa7400b, 0x06801801, 0x07802300,
 	0x09021000, 0x05401000, 0x03801001, 0x07803cca, 0x0900828a,
 	0x0340a00a, 0x078078c5, 0x07807900, 0x09610140, 0x07803a40,
-	0x06031f00, 0x06033f01, 0x0c055700, 0x08031e15, 0x06800046,
+	0x06031f00, 0x06033f01, 0x0c055480, 0x08031e15, 0x06800046,
 	0x07807087, 0x06431f04, 0x06800009, 0x03400246, 0x0bc0f1c0,
 	0x04401071, 0x07000070, 0x09405c09, 0x07400070, 0x02c07007,
 	0x07c07087, 0x0649c900, 0x09c007c0, 0x0609c900, 0x07c079c5,
@@ -183,7 +168,7 @@ static const u32 MicroCode[] __initconst = {
 	0x09610001, 0x04001c30, 0x0d07fef1, 0x02009009, 0x0a608008,
 	0x0c780580, 0x04401208, 0x06800007, 0x0b8052c8, 0x00000000,
 	0x040011c7, 0x0c7fff40, 0x024082c8, 0x06031f07, 0x06033f09,
-	0x0c0535c0, 0x08031e15, 0x04001c48, 0x06808030, 0x06431f0a,
+	0x0c053340, 0x08031e15, 0x04001c48, 0x06808030, 0x06431f0a,
 	0x07000c00, 0x04001c30, 0x07000c01, 0x09610001, 0x04001c30,
 	0x0d07fef1, 0x0200a00a, 0x078072c0, 0x090a2000, 0x0a614000,
 	0x07803800, 0x07803841, 0x09610001, 0x0200a00a, 0x07807545,
@@ -218,8 +203,5 @@ static const u32 MicroCode[] __initconst = {
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000
 };
-
diff --git a/drivers/amlogic/amports/arch/ucode/h264/vh264_mc.c b/drivers/amlogic/amports/arch/ucode/h264/vh264_mc.c
index 9fe9dd6..b040f3f 100644
--- a/drivers/amlogic/amports/arch/ucode/h264/vh264_mc.c
+++ b/drivers/amlogic/amports/arch/ucode/h264/vh264_mc.c
@@ -21,35 +21,118 @@
 #include "h264c_linux.h"
 
 #undef MicroCode
+#define MicroCode gxtvbb_vh264_mc
+#include "gxtvbb_h264c_linux.h"
+
+#undef MicroCode
+#define MicroCode gxm_vh264_mc
+#include "gxm_h264c_linux.h"
+
+#undef MicroCode
 #define MicroCode vh264_header_mc
 #include "h264header_linux.h"
 
 #undef MicroCode
+#define MicroCode gxtvbb_vh264_header_mc
+#include "gxtvbb_h264header_linux.h"
+
+#undef MicroCode
+#define MicroCode gxm_vh264_header_mc
+#include "gxm_h264header_linux.h"
+
+#undef MicroCode
 #define MicroCode vh264_data_mc
 #include "h264data_linux.h"
 
 #undef MicroCode
+#define MicroCode gxtvbb_vh264_data_mc
+#include "gxtvbb_h264data_linux.h"
+
+#undef MicroCode
+#define MicroCode gxm_vh264_data_mc
+#include "gxm_h264data_linux.h"
+
+#undef MicroCode
 #define MicroCode vh264_mmco_mc
 #include "h264mmc_linux.h"
 
 #undef MicroCode
+#define MicroCode gxtvbb_vh264_mmco_mc
+#include "gxtvbb_h264mmc_linux.h"
+
+#undef MicroCode
+#define MicroCode gxm_vh264_mmco_mc
+#include "gxm_h264mmc_linux.h"
+
+#undef MicroCode
 #define MicroCode vh264_list_mc
 #include "h264list_linux.h"
 
 #undef MicroCode
+#define MicroCode gxtvbb_vh264_list_mc
+#include "gxtvbb_h264list_linux.h"
+
+#undef MicroCode
+#define MicroCode gxm_vh264_list_mc
+#include "gxm_h264list_linux.h"
+
+#undef MicroCode
 #define MicroCode vh264_slice_mc
 #include "h264slice_linux.h"
 
+#undef MicroCode
+#define MicroCode gxtvbb_vh264_slice_mc
+#include "gxtvbb_h264slice_linux.h"
+
+#undef MicroCode
+#define MicroCode gxm_vh264_slice_mc
+#include "gxm_h264slice_linux.h"
+
+
+#undef FOR_CPUS
+#define FOR_CPUS {MESON_CPU_MAJOR_ID_GXTVBB, MESON_CPU_MAJOR_ID_GXL,\
+		MESON_CPU_MAJOR_ID_GXM, 0}
+
 #define FOR_VFORMAT VFORMAT_H264
 
+#define DEF_FIRMEARE_FOR_GXBB(n) \
+		REGISTER_FIRMARE_PER_CPU(MESON_CPU_MAJOR_ID_GXBB,\
+		FOR_VFORMAT, n)
+
+#define DEF_FIRMEARE_FOR_GXM(n) \
+		REGISTER_FIRMARE_PER_CPU(MESON_CPU_MAJOR_ID_GXM,\
+		FOR_VFORMAT, n)
+
+#define DEF_FIRMEARE_FOR_TXL(n) \
+		REGISTER_FIRMARE_PER_CPU(MESON_CPU_MAJOR_ID_TXL,\
+		FOR_VFORMAT, n)
+
 #define REG_FIRMWARE_ALL()\
 	do {\
-		DEF_FIRMWARE(vh264_mc);\
-		DEF_FIRMWARE(vh264_header_mc);\
-		DEF_FIRMWARE(vh264_data_mc);\
-		DEF_FIRMWARE(vh264_mmco_mc);\
-		DEF_FIRMWARE(vh264_list_mc);\
-		DEF_FIRMWARE(vh264_slice_mc);\
+		DEF_FIRMEARE_FOR_GXBB(vh264_mc);\
+		DEF_FIRMWARE(gxtvbb_vh264_mc);\
+		DEF_FIRMEARE_FOR_GXM(gxm_vh264_mc);\
+		DEF_FIRMEARE_FOR_TXL(gxm_vh264_mc);\
+		DEF_FIRMEARE_FOR_GXBB(vh264_header_mc);\
+		DEF_FIRMWARE(gxtvbb_vh264_header_mc);\
+		DEF_FIRMEARE_FOR_GXM(gxm_vh264_header_mc);\
+		DEF_FIRMEARE_FOR_TXL(gxm_vh264_header_mc);\
+		DEF_FIRMEARE_FOR_GXBB(vh264_data_mc);\
+		DEF_FIRMWARE(gxtvbb_vh264_data_mc);\
+		DEF_FIRMEARE_FOR_GXM(gxm_vh264_data_mc);\
+		DEF_FIRMEARE_FOR_TXL(gxm_vh264_data_mc);\
+		DEF_FIRMEARE_FOR_GXBB(vh264_mmco_mc);\
+		DEF_FIRMWARE(gxtvbb_vh264_mmco_mc);\
+		DEF_FIRMEARE_FOR_GXM(gxm_vh264_mmco_mc);\
+		DEF_FIRMEARE_FOR_TXL(gxm_vh264_mmco_mc);\
+		DEF_FIRMEARE_FOR_GXBB(vh264_list_mc);\
+		DEF_FIRMWARE(gxtvbb_vh264_list_mc);\
+		DEF_FIRMEARE_FOR_GXM(gxm_vh264_list_mc);\
+		DEF_FIRMEARE_FOR_TXL(gxm_vh264_list_mc);\
+		DEF_FIRMEARE_FOR_GXBB(vh264_slice_mc);\
+		DEF_FIRMWARE(gxtvbb_vh264_slice_mc);\
+		DEF_FIRMEARE_FOR_GXM(gxm_vh264_slice_mc);\
+		DEF_FIRMEARE_FOR_TXL(gxm_vh264_slice_mc);\
 	} while (0)
 
 INIT_DEF_FIRMWARE();
diff --git a/drivers/amlogic/amports/arch/ucode/h264_enc/h264_enc_gx.h b/drivers/amlogic/amports/arch/ucode/h264_enc/h264_enc_gx.h
index 51c85a4..f12c23b 100644
--- a/drivers/amlogic/amports/arch/ucode/h264_enc/h264_enc_gx.h
+++ b/drivers/amlogic/amports/arch/ucode/h264_enc/h264_enc_gx.h
@@ -16,417 +16,417 @@
 */
 
 const u32 MicroCode[] __initconst = {
-	0x06810001, 0x06800000, 0x0d000001, 0x07400040, 0x0c0009c0,
-	0x00000000, 0x0c01ad80, 0x00000000, 0x0c001000, 0x00000000,
+	0x06810001, 0x06800000, 0x0d000001, 0x07400040, 0x0c000980,
+	0x00000000, 0x0c01ad40, 0x00000000, 0x0c000fc0, 0x00000000,
 	0x06bffc40, 0x07c00000, 0x06030400, 0x00400000, 0x00000000,
-	0x00000000, 0x0c79fa40, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x0c79fa00, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x00000000, 0x00000000, 0x0c799000, 0x00000000,
-	0x0c78e680, 0x064d3008, 0x0c780a80, 0x00000000, 0x0c799040,
-	0x00000000, 0x0cc00000, 0x00400000, 0x080d1a00, 0x06800008,
-	0x07c003c8, 0x0cc00000, 0x00000000, 0x06800022, 0x06804008,
-	0x07c00808, 0x07c008c8, 0x06800008, 0x07c00888, 0x064ac808,
-	0x07c00108, 0x064ac908, 0x07c00148, 0x064ac608, 0x07c00188,
-	0x064ac508, 0x07c001c8, 0x064ac708, 0x07c00208, 0x064aca08,
-	0x07c00388, 0x064acb08, 0x07c00048, 0x064ace08, 0x07c00508,
-	0x0cc00000, 0x00000000, 0x0cc00000, 0x00000000, 0x080d2001,
-	0x064d2008, 0x0befc048, 0x0cc00000, 0x00000000, 0x06bfff88,
-	0x06030408, 0x00400000, 0x064ac008, 0x0aa44048, 0x0a60c088,
-	0x0c781840, 0x00000000, 0x078003c9, 0x0a60c009, 0x0c002940,
-	0x00000000, 0x0a60c108, 0x0c785780, 0x00000000, 0x0a6100c8,
-	0x00000000, 0x0c782b00, 0x00000000, 0x0c78ae40, 0x00000000,
-	0x0c07f300, 0x00000000, 0x06bc0008, 0x060d1f08, 0x064d1e08,
-	0x09c087c8, 0x060d1e08, 0x06800008, 0x06c00408, 0x060d1f08,
-	0x06800048, 0x06c00408, 0x060d1f08, 0x06a19c08, 0x060d1f08,
-	0x064d1e08, 0x098087c8, 0x060d1e08, 0x06a10808, 0x060d1f08,
-	0x06a00008, 0x060d1f08, 0x06a0a008, 0x060d1f08, 0x0c07f380,
-	0x080d2100, 0x07800148, 0x04404208, 0x0c07f280, 0x060d2108,
-	0x0c07f200, 0x080d2100, 0x07800108, 0x04404208, 0x0c07f100,
-	0x060d2108, 0x0c07f080, 0x080d2101, 0x080d1f20, 0x064d3109,
-	0x09010209, 0x0400f208, 0x05804208, 0x04401208, 0x07c00308,
-	0x0c07ee40, 0x060d2108, 0x09210209, 0x0400f208, 0x05804208,
-	0x04401208, 0x07c00348, 0x0c07ec80, 0x060d2108, 0x080d1f30,
-	0x080d1f30, 0x064d3108, 0x09210208, 0x09004248, 0x0a60c009,
-	0x0c7803c0, 0x080d1f20, 0x06800408, 0x06c00008, 0x02409248,
-	0x05801249, 0x080d1f30, 0x0c07e8c0, 0x080d2100, 0x0c07e840,
-	0x080d2100, 0x0c07e7c0, 0x080d2100, 0x0c07e740, 0x060d2109,
-	0x080d1f20, 0x080d1f30, 0x06bc0008, 0x060d1f08, 0x080ac007,
-	0x0c7899c0, 0x08007801, 0x0c07de80, 0x00000000, 0x06bc0008,
-	0x060d1f08, 0x064d1e08, 0x09c087c8, 0x060d1e08, 0x06800008,
-	0x06c00408, 0x060d1f08, 0x06800048, 0x06c00408, 0x060d1f08,
-	0x06a1a008, 0x060d1f08, 0x064d1e08, 0x098087c8, 0x060d1e08,
-	0x0c07e080, 0x080d2100, 0x0c07e000, 0x080d2100, 0x080d1f20,
-	0x080d1f20, 0x0c07df00, 0x080d2100, 0x0c07de80, 0x080d2100,
-	0x0c07de00, 0x080d2100, 0x080d1f20, 0x080d1f40, 0x07800048,
-	0x0c009200, 0x0441a208, 0x0c07dc40, 0x060d2108, 0x0c009100,
-	0x06800008, 0x0c07db40, 0x060d2108, 0x0c07dac0, 0x080d2100,
-	0x080d1f20, 0x080d5500, 0x080d1f20, 0x080d1f20, 0x080d1f30,
-	0x06bc0008, 0x060d1f08, 0x00000000, 0x00000000, 0x064d1608,
-	0x0befc108, 0x00000000, 0x06800008, 0x06e00008, 0x060d1c08,
-	0x080d1d00, 0x00000000, 0x00000000, 0x064d1608, 0x0befc108,
-	0x064d1b08, 0x09808648, 0x060d1b08, 0x064d1608, 0x0befc108,
-	0x00000000, 0x080ac008, 0x0c7887c0, 0x08007801, 0x064d3109,
-	0x09010289, 0x0400f28a, 0x0580428a, 0x0440128a, 0x07c0030a,
-	0x09210289, 0x0400f28a, 0x0580428a, 0x0440128a, 0x07c0034a,
-	0x06800009, 0x0cc00000, 0x07c003c9, 0x0c016f00, 0x00000000,
-	0x080f3eff, 0x06490b08, 0x09c08608, 0x09c08648, 0x06090b08,
-	0x06400908, 0x09c08748, 0x09c08788, 0x06000908, 0x06400808,
-	0x09808008, 0x06000808, 0x09c08008, 0x06000808, 0x0c0173c0,
-	0x00000000, 0x0c016a00, 0x00000000, 0x0c07c400, 0x00000000,
-	0x06400f08, 0x09808708, 0x06000f08, 0x064f4908, 0x09c08048,
-	0x060f4908, 0x06bc0008, 0x060d1f08, 0x064d1e08, 0x09c087c8,
+	0x00000000, 0x00000000, 0x0c799000, 0x00000000, 0x0c78e680,
+	0x064d3008, 0x0c780a80, 0x00000000, 0x0c799040, 0x00000000,
+	0x0cc00000, 0x00400000, 0x080d1a00, 0x06800008, 0x07c003c8,
+	0x0cc00000, 0x00000000, 0x06800022, 0x06804008, 0x07c00808,
+	0x07c008c8, 0x06800008, 0x07c00888, 0x064ac808, 0x07c00108,
+	0x064ac908, 0x07c00148, 0x064ac608, 0x07c00188, 0x064ac508,
+	0x07c001c8, 0x064ac708, 0x07c00208, 0x064aca08, 0x07c00388,
+	0x064acb08, 0x07c00048, 0x064ace08, 0x07c00508, 0x0cc00000,
+	0x00000000, 0x0cc00000, 0x00000000, 0x080d2001, 0x064d2008,
+	0x0befc048, 0x0cc00000, 0x00000000, 0x06bfff88, 0x06030408,
+	0x00400000, 0x064ac008, 0x0aa44048, 0x0a60c088, 0x0c781840,
+	0x00000000, 0x078003c9, 0x0a60c009, 0x0c002940, 0x00000000,
+	0x0a60c108, 0x0c785780, 0x00000000, 0x0a6100c8, 0x00000000,
+	0x0c782b00, 0x00000000, 0x0c78ae40, 0x00000000, 0x0c07f300,
+	0x00000000, 0x06bc0008, 0x060d1f08, 0x064d1e08, 0x09c087c8,
 	0x060d1e08, 0x06800008, 0x06c00408, 0x060d1f08, 0x06800048,
-	0x06c00408, 0x060d1f08, 0x06a19408, 0x060d1f08, 0x064d1e08,
-	0x098087c8, 0x060d1e08, 0x064d3308, 0x09008248, 0x07c00089,
-	0x09108248, 0x07c000c9, 0x09210208, 0x0c07c300, 0x060d2108,
-	0x0c07c280, 0x080d2107, 0x064d3109, 0x09010209, 0x0400f208,
-	0x05804208, 0x04401208, 0x07c00308, 0x09210209, 0x0400f208,
-	0x05804208, 0x04401208, 0x07c00348, 0x06800008, 0x07c00248,
-	0x060f1b08, 0x07800309, 0x0946d209, 0x060d3208, 0x06940008,
-	0x06c00008, 0x064ac109, 0x02008248, 0x060f2008, 0x06803908,
-	0x064d3309, 0x09008249, 0x09508209, 0x09808508, 0x09808548,
-	0x098087c8, 0x060f1f08, 0x064ad508, 0x07c00448, 0x0ae0c008,
-	0x04001208, 0x06800008, 0x07c00488, 0x06800008, 0x07c00408,
-	0x07800308, 0x04001208, 0x07c004c8, 0x07800309, 0x07800348,
-	0x0960f248, 0x060f1e09, 0x0c07b6c0, 0x080d2100, 0x07800148,
-	0x07800189, 0x0680040a, 0x0240a20a, 0x03409289, 0x09605248,
-	0x060d1f09, 0x078001c8, 0x0c07b440, 0x060d2108, 0x07800108,
-	0x07800209, 0x0680040a, 0x0240a20a, 0x03409289, 0x09605248,
-	0x060d1f09, 0x080d1f20, 0x080d1f20, 0x064f1c08, 0x09206208,
-	0x07800049, 0x0c006600, 0x02408248, 0x0c07b040, 0x060d2108,
-	0x080d3d00, 0x064acd08, 0x060f4208, 0x0c006640, 0x00000000,
-	0x0680f243, 0x06819ac4, 0x080d300f, 0x064d0008, 0x09808008,
-	0x09808048, 0x09808088, 0x09c080c8, 0x09c08148, 0x09c08188,
-	0x09c081c8, 0x060d0008, 0x064acf08, 0x060f4808, 0x06808089,
-	0x06d00009, 0x07800508, 0x09485248, 0x06c0000a, 0x04820288,
-	0x0aa2c00a, 0x00000000, 0x09809289, 0x098092c9, 0x09809309,
-	0x09809349, 0x09809389, 0x098093c9, 0x09809409, 0x09809449,
-	0x09809489, 0x06c0000a, 0x04840288, 0x0aa1400a, 0x00000000,
-	0x098094c9, 0x09809509, 0x09809549, 0x060f4009, 0x080ac005,
-	0x0c7858c0, 0x08007801, 0x0c014e40, 0x00000000, 0x06493008,
-	0x06800009, 0x09410209, 0x06093008, 0x060d2608, 0x064f4008,
-	0x09c08048, 0x060f4008, 0x080f1f00, 0x080f3eff, 0x064d0008,
-	0x09c08088, 0x060d0008, 0x09808088, 0x060d0008, 0x064d2508,
-	0x09808188, 0x098081c8, 0x09808288, 0x060d2508, 0x064f3408,
-	0x098085c8, 0x09808508, 0x09808448, 0x09808408, 0x098083c8,
-	0x09808148, 0x060f3408, 0x080f3f08, 0x064acf08, 0x060f4808,
-	0x06808089, 0x06d00009, 0x07800508, 0x09485248, 0x06c00008,
-	0x04820208, 0x0aa2c008, 0x00000000, 0x09809289, 0x098092c9,
-	0x09809309, 0x09809349, 0x09809389, 0x098093c9, 0x09809409,
-	0x09809449, 0x09809489, 0x07800508, 0x06c00008, 0x04840208,
-	0x0aa14008, 0x00000000, 0x098094c9, 0x09809509, 0x09809549,
-	0x060f4009, 0x0c0134c0, 0x00000000, 0x06490b08, 0x09c08608,
-	0x09808648, 0x06090b08, 0x06400908, 0x09808748, 0x09c08788,
-	0x06000908, 0x06400808, 0x09808008, 0x06000808, 0x09c08008,
-	0x06000808, 0x0c0139c0, 0x00000000, 0x0c013000, 0x00000000,
-	0x0c078a00, 0x00000000, 0x06400f08, 0x09808708, 0x06000f08,
-	0x064f4308, 0x09808008, 0x09c08048, 0x09808088, 0x09c080c8,
-	0x060f4308, 0x09c08008, 0x09808048, 0x09c08088, 0x098080c8,
-	0x060f4308, 0x064f3b08, 0x098087c8, 0x060f3b08, 0x09c087c8,
-	0x060f3b08, 0x064f1508, 0x09c08508, 0x09c084c8, 0x09808748,
-	0x09c08448, 0x09c08488, 0x09c08348, 0x09c08308, 0x09808248,
-	0x09808008, 0x060f1508, 0x09808508, 0x098084c8, 0x060f1508,
-	0x080d3400, 0x080f4a00, 0x09808488, 0x09808448, 0x09808348,
-	0x09808308, 0x098085c8, 0x09808608, 0x09808648, 0x09c08688,
-	0x098086c8, 0x09c08248, 0x09c08008, 0x060f1508, 0x064f4908,
-	0x09c08048, 0x09c081c8, 0x09808008, 0x060f4908, 0x098087c8,
-	0x09808788, 0x09808748, 0x098086c8, 0x09808688, 0x09808648,
-	0x09808608, 0x09808308, 0x09808288, 0x09c08248, 0x098081c8,
-	0x09808088, 0x09808048, 0x060f4908, 0x068000c8, 0x068000c9,
-	0x09484209, 0x068000c9, 0x09504209, 0x06800049, 0x09581209,
-	0x06800009, 0x095a1209, 0x06800049, 0x095c5209, 0x060f5908,
-	0x06800388, 0x06800489, 0x09508209, 0x06800149, 0x09604209,
-	0x068000c9, 0x09684209, 0x06800109, 0x09704209, 0x06800089,
-	0x09704209, 0x060f5a08, 0x06800008, 0x06800009, 0x09508209,
-	0x06800809, 0x09608209, 0x06801409, 0x09708209, 0x060f5b08,
-	0x06801008, 0x06800009, 0x09508209, 0x06801809, 0x09608209,
-	0x06803009, 0x09708209, 0x060f5c08, 0x06800608, 0x06801409,
-	0x09508209, 0x06800809, 0x09608209, 0x06801809, 0x09708209,
-	0x060f5d08, 0x068000c8, 0x06801809, 0x0948c209, 0x06800249,
-	0x09607209, 0x06800009, 0x096e1209, 0x06800c09, 0x09708209,
-	0x060f5e08, 0x068000c8, 0x06800009, 0x09461209, 0x06800049,
-	0x09481209, 0x06800009, 0x094a2209, 0x06803009, 0x0950c209,
-	0x06801c09, 0x0968c209, 0x060f5f08, 0x064d3109, 0x09010209,
-	0x0400f208, 0x05804208, 0x04401208, 0x07c00308, 0x09210209,
-	0x0400f208, 0x05804208, 0x04401208, 0x07c00348, 0x07800309,
-	0x07800348, 0x0958c248, 0x06499008, 0x09708248, 0x060f4f09,
+	0x06c00408, 0x060d1f08, 0x06a19c08, 0x060d1f08, 0x064d1e08,
+	0x098087c8, 0x060d1e08, 0x06a10808, 0x060d1f08, 0x06a00008,
+	0x060d1f08, 0x06a0a008, 0x060d1f08, 0x0c07f380, 0x080d2100,
+	0x07800148, 0x04404208, 0x0c07f280, 0x060d2108, 0x0c07f200,
+	0x080d2100, 0x07800108, 0x04404208, 0x0c07f100, 0x060d2108,
+	0x0c07f080, 0x080d2101, 0x080d1f20, 0x064d3109, 0x09010209,
+	0x0400f208, 0x05804208, 0x04401208, 0x07c00308, 0x0c07ee40,
+	0x060d2108, 0x09210209, 0x0400f208, 0x05804208, 0x04401208,
+	0x07c00348, 0x0c07ec80, 0x060d2108, 0x080d1f30, 0x080d1f30,
+	0x064d3108, 0x09210208, 0x09004248, 0x0a60c009, 0x0c7803c0,
+	0x080d1f20, 0x06800408, 0x06c00008, 0x02409248, 0x05801249,
+	0x080d1f30, 0x0c07e8c0, 0x080d2100, 0x0c07e840, 0x080d2100,
+	0x0c07e7c0, 0x080d2100, 0x0c07e740, 0x060d2109, 0x080d1f20,
+	0x080d1f30, 0x06bc0008, 0x060d1f08, 0x080ac007, 0x0c7899c0,
+	0x08007801, 0x0c07de80, 0x00000000, 0x06bc0008, 0x060d1f08,
+	0x064d1e08, 0x09c087c8, 0x060d1e08, 0x06800008, 0x06c00408,
+	0x060d1f08, 0x06800048, 0x06c00408, 0x060d1f08, 0x06a1a008,
+	0x060d1f08, 0x064d1e08, 0x098087c8, 0x060d1e08, 0x0c07e080,
+	0x080d2100, 0x0c07e000, 0x080d2100, 0x080d1f20, 0x080d1f20,
+	0x0c07df00, 0x080d2100, 0x0c07de80, 0x080d2100, 0x0c07de00,
+	0x080d2100, 0x080d1f20, 0x080d1f40, 0x07800048, 0x0c009200,
+	0x0441a208, 0x0c07dc40, 0x060d2108, 0x0c009100, 0x06800008,
+	0x0c07db40, 0x060d2108, 0x0c07dac0, 0x080d2100, 0x080d1f20,
+	0x080d5500, 0x080d1f20, 0x080d1f20, 0x080d1f30, 0x06bc0008,
+	0x060d1f08, 0x00000000, 0x00000000, 0x064d1608, 0x0befc108,
+	0x00000000, 0x06800008, 0x06e00008, 0x060d1c08, 0x080d1d00,
+	0x00000000, 0x00000000, 0x064d1608, 0x0befc108, 0x064d1b08,
+	0x09808648, 0x060d1b08, 0x064d1608, 0x0befc108, 0x00000000,
+	0x080ac008, 0x0c7887c0, 0x08007801, 0x064d3109, 0x09010289,
+	0x0400f28a, 0x0580428a, 0x0440128a, 0x07c0030a, 0x09210289,
+	0x0400f28a, 0x0580428a, 0x0440128a, 0x07c0034a, 0x06800009,
+	0x0cc00000, 0x07c003c9, 0x0c016f00, 0x00000000, 0x080f3eff,
+	0x06490b08, 0x09c08608, 0x09c08648, 0x06090b08, 0x06400908,
+	0x09c08748, 0x09c08788, 0x06000908, 0x06400808, 0x09808008,
+	0x06000808, 0x09c08008, 0x06000808, 0x0c0173c0, 0x00000000,
+	0x0c016a00, 0x00000000, 0x0c07c400, 0x00000000, 0x06400f08,
+	0x09808708, 0x06000f08, 0x064f4908, 0x09c08048, 0x060f4908,
 	0x06bc0008, 0x060d1f08, 0x064d1e08, 0x09c087c8, 0x060d1e08,
 	0x06800008, 0x06c00408, 0x060d1f08, 0x06800048, 0x06c00408,
-	0x060d1f08, 0x06a10408, 0x060d1f08, 0x064d1e08, 0x098087c8,
+	0x060d1f08, 0x06a19408, 0x060d1f08, 0x064d1e08, 0x098087c8,
 	0x060d1e08, 0x064d3308, 0x09008248, 0x07c00089, 0x09108248,
-	0x07c000c9, 0x09210208, 0x0c076440, 0x060d2108, 0x0c0763c0,
-	0x080d2105, 0x06800048, 0x07c00248, 0x060f1b08, 0x07800309,
-	0x0946d209, 0x060d3208, 0x06803908, 0x064d3309, 0x09008249,
-	0x09508209, 0x09808508, 0x09808548, 0x098087c8, 0x060f1f08,
-	0x064ad508, 0x07c00448, 0x0ae0c008, 0x04001208, 0x06800008,
-	0x07c00488, 0x06800008, 0x07c00408, 0x07800308, 0x04001208,
-	0x07c004c8, 0x06bfffc8, 0x060d3708, 0x07800309, 0x07800348,
-	0x0960f248, 0x060f1e09, 0x0c075b80, 0x080d2100, 0x07800148,
-	0x07800189, 0x0680040a, 0x0240a20a, 0x03409289, 0x09605248,
-	0x060d1f09, 0x07800108, 0x07800209, 0x0680040a, 0x0240a20a,
-	0x03409289, 0x09605248, 0x060d1f09, 0x080d1f20, 0x080d1f20,
-	0x080d1f20, 0x064f1d08, 0x09206208, 0x04000248, 0x095a6248,
-	0x060f3c09, 0x07800049, 0x0c000a80, 0x02408248, 0x0c0754c0,
-	0x060d2108, 0x080d3d00, 0x080d5300, 0x064acd08, 0x060f4208,
-	0x0c001880, 0x00000000, 0x06813cc3, 0x06819ac4, 0x080d300f,
-	0x06800008, 0x06c00448, 0x060d2f08, 0x064d0008, 0x09c08008,
-	0x09c08048, 0x09c08088, 0x09c08188, 0x09c081c8, 0x060d0008,
-	0x09808008, 0x09808048, 0x09808088, 0x098080c8, 0x09808148,
-	0x09808188, 0x098081c8, 0x060d0008, 0x06800048, 0x07800309,
-	0x0948c209, 0x060f4b08, 0x080ac005, 0x0c780080, 0x08007801,
-	0x00800000, 0x07800008, 0x0c7f4300, 0x06030408, 0x06800009,
-	0x0b005248, 0x02409209, 0x05401208, 0x0cc00000, 0x04401208,
-	0x0cc00000, 0x05401209, 0x06bfffda, 0x06c0001a, 0x06800009,
-	0x0680001b, 0x06c0001b, 0x0400071b, 0x0680000b, 0x0680c00e,
-	0x0680100f, 0x0740039a, 0x0400138e, 0x07400389, 0x0400138e,
-	0x0740039b, 0x0400138e, 0x0740038b, 0x0400138e, 0x0aee004f,
-	0x044013cf, 0x0690000e, 0x06c0000e, 0x064ac10f, 0x0200e3ce,
-	0x0680000f, 0x0603510e, 0x0680400d, 0x0603520d, 0x06a0c00d,
-	0x0603500d, 0x0643500d, 0x0580f34d, 0x0bef804d, 0x00000000,
-	0x040403cf, 0x0b611e8f, 0x0680800d, 0x0c7ffd00, 0x0200e34e,
-	0x064d330d, 0x0900834d, 0x0680000e, 0x0680100f, 0x0b8053cd,
-	0x00000000, 0x0404038e, 0x0c7fff40, 0x040403cf, 0x07c0028e,
-	0x044013cf, 0x07c002cf, 0x060d371a, 0x060d391b, 0x060d381a,
-	0x060d3a1b, 0x0cc00000, 0x00000000, 0x08098002, 0x08098000,
-	0x06a0001d, 0x06d0001d, 0x06a0001e, 0x06d0001e, 0x06a0001f,
-	0x06d0001f, 0x06a00020, 0x06d00020, 0x0690000a, 0x06bfffda,
-	0x06c0001a, 0x0400085a, 0x0680000d, 0x0680001b, 0x06c0001b,
-	0x0400071b, 0x06800009, 0x0680c00e, 0x0680054f, 0x0740039a,
-	0x0400138e, 0x0740038d, 0x0400138e, 0x0740039b, 0x0400138e,
-	0x07400389, 0x0400138e, 0x0740039d, 0x0400138e, 0x0740038a,
-	0x0400138e, 0x0740039e, 0x0400138e, 0x0740038a, 0x0400138e,
-	0x0740039f, 0x0400138e, 0x0740038a, 0x0400138e, 0x074003a0,
-	0x0400138e, 0x0740038a, 0x0400138e, 0x0aea004f, 0x044013cf,
+	0x07c000c9, 0x09210208, 0x0c07c300, 0x060d2108, 0x0c07c280,
+	0x080d2107, 0x064d3109, 0x09010209, 0x0400f208, 0x05804208,
+	0x04401208, 0x07c00308, 0x09210209, 0x0400f208, 0x05804208,
+	0x04401208, 0x07c00348, 0x06800008, 0x07c00248, 0x060f1b08,
+	0x07800309, 0x0946d209, 0x060d3208, 0x06940008, 0x06c00008,
+	0x064ac109, 0x02008248, 0x060f2008, 0x06803908, 0x064d3309,
+	0x09008249, 0x09508209, 0x09808508, 0x09808548, 0x098087c8,
+	0x060f1f08, 0x064ad508, 0x07c00448, 0x0ae0c008, 0x04001208,
+	0x06800008, 0x07c00488, 0x06800008, 0x07c00408, 0x07800308,
+	0x04001208, 0x07c004c8, 0x07800309, 0x07800348, 0x0960f248,
+	0x060f1e09, 0x0c07b6c0, 0x080d2100, 0x07800148, 0x07800189,
+	0x0680040a, 0x0240a20a, 0x03409289, 0x09605248, 0x060d1f09,
+	0x078001c8, 0x0c07b440, 0x060d2108, 0x07800108, 0x07800209,
+	0x0680040a, 0x0240a20a, 0x03409289, 0x09605248, 0x060d1f09,
+	0x080d1f20, 0x080d1f20, 0x064f1c08, 0x09206208, 0x07800049,
+	0x0c006600, 0x02408248, 0x0c07b040, 0x060d2108, 0x080d3d00,
+	0x064acd08, 0x060f4208, 0x0c006640, 0x00000000, 0x0680f203,
+	0x06819a84, 0x080d300f, 0x064d0008, 0x09808008, 0x09808048,
+	0x09808088, 0x09c080c8, 0x09c08148, 0x09c08188, 0x09c081c8,
+	0x060d0008, 0x064acf08, 0x060f4808, 0x06808089, 0x06d00009,
+	0x07800508, 0x09485248, 0x06c0000a, 0x04820288, 0x0aa2c00a,
+	0x00000000, 0x09809289, 0x098092c9, 0x09809309, 0x09809349,
+	0x09809389, 0x098093c9, 0x09809409, 0x09809449, 0x09809489,
+	0x06c0000a, 0x04840288, 0x0aa1400a, 0x00000000, 0x098094c9,
+	0x09809509, 0x09809549, 0x060f4009, 0x080ac005, 0x0c7858c0,
+	0x08007801, 0x0c014e40, 0x00000000, 0x06493008, 0x06800009,
+	0x09410209, 0x06093008, 0x060d2608, 0x064f4008, 0x09c08048,
+	0x060f4008, 0x080f1f00, 0x080f3eff, 0x064d0008, 0x09c08088,
+	0x060d0008, 0x09808088, 0x060d0008, 0x064d2508, 0x09808188,
+	0x098081c8, 0x09808288, 0x060d2508, 0x064f3408, 0x098085c8,
+	0x09808508, 0x09808448, 0x09808408, 0x098083c8, 0x09808148,
+	0x060f3408, 0x080f3f08, 0x064acf08, 0x060f4808, 0x06808089,
+	0x06d00009, 0x07800508, 0x09485248, 0x06c00008, 0x04820208,
+	0x0aa2c008, 0x00000000, 0x09809289, 0x098092c9, 0x09809309,
+	0x09809349, 0x09809389, 0x098093c9, 0x09809409, 0x09809449,
+	0x09809489, 0x07800508, 0x06c00008, 0x04840208, 0x0aa14008,
+	0x00000000, 0x098094c9, 0x09809509, 0x09809549, 0x060f4009,
+	0x0c0134c0, 0x00000000, 0x06490b08, 0x09c08608, 0x09808648,
+	0x06090b08, 0x06400908, 0x09808748, 0x09c08788, 0x06000908,
+	0x06400808, 0x09808008, 0x06000808, 0x09c08008, 0x06000808,
+	0x0c0139c0, 0x00000000, 0x0c013000, 0x00000000, 0x0c078a00,
+	0x00000000, 0x06400f08, 0x09808708, 0x06000f08, 0x064f4308,
+	0x09808008, 0x09c08048, 0x09808088, 0x09c080c8, 0x060f4308,
+	0x09c08008, 0x09808048, 0x09c08088, 0x098080c8, 0x060f4308,
+	0x064f3b08, 0x098087c8, 0x060f3b08, 0x09c087c8, 0x060f3b08,
+	0x064f1508, 0x09c08508, 0x09c084c8, 0x09808748, 0x09c08448,
+	0x09c08488, 0x09c08348, 0x09c08308, 0x09808248, 0x09808008,
+	0x060f1508, 0x09808508, 0x098084c8, 0x060f1508, 0x080d3400,
+	0x080f4a00, 0x09808488, 0x09808448, 0x09808348, 0x09808308,
+	0x098085c8, 0x09808608, 0x09808648, 0x09c08688, 0x098086c8,
+	0x09c08248, 0x09c08008, 0x060f1508, 0x064f4908, 0x09c08048,
+	0x09c081c8, 0x09808008, 0x060f4908, 0x098087c8, 0x09808788,
+	0x09808748, 0x098086c8, 0x09808688, 0x09808648, 0x09808608,
+	0x09808308, 0x09808288, 0x09c08248, 0x098081c8, 0x09808088,
+	0x09808048, 0x060f4908, 0x068000c8, 0x068000c9, 0x09484209,
+	0x068000c9, 0x09504209, 0x06800049, 0x09581209, 0x06800009,
+	0x095a1209, 0x06800049, 0x095c5209, 0x060f5908, 0x06800388,
+	0x06800489, 0x09508209, 0x06800149, 0x09604209, 0x068000c9,
+	0x09684209, 0x06800109, 0x09704209, 0x06800089, 0x09704209,
+	0x060f5a08, 0x06800008, 0x06800009, 0x09508209, 0x06800809,
+	0x09608209, 0x06801409, 0x09708209, 0x060f5b08, 0x06801008,
+	0x06800009, 0x09508209, 0x06801809, 0x09608209, 0x06803009,
+	0x09708209, 0x060f5c08, 0x06800608, 0x06801409, 0x09508209,
+	0x06800809, 0x09608209, 0x06801809, 0x09708209, 0x060f5d08,
+	0x068000c8, 0x06801809, 0x0948c209, 0x06800249, 0x09607209,
+	0x06800009, 0x096e1209, 0x06800c09, 0x09708209, 0x060f5e08,
+	0x068000c8, 0x06800009, 0x09461209, 0x06800049, 0x09481209,
+	0x06800009, 0x094a2209, 0x06803009, 0x0950c209, 0x06801c09,
+	0x0968c209, 0x060f5f08, 0x064d3109, 0x09010209, 0x0400f208,
+	0x05804208, 0x04401208, 0x07c00308, 0x09210209, 0x0400f208,
+	0x05804208, 0x04401208, 0x07c00348, 0x07800309, 0x07800348,
+	0x0958c248, 0x06499008, 0x09708248, 0x060f4f09, 0x06bc0008,
+	0x060d1f08, 0x064d1e08, 0x09c087c8, 0x060d1e08, 0x06800008,
+	0x06c00408, 0x060d1f08, 0x06800048, 0x06c00408, 0x060d1f08,
+	0x06a10408, 0x060d1f08, 0x064d1e08, 0x098087c8, 0x060d1e08,
+	0x064d3308, 0x09008248, 0x07c00089, 0x09108248, 0x07c000c9,
+	0x09210208, 0x0c076440, 0x060d2108, 0x0c0763c0, 0x080d2105,
+	0x06800048, 0x07c00248, 0x060f1b08, 0x07800309, 0x0946d209,
+	0x060d3208, 0x06803908, 0x064d3309, 0x09008249, 0x09508209,
+	0x09808508, 0x09808548, 0x098087c8, 0x060f1f08, 0x064ad508,
+	0x07c00448, 0x0ae0c008, 0x04001208, 0x06800008, 0x07c00488,
+	0x06800008, 0x07c00408, 0x07800308, 0x04001208, 0x07c004c8,
+	0x06bfffc8, 0x060d3708, 0x07800309, 0x07800348, 0x0960f248,
+	0x060f1e09, 0x0c075b80, 0x080d2100, 0x07800148, 0x07800189,
+	0x0680040a, 0x0240a20a, 0x03409289, 0x09605248, 0x060d1f09,
+	0x07800108, 0x07800209, 0x0680040a, 0x0240a20a, 0x03409289,
+	0x09605248, 0x060d1f09, 0x080d1f20, 0x080d1f20, 0x080d1f20,
+	0x064f1d08, 0x09206208, 0x04000248, 0x095a6248, 0x060f3c09,
+	0x07800049, 0x0c000a80, 0x02408248, 0x0c0754c0, 0x060d2108,
+	0x080d3d00, 0x080d5300, 0x064acd08, 0x060f4208, 0x0c001880,
+	0x00000000, 0x06813c83, 0x06819a84, 0x080d300f, 0x06800008,
+	0x06c00448, 0x060d2f08, 0x064d0008, 0x09c08008, 0x09c08048,
+	0x09c08088, 0x09c08188, 0x09c081c8, 0x060d0008, 0x09808008,
+	0x09808048, 0x09808088, 0x098080c8, 0x09808148, 0x09808188,
+	0x098081c8, 0x060d0008, 0x06800048, 0x07800309, 0x0948c209,
+	0x060f4b08, 0x080ac005, 0x0c780080, 0x08007801, 0x00800000,
+	0x07800008, 0x0c7f4300, 0x06030408, 0x06800009, 0x0b005248,
+	0x02409209, 0x05401208, 0x0cc00000, 0x04401208, 0x0cc00000,
+	0x05401209, 0x06bfffda, 0x06c0001a, 0x06800009, 0x0680001b,
+	0x06c0001b, 0x0400071b, 0x0680000b, 0x0680c00e, 0x0680100f,
+	0x0740039a, 0x0400138e, 0x07400389, 0x0400138e, 0x0740039b,
+	0x0400138e, 0x0740038b, 0x0400138e, 0x0aee004f, 0x044013cf,
 	0x0690000e, 0x06c0000e, 0x064ac10f, 0x0200e3ce, 0x0680000f,
-	0x0603510e, 0x06803f0d, 0x0603520d, 0x06a0c00d, 0x0603500d,
-	0x0643500d, 0x0580f34d, 0x0bef804d, 0x00000000, 0x040153cf,
-	0x0b611e8f, 0x06807e0d, 0x0c7ffd00, 0x0200e34e, 0x064d330d,
-	0x0900834d, 0x0680000e, 0x0680054f, 0x0b8053cd, 0x00000000,
-	0x0401538e, 0x0c7fff40, 0x040153cf, 0x07c0028e, 0x044013cf,
-	0x07c002cf, 0x060d371a, 0x060d391b, 0x060d4a1d, 0x060d4b1e,
-	0x060d4c1f, 0x060d4d20, 0x060d4a1d, 0x060d4a1d, 0x060d381a,
-	0x060d3a1b, 0x060d4e1d, 0x060d4f1e, 0x060d501f, 0x060d5120,
-	0x0cc00000, 0x00000000, 0x0aa28008, 0x064d1e0e, 0x064d1a0f,
-	0x0947d38f, 0x0240f88e, 0x07c0084f, 0x0400088e, 0x064d370e,
-	0x0cb80003, 0x064d390f, 0x0c7f1880, 0x00000000, 0x078004c8,
-	0x0b214048, 0x04401208, 0x07c004c8, 0x06bfffc9, 0x060d3709,
-	0x07800488, 0x0aa38008, 0x04401208, 0x0a630008, 0x07c00488,
-	0x0c00ce80, 0x00000000, 0x06bfffc9, 0x060d3709, 0x060d3809,
-	0x064ad508, 0x07c00488, 0x07800308, 0x04001208, 0x07c004c8,
-	0x064d3533, 0x064d3e08, 0x09104208, 0x09784cc8, 0x064d3b34,
-	0x064d3c35, 0x060d371a, 0x064d3510, 0x0908c250, 0x0a620009,
-	0x060d391b, 0x06bfffc9, 0x06c00009, 0x060d3809, 0x06800009,
-	0x06c00009, 0x060d3a09, 0x09004250, 0x0aa1c249, 0x080d3601,
-	0x080d3603, 0x080d3605, 0x080d3606, 0x0c7801c0, 0x00000000,
-	0x080d3602, 0x080d3603, 0x080d3604, 0x080d3605, 0x080d3606,
-	0x064d3708, 0x064d3e09, 0x080d360f, 0x0780080a, 0x0680400b,
-	0x0a8152ca, 0x0780084b, 0x0740028b, 0x06807ccb, 0x0b8112ca,
-	0x0400128a, 0x0680400b, 0x0240c2ca, 0x0603520c, 0x064ad20a,
-	0x0603510a, 0x06a0400b, 0x0603500b, 0x054012cc, 0x0200a2ca,
-	0x060ad20a, 0x0643500b, 0x0580f2cb, 0x0bef804b, 0x00000000,
-	0x0680400a, 0x09208333, 0x090882f3, 0x0950830b, 0x0740028c,
-	0x0400128a, 0x09384333, 0x090042f3, 0x0950830b, 0x0740028c,
-	0x0400128a, 0x09210334, 0x0740028c, 0x0400128a, 0x074002b4,
-	0x0400128a, 0x09210335, 0x0740028c, 0x0400128a, 0x074002b5,
-	0x0400128a, 0x09346208, 0x09508248, 0x07400289, 0x0400128a,
-	0x078008c8, 0x04001208, 0x07c008c8, 0x04803208, 0x064f6809,
-	0x0aa28008, 0x064f640b, 0x064f6509, 0x0aa1c048, 0x064f610b,
-	0x064f6609, 0x0aa10088, 0x064f620b, 0x064f6709, 0x064f630b,
-	0x07400289, 0x0400128a, 0x0740028b, 0x0400128a, 0x06800009,
-	0x07400289, 0x0400128a, 0x07400289, 0x0400128a, 0x07c0080a,
-	0x0908c210, 0x0680c10a, 0x07800289, 0x0a814248, 0x02409248,
-	0x04401249, 0x05402249, 0x0680c00a, 0x0200a289, 0x0740028e,
-	0x0400128a, 0x0581038e, 0x0740028e, 0x0400128a, 0x0740028f,
-	0x0400128a, 0x058103cf, 0x0740028f, 0x0400528a, 0x078002c9,
-	0x0b40d248, 0x07800309, 0x0b40b248, 0x0700029a, 0x0400128a,
-	0x0700028e, 0x0961068e, 0x0400128a, 0x0700029b, 0x0400128a,
-	0x0700028f, 0x0c7ef0c0, 0x096106cf, 0x0908c210, 0x07800289,
-	0x02409248, 0x05402249, 0x0680c00a, 0x0200a289, 0x064d0009,
-	0x09384249, 0x0a6f8009, 0x00000000, 0x064d3609, 0x0a6ec009,
-	0x00000000, 0x064d370e, 0x064d390f, 0x0740028e, 0x0400128a,
-	0x0581038e, 0x0740028e, 0x0400128a, 0x0740028f, 0x0400128a,
-	0x058103cf, 0x0740028f, 0x0400128a, 0x0690000e, 0x06c0000e,
-	0x064ac10f, 0x0200e3ce, 0x0780028f, 0x054033cf, 0x0200e3ce,
 	0x0603510e, 0x0680400d, 0x0603520d, 0x06a0c00d, 0x0603500d,
-	0x0908c210, 0x07800309, 0x0b848248, 0x04001208, 0x0920c210,
-	0x07800349, 0x0b844248, 0x06800008, 0x080d3000, 0x080d1f30,
-	0x06bc0008, 0x060d1f08, 0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x00000000, 0x00000000, 0x064d1608, 0x0befc108,
-	0x00000000, 0x06800008, 0x06e00008, 0x060d1c08, 0x080d1d00,
+	0x0643500d, 0x0580f34d, 0x0bef804d, 0x00000000, 0x040403cf,
+	0x0b611e8f, 0x0680800d, 0x0c7ffd00, 0x0200e34e, 0x064d330d,
+	0x0900834d, 0x0680000e, 0x0680100f, 0x0b8053cd, 0x00000000,
+	0x0404038e, 0x0c7fff40, 0x040403cf, 0x07c0028e, 0x044013cf,
+	0x07c002cf, 0x060d371a, 0x060d391b, 0x060d381a, 0x060d3a1b,
+	0x0cc00000, 0x00000000, 0x08098002, 0x08098000, 0x06a0001d,
+	0x06d0001d, 0x06a0001e, 0x06d0001e, 0x06a0001f, 0x06d0001f,
+	0x06a00020, 0x06d00020, 0x0690000a, 0x06bfffda, 0x06c0001a,
+	0x0400085a, 0x0680000d, 0x0680001b, 0x06c0001b, 0x0400071b,
+	0x06800009, 0x0680c00e, 0x0680054f, 0x0740039a, 0x0400138e,
+	0x0740038d, 0x0400138e, 0x0740039b, 0x0400138e, 0x07400389,
+	0x0400138e, 0x0740039d, 0x0400138e, 0x0740038a, 0x0400138e,
+	0x0740039e, 0x0400138e, 0x0740038a, 0x0400138e, 0x0740039f,
+	0x0400138e, 0x0740038a, 0x0400138e, 0x074003a0, 0x0400138e,
+	0x0740038a, 0x0400138e, 0x0aea004f, 0x044013cf, 0x0690000e,
+	0x06c0000e, 0x064ac10f, 0x0200e3ce, 0x0680000f, 0x0603510e,
+	0x06803f0d, 0x0603520d, 0x06a0c00d, 0x0603500d, 0x0643500d,
+	0x0580f34d, 0x0bef804d, 0x00000000, 0x040153cf, 0x0b611e8f,
+	0x06807e0d, 0x0c7ffd00, 0x0200e34e, 0x064d330d, 0x0900834d,
+	0x0680000e, 0x0680054f, 0x0b8053cd, 0x00000000, 0x0401538e,
+	0x0c7fff40, 0x040153cf, 0x07c0028e, 0x044013cf, 0x07c002cf,
+	0x060d371a, 0x060d391b, 0x060d4a1d, 0x060d4b1e, 0x060d4c1f,
+	0x060d4d20, 0x060d4a1d, 0x060d4a1d, 0x060d381a, 0x060d3a1b,
+	0x060d4e1d, 0x060d4f1e, 0x060d501f, 0x060d5120, 0x0cc00000,
+	0x00000000, 0x0aa28008, 0x064d1e0e, 0x064d1a0f, 0x0947d38f,
+	0x0240f88e, 0x07c0084f, 0x0400088e, 0x064d370e, 0x0cb80003,
+	0x064d390f, 0x0c7f1880, 0x00000000, 0x078004c8, 0x0b214048,
+	0x04401208, 0x07c004c8, 0x06bfffc9, 0x060d3709, 0x07800488,
+	0x0aa38008, 0x04401208, 0x0a630008, 0x07c00488, 0x0c00ce80,
+	0x00000000, 0x06bfffc9, 0x060d3709, 0x060d3809, 0x064ad508,
+	0x07c00488, 0x07800308, 0x04001208, 0x07c004c8, 0x064d3533,
+	0x064d3e08, 0x09104208, 0x09784cc8, 0x064d3b34, 0x064d3c35,
+	0x060d371a, 0x064d3510, 0x0908c250, 0x0a620009, 0x060d391b,
+	0x06bfffc9, 0x06c00009, 0x060d3809, 0x06800009, 0x06c00009,
+	0x060d3a09, 0x09004250, 0x0aa1c249, 0x080d3601, 0x080d3603,
+	0x080d3605, 0x080d3606, 0x0c7801c0, 0x00000000, 0x080d3602,
+	0x080d3603, 0x080d3604, 0x080d3605, 0x080d3606, 0x064d3708,
+	0x064d3e09, 0x080d360f, 0x0780080a, 0x0680400b, 0x0a8152ca,
+	0x0780084b, 0x0740028b, 0x06807ccb, 0x0b8112ca, 0x0400128a,
+	0x0680400b, 0x0240c2ca, 0x0603520c, 0x064ad20a, 0x0603510a,
+	0x06a0400b, 0x0603500b, 0x054012cc, 0x0200a2ca, 0x060ad20a,
+	0x0643500b, 0x0580f2cb, 0x0bef804b, 0x00000000, 0x0680400a,
+	0x09208333, 0x090882f3, 0x0950830b, 0x0740028c, 0x0400128a,
+	0x09384333, 0x090042f3, 0x0950830b, 0x0740028c, 0x0400128a,
+	0x09210334, 0x0740028c, 0x0400128a, 0x074002b4, 0x0400128a,
+	0x09210335, 0x0740028c, 0x0400128a, 0x074002b5, 0x0400128a,
+	0x09346208, 0x09508248, 0x07400289, 0x0400128a, 0x078008c8,
+	0x04001208, 0x07c008c8, 0x04803208, 0x064f6809, 0x0aa28008,
+	0x064f640b, 0x064f6509, 0x0aa1c048, 0x064f610b, 0x064f6609,
+	0x0aa10088, 0x064f620b, 0x064f6709, 0x064f630b, 0x07400289,
+	0x0400128a, 0x0740028b, 0x0400128a, 0x06800009, 0x07400289,
+	0x0400128a, 0x07400289, 0x0400128a, 0x07c0080a, 0x0908c210,
+	0x0680c10a, 0x07800289, 0x0a814248, 0x02409248, 0x04401249,
+	0x05402249, 0x0680c00a, 0x0200a289, 0x0740028e, 0x0400128a,
+	0x0581038e, 0x0740028e, 0x0400128a, 0x0740028f, 0x0400128a,
+	0x058103cf, 0x0740028f, 0x0400528a, 0x078002c9, 0x0b40d248,
+	0x07800309, 0x0b40b248, 0x0700029a, 0x0400128a, 0x0700028e,
+	0x0961068e, 0x0400128a, 0x0700029b, 0x0400128a, 0x0700028f,
+	0x0c7ef0c0, 0x096106cf, 0x0908c210, 0x07800289, 0x02409248,
+	0x05402249, 0x0680c00a, 0x0200a289, 0x064d0009, 0x09384249,
+	0x0a6f8009, 0x00000000, 0x064d3609, 0x0a6ec009, 0x00000000,
+	0x064d370e, 0x064d390f, 0x0740028e, 0x0400128a, 0x0581038e,
+	0x0740028e, 0x0400128a, 0x0740028f, 0x0400128a, 0x058103cf,
+	0x0740028f, 0x0400128a, 0x0690000e, 0x06c0000e, 0x064ac10f,
+	0x0200e3ce, 0x0780028f, 0x054033cf, 0x0200e3ce, 0x0603510e,
+	0x0680400d, 0x0603520d, 0x06a0c00d, 0x0603500d, 0x0908c210,
+	0x07800309, 0x0b848248, 0x04001208, 0x0920c210, 0x07800349,
+	0x0b844248, 0x06800008, 0x080d3000, 0x080d1f30, 0x06bc0008,
+	0x060d1f08, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x064d1608, 0x0befc108, 0x00000000,
+	0x06800008, 0x06e00008, 0x060d1c08, 0x080d1d00, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x064d1608, 0x0befc108, 0x00000000, 0x064d1b08,
-	0x09808648, 0x060d1b08, 0x064d1608, 0x0befc108, 0x00000000,
-	0x0643500b, 0x0580f2cb, 0x0bef804b, 0x00000000, 0x0780080a,
-	0x0780084b, 0x0740028b, 0x0400128a, 0x0680400b, 0x0240c2ca,
+	0x064d1608, 0x0befc108, 0x00000000, 0x064d1b08, 0x09808648,
+	0x060d1b08, 0x064d1608, 0x0befc108, 0x00000000, 0x0643500b,
+	0x0580f2cb, 0x0bef804b, 0x00000000, 0x0780080a, 0x0780084b,
+	0x0740028b, 0x0400128a, 0x0680400b, 0x0240c2ca, 0x0603520c,
+	0x064ad20a, 0x0603510a, 0x06a0400b, 0x0603500b, 0x0643500b,
+	0x0580f2cb, 0x0bef804b, 0x00000000, 0x07800188, 0x04001208,
+	0x07c00188, 0x07800208, 0x04002208, 0x07c00208, 0x080ac009,
+	0x06800022, 0x06804008, 0x07c00808, 0x07c008c8, 0x06800008,
+	0x07c00888, 0x0c7ed500, 0x08007801, 0x07c00288, 0x0403f248,
+	0x07c002c9, 0x05403208, 0x0690000e, 0x06c0000e, 0x064ac10f,
+	0x0200e3ce, 0x0200e20e, 0x0680400f, 0x06b0c010, 0x0643500d,
+	0x0580f34d, 0x0bef804d, 0x00000000, 0x0643530d, 0x0900c34d,
+	0x0a6f800d, 0x00000000, 0x0603510e, 0x0603520f, 0x06035010,
+	0x0643500d, 0x0580f34d, 0x0bef804d, 0x00000000, 0x0c7fdb40,
+	0x0680c00a, 0x078004c8, 0x0b224048, 0x04401208, 0x07c004c8,
+	0x06a00089, 0x06f00009, 0x060d4c09, 0x0b20c048, 0x00000000,
+	0x060d4d09, 0x07800488, 0x0aa44008, 0x04401208, 0x0a63c008,
+	0x07c00488, 0x0c009300, 0x00000000, 0x06bfffc9, 0x060d3809,
+	0x06a00089, 0x06f00009, 0x060d4c09, 0x060d4d09, 0x064ad508,
+	0x07c00488, 0x07800308, 0x04001208, 0x07c004c8, 0x064d4a11,
+	0x064d4b12, 0x064d4c13, 0x064d4d14, 0x060d4a1d, 0x060d4b1e,
+	0x060d4c1f, 0x060d4d20, 0x060d371a, 0x064d3510, 0x0908c250,
+	0x0a638009, 0x060d391b, 0x06a00009, 0x06d00009, 0x060d4e09,
+	0x060d4f09, 0x060d5009, 0x060d5109, 0x06bfffc9, 0x06c00009,
+	0x060d3809, 0x06800009, 0x06c00009, 0x060d3a09, 0x064d3533,
+	0x09004250, 0x0b62c249, 0x080d3607, 0x080d3601, 0x0c009a80,
+	0x080d3608, 0x080d3609, 0x080d3604, 0x080d3605, 0x080d3606,
+	0x0c780500, 0x00000000, 0x064d3e08, 0x09104208, 0x09784cc8,
+	0x064d3b34, 0x064d3c35, 0x080d5201, 0x0aa1c249, 0x080d3601,
+	0x080d3603, 0x080d3605, 0x080d3606, 0x0c7801c0, 0x00000000,
+	0x080d3602, 0x080d3603, 0x080d3604, 0x080d3605, 0x080d3606,
+	0x064d0009, 0x09384249, 0x0aaf8209, 0x00000000, 0x09004373,
+	0x064d3e09, 0x064d3708, 0x080d360f, 0x0780080a, 0x0680400b,
+	0x0a8172ca, 0x0780084b, 0x0740028b, 0x0a60c20d, 0x06807ccb,
+	0x068075cb, 0x0b8112ca, 0x0400128a, 0x0680400b, 0x0240c2ca,
 	0x0603520c, 0x064ad20a, 0x0603510a, 0x06a0400b, 0x0603500b,
-	0x0643500b, 0x0580f2cb, 0x0bef804b, 0x00000000, 0x07800188,
-	0x04001208, 0x07c00188, 0x07800208, 0x04002208, 0x07c00208,
-	0x080ac009, 0x06800022, 0x06804008, 0x07c00808, 0x07c008c8,
-	0x06800008, 0x07c00888, 0x0c7ed500, 0x08007801, 0x07c00288,
-	0x0403f248, 0x07c002c9, 0x05403208, 0x0690000e, 0x06c0000e,
-	0x064ac10f, 0x0200e3ce, 0x0200e20e, 0x0680400f, 0x06b0c010,
-	0x0643500d, 0x0580f34d, 0x0bef804d, 0x00000000, 0x0643530d,
-	0x0900c34d, 0x0a6f800d, 0x00000000, 0x0603510e, 0x0603520f,
-	0x06035010, 0x0643500d, 0x0580f34d, 0x0bef804d, 0x00000000,
-	0x0c7fdb40, 0x0680c00a, 0x078004c8, 0x0b224048, 0x04401208,
-	0x07c004c8, 0x06a00089, 0x06f00009, 0x060d4c09, 0x0b20c048,
-	0x00000000, 0x060d4d09, 0x07800488, 0x0aa44008, 0x04401208,
-	0x0a63c008, 0x07c00488, 0x0c009300, 0x00000000, 0x06bfffc9,
-	0x060d3809, 0x06a00089, 0x06f00009, 0x060d4c09, 0x060d4d09,
-	0x064ad508, 0x07c00488, 0x07800308, 0x04001208, 0x07c004c8,
-	0x064d4a11, 0x064d4b12, 0x064d4c13, 0x064d4d14, 0x060d4a1d,
-	0x060d4b1e, 0x060d4c1f, 0x060d4d20, 0x060d371a, 0x064d3510,
-	0x0908c250, 0x0a638009, 0x060d391b, 0x06a00009, 0x06d00009,
-	0x060d4e09, 0x060d4f09, 0x060d5009, 0x060d5109, 0x06bfffc9,
-	0x06c00009, 0x060d3809, 0x06800009, 0x06c00009, 0x060d3a09,
-	0x064d3533, 0x09004250, 0x0b62c249, 0x080d3607, 0x080d3601,
-	0x0c009a80, 0x080d3608, 0x080d3609, 0x080d3604, 0x080d3605,
-	0x080d3606, 0x0c780500, 0x00000000, 0x064d3e08, 0x09104208,
-	0x09784cc8, 0x064d3b34, 0x064d3c35, 0x080d5201, 0x0aa1c249,
-	0x080d3601, 0x080d3603, 0x080d3605, 0x080d3606, 0x0c7801c0,
-	0x00000000, 0x080d3602, 0x080d3603, 0x080d3604, 0x080d3605,
-	0x080d3606, 0x064d0009, 0x09384249, 0x0aaf8209, 0x00000000,
-	0x09004373, 0x064d3e09, 0x064d3708, 0x080d360f, 0x0780080a,
-	0x0680400b, 0x0a8172ca, 0x0780084b, 0x0740028b, 0x0a60c20d,
-	0x06807ccb, 0x068075cb, 0x0b8112ca, 0x0400128a, 0x0680400b,
-	0x0240c2ca, 0x0603520c, 0x064ad20a, 0x0603510a, 0x06a0400b,
-	0x0603500b, 0x054012cc, 0x0200a2ca, 0x060ad20a, 0x0643500b,
-	0x0580f2cb, 0x0bef804b, 0x00000000, 0x0680400a, 0x09208333,
-	0x090882f3, 0x0950830b, 0x0740028c, 0x0400128a, 0x09384333,
-	0x064d3533, 0x090042f3, 0x0950830b, 0x0740028c, 0x0400128a,
-	0x0b66024d, 0x09210323, 0x0740028c, 0x0400128a, 0x074002a3,
-	0x0400128a, 0x0aa300cd, 0x0a61820d, 0x0921032b, 0x0c008c40,
-	0x00000000, 0x0c7805c0, 0x00000000, 0x0740028c, 0x0400128a,
-	0x074002ab, 0x0c780480, 0x0400128a, 0x09210327, 0x0740028c,
-	0x0400128a, 0x074002a7, 0x0c780300, 0x0400128a, 0x09210334,
-	0x0740028c, 0x0400128a, 0x074002b4, 0x0400128a, 0x09210335,
-	0x0740028c, 0x0400128a, 0x074002b5, 0x0400128a, 0x09346208,
-	0x09508248, 0x07400289, 0x0400128a, 0x078008c8, 0x04001208,
-	0x07c008c8, 0x04803208, 0x064f6809, 0x0aa28008, 0x064f640b,
-	0x064f6509, 0x0aa1c048, 0x064f610b, 0x064f6609, 0x0aa10088,
-	0x064f620b, 0x064f6709, 0x064f630b, 0x07400289, 0x0400128a,
-	0x0740028b, 0x0400128a, 0x06800009, 0x07400289, 0x0400128a,
-	0x07400289, 0x0400128a, 0x07c0080a, 0x0908c210, 0x0aa10008,
-	0x0680bfca, 0x0c000f00, 0x04401208, 0x0908c210, 0x07800309,
-	0x0b82c248, 0x00000000, 0x064d0009, 0x09384249, 0x0a6f8009,
-	0x00000000, 0x064d3609, 0x0a6ec009, 0x00000000, 0x0920c290,
-	0x07800349, 0x0b80c24a, 0x00000000, 0x064d5309, 0x0aa1c009,
-	0x00000000, 0x060d2109, 0x080d2001, 0x064d2009, 0x0befc049,
-	0x00000000, 0x0c7fb1c0, 0x00000000, 0x064d370e, 0x064d390f,
-	0x064d4a11, 0x064d4b12, 0x064d4c13, 0x064d4d14, 0x0c0006c0,
-	0x07800308, 0x0c000f80, 0x06800011, 0x06a00014, 0x06d00014,
-	0x060d4d14, 0x0c001900, 0x0680c00a, 0x060d4a1d, 0x060d4b1e,
-	0x060d4c1f, 0x060d4d20, 0x0c780280, 0x0680c30a, 0x0401928a,
-	0x0908c210, 0x04002208, 0x078002c9, 0x0b004248, 0x0c000b00,
-	0x0908c450, 0x0680c60a, 0x0c001500, 0x00000000, 0x0c7e8e80,
-	0x00000000, 0x07800289, 0x0240a248, 0x0540324a, 0x0540228a,
-	0x02009289, 0x0680c00a, 0x0200a289, 0x0740028e, 0x0400128a,
-	0x0581038e, 0x0740028e, 0x0400128a, 0x0740028f, 0x0400128a,
-	0x058103cf, 0x0740028f, 0x0400128a, 0x07400291, 0x0400128a,
-	0x05810451, 0x07400291, 0x0400128a, 0x07400292, 0x0400128a,
-	0x05810492, 0x07400292, 0x0400128a, 0x07400293, 0x0400128a,
-	0x058104d3, 0x07400293, 0x0400128a, 0x07400294, 0x0400128a,
-	0x05810514, 0x0cc00000, 0x07400294, 0x0690000e, 0x06c0000e,
-	0x064ac10f, 0x0200e3ce, 0x0780028f, 0x0540434f, 0x054033cf,
-	0x0200f34f, 0x0200e3ce, 0x0603510e, 0x06803f0d, 0x0603520d,
-	0x06a0c00d, 0x0603500d, 0x07c00291, 0x04014251, 0x07c002c9,
-	0x05404251, 0x05403211, 0x02008248, 0x0690000e, 0x06c0000e,
-	0x064ac10f, 0x0200e3ce, 0x0200e20e, 0x06803f0f, 0x06b0c010,
-	0x0643500d, 0x0580f34d, 0x0bef804d, 0x00000000, 0x0643530d,
-	0x0900c34d, 0x0a6f800d, 0x00000000, 0x0603510e, 0x0603520f,
-	0x06035010, 0x0643500d, 0x0580f34d, 0x0bef804d, 0x0cc00000,
-	0x00000000, 0x040006a1, 0x070002a1, 0x0400128a, 0x07000289,
-	0x09610849, 0x0400128a, 0x040006dc, 0x0700029c, 0x0400128a,
-	0x07000289, 0x09610709, 0x0400128a, 0x0700029d, 0x0400128a,
-	0x07000289, 0x09610749, 0x0400128a, 0x0700029e, 0x0400128a,
-	0x07000289, 0x09610789, 0x0400128a, 0x0700029f, 0x0400128a,
-	0x07000289, 0x096107c9, 0x0400128a, 0x070002a0, 0x0400128a,
-	0x07000289, 0x0cc00000, 0x09610809, 0x064d1602, 0x09162082,
-	0x0aa0c002, 0x0c7fff40, 0x00000000, 0x0c7e70c0, 0x00000000,
-	0x080f3601, 0x0cb80004, 0x064f3e08, 0x0be0c088, 0x0c780e40,
-	0x00000000, 0x080f3e02, 0x064f1f08, 0x09361248, 0x0aa10009,
-	0x09042248, 0x0c7e6d80, 0x00000000, 0x0aa14009, 0x0680324a,
-	0x0aa0c049, 0x0680348a, 0x0680390a, 0x07800088, 0x07800309,
-	0x0b809248, 0x04001208, 0x078000c9, 0x07800348, 0x0b803209,
-	0x04001249, 0x06800009, 0x07c000c9, 0x06800008, 0x07c00088,
-	0x0950c288, 0x0a60c008, 0x07800309, 0x0980a50a, 0x0a403248,
-	0x00000000, 0x0980a58a, 0x078000c8, 0x0a60c008, 0x060f4108,
-	0x0980a54a, 0x07800408, 0x0ac03248, 0x04001208, 0x0980a5ca,
-	0x0ac03248, 0x07c00408, 0x0980a54a, 0x07800448, 0x0aa28008,
-	0x04401208, 0x0a620008, 0x07c00448, 0x0980a50a, 0x0980a54a,
-	0x064ad508, 0x07c00448, 0x06800008, 0x07c00408, 0x0980a7ca,
-	0x060f1f0a, 0x064f3e08, 0x0be0c108, 0x0c7e6080, 0x00000000,
-	0x064f4b08, 0x09384248, 0x0aa10009, 0x064f4a08, 0x0c7e5f00,
-	0x00000000, 0x080f3e04, 0x0920c248, 0x0780034a, 0x0b408289,
-	0x04001249, 0x0960c209, 0x060f4a08, 0x06800048, 0x07800309,
-	0x0948c209, 0x060f4b08, 0x0c7e5bc0, 0x00000000, 0x0680c008,
-	0x06094008, 0x06803009, 0x06804008, 0x0d000009, 0x06094108,
-	0x06800008, 0x06094008, 0x0cc00000, 0x00000000, 0x0cc00000,
-	0x00000000, 0x0c000ac0, 0x00000000, 0x0780034a, 0x0400128a,
-	0x040002ca, 0x07800309, 0x04001249, 0x096102c9, 0x0609520b,
-	0x054042ca, 0x0968c2c9, 0x0609080b, 0x0681010a, 0x06c3474a,
-	0x0609070a, 0x06490b0a, 0x0980a00a, 0x0980a0ca, 0x06090b0a,
-	0x09c0a00a, 0x09c0a0ca, 0x06090b0a, 0x0698000a, 0x06c0000a,
-	0x064ac109, 0x0200a24a, 0x0609440a, 0x060f370a, 0x06a0000a,
-	0x06c0000a, 0x0200a24a, 0x0609450a, 0x060f380a, 0x0cc00000,
-	0x00000000, 0x0c0005c0, 0x00000000, 0x08095003, 0x08095000,
-	0x06820889, 0x06c00209, 0x0cc00000, 0x06095109, 0x0683ffc9,
-	0x0649090a, 0x0a21004a, 0x0aa0c009, 0x0c7fff40, 0x04401249,
+	0x054012cc, 0x0200a2ca, 0x060ad20a, 0x0643500b, 0x0580f2cb,
+	0x0bef804b, 0x00000000, 0x0680400a, 0x09208333, 0x090882f3,
+	0x0950830b, 0x0740028c, 0x0400128a, 0x09384333, 0x064d3533,
+	0x090042f3, 0x0950830b, 0x0740028c, 0x0400128a, 0x0b66024d,
+	0x09210323, 0x0740028c, 0x0400128a, 0x074002a3, 0x0400128a,
+	0x0aa300cd, 0x0a61820d, 0x0921032b, 0x0c008c40, 0x00000000,
+	0x0c7805c0, 0x00000000, 0x0740028c, 0x0400128a, 0x074002ab,
+	0x0c780480, 0x0400128a, 0x09210327, 0x0740028c, 0x0400128a,
+	0x074002a7, 0x0c780300, 0x0400128a, 0x09210334, 0x0740028c,
+	0x0400128a, 0x074002b4, 0x0400128a, 0x09210335, 0x0740028c,
+	0x0400128a, 0x074002b5, 0x0400128a, 0x09346208, 0x09508248,
+	0x07400289, 0x0400128a, 0x078008c8, 0x04001208, 0x07c008c8,
+	0x04803208, 0x064f6809, 0x0aa28008, 0x064f640b, 0x064f6509,
+	0x0aa1c048, 0x064f610b, 0x064f6609, 0x0aa10088, 0x064f620b,
+	0x064f6709, 0x064f630b, 0x07400289, 0x0400128a, 0x0740028b,
+	0x0400128a, 0x06800009, 0x07400289, 0x0400128a, 0x07400289,
+	0x0400128a, 0x07c0080a, 0x0908c210, 0x0aa10008, 0x0680bfca,
+	0x0c000f00, 0x04401208, 0x0908c210, 0x07800309, 0x0b82c248,
+	0x00000000, 0x064d0009, 0x09384249, 0x0a6f8009, 0x00000000,
+	0x064d3609, 0x0a6ec009, 0x00000000, 0x0920c290, 0x07800349,
+	0x0b80c24a, 0x00000000, 0x064d5309, 0x0aa1c009, 0x00000000,
+	0x060d2109, 0x080d2001, 0x064d2009, 0x0befc049, 0x00000000,
+	0x0c7fb1c0, 0x00000000, 0x064d370e, 0x064d390f, 0x064d4a11,
+	0x064d4b12, 0x064d4c13, 0x064d4d14, 0x0c0006c0, 0x07800308,
+	0x0c000f80, 0x06800011, 0x06a00014, 0x06d00014, 0x060d4d14,
+	0x0c001900, 0x0680c00a, 0x060d4a1d, 0x060d4b1e, 0x060d4c1f,
+	0x060d4d20, 0x0c780280, 0x0680c30a, 0x0401928a, 0x0908c210,
+	0x04002208, 0x078002c9, 0x0b004248, 0x0c000b00, 0x0908c450,
+	0x0680c60a, 0x0c001500, 0x00000000, 0x0c7e8e80, 0x00000000,
+	0x07800289, 0x0240a248, 0x0540324a, 0x0540228a, 0x02009289,
+	0x0680c00a, 0x0200a289, 0x0740028e, 0x0400128a, 0x0581038e,
+	0x0740028e, 0x0400128a, 0x0740028f, 0x0400128a, 0x058103cf,
+	0x0740028f, 0x0400128a, 0x07400291, 0x0400128a, 0x05810451,
+	0x07400291, 0x0400128a, 0x07400292, 0x0400128a, 0x05810492,
+	0x07400292, 0x0400128a, 0x07400293, 0x0400128a, 0x058104d3,
+	0x07400293, 0x0400128a, 0x07400294, 0x0400128a, 0x05810514,
+	0x0cc00000, 0x07400294, 0x0690000e, 0x06c0000e, 0x064ac10f,
+	0x0200e3ce, 0x0780028f, 0x0540434f, 0x054033cf, 0x0200f34f,
+	0x0200e3ce, 0x0603510e, 0x06803f0d, 0x0603520d, 0x06a0c00d,
+	0x0603500d, 0x07c00291, 0x04014251, 0x07c002c9, 0x05404251,
+	0x05403211, 0x02008248, 0x0690000e, 0x06c0000e, 0x064ac10f,
+	0x0200e3ce, 0x0200e20e, 0x06803f0f, 0x06b0c010, 0x0643500d,
+	0x0580f34d, 0x0bef804d, 0x00000000, 0x0643530d, 0x0900c34d,
+	0x0a6f800d, 0x00000000, 0x0603510e, 0x0603520f, 0x06035010,
+	0x0643500d, 0x0580f34d, 0x0bef804d, 0x0cc00000, 0x00000000,
+	0x040006a1, 0x070002a1, 0x0400128a, 0x07000289, 0x09610849,
+	0x0400128a, 0x040006dc, 0x0700029c, 0x0400128a, 0x07000289,
+	0x09610709, 0x0400128a, 0x0700029d, 0x0400128a, 0x07000289,
+	0x09610749, 0x0400128a, 0x0700029e, 0x0400128a, 0x07000289,
+	0x09610789, 0x0400128a, 0x0700029f, 0x0400128a, 0x07000289,
+	0x096107c9, 0x0400128a, 0x070002a0, 0x0400128a, 0x07000289,
+	0x0cc00000, 0x09610809, 0x064d1602, 0x09162082, 0x0aa0c002,
+	0x0c7fff40, 0x00000000, 0x0c7e70c0, 0x00000000, 0x080f3601,
+	0x0cb80004, 0x064f3e08, 0x0be0c088, 0x0c780e40, 0x00000000,
+	0x080f3e02, 0x064f1f08, 0x09361248, 0x0aa10009, 0x09042248,
+	0x0c7e6d80, 0x00000000, 0x0aa14009, 0x0680324a, 0x0aa0c049,
+	0x0680348a, 0x0680390a, 0x07800088, 0x07800309, 0x0b809248,
+	0x04001208, 0x078000c9, 0x07800348, 0x0b803209, 0x04001249,
+	0x06800009, 0x07c000c9, 0x06800008, 0x07c00088, 0x0950c288,
+	0x0a60c008, 0x07800309, 0x0980a50a, 0x0a403248, 0x00000000,
+	0x0980a58a, 0x078000c8, 0x0a60c008, 0x060f4108, 0x0980a54a,
+	0x07800408, 0x0ac03248, 0x04001208, 0x0980a5ca, 0x0ac03248,
+	0x07c00408, 0x0980a54a, 0x07800448, 0x0aa28008, 0x04401208,
+	0x0a620008, 0x07c00448, 0x0980a50a, 0x0980a54a, 0x064ad508,
+	0x07c00448, 0x06800008, 0x07c00408, 0x0980a7ca, 0x060f1f0a,
+	0x064f3e08, 0x0be0c108, 0x0c7e6080, 0x00000000, 0x064f4b08,
+	0x09384248, 0x0aa10009, 0x064f4a08, 0x0c7e5f00, 0x00000000,
+	0x080f3e04, 0x0920c248, 0x0780034a, 0x0b408289, 0x04001249,
+	0x0960c209, 0x060f4a08, 0x06800048, 0x07800309, 0x0948c209,
+	0x060f4b08, 0x0c7e5bc0, 0x00000000, 0x0680c008, 0x06094008,
+	0x06803009, 0x06804008, 0x0d000009, 0x06094108, 0x06800008,
+	0x06094008, 0x0cc00000, 0x00000000, 0x0cc00000, 0x00000000,
+	0x0c000ac0, 0x00000000, 0x0780034a, 0x0400128a, 0x040002ca,
+	0x07800309, 0x04001249, 0x096102c9, 0x0609520b, 0x054042ca,
+	0x0968c2c9, 0x0609080b, 0x0681010a, 0x06c3474a, 0x0609070a,
 	0x06490b0a, 0x0980a00a, 0x0980a0ca, 0x06090b0a, 0x09c0a00a,
-	0x09c0a0ca, 0x06090b0a, 0x0cc00000, 0x00000000, 0x0683ffca,
-	0x0649530b, 0x090012cb, 0x0649bb09, 0x0920c249, 0x020092c9,
-	0x0aa10009, 0x0aa0c00a, 0x0c7ffe40, 0x0440128a, 0x0cc00000,
-	0x00000000, 0x080d1f30, 0x06bc0008, 0x060d1f08, 0x064d1e08,
-	0x09c087c8, 0x060d1e08, 0x06800008, 0x06c00408, 0x060d1f08,
-	0x06800048, 0x06c00408, 0x060d1f08, 0x06a19408, 0x060d1f08,
-	0x064d1e08, 0x098087c8, 0x060d1e08, 0x064d3508, 0x0920c248,
-	0x0780030a, 0x0400128a, 0x0e00024a, 0x0908c208, 0x09508209,
-	0x064d3509, 0x0908c249, 0x0f000280, 0x0200a24a, 0x0961020a,
-	0x060d3308, 0x0c064780, 0x060d210a, 0x0c064700, 0x080d2107,
-	0x0c064680, 0x080d2100, 0x07800148, 0x07800189, 0x0680040a,
-	0x0240a20a, 0x03409289, 0x09605248, 0x060d1f09, 0x078001c8,
-	0x0c064400, 0x060d2108, 0x07800108, 0x07800209, 0x0680040a,
-	0x0240a20a, 0x03409289, 0x09605248, 0x060d1f09, 0x080d1f20,
-	0x080d1f20, 0x064f1a08, 0x09086208, 0x07800049, 0x0c06f5c0,
-	0x02408248, 0x0c064000, 0x060d2108, 0x0cc00000, 0x00000000,
-	0x064d5308, 0x0aa1c008, 0x00000000, 0x060d2108, 0x080d2001,
-	0x064d2008, 0x0befc048, 0x00000000, 0x080d5300, 0x080d1f30,
-	0x06bc0008, 0x060d1f08, 0x064d1e08, 0x09c087c8, 0x060d1e08,
-	0x06800008, 0x06c00408, 0x060d1f08, 0x06800048, 0x06c00408,
-	0x060d1f08, 0x06a10408, 0x060d1f08, 0x064d1e08, 0x098087c8,
-	0x060d1e08, 0x064d3508, 0x0920c248, 0x0780030a, 0x0400128a,
-	0x0e00024a, 0x0908c208, 0x09508209, 0x064d3509, 0x0908c249,
-	0x0f000280, 0x0200a24a, 0x0961020a, 0x060d3308, 0x0c063540,
-	0x060d210a, 0x0c0634c0, 0x080d2105, 0x0c063440, 0x080d2100,
-	0x07800148, 0x07800189, 0x0680040a, 0x0240a20a, 0x03409289,
-	0x09605248, 0x060d1f09, 0x07800108, 0x07800209, 0x0680040a,
-	0x0240a20a, 0x03409289, 0x09605248, 0x060d1f09, 0x080d1f20,
-	0x080d1f20, 0x080d1f20, 0x064f1a08, 0x092e2248, 0x0aaf8009,
-	0x09086208, 0x07800049, 0x0c06e380, 0x02408248, 0x0c062dc0,
-	0x060d2108, 0x0cc00000, 0x00000000, 0x064d340a, 0x091c128a,
-	0x0aaf800a, 0x080d4800, 0x064d4923, 0x064d4924, 0x064d4925,
-	0x064d4926, 0x064d4927, 0x064d4928, 0x064d4929, 0x064d492a,
-	0x064d492b, 0x064d492c, 0x064d492d, 0x064d492e, 0x064d492f,
-	0x064d4930, 0x064d4931, 0x064d4932, 0x0cc00000, 0x080d5201,
-	0x09210324, 0x0740028c, 0x0400128a, 0x074002a4, 0x0400128a,
-	0x09210325, 0x0740028c, 0x0400128a, 0x074002a5, 0x0400128a,
-	0x09210326, 0x0740028c, 0x0400128a, 0x074002a6, 0x0400128a,
-	0x09210327, 0x0740028c, 0x0400128a, 0x074002a7, 0x0400128a,
-	0x09210328, 0x0740028c, 0x0400128a, 0x074002a8, 0x0400128a,
-	0x09210329, 0x0740028c, 0x0400128a, 0x074002a9, 0x0400128a,
-	0x0921032a, 0x0740028c, 0x0400128a, 0x074002aa, 0x0400128a,
-	0x0921032b, 0x0740028c, 0x0400128a, 0x074002ab, 0x0400128a,
-	0x0921032c, 0x0740028c, 0x0400128a, 0x074002ac, 0x0400128a,
-	0x0921032d, 0x0740028c, 0x0400128a, 0x074002ad, 0x0400128a,
-	0x0921032e, 0x0740028c, 0x0400128a, 0x074002ae, 0x0400128a,
-	0x0921032f, 0x0740028c, 0x0400128a, 0x074002af, 0x0400128a,
-	0x09210330, 0x0740028c, 0x0400128a, 0x074002b0, 0x0400128a,
-	0x09210331, 0x0740028c, 0x0400128a, 0x074002b1, 0x0400128a,
-	0x09210332, 0x0740028c, 0x0400128a, 0x074002b2, 0x0cc00000,
-	0x0400128a, 0x064ac036, 0x0aa1c076, 0x0aa180b6, 0x0aa14136,
-	0x0aa100f6, 0x00000000, 0x0c7ffe80, 0x00000000, 0x08030504,
-	0x0c7ffdc0, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x09c0a0ca, 0x06090b0a, 0x0698000a, 0x06c0000a, 0x064ac109,
+	0x0200a24a, 0x0609440a, 0x060f370a, 0x06a0000a, 0x06c0000a,
+	0x0200a24a, 0x0609450a, 0x060f380a, 0x0cc00000, 0x00000000,
+	0x0c0005c0, 0x00000000, 0x08095003, 0x08095000, 0x06820889,
+	0x06c00209, 0x0cc00000, 0x06095109, 0x0683ffc9, 0x0649090a,
+	0x0a21004a, 0x0aa0c009, 0x0c7fff40, 0x04401249, 0x06490b0a,
+	0x0980a00a, 0x0980a0ca, 0x06090b0a, 0x09c0a00a, 0x09c0a0ca,
+	0x06090b0a, 0x0cc00000, 0x00000000, 0x0683ffca, 0x0649530b,
+	0x090012cb, 0x0649bb09, 0x0920c249, 0x020092c9, 0x0aa10009,
+	0x0aa0c00a, 0x0c7ffe40, 0x0440128a, 0x0cc00000, 0x00000000,
+	0x080d1f30, 0x06bc0008, 0x060d1f08, 0x064d1e08, 0x09c087c8,
+	0x060d1e08, 0x06800008, 0x06c00408, 0x060d1f08, 0x06800048,
+	0x06c00408, 0x060d1f08, 0x06a19408, 0x060d1f08, 0x064d1e08,
+	0x098087c8, 0x060d1e08, 0x064d3508, 0x0920c248, 0x0780030a,
+	0x0400128a, 0x0e00024a, 0x0908c208, 0x09508209, 0x064d3509,
+	0x0908c249, 0x0f000280, 0x0200a24a, 0x0961020a, 0x060d3308,
+	0x0c064780, 0x060d210a, 0x0c064700, 0x080d2107, 0x0c064680,
+	0x080d2100, 0x07800148, 0x07800189, 0x0680040a, 0x0240a20a,
+	0x03409289, 0x09605248, 0x060d1f09, 0x078001c8, 0x0c064400,
+	0x060d2108, 0x07800108, 0x07800209, 0x0680040a, 0x0240a20a,
+	0x03409289, 0x09605248, 0x060d1f09, 0x080d1f20, 0x080d1f20,
+	0x064f1a08, 0x09086208, 0x07800049, 0x0c06f5c0, 0x02408248,
+	0x0c064000, 0x060d2108, 0x0cc00000, 0x00000000, 0x064d5308,
+	0x0aa1c008, 0x00000000, 0x060d2108, 0x080d2001, 0x064d2008,
+	0x0befc048, 0x00000000, 0x080d5300, 0x080d1f30, 0x06bc0008,
+	0x060d1f08, 0x064d1e08, 0x09c087c8, 0x060d1e08, 0x06800008,
+	0x06c00408, 0x060d1f08, 0x06800048, 0x06c00408, 0x060d1f08,
+	0x06a10408, 0x060d1f08, 0x064d1e08, 0x098087c8, 0x060d1e08,
+	0x064d3508, 0x0920c248, 0x0780030a, 0x0400128a, 0x0e00024a,
+	0x0908c208, 0x09508209, 0x064d3509, 0x0908c249, 0x0f000280,
+	0x0200a24a, 0x0961020a, 0x060d3308, 0x0c063540, 0x060d210a,
+	0x0c0634c0, 0x080d2105, 0x0c063440, 0x080d2100, 0x07800148,
+	0x07800189, 0x0680040a, 0x0240a20a, 0x03409289, 0x09605248,
+	0x060d1f09, 0x07800108, 0x07800209, 0x0680040a, 0x0240a20a,
+	0x03409289, 0x09605248, 0x060d1f09, 0x080d1f20, 0x080d1f20,
+	0x080d1f20, 0x064f1a08, 0x092e2248, 0x0aaf8009, 0x09086208,
+	0x07800049, 0x0c06e380, 0x02408248, 0x0c062dc0, 0x060d2108,
+	0x0cc00000, 0x00000000, 0x064d340a, 0x091c128a, 0x0aaf800a,
+	0x080d4800, 0x064d4923, 0x064d4924, 0x064d4925, 0x064d4926,
+	0x064d4927, 0x064d4928, 0x064d4929, 0x064d492a, 0x064d492b,
+	0x064d492c, 0x064d492d, 0x064d492e, 0x064d492f, 0x064d4930,
+	0x064d4931, 0x064d4932, 0x0cc00000, 0x080d5201, 0x09210324,
+	0x0740028c, 0x0400128a, 0x074002a4, 0x0400128a, 0x09210325,
+	0x0740028c, 0x0400128a, 0x074002a5, 0x0400128a, 0x09210326,
+	0x0740028c, 0x0400128a, 0x074002a6, 0x0400128a, 0x09210327,
+	0x0740028c, 0x0400128a, 0x074002a7, 0x0400128a, 0x09210328,
+	0x0740028c, 0x0400128a, 0x074002a8, 0x0400128a, 0x09210329,
+	0x0740028c, 0x0400128a, 0x074002a9, 0x0400128a, 0x0921032a,
+	0x0740028c, 0x0400128a, 0x074002aa, 0x0400128a, 0x0921032b,
+	0x0740028c, 0x0400128a, 0x074002ab, 0x0400128a, 0x0921032c,
+	0x0740028c, 0x0400128a, 0x074002ac, 0x0400128a, 0x0921032d,
+	0x0740028c, 0x0400128a, 0x074002ad, 0x0400128a, 0x0921032e,
+	0x0740028c, 0x0400128a, 0x074002ae, 0x0400128a, 0x0921032f,
+	0x0740028c, 0x0400128a, 0x074002af, 0x0400128a, 0x09210330,
+	0x0740028c, 0x0400128a, 0x074002b0, 0x0400128a, 0x09210331,
+	0x0740028c, 0x0400128a, 0x074002b1, 0x0400128a, 0x09210332,
+	0x0740028c, 0x0400128a, 0x074002b2, 0x0cc00000, 0x0400128a,
+	0x064ac036, 0x0aa1c076, 0x0aa180b6, 0x0aa14136, 0x0aa100f6,
+	0x00000000, 0x0c7ffe80, 0x00000000, 0x08030504, 0x0c7ffdc0,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
diff --git a/drivers/amlogic/amports/arch/ucode/h264_enc/h264_enc_gxtv.h b/drivers/amlogic/amports/arch/ucode/h264_enc/h264_enc_gxtv.h
new file mode 100644
index 0000000..d1c0ec8
--- /dev/null
+++ b/drivers/amlogic/amports/arch/ucode/h264_enc/h264_enc_gxtv.h
@@ -0,0 +1,468 @@
+/*
+ * drivers/amlogic/amports/arch/m8_m8m2/h264_enc/h264_enc_gxtv.h
+ *
+ * Copyright (C) 2015 Amlogic, Inc. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+*/
+
+const u32 MicroCode[] __initconst = {
+	0x06810001, 0x06800000, 0x0d000001, 0x07400040, 0x0c000980,
+	0x00000000, 0x0c01d540, 0x00000000, 0x0c001280, 0x00000000,
+	0x06bffc40, 0x07c00000, 0x06030400, 0x00400000, 0x00000000,
+	0x00000000, 0x0c7a2200, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x0c79b800, 0x00000000, 0x0c78f200,
+	0x064d3008, 0x0c780d40, 0x00000000, 0x0c79b840, 0x00000000,
+	0x0cc00000, 0x00400000, 0x080ad600, 0x080d1a00, 0x06800008,
+	0x07c003c8, 0x0cc00000, 0x00000000, 0x0910c000, 0x0908c041,
+	0x04001041, 0x0ac04040, 0x064ad600, 0x060f1f00, 0x080ad600,
+	0x0cc00000, 0x00000000, 0x080ad600, 0x06800022, 0x06804008,
+	0x07c00808, 0x07c008c8, 0x06800008, 0x07c00888, 0x064ac808,
+	0x07c00108, 0x064ac908, 0x07c00148, 0x064ac608, 0x07c00188,
+	0x064ac508, 0x07c001c8, 0x064ac708, 0x07c00208, 0x064aca08,
+	0x07c00388, 0x064acb08, 0x07c00048, 0x064ace08, 0x07c00508,
+	0x0cc00000, 0x00000000, 0x0cc00000, 0x00000000, 0x080d2001,
+	0x064d2008, 0x0befc048, 0x0cc00000, 0x00000000, 0x06bfff88,
+	0x06030408, 0x00400000, 0x064ac008, 0x0aa44048, 0x0a60c088,
+	0x0c781840, 0x00000000, 0x078003c9, 0x0a60c009, 0x0c002940,
+	0x00000000, 0x0a60c108, 0x0c785ac0, 0x00000000, 0x0a6100c8,
+	0x00000000, 0x0c782b00, 0x00000000, 0x0c78b700, 0x00000000,
+	0x0c07f2c0, 0x00000000, 0x06bc0008, 0x060d1f08, 0x064d1e08,
+	0x09c087c8, 0x060d1e08, 0x06800008, 0x06c00408, 0x060d1f08,
+	0x06800048, 0x06c00408, 0x060d1f08, 0x06a19c08, 0x060d1f08,
+	0x064d1e08, 0x098087c8, 0x060d1e08, 0x06a10808, 0x060d1f08,
+	0x06a00008, 0x060d1f08, 0x06a0a008, 0x060d1f08, 0x0c07f380,
+	0x080d2100, 0x07800148, 0x04404208, 0x0c07f280, 0x060d2108,
+	0x0c07f200, 0x080d2100, 0x07800108, 0x04404208, 0x0c07f100,
+	0x060d2108, 0x0c07f080, 0x080d2101, 0x080d1f20, 0x064d3109,
+	0x09010209, 0x0400f208, 0x05804208, 0x04401208, 0x07c00308,
+	0x0c07ee40, 0x060d2108, 0x09210209, 0x0400f208, 0x05804208,
+	0x04401208, 0x07c00348, 0x0c07ec80, 0x060d2108, 0x080d1f30,
+	0x080d1f30, 0x064d3108, 0x09210208, 0x09004248, 0x0a60c009,
+	0x0c7803c0, 0x080d1f20, 0x06800408, 0x06c00008, 0x02409248,
+	0x05801249, 0x080d1f30, 0x0c07e8c0, 0x080d2100, 0x0c07e840,
+	0x080d2100, 0x0c07e7c0, 0x080d2100, 0x0c07e740, 0x060d2109,
+	0x080d1f20, 0x080d1f30, 0x06bc0008, 0x060d1f08, 0x080ac007,
+	0x0c78a280, 0x08007801, 0x0c07de40, 0x00000000, 0x06bc0008,
+	0x060d1f08, 0x064d1e08, 0x09c087c8, 0x060d1e08, 0x06800008,
+	0x06c00408, 0x060d1f08, 0x06800048, 0x06c00408, 0x060d1f08,
+	0x06a1a008, 0x060d1f08, 0x064d1e08, 0x098087c8, 0x060d1e08,
+	0x0c07e080, 0x080d2100, 0x0c07e000, 0x080d2100, 0x080d1f20,
+	0x080d1f20, 0x0c07df00, 0x080d2100, 0x0c07de80, 0x080d2100,
+	0x0c07de00, 0x080d2100, 0x080d1f20, 0x080d1f40, 0x07800048,
+	0x0c009ac0, 0x0441a208, 0x0c07dc40, 0x060d2108, 0x0c0099c0,
+	0x06800008, 0x0c07db40, 0x060d2108, 0x0c07dac0, 0x080d2100,
+	0x080d1f20, 0x080d5500, 0x080d1f20, 0x080d1f20, 0x080d1f30,
+	0x06bc0008, 0x060d1f08, 0x00000000, 0x00000000, 0x064d1608,
+	0x0befc108, 0x00000000, 0x06800008, 0x06e00008, 0x060d1c08,
+	0x080d1d00, 0x00000000, 0x00000000, 0x064d1608, 0x0befc108,
+	0x064d1b08, 0x09808648, 0x060d1b08, 0x064d1608, 0x0befc108,
+	0x00000000, 0x080ac008, 0x0c789080, 0x08007801, 0x064d3109,
+	0x09010289, 0x0400f28a, 0x0580428a, 0x0440128a, 0x07c0030a,
+	0x09210289, 0x0400f28a, 0x0580428a, 0x0440128a, 0x07c0034a,
+	0x06800009, 0x0cc00000, 0x07c003c9, 0x0c019440, 0x00000000,
+	0x080f3eff, 0x06490b08, 0x09c08608, 0x09c08648, 0x06090b08,
+	0x06400908, 0x09c08748, 0x09c08788, 0x06000908, 0x06400808,
+	0x09808008, 0x06000808, 0x09c08008, 0x06000808, 0x0c019900,
+	0x00000000, 0x0c018f40, 0x00000000, 0x0c07c3c0, 0x00000000,
+	0x06400f08, 0x09808708, 0x06000f08, 0x064f4908, 0x09c08048,
+	0x060f4908, 0x06bc0008, 0x060d1f08, 0x064d1e08, 0x09c087c8,
+	0x060d1e08, 0x06800008, 0x06c00408, 0x060d1f08, 0x06800048,
+	0x06c00408, 0x060d1f08, 0x06a19408, 0x060d1f08, 0x064d1e08,
+	0x098087c8, 0x060d1e08, 0x064d3308, 0x09008248, 0x07c00089,
+	0x09108248, 0x07c000c9, 0x09210208, 0x0c07c300, 0x060d2108,
+	0x0c07c280, 0x080d2107, 0x064d3109, 0x09010209, 0x0400f208,
+	0x05804208, 0x04401208, 0x07c00308, 0x09210209, 0x0400f208,
+	0x05804208, 0x04401208, 0x07c00348, 0x06800008, 0x07c00248,
+	0x060f1b08, 0x07800309, 0x0946d209, 0x060d3208, 0x06940008,
+	0x06c00008, 0x064ac109, 0x02008248, 0x060f2008, 0x06803908,
+	0x064d3309, 0x09008249, 0x09508209, 0x09808508, 0x09808548,
+	0x098087c8, 0x060f1f08, 0x064ad508, 0x07c00448, 0x0ae0c008,
+	0x04001208, 0x06800008, 0x07c00488, 0x06800008, 0x07c00408,
+	0x07800308, 0x04001208, 0x07c004c8, 0x07800309, 0x07800348,
+	0x0960f248, 0x060f1e09, 0x0c07b6c0, 0x080d2100, 0x07800148,
+	0x07800189, 0x0680040a, 0x0240a20a, 0x03409289, 0x09605248,
+	0x060d1f09, 0x078001c8, 0x0c07b440, 0x060d2108, 0x07800108,
+	0x07800209, 0x0680040a, 0x0240a20a, 0x03409289, 0x09605248,
+	0x060d1f09, 0x080d1f20, 0x080d1f20, 0x064f1c08, 0x09206208,
+	0x07800049, 0x0c006ec0, 0x02408248, 0x0c07b040, 0x060d2108,
+	0x080d3d00, 0x064acd08, 0x060f4208, 0x0c006f00, 0x00000000,
+	0x0680fd83, 0x0681c284, 0x080d300f, 0x064d0008, 0x09808008,
+	0x09808048, 0x09808088, 0x09c080c8, 0x09c08148, 0x09c08188,
+	0x09c081c8, 0x060d0008, 0x06bfffca, 0x06c0000a, 0x060f770a,
+	0x06800008, 0x07c00548, 0x064f6d08, 0x09203208, 0x0b618108,
+	0x07800548, 0x04001208, 0x07c00548, 0x0c7ffe80, 0x060f760a,
+	0x064acf08, 0x060f4808, 0x06808089, 0x06d00009, 0x07800508,
+	0x09485248, 0x06c0000a, 0x04820288, 0x0aa2c00a, 0x00000000,
+	0x09809289, 0x098092c9, 0x09809309, 0x09809349, 0x09809389,
+	0x098093c9, 0x09809409, 0x09809449, 0x09809489, 0x06c0000a,
+	0x04840288, 0x0aa1400a, 0x00000000, 0x098094c9, 0x09809509,
+	0x09809549, 0x060f4009, 0x080ac005, 0x0c785e40, 0x08007801,
+	0x0c017040, 0x00000000, 0x06493008, 0x06800009, 0x09410209,
+	0x06093008, 0x060d2608, 0x064f4008, 0x09c08048, 0x060f4008,
+	0x080f1f00, 0x080f3eff, 0x064d0008, 0x09c08088, 0x060d0008,
+	0x09808088, 0x060d0008, 0x064d2508, 0x09808188, 0x098081c8,
+	0x09808288, 0x060d2508, 0x064f3408, 0x098085c8, 0x09808508,
+	0x09808448, 0x09808408, 0x098083c8, 0x09808148, 0x060f3408,
+	0x080f3f08, 0x064acf08, 0x060f4808, 0x06808089, 0x06d00009,
+	0x07800508, 0x09485248, 0x06c00008, 0x04820208, 0x0aa2c008,
+	0x00000000, 0x09809289, 0x098092c9, 0x09809309, 0x09809349,
+	0x09809389, 0x098093c9, 0x09809409, 0x09809449, 0x09809489,
+	0x07800508, 0x06c00008, 0x04840208, 0x0aa14008, 0x00000000,
+	0x098094c9, 0x09809509, 0x09809549, 0x060f4009, 0x0c0156c0,
+	0x00000000, 0x06490b08, 0x09c08608, 0x09808648, 0x06090b08,
+	0x06400908, 0x09808748, 0x09c08788, 0x06000908, 0x06400808,
+	0x09808008, 0x06000808, 0x09c08008, 0x06000808, 0x0c015bc0,
+	0x00000000, 0x0c015200, 0x00000000, 0x0c078680, 0x00000000,
+	0x06400f08, 0x09808708, 0x06000f08, 0x064f4308, 0x09808008,
+	0x09c08048, 0x09808088, 0x09c080c8, 0x060f4308, 0x09c08008,
+	0x09808048, 0x09c08088, 0x098080c8, 0x060f4308, 0x064f3b08,
+	0x098087c8, 0x060f3b08, 0x09c087c8, 0x060f3b08, 0x064f1508,
+	0x09c08508, 0x09c084c8, 0x09808748, 0x09c08448, 0x09c08488,
+	0x09c08348, 0x09c08308, 0x09808248, 0x09808008, 0x060f1508,
+	0x09808508, 0x098084c8, 0x060f1508, 0x080d3400, 0x080f4a00,
+	0x09808488, 0x09808448, 0x09808348, 0x09808308, 0x098085c8,
+	0x09808608, 0x09808648, 0x09c08688, 0x098086c8, 0x09c08248,
+	0x09c08008, 0x060f1508, 0x064f4908, 0x09c08048, 0x09c081c8,
+	0x09808008, 0x060f4908, 0x098087c8, 0x09808788, 0x09808748,
+	0x098086c8, 0x09808688, 0x09808648, 0x09808608, 0x09808308,
+	0x09808288, 0x09c08248, 0x098081c8, 0x09808088, 0x09808048,
+	0x060f4908, 0x068000c8, 0x068000c9, 0x09484209, 0x068000c9,
+	0x09504209, 0x06800049, 0x09581209, 0x06800009, 0x095a1209,
+	0x06800049, 0x095c5209, 0x060f5908, 0x06800388, 0x06800489,
+	0x09508209, 0x06800149, 0x09604209, 0x068000c9, 0x09684209,
+	0x06800109, 0x09704209, 0x06800089, 0x09704209, 0x060f5a08,
+	0x06800008, 0x06800009, 0x09508209, 0x06800809, 0x09608209,
+	0x06801409, 0x09708209, 0x060f5b08, 0x06801008, 0x06800009,
+	0x09508209, 0x06801809, 0x09608209, 0x06803009, 0x09708209,
+	0x060f5c08, 0x06800608, 0x06801409, 0x09508209, 0x06800809,
+	0x09608209, 0x06801809, 0x09708209, 0x060f5d08, 0x068000c8,
+	0x06801809, 0x0948c209, 0x06800249, 0x09607209, 0x06800009,
+	0x096e1209, 0x06800c09, 0x09708209, 0x060f5e08, 0x068000c8,
+	0x06800009, 0x09461209, 0x06800049, 0x09481209, 0x06800009,
+	0x094a2209, 0x06803009, 0x0950c209, 0x06801c09, 0x0968c209,
+	0x060f5f08, 0x064d3109, 0x09010209, 0x0400f208, 0x05804208,
+	0x04401208, 0x07c00308, 0x09210209, 0x0400f208, 0x05804208,
+	0x04401208, 0x07c00348, 0x07800309, 0x07800348, 0x0958c248,
+	0x06499008, 0x09708248, 0x060f4f09, 0x06bc0008, 0x060d1f08,
+	0x064d1e08, 0x09c087c8, 0x060d1e08, 0x06800008, 0x06c00408,
+	0x060d1f08, 0x06800048, 0x06c00408, 0x060d1f08, 0x06a10408,
+	0x060d1f08, 0x064d1e08, 0x098087c8, 0x060d1e08, 0x064d3308,
+	0x09008248, 0x07c00089, 0x09108248, 0x07c000c9, 0x09210208,
+	0x0c076100, 0x060d2108, 0x0c076080, 0x080d2105, 0x06800048,
+	0x07c00248, 0x060f1b08, 0x07800309, 0x0946d209, 0x060d3208,
+	0x06803908, 0x064d3309, 0x09008249, 0x09508209, 0x09808508,
+	0x09808548, 0x098087c8, 0x060f1f08, 0x064ad508, 0x07c00448,
+	0x0ae0c008, 0x04001208, 0x06800008, 0x07c00488, 0x06800008,
+	0x07c00408, 0x07800308, 0x04001208, 0x07c004c8, 0x06bfffc8,
+	0x060d3708, 0x07800309, 0x07800348, 0x0960f248, 0x060f1e09,
+	0x0c075840, 0x080d2100, 0x07800148, 0x07800189, 0x0680040a,
+	0x0240a20a, 0x03409289, 0x09605248, 0x060d1f09, 0x07800108,
+	0x07800209, 0x0680040a, 0x0240a20a, 0x03409289, 0x09605248,
+	0x060d1f09, 0x080d1f20, 0x080d1f20, 0x080d1f20, 0x064f1d08,
+	0x09206208, 0x04000248, 0x095a6248, 0x060f3c09, 0x07800049,
+	0x0c001000, 0x02408248, 0x0c075180, 0x060d2108, 0x080d3d00,
+	0x080d5300, 0x064acd08, 0x060f4208, 0x0c001e00, 0x00000000,
+	0x06815083, 0x0681c284, 0x080d300f, 0x06800008, 0x06c00448,
+	0x060d2f08, 0x064d0008, 0x09c08008, 0x09c08048, 0x09c08088,
+	0x09c08188, 0x09c081c8, 0x060d0008, 0x09808008, 0x09808048,
+	0x09808088, 0x098080c8, 0x09808148, 0x09808188, 0x098081c8,
+	0x060d0008, 0x06bfffca, 0x06c0000a, 0x060f770a, 0x06a00009,
+	0x06d00009, 0x060f6f09, 0x060f6f09, 0x060f6f09, 0x060f6f09,
+	0x06800008, 0x07c00548, 0x064f6d08, 0x0be28048, 0x07800548,
+	0x04001208, 0x07c00548, 0x060f760a, 0x060f6e09, 0x060f6e09,
+	0x060f6e09, 0x0c7ffdc0, 0x060f6e09, 0x06800048, 0x07800309,
+	0x0948c209, 0x060f4b08, 0x080ac005, 0x0c780080, 0x08007801,
+	0x00800000, 0x07800008, 0x0c7f3780, 0x06030408, 0x06800009,
+	0x0b005248, 0x02409209, 0x05401208, 0x0cc00000, 0x04401208,
+	0x0cc00000, 0x05401209, 0x06bfffda, 0x06c0001a, 0x06800009,
+	0x0680001b, 0x06c0001b, 0x0400071b, 0x0680000b, 0x0680c00e,
+	0x0680100f, 0x0740039a, 0x0400138e, 0x07400389, 0x0400138e,
+	0x0740039b, 0x0400138e, 0x0740038b, 0x0400138e, 0x0aee004f,
+	0x044013cf, 0x0690000e, 0x06c0000e, 0x064ac10f, 0x0200e3ce,
+	0x0680000f, 0x0603510e, 0x0680400d, 0x0603520d, 0x06a0c00d,
+	0x0603500d, 0x0643500d, 0x0580f34d, 0x0bef804d, 0x00000000,
+	0x040403cf, 0x0b611e8f, 0x0680800d, 0x0c7ffd00, 0x0200e34e,
+	0x064d330d, 0x0900834d, 0x0680000e, 0x0680100f, 0x0b8053cd,
+	0x00000000, 0x0404038e, 0x0c7fff40, 0x040403cf, 0x07c0028e,
+	0x044013cf, 0x07c002cf, 0x060d371a, 0x060d391b, 0x060d381a,
+	0x060d3a1b, 0x0cc00000, 0x00000000, 0x08098002, 0x08098000,
+	0x06a0001d, 0x06d0001d, 0x06a0001e, 0x06d0001e, 0x06a0001f,
+	0x06d0001f, 0x06a00020, 0x06d00020, 0x0690000a, 0x06bfffda,
+	0x06c0001a, 0x0400085a, 0x0680000d, 0x0680001b, 0x06c0001b,
+	0x0400071b, 0x06800009, 0x0680c00e, 0x0680054f, 0x0740039a,
+	0x0400138e, 0x0740038d, 0x0400138e, 0x0740039b, 0x0400138e,
+	0x07400389, 0x0400138e, 0x0740039d, 0x0400138e, 0x0740038a,
+	0x0400138e, 0x0740039e, 0x0400138e, 0x0740038a, 0x0400138e,
+	0x0740039f, 0x0400138e, 0x0740038a, 0x0400138e, 0x074003a0,
+	0x0400138e, 0x0740038a, 0x0400138e, 0x0aea004f, 0x044013cf,
+	0x0690000e, 0x06c0000e, 0x064ac10f, 0x0200e3ce, 0x0680000f,
+	0x0603510e, 0x06803f0d, 0x0603520d, 0x06a0c00d, 0x0603500d,
+	0x0643500d, 0x0580f34d, 0x0bef804d, 0x00000000, 0x040153cf,
+	0x0b611e8f, 0x06807e0d, 0x0c7ffd00, 0x0200e34e, 0x064d330d,
+	0x0900834d, 0x0680000e, 0x0680054f, 0x0b8053cd, 0x00000000,
+	0x0401538e, 0x0c7fff40, 0x040153cf, 0x07c0028e, 0x044013cf,
+	0x07c002cf, 0x060d371a, 0x060d391b, 0x060d4a1d, 0x060d4b1e,
+	0x060d4c1f, 0x060d4d20, 0x060d4a1d, 0x060d4a1d, 0x060d381a,
+	0x060d3a1b, 0x060d4e1d, 0x060d4f1e, 0x060d501f, 0x060d5120,
+	0x0cc00000, 0x00000000, 0x0aa28008, 0x064d1e0e, 0x064d1a0f,
+	0x0947d38f, 0x0240f88e, 0x07c0084f, 0x0400088e, 0x064d370e,
+	0x0cb80003, 0x064d390f, 0x0c7f0d00, 0x00000000, 0x078004c8,
+	0x0b214048, 0x04401208, 0x07c004c8, 0x06bfffc9, 0x060d3709,
+	0x07800488, 0x0aa38008, 0x04401208, 0x0a630008, 0x07c00488,
+	0x0c00eb00, 0x00000000, 0x06bfffc9, 0x060d3709, 0x060d3809,
+	0x064ad508, 0x07c00488, 0x07800308, 0x04001208, 0x07c004c8,
+	0x064d3533, 0x064d3e08, 0x09104208, 0x09784cc8, 0x064d3b34,
+	0x064d3c35, 0x060d371a, 0x064d3510, 0x0908c250, 0x0a620009,
+	0x060d391b, 0x06bfffc9, 0x06c00009, 0x060d3809, 0x06800009,
+	0x06c00009, 0x060d3a09, 0x09004250, 0x0aa1c249, 0x080d3601,
+	0x080d3603, 0x080d3605, 0x080d3606, 0x0c7801c0, 0x00000000,
+	0x080d3602, 0x080d3603, 0x080d3604, 0x080d3605, 0x080d3606,
+	0x064d3708, 0x064d3e09, 0x080d360f, 0x0780080a, 0x0680400b,
+	0x0a8152ca, 0x0780084b, 0x0740028b, 0x06807ccb, 0x0b8112ca,
+	0x0400128a, 0x0680400b, 0x0240c2ca, 0x0603520c, 0x064ad20a,
+	0x0603510a, 0x06a0400b, 0x0603500b, 0x054012cc, 0x0200a2ca,
+	0x060ad20a, 0x0643500b, 0x0580f2cb, 0x0bef804b, 0x00000000,
+	0x0680400a, 0x09208333, 0x090882f3, 0x0950830b, 0x0740028c,
+	0x0400128a, 0x09384333, 0x090042f3, 0x0950830b, 0x0740028c,
+	0x0400128a, 0x09210334, 0x0740028c, 0x0400128a, 0x074002b4,
+	0x0400128a, 0x09210335, 0x0740028c, 0x0400128a, 0x074002b5,
+	0x0400128a, 0x09346208, 0x09508248, 0x07400289, 0x0400128a,
+	0x078008c8, 0x04001208, 0x07c008c8, 0x04803208, 0x064f6809,
+	0x0aa28008, 0x064f640b, 0x064f6509, 0x0aa1c048, 0x064f610b,
+	0x064f6609, 0x0aa10088, 0x064f620b, 0x064f6709, 0x064f630b,
+	0x07400289, 0x0400128a, 0x0740028b, 0x0400128a, 0x06800009,
+	0x07400289, 0x0400128a, 0x07400289, 0x0400128a, 0x07c0080a,
+	0x0908c210, 0x0680c10a, 0x07800289, 0x0a814248, 0x02409248,
+	0x04401249, 0x05402249, 0x0680c00a, 0x0200a289, 0x0740028e,
+	0x0400128a, 0x0581038e, 0x0740028e, 0x0400128a, 0x0740028f,
+	0x0400128a, 0x058103cf, 0x0740028f, 0x0400528a, 0x078002c9,
+	0x0b42a248, 0x07800309, 0x0b428248, 0x0700029a, 0x0400128a,
+	0x0700028e, 0x0961068e, 0x0400128a, 0x0700029b, 0x0400128a,
+	0x0700028f, 0x096106cf, 0x07800548, 0x07800309, 0x0ac1a248,
+	0x07800289, 0x0240a248, 0x0ba0900a, 0x0c7ee380, 0x0540228a,
+	0x02009289, 0x0680c00a, 0x0200a289, 0x064f6d08, 0x09203208,
+	0x0b63c108, 0x07800548, 0x04001208, 0x07c00548, 0x07800309,
+	0x04001249, 0x0b002248, 0x0c7ee000, 0x07000288, 0x0400128a,
+	0x07000289, 0x09610209, 0x060f7608, 0x0c7ffc40, 0x0400328a,
+	0x0c7ede00, 0x00000000, 0x0908c210, 0x07800289, 0x02409248,
+	0x05402249, 0x0680c00a, 0x0200a289, 0x064d0009, 0x09384249,
+	0x0a6f8009, 0x00000000, 0x064d3609, 0x0a6ec009, 0x00000000,
+	0x064d370e, 0x064d390f, 0x0740028e, 0x0400128a, 0x0581038e,
+	0x0740028e, 0x0400128a, 0x0740028f, 0x0400128a, 0x058103cf,
+	0x0740028f, 0x0400128a, 0x0690000e, 0x06c0000e, 0x064ac10f,
+	0x0200e3ce, 0x0780028f, 0x054033cf, 0x0200e3ce, 0x0603510e,
+	0x0680400d, 0x0603520d, 0x06a0c00d, 0x0603500d, 0x0908c210,
+	0x07800309, 0x0b84d248, 0x04001208, 0x0920c210, 0x07800349,
+	0x0b404248, 0x06800008, 0x0c7811c0, 0x07c00548, 0x080d3000,
+	0x080d1f30, 0x06bc0008, 0x060d1f08, 0x06800008, 0x07c00548,
+	0x080f6d00, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x064d1608, 0x0befc108, 0x00000000,
+	0x06800008, 0x06e00008, 0x060d1c08, 0x080d1d00, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x064d1608, 0x0befc108, 0x00000000, 0x064d1b08, 0x09808648,
+	0x060d1b08, 0x064d1608, 0x0befc108, 0x00000000, 0x0643500b,
+	0x0580f2cb, 0x0bef804b, 0x00000000, 0x0780080a, 0x0780084b,
+	0x0740028b, 0x0400128a, 0x0680400b, 0x0240c2ca, 0x0603520c,
+	0x064ad20a, 0x0603510a, 0x06a0400b, 0x0603500b, 0x0643500b,
+	0x0580f2cb, 0x0bef804b, 0x00000000, 0x07800188, 0x04001208,
+	0x07c00188, 0x07800208, 0x04002208, 0x07c00208, 0x080ac009,
+	0x06800022, 0x06804008, 0x07c00808, 0x07c008c8, 0x06800008,
+	0x07c00888, 0x0c7ec100, 0x08007801, 0x07c00288, 0x0403f248,
+	0x07c002c9, 0x05403208, 0x0690000e, 0x06c0000e, 0x064ac10f,
+	0x0200e3ce, 0x0200e20e, 0x0680400f, 0x06b0c010, 0x0643500d,
+	0x0580f34d, 0x0bef804d, 0x00000000, 0x0643530d, 0x0900c34d,
+	0x0a6f800d, 0x00000000, 0x0603510e, 0x0603520f, 0x06035010,
+	0x0643500d, 0x0580f34d, 0x0bef804d, 0x00000000, 0x0c7fd2c0,
+	0x0680c00a, 0x078004c8, 0x0b224048, 0x04401208, 0x07c004c8,
+	0x06a00089, 0x06f00009, 0x060d4c09, 0x0b20c048, 0x00000000,
+	0x060d4d09, 0x07800488, 0x0aa44008, 0x04401208, 0x0a63c008,
+	0x07c00488, 0x0c00a700, 0x00000000, 0x06bfffc9, 0x060d3809,
+	0x06a00089, 0x06f00009, 0x060d4c09, 0x060d4d09, 0x064ad508,
+	0x07c00488, 0x07800308, 0x04001208, 0x07c004c8, 0x064d4a11,
+	0x064d4b12, 0x064d4c13, 0x064d4d14, 0x060d4a1d, 0x060d4b1e,
+	0x060d4c1f, 0x060d4d20, 0x060d371a, 0x064d3510, 0x0908c250,
+	0x0a638009, 0x060d391b, 0x06a00009, 0x06d00009, 0x060d4e09,
+	0x060d4f09, 0x060d5009, 0x060d5109, 0x06bfffc9, 0x06c00009,
+	0x060d3809, 0x06800009, 0x06c00009, 0x060d3a09, 0x064d3533,
+	0x09004250, 0x0b62c249, 0x080d3607, 0x080d3601, 0x0c00ae80,
+	0x080d3608, 0x080d3609, 0x080d3604, 0x080d3605, 0x080d3606,
+	0x0c780500, 0x00000000, 0x064d3e08, 0x09104208, 0x09784cc8,
+	0x064d3b34, 0x064d3c35, 0x080d5201, 0x0aa1c249, 0x080d3601,
+	0x080d3603, 0x080d3605, 0x080d3606, 0x0c7801c0, 0x00000000,
+	0x080d3602, 0x080d3603, 0x080d3604, 0x080d3605, 0x080d3606,
+	0x064d0009, 0x09384249, 0x0aaf8209, 0x00000000, 0x09004373,
+	0x064d3e09, 0x064d3708, 0x080d360f, 0x0780080a, 0x0680400b,
+	0x0a8172ca, 0x0780084b, 0x0740028b, 0x0a60c20d, 0x06807ccb,
+	0x068075cb, 0x0b8112ca, 0x0400128a, 0x0680400b, 0x0240c2ca,
+	0x0603520c, 0x064ad20a, 0x0603510a, 0x06a0400b, 0x0603500b,
+	0x054012cc, 0x0200a2ca, 0x060ad20a, 0x0643500b, 0x0580f2cb,
+	0x0bef804b, 0x00000000, 0x0680400a, 0x09208333, 0x090882f3,
+	0x0950830b, 0x0740028c, 0x0400128a, 0x09384333, 0x064d3533,
+	0x090042f3, 0x0950830b, 0x0740028c, 0x0400128a, 0x0b66024d,
+	0x09210323, 0x0740028c, 0x0400128a, 0x074002a3, 0x0400128a,
+	0x0aa300cd, 0x0a61820d, 0x0921032b, 0x0c00a040, 0x00000000,
+	0x0c7805c0, 0x00000000, 0x0740028c, 0x0400128a, 0x074002ab,
+	0x0c780480, 0x0400128a, 0x09210327, 0x0740028c, 0x0400128a,
+	0x074002a7, 0x0c780300, 0x0400128a, 0x09210334, 0x0740028c,
+	0x0400128a, 0x074002b4, 0x0400128a, 0x09210335, 0x0740028c,
+	0x0400128a, 0x074002b5, 0x0400128a, 0x09346208, 0x09508248,
+	0x07400289, 0x0400128a, 0x078008c8, 0x04001208, 0x07c008c8,
+	0x04803208, 0x064f6809, 0x0aa28008, 0x064f640b, 0x064f6509,
+	0x0aa1c048, 0x064f610b, 0x064f6609, 0x0aa10088, 0x064f620b,
+	0x064f6709, 0x064f630b, 0x07400289, 0x0400128a, 0x0740028b,
+	0x0400128a, 0x06800009, 0x07400289, 0x0400128a, 0x07400289,
+	0x0400128a, 0x07c0080a, 0x0908c210, 0x0aa10008, 0x0680bfca,
+	0x0c0014c0, 0x04401208, 0x0908c210, 0x07800309, 0x0b843248,
+	0x00000000, 0x064d0009, 0x09384249, 0x0a6f8009, 0x00000000,
+	0x064d3609, 0x0a6ec009, 0x00000000, 0x0920c290, 0x07800349,
+	0x0b80c24a, 0x00000000, 0x064d5309, 0x0aa1c009, 0x00000000,
+	0x060d2109, 0x080d2001, 0x064d2009, 0x0befc049, 0x00000000,
+	0x0c7fb100, 0x00000000, 0x064d370e, 0x064d390f, 0x064d4a11,
+	0x064d4b12, 0x064d4c13, 0x064d4d14, 0x0c000c80, 0x07800308,
+	0x0c001540, 0x06800011, 0x07800594, 0x0a628014, 0x06bffdca,
+	0x06430413, 0x0603040a, 0x00400000, 0x07800594, 0x0aafc014,
+	0x00000000, 0x00800000, 0x06030413, 0x09814014, 0x07c00594,
+	0x06a00014, 0x06d00014, 0x060d4d14, 0x06800009, 0x07c00549,
+	0x080f6d00, 0x060f6f14, 0x060f6f14, 0x060f6f14, 0x060f6f14,
+	0x06bfffca, 0x06c0000a, 0x060f770a, 0x0c001900, 0x0680c00a,
+	0x060d4a1d, 0x060d4b1e, 0x060d4c1f, 0x060d4d20, 0x0c780280,
+	0x0680c30a, 0x0401928a, 0x0908c210, 0x04002208, 0x078002c9,
+	0x0b004248, 0x0c000b00, 0x0908c450, 0x0680c60a, 0x0c001500,
+	0x00000000, 0x0c7e74c0, 0x00000000, 0x07800289, 0x0240a248,
+	0x0540324a, 0x0540228a, 0x02009289, 0x0680c00a, 0x0200a289,
+	0x0740028e, 0x0400128a, 0x0581038e, 0x0740028e, 0x0400128a,
+	0x0740028f, 0x0400128a, 0x058103cf, 0x0740028f, 0x0400128a,
+	0x07400291, 0x0400128a, 0x05810451, 0x07400291, 0x0400128a,
+	0x07400292, 0x0400128a, 0x05810492, 0x07400292, 0x0400128a,
+	0x07400293, 0x0400128a, 0x058104d3, 0x07400293, 0x0400128a,
+	0x07400294, 0x0400128a, 0x05810514, 0x0cc00000, 0x07400294,
+	0x0690000e, 0x06c0000e, 0x064ac10f, 0x0200e3ce, 0x0780028f,
+	0x0540434f, 0x054033cf, 0x0200f34f, 0x0200e3ce, 0x0603510e,
+	0x06803f0d, 0x0603520d, 0x06a0c00d, 0x0603500d, 0x07c00291,
+	0x04014251, 0x07c002c9, 0x05404251, 0x05403211, 0x02008248,
+	0x0690000e, 0x06c0000e, 0x064ac10f, 0x0200e3ce, 0x0200e20e,
+	0x06803f0f, 0x06b0c010, 0x0643500d, 0x0580f34d, 0x0bef804d,
+	0x00000000, 0x0643530d, 0x0900c34d, 0x0a6f800d, 0x00000000,
+	0x0603510e, 0x0603520f, 0x06035010, 0x0643500d, 0x0580f34d,
+	0x0bef804d, 0x0cc00000, 0x00000000, 0x040006a1, 0x070002a1,
+	0x0400128a, 0x07000289, 0x09610849, 0x0400128a, 0x040006dc,
+	0x0700029c, 0x0400128a, 0x07000289, 0x09610709, 0x0400128a,
+	0x0700029d, 0x0400128a, 0x07000289, 0x09610749, 0x0400128a,
+	0x0700029e, 0x0400128a, 0x07000289, 0x09610789, 0x0400128a,
+	0x0700029f, 0x0400128a, 0x07000289, 0x096107c9, 0x0400128a,
+	0x070002a0, 0x0400128a, 0x07000289, 0x09610809, 0x07800548,
+	0x07800289, 0x0240a248, 0x0ba0854a, 0x0cc00000, 0x0540324a,
+	0x0540228a, 0x02009289, 0x0680c00a, 0x0200a289, 0x064f6d08,
+	0x09203248, 0x0b608109, 0x0a208048, 0x0c780a80, 0x07800548,
+	0x078002c9, 0x0acfd248, 0x04001208, 0x07c00548, 0x07800309,
+	0x04001249, 0x0b003248, 0x0c7801c0, 0x0400128a, 0x07000288,
+	0x0400128a, 0x07000289, 0x09610209, 0x060f7608, 0x0400328a,
+	0x07000288, 0x0400128a, 0x07000289, 0x09610209, 0x060f6e08,
+	0x0400128a, 0x07000288, 0x0400128a, 0x07000289, 0x09610209,
+	0x060f6e08, 0x0400128a, 0x07000288, 0x0400128a, 0x07000289,
+	0x09610209, 0x060f6e08, 0x0400128a, 0x07000288, 0x0400128a,
+	0x07000289, 0x09610209, 0x060f6e08, 0x0c7ff500, 0x0400128a,
+	0x0cc00000, 0x00000000, 0x064d1602, 0x09162082, 0x0aa0c002,
+	0x0c7fff40, 0x00000000, 0x0c7e48c0, 0x00000000, 0x080f3601,
+	0x0cb80004, 0x064f3e08, 0x0be0c088, 0x0c780e40, 0x00000000,
+	0x080f3e02, 0x064f1f08, 0x09361248, 0x0aa10009, 0x09042248,
+	0x0c7e4580, 0x00000000, 0x0aa14009, 0x0680324a, 0x0aa0c049,
+	0x0680348a, 0x0680390a, 0x07800088, 0x07800309, 0x0b809248,
+	0x04001208, 0x078000c9, 0x07800348, 0x0b803209, 0x04001249,
+	0x06800009, 0x07c000c9, 0x06800008, 0x07c00088, 0x0950c288,
+	0x0a60c008, 0x07800309, 0x0980a50a, 0x0a403248, 0x00000000,
+	0x0980a58a, 0x078000c8, 0x0a60c008, 0x060f4108, 0x0980a54a,
+	0x07800408, 0x0ac03248, 0x04001208, 0x0980a5ca, 0x0ac03248,
+	0x07c00408, 0x0980a54a, 0x07800448, 0x0aa28008, 0x04401208,
+	0x0a620008, 0x07c00448, 0x0980a50a, 0x0980a54a, 0x064ad508,
+	0x07c00448, 0x06800008, 0x07c00408, 0x0980a7ca, 0x060ad60a,
+	0x064f3e08, 0x0be0c108, 0x0c7e3880, 0x00000000, 0x064f4b08,
+	0x09384248, 0x0aa10009, 0x064f4a08, 0x0c7e3700, 0x00000000,
+	0x080f3e04, 0x0920c248, 0x0780034a, 0x0b408289, 0x04001249,
+	0x0960c209, 0x060f4a08, 0x06800008, 0x07800309, 0x0948c209,
+	0x07c00588, 0x0c7e33c0, 0x00000000, 0x0680c008, 0x06094008,
+	0x06803009, 0x06804008, 0x0d000009, 0x06094108, 0x06800008,
+	0x06094008, 0x0cc00000, 0x00000000, 0x0cc00000, 0x00000000,
+	0x0c000ac0, 0x00000000, 0x0780034a, 0x0400128a, 0x040002ca,
+	0x07800309, 0x04001249, 0x096102c9, 0x0609520b, 0x054042ca,
+	0x0968c2c9, 0x0609080b, 0x0681010a, 0x06c3474a, 0x0609070a,
+	0x06490b0a, 0x0980a00a, 0x0980a0ca, 0x06090b0a, 0x09c0a00a,
+	0x09c0a0ca, 0x06090b0a, 0x0698000a, 0x06c0000a, 0x064ac109,
+	0x0200a24a, 0x0609440a, 0x060f370a, 0x06a0000a, 0x06c0000a,
+	0x0200a24a, 0x0609450a, 0x060f380a, 0x0cc00000, 0x00000000,
+	0x0c0005c0, 0x00000000, 0x08095003, 0x08095000, 0x06820889,
+	0x06c00209, 0x0cc00000, 0x06095109, 0x0683ffc9, 0x0649090a,
+	0x0a21004a, 0x0aa0c009, 0x0c7fff40, 0x04401249, 0x06490b0a,
+	0x0980a00a, 0x0980a0ca, 0x06090b0a, 0x09c0a00a, 0x09c0a0ca,
+	0x06090b0a, 0x0cc00000, 0x00000000, 0x0683ffca, 0x0649530b,
+	0x090012cb, 0x0649bb09, 0x0920c249, 0x020092c9, 0x0aa10009,
+	0x0aa0c00a, 0x0c7ffe40, 0x0440128a, 0x0cc00000, 0x00000000,
+	0x080d1f30, 0x06bc0008, 0x060d1f08, 0x064d1e08, 0x09c087c8,
+	0x060d1e08, 0x06800008, 0x06c00408, 0x060d1f08, 0x06800048,
+	0x06c00408, 0x060d1f08, 0x06a19408, 0x060d1f08, 0x064d1e08,
+	0x098087c8, 0x060d1e08, 0x064d3508, 0x0920c248, 0x0780030a,
+	0x0400128a, 0x0e00024a, 0x0908c208, 0x09508209, 0x064d3509,
+	0x0908c249, 0x0f000280, 0x0200a24a, 0x0961020a, 0x060d3308,
+	0x0c062240, 0x060d210a, 0x0c0621c0, 0x080d2107, 0x0c062140,
+	0x080d2100, 0x07800148, 0x07800189, 0x0680040a, 0x0240a20a,
+	0x03409289, 0x09605248, 0x060d1f09, 0x078001c8, 0x0c061ec0,
+	0x060d2108, 0x07800108, 0x07800209, 0x0680040a, 0x0240a20a,
+	0x03409289, 0x09605248, 0x060d1f09, 0x080d1f20, 0x080d1f20,
+	0x064f1a08, 0x09086208, 0x07800049, 0x0c06d940, 0x02408248,
+	0x0c061ac0, 0x060d2108, 0x0cc00000, 0x00000000, 0x064d5308,
+	0x0aa1c008, 0x00000000, 0x060d2108, 0x080d2001, 0x064d2008,
+	0x0befc048, 0x00000000, 0x080d5300, 0x080d1f30, 0x06bc0008,
+	0x060d1f08, 0x064d1e08, 0x09c087c8, 0x060d1e08, 0x06800008,
+	0x06c00408, 0x060d1f08, 0x06800048, 0x06c00408, 0x060d1f08,
+	0x06a10408, 0x060d1f08, 0x064d1e08, 0x098087c8, 0x060d1e08,
+	0x064d3508, 0x0920c248, 0x0780030a, 0x0400128a, 0x0e00024a,
+	0x0908c208, 0x09508209, 0x064d3509, 0x0908c249, 0x0f000280,
+	0x0200a24a, 0x0961020a, 0x060d3308, 0x0c061000, 0x060d210a,
+	0x0c060f80, 0x080d2105, 0x0c060f00, 0x080d2100, 0x07800148,
+	0x07800189, 0x0680040a, 0x0240a20a, 0x03409289, 0x09605248,
+	0x060d1f09, 0x07800108, 0x07800209, 0x0680040a, 0x0240a20a,
+	0x03409289, 0x09605248, 0x060d1f09, 0x080d1f20, 0x080d1f20,
+	0x080d1f20, 0x064f1a08, 0x092e2248, 0x0aaf8009, 0x09086208,
+	0x07800049, 0x0c06c700, 0x02408248, 0x0c060880, 0x060d2108,
+	0x0cc00000, 0x00000000, 0x064d340a, 0x091c128a, 0x0aaf800a,
+	0x080d4800, 0x064d4923, 0x064d4924, 0x064d4925, 0x064d4926,
+	0x064d4927, 0x064d4928, 0x064d4929, 0x064d492a, 0x064d492b,
+	0x064d492c, 0x064d492d, 0x064d492e, 0x064d492f, 0x064d4930,
+	0x064d4931, 0x064d4932, 0x0cc00000, 0x080d5201, 0x09210324,
+	0x0740028c, 0x0400128a, 0x074002a4, 0x0400128a, 0x09210325,
+	0x0740028c, 0x0400128a, 0x074002a5, 0x0400128a, 0x09210326,
+	0x0740028c, 0x0400128a, 0x074002a6, 0x0400128a, 0x09210327,
+	0x0740028c, 0x0400128a, 0x074002a7, 0x0400128a, 0x09210328,
+	0x0740028c, 0x0400128a, 0x074002a8, 0x0400128a, 0x09210329,
+	0x0740028c, 0x0400128a, 0x074002a9, 0x0400128a, 0x0921032a,
+	0x0740028c, 0x0400128a, 0x074002aa, 0x0400128a, 0x0921032b,
+	0x0740028c, 0x0400128a, 0x074002ab, 0x0400128a, 0x0921032c,
+	0x0740028c, 0x0400128a, 0x074002ac, 0x0400128a, 0x0921032d,
+	0x0740028c, 0x0400128a, 0x074002ad, 0x0400128a, 0x0921032e,
+	0x0740028c, 0x0400128a, 0x074002ae, 0x0400128a, 0x0921032f,
+	0x0740028c, 0x0400128a, 0x074002af, 0x0400128a, 0x09210330,
+	0x0740028c, 0x0400128a, 0x074002b0, 0x0400128a, 0x09210331,
+	0x0740028c, 0x0400128a, 0x074002b1, 0x0400128a, 0x09210332,
+	0x0740028c, 0x0400128a, 0x074002b2, 0x0cc00000, 0x0400128a,
+	0x064ad600, 0x0aa0c000, 0x0c05e580, 0x064d3501, 0x064ac036,
+	0x0aa34076, 0x0aa300b6, 0x0aa2c136, 0x0aa280f6, 0x00000000,
+	0x07800580, 0x0a2d4040, 0x00000000, 0x060f4b00, 0x06800000,
+	0x07c00580, 0x0c7ffc00, 0x00000000, 0x08030504, 0x0c7ffb40,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
+};
diff --git a/drivers/amlogic/amports/arch/ucode/h264_enc/h264_enc_mc.c b/drivers/amlogic/amports/arch/ucode/h264_enc/h264_enc_mc.c
index 9491dc3..7d449f8 100644
--- a/drivers/amlogic/amports/arch/ucode/h264_enc/h264_enc_mc.c
+++ b/drivers/amlogic/amports/arch/ucode/h264_enc/h264_enc_mc.c
@@ -60,6 +60,14 @@
 #define MicroCode mix_dump_mc_gx_dblk
 #include "h264_enc_mix_dump_gx_dblk.h"
 
+#undef MicroCode
+#define MicroCode h264_enc_mc_gxtv
+#include "h264_enc_gxtv.h"
+
+#undef MicroCode
+#define MicroCode h264_enc_mc_txl
+#include "h264_enc_txl.h"
+
 
 #define CODEC_VERSION "0.0.0.1"
 #define FOR_VFORMAT VFORMAT_H264_ENC
@@ -84,6 +92,21 @@
 	REGISTER_FIRMARE_PER_CPU_VER(MESON_CPU_MAJOR_ID_GXBB, \
 				FOR_VFORMAT, n, CODEC_VERSION)
 
+#define DEF_FIRMEARE_FOR_GXTVBB(n) \
+	REGISTER_FIRMARE_PER_CPU_VER(MESON_CPU_MAJOR_ID_GXTVBB, \
+				FOR_VFORMAT, n, CODEC_VERSION)
+
+#define DEF_FIRMEARE_FOR_GXL(n) \
+	REGISTER_FIRMARE_PER_CPU_VER(MESON_CPU_MAJOR_ID_GXL, \
+				FOR_VFORMAT, n, CODEC_VERSION)
+
+#define DEF_FIRMEARE_FOR_GXM(n) \
+	REGISTER_FIRMARE_PER_CPU_VER(MESON_CPU_MAJOR_ID_GXM, \
+				FOR_VFORMAT, n, CODEC_VERSION)
+
+#define DEF_FIRMEARE_FOR_TXL(n) \
+	REGISTER_FIRMARE_PER_CPU_VER(MESON_CPU_MAJOR_ID_TXL, \
+				FOR_VFORMAT, n, CODEC_VERSION)
 
 #define REG_FIRMWARE_ALL()\
 	do {\
@@ -104,6 +127,15 @@
 		DEF_FIRMEARE_FOR_GXBB(mix_sw_mc_hdec_gx_dblk);\
 		DEF_FIRMEARE_FOR_GXBB(mix_dump_mc_gx_dblk);\
 		DEF_FIRMEARE_FOR_GXBB(h264_enc_mc_gx);\
+		DEF_FIRMEARE_FOR_GXTVBB(mix_sw_mc_hdec_gx_dblk);\
+		DEF_FIRMEARE_FOR_GXTVBB(mix_dump_mc_gx_dblk);\
+		DEF_FIRMEARE_FOR_GXTVBB(h264_enc_mc_gxtv);\
+		DEF_FIRMEARE_FOR_GXL(mix_sw_mc_hdec_gx_dblk);\
+		DEF_FIRMEARE_FOR_GXL(h264_enc_mc_gxtv);\
+		DEF_FIRMEARE_FOR_GXM(mix_sw_mc_hdec_gx_dblk);\
+		DEF_FIRMEARE_FOR_GXM(h264_enc_mc_gxtv);\
+		DEF_FIRMEARE_FOR_TXL(mix_sw_mc_hdec_gx_dblk);\
+		DEF_FIRMEARE_FOR_TXL(h264_enc_mc_txl);\
 	} while (0)
 
 INIT_DEF_FIRMWARE();
diff --git a/drivers/amlogic/amports/arch/ucode/h264_enc/h264_enc_txl.h b/drivers/amlogic/amports/arch/ucode/h264_enc/h264_enc_txl.h
new file mode 100644
index 0000000..997cd66ab
--- /dev/null
+++ b/drivers/amlogic/amports/arch/ucode/h264_enc/h264_enc_txl.h
@@ -0,0 +1,465 @@
+/*
+ * drivers/amlogic/amports/arch/m8_m8m2/h264_enc/h264_enc_txl.h
+ *
+ * Copyright (C) 2015 Amlogic, Inc. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+*/
+
+const u32 MicroCode[] __initconst = {
+	0x06810001, 0x06800000, 0x0d000001, 0x07400040, 0x0c000980,
+	0x00000000, 0x0c01d280, 0x00000000, 0x0c000fc0, 0x00000000,
+	0x06bffc40, 0x07c00000, 0x06030400, 0x00400000, 0x00000000,
+	0x00000000, 0x0c7a1f40, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x0c79b540, 0x00000000, 0x0c78ef40,
+	0x064d3008, 0x0c780a80, 0x00000000, 0x0c79b580, 0x00000000,
+	0x0cc00000, 0x00400000, 0x080d1a00, 0x06800008, 0x07c003c8,
+	0x0cc00000, 0x00000000, 0x06800022, 0x06804008, 0x07c00808,
+	0x07c008c8, 0x06800008, 0x07c00888, 0x064ac808, 0x07c00108,
+	0x064ac908, 0x07c00148, 0x064ac608, 0x07c00188, 0x064ac508,
+	0x07c001c8, 0x064ac708, 0x07c00208, 0x064aca08, 0x07c00388,
+	0x064acb08, 0x07c00048, 0x064ace08, 0x07c00508, 0x0cc00000,
+	0x00000000, 0x0cc00000, 0x00000000, 0x080d2001, 0x064d2008,
+	0x0befc048, 0x0cc00000, 0x00000000, 0x06bfff88, 0x06030408,
+	0x00400000, 0x064ac008, 0x0aa44048, 0x0a60c088, 0x0c781840,
+	0x00000000, 0x078003c9, 0x0a60c009, 0x0c002940, 0x00000000,
+	0x0a60c108, 0x0c785ac0, 0x00000000, 0x0a6100c8, 0x00000000,
+	0x0c782b00, 0x00000000, 0x0c78b700, 0x00000000, 0x0c07f300,
+	0x00000000, 0x06bc0008, 0x060d1f08, 0x064d1e08, 0x09c087c8,
+	0x060d1e08, 0x06800008, 0x06c00408, 0x060d1f08, 0x06800048,
+	0x06c00408, 0x060d1f08, 0x06a19c08, 0x060d1f08, 0x064d1e08,
+	0x098087c8, 0x060d1e08, 0x06a10808, 0x060d1f08, 0x06a00008,
+	0x060d1f08, 0x06a0a008, 0x060d1f08, 0x0c07f380, 0x080d2100,
+	0x07800148, 0x04404208, 0x0c07f280, 0x060d2108, 0x0c07f200,
+	0x080d2100, 0x07800108, 0x04404208, 0x0c07f100, 0x060d2108,
+	0x0c07f080, 0x080d2101, 0x080d1f20, 0x064d3109, 0x09010209,
+	0x0400f208, 0x05804208, 0x04401208, 0x07c00308, 0x0c07ee40,
+	0x060d2108, 0x09210209, 0x0400f208, 0x05804208, 0x04401208,
+	0x07c00348, 0x0c07ec80, 0x060d2108, 0x080d1f30, 0x080d1f30,
+	0x064d3108, 0x09210208, 0x09004248, 0x0a60c009, 0x0c7803c0,
+	0x080d1f20, 0x06800408, 0x06c00008, 0x02409248, 0x05801249,
+	0x080d1f30, 0x0c07e8c0, 0x080d2100, 0x0c07e840, 0x080d2100,
+	0x0c07e7c0, 0x080d2100, 0x0c07e740, 0x060d2109, 0x080d1f20,
+	0x080d1f30, 0x06bc0008, 0x060d1f08, 0x080ac007, 0x0c78a280,
+	0x08007801, 0x0c07de80, 0x00000000, 0x06bc0008, 0x060d1f08,
+	0x064d1e08, 0x09c087c8, 0x060d1e08, 0x06800008, 0x06c00408,
+	0x060d1f08, 0x06800048, 0x06c00408, 0x060d1f08, 0x06a1a008,
+	0x060d1f08, 0x064d1e08, 0x098087c8, 0x060d1e08, 0x0c07e080,
+	0x080d2100, 0x0c07e000, 0x080d2100, 0x080d1f20, 0x080d1f20,
+	0x0c07df00, 0x080d2100, 0x0c07de80, 0x080d2100, 0x0c07de00,
+	0x080d2100, 0x080d1f20, 0x080d1f40, 0x07800048, 0x0c009ac0,
+	0x0441a208, 0x0c07dc40, 0x060d2108, 0x0c0099c0, 0x06800008,
+	0x0c07db40, 0x060d2108, 0x0c07dac0, 0x080d2100, 0x080d1f20,
+	0x080d5500, 0x080d1f20, 0x080d1f20, 0x080d1f30, 0x06bc0008,
+	0x060d1f08, 0x00000000, 0x00000000, 0x064d1608, 0x0befc108,
+	0x00000000, 0x06800008, 0x06e00008, 0x060d1c08, 0x080d1d00,
+	0x00000000, 0x00000000, 0x064d1608, 0x0befc108, 0x064d1b08,
+	0x09808648, 0x060d1b08, 0x064d1608, 0x0befc108, 0x00000000,
+	0x080ac008, 0x0c789080, 0x08007801, 0x064d3109, 0x09010289,
+	0x0400f28a, 0x0580428a, 0x0440128a, 0x07c0030a, 0x09210289,
+	0x0400f28a, 0x0580428a, 0x0440128a, 0x07c0034a, 0x06800009,
+	0x0cc00000, 0x07c003c9, 0x0c019440, 0x00000000, 0x080f3eff,
+	0x06490b08, 0x09c08608, 0x09c08648, 0x06090b08, 0x06400908,
+	0x09c08748, 0x09c08788, 0x06000908, 0x06400808, 0x09808008,
+	0x06000808, 0x09c08008, 0x06000808, 0x0c019900, 0x00000000,
+	0x0c018f40, 0x00000000, 0x0c07c400, 0x00000000, 0x06400f08,
+	0x09808708, 0x06000f08, 0x064f4908, 0x09c08048, 0x060f4908,
+	0x06bc0008, 0x060d1f08, 0x064d1e08, 0x09c087c8, 0x060d1e08,
+	0x06800008, 0x06c00408, 0x060d1f08, 0x06800048, 0x06c00408,
+	0x060d1f08, 0x06a19408, 0x060d1f08, 0x064d1e08, 0x098087c8,
+	0x060d1e08, 0x064d3308, 0x09008248, 0x07c00089, 0x09108248,
+	0x07c000c9, 0x09210208, 0x0c07c300, 0x060d2108, 0x0c07c280,
+	0x080d2107, 0x064d3109, 0x09010209, 0x0400f208, 0x05804208,
+	0x04401208, 0x07c00308, 0x09210209, 0x0400f208, 0x05804208,
+	0x04401208, 0x07c00348, 0x06800008, 0x07c00248, 0x060f1b08,
+	0x07800309, 0x0946d209, 0x060d3208, 0x06940008, 0x06c00008,
+	0x064ac109, 0x02008248, 0x060f2008, 0x06803908, 0x064d3309,
+	0x09008249, 0x09508209, 0x09808508, 0x09808548, 0x098087c8,
+	0x060f1f08, 0x064ad508, 0x07c00448, 0x0ae0c008, 0x04001208,
+	0x06800008, 0x07c00488, 0x06800008, 0x07c00408, 0x07800308,
+	0x04001208, 0x07c004c8, 0x07800309, 0x07800348, 0x0960f248,
+	0x060f1e09, 0x0c07b6c0, 0x080d2100, 0x07800148, 0x07800189,
+	0x0680040a, 0x0240a20a, 0x03409289, 0x09605248, 0x060d1f09,
+	0x078001c8, 0x0c07b440, 0x060d2108, 0x07800108, 0x07800209,
+	0x0680040a, 0x0240a20a, 0x03409289, 0x09605248, 0x060d1f09,
+	0x080d1f20, 0x080d1f20, 0x064f1c08, 0x09206208, 0x07800049,
+	0x0c006ec0, 0x02408248, 0x0c07b040, 0x060d2108, 0x080d3d00,
+	0x064acd08, 0x060f4208, 0x0c006f00, 0x00000000, 0x0680fac3,
+	0x0681bfc4, 0x080d300f, 0x064d0008, 0x09808008, 0x09808048,
+	0x09808088, 0x09c080c8, 0x09c08148, 0x09c08188, 0x09c081c8,
+	0x060d0008, 0x06bfffca, 0x06c0000a, 0x060f770a, 0x06800008,
+	0x07c00548, 0x064f6d08, 0x09203208, 0x0b618108, 0x07800548,
+	0x04001208, 0x07c00548, 0x0c7ffe80, 0x060f760a, 0x064acf08,
+	0x060f4808, 0x06808089, 0x06d00009, 0x07800508, 0x09485248,
+	0x06c0000a, 0x04820288, 0x0aa2c00a, 0x00000000, 0x09809289,
+	0x098092c9, 0x09809309, 0x09809349, 0x09809389, 0x098093c9,
+	0x09809409, 0x09809449, 0x09809489, 0x06c0000a, 0x04840288,
+	0x0aa1400a, 0x00000000, 0x098094c9, 0x09809509, 0x09809549,
+	0x060f4009, 0x080ac005, 0x0c785e40, 0x08007801, 0x0c017040,
+	0x00000000, 0x06493008, 0x06800009, 0x09410209, 0x06093008,
+	0x060d2608, 0x064f4008, 0x09c08048, 0x060f4008, 0x080f1f00,
+	0x080f3eff, 0x064d0008, 0x09c08088, 0x060d0008, 0x09808088,
+	0x060d0008, 0x064d2508, 0x09808188, 0x098081c8, 0x09808288,
+	0x060d2508, 0x064f3408, 0x098085c8, 0x09808508, 0x09808448,
+	0x09808408, 0x098083c8, 0x09808148, 0x060f3408, 0x080f3f08,
+	0x064acf08, 0x060f4808, 0x06808089, 0x06d00009, 0x07800508,
+	0x09485248, 0x06c00008, 0x04820208, 0x0aa2c008, 0x00000000,
+	0x09809289, 0x098092c9, 0x09809309, 0x09809349, 0x09809389,
+	0x098093c9, 0x09809409, 0x09809449, 0x09809489, 0x07800508,
+	0x06c00008, 0x04840208, 0x0aa14008, 0x00000000, 0x098094c9,
+	0x09809509, 0x09809549, 0x060f4009, 0x0c0156c0, 0x00000000,
+	0x06490b08, 0x09c08608, 0x09808648, 0x06090b08, 0x06400908,
+	0x09808748, 0x09c08788, 0x06000908, 0x06400808, 0x09808008,
+	0x06000808, 0x09c08008, 0x06000808, 0x0c015bc0, 0x00000000,
+	0x0c015200, 0x00000000, 0x0c0786c0, 0x00000000, 0x06400f08,
+	0x09808708, 0x06000f08, 0x064f4308, 0x09808008, 0x09c08048,
+	0x09808088, 0x09c080c8, 0x060f4308, 0x09c08008, 0x09808048,
+	0x09c08088, 0x098080c8, 0x060f4308, 0x064f3b08, 0x098087c8,
+	0x060f3b08, 0x09c087c8, 0x060f3b08, 0x064f1508, 0x09c08508,
+	0x09c084c8, 0x09808748, 0x09c08448, 0x09c08488, 0x09c08348,
+	0x09c08308, 0x09808248, 0x09808008, 0x060f1508, 0x09808508,
+	0x098084c8, 0x060f1508, 0x080d3400, 0x080f4a00, 0x09808488,
+	0x09808448, 0x09808348, 0x09808308, 0x098085c8, 0x09808608,
+	0x09808648, 0x09c08688, 0x098086c8, 0x09c08248, 0x09c08008,
+	0x060f1508, 0x064f4908, 0x09c08048, 0x09c081c8, 0x09808008,
+	0x060f4908, 0x098087c8, 0x09808788, 0x09808748, 0x098086c8,
+	0x09808688, 0x09808648, 0x09808608, 0x09808308, 0x09808288,
+	0x09c08248, 0x098081c8, 0x09808088, 0x09808048, 0x060f4908,
+	0x068000c8, 0x068000c9, 0x09484209, 0x068000c9, 0x09504209,
+	0x06800049, 0x09581209, 0x06800009, 0x095a1209, 0x06800049,
+	0x095c5209, 0x060f5908, 0x06800388, 0x06800489, 0x09508209,
+	0x06800149, 0x09604209, 0x068000c9, 0x09684209, 0x06800109,
+	0x09704209, 0x06800089, 0x09704209, 0x060f5a08, 0x06800008,
+	0x06800009, 0x09508209, 0x06800809, 0x09608209, 0x06801409,
+	0x09708209, 0x060f5b08, 0x06801008, 0x06800009, 0x09508209,
+	0x06801809, 0x09608209, 0x06803009, 0x09708209, 0x060f5c08,
+	0x06800608, 0x06801409, 0x09508209, 0x06800809, 0x09608209,
+	0x06801809, 0x09708209, 0x060f5d08, 0x068000c8, 0x06801809,
+	0x0948c209, 0x06800249, 0x09607209, 0x06800009, 0x096e1209,
+	0x06800c09, 0x09708209, 0x060f5e08, 0x068000c8, 0x06800009,
+	0x09461209, 0x06800049, 0x09481209, 0x06800009, 0x094a2209,
+	0x06803009, 0x0950c209, 0x06801c09, 0x0968c209, 0x060f5f08,
+	0x064d3109, 0x09010209, 0x0400f208, 0x05804208, 0x04401208,
+	0x07c00308, 0x09210209, 0x0400f208, 0x05804208, 0x04401208,
+	0x07c00348, 0x07800309, 0x07800348, 0x0958c248, 0x06499008,
+	0x09708248, 0x060f4f09, 0x06bc0008, 0x060d1f08, 0x064d1e08,
+	0x09c087c8, 0x060d1e08, 0x06800008, 0x06c00408, 0x060d1f08,
+	0x06800048, 0x06c00408, 0x060d1f08, 0x06a10408, 0x060d1f08,
+	0x064d1e08, 0x098087c8, 0x060d1e08, 0x064d3308, 0x09008248,
+	0x07c00089, 0x09108248, 0x07c000c9, 0x09210208, 0x0c076100,
+	0x060d2108, 0x0c076080, 0x080d2105, 0x06800048, 0x07c00248,
+	0x060f1b08, 0x07800309, 0x0946d209, 0x060d3208, 0x06803908,
+	0x064d3309, 0x09008249, 0x09508209, 0x09808508, 0x09808548,
+	0x098087c8, 0x060f1f08, 0x064ad508, 0x07c00448, 0x0ae0c008,
+	0x04001208, 0x06800008, 0x07c00488, 0x06800008, 0x07c00408,
+	0x07800308, 0x04001208, 0x07c004c8, 0x06bfffc8, 0x060d3708,
+	0x07800309, 0x07800348, 0x0960f248, 0x060f1e09, 0x0c075840,
+	0x080d2100, 0x07800148, 0x07800189, 0x0680040a, 0x0240a20a,
+	0x03409289, 0x09605248, 0x060d1f09, 0x07800108, 0x07800209,
+	0x0680040a, 0x0240a20a, 0x03409289, 0x09605248, 0x060d1f09,
+	0x080d1f20, 0x080d1f20, 0x080d1f20, 0x064f1d08, 0x09206208,
+	0x04000248, 0x095a6248, 0x060f3c09, 0x07800049, 0x0c001000,
+	0x02408248, 0x0c075180, 0x060d2108, 0x080d3d00, 0x080d5300,
+	0x064acd08, 0x060f4208, 0x0c001e00, 0x00000000, 0x06814dc3,
+	0x0681bfc4, 0x080d300f, 0x06800008, 0x06c00448, 0x060d2f08,
+	0x064d0008, 0x09c08008, 0x09c08048, 0x09c08088, 0x09c08188,
+	0x09c081c8, 0x060d0008, 0x09808008, 0x09808048, 0x09808088,
+	0x098080c8, 0x09808148, 0x09808188, 0x098081c8, 0x060d0008,
+	0x06bfffca, 0x06c0000a, 0x060f770a, 0x06a00009, 0x06d00009,
+	0x060f6f09, 0x060f6f09, 0x060f6f09, 0x060f6f09, 0x06800008,
+	0x07c00548, 0x064f6d08, 0x0be28048, 0x07800548, 0x04001208,
+	0x07c00548, 0x060f760a, 0x060f6e09, 0x060f6e09, 0x060f6e09,
+	0x0c7ffdc0, 0x060f6e09, 0x06800048, 0x07800309, 0x0948c209,
+	0x060f4b08, 0x080ac005, 0x0c780080, 0x08007801, 0x00800000,
+	0x07800008, 0x0c7f3a40, 0x06030408, 0x06800009, 0x0b005248,
+	0x02409209, 0x05401208, 0x0cc00000, 0x04401208, 0x0cc00000,
+	0x05401209, 0x06bfffda, 0x06c0001a, 0x06800009, 0x0680001b,
+	0x06c0001b, 0x0400071b, 0x0680000b, 0x0680c00e, 0x0680100f,
+	0x0740039a, 0x0400138e, 0x07400389, 0x0400138e, 0x0740039b,
+	0x0400138e, 0x0740038b, 0x0400138e, 0x0aee004f, 0x044013cf,
+	0x0690000e, 0x06c0000e, 0x064ac10f, 0x0200e3ce, 0x0680000f,
+	0x0603510e, 0x0680400d, 0x0603520d, 0x06a0c00d, 0x0603500d,
+	0x0643500d, 0x0580f34d, 0x0bef804d, 0x00000000, 0x040403cf,
+	0x0b611e8f, 0x0680800d, 0x0c7ffd00, 0x0200e34e, 0x064d330d,
+	0x0900834d, 0x0680000e, 0x0680100f, 0x0b8053cd, 0x00000000,
+	0x0404038e, 0x0c7fff40, 0x040403cf, 0x07c0028e, 0x044013cf,
+	0x07c002cf, 0x060d371a, 0x060d391b, 0x060d381a, 0x060d3a1b,
+	0x0cc00000, 0x00000000, 0x08098002, 0x08098000, 0x06a0001d,
+	0x06d0001d, 0x06a0001e, 0x06d0001e, 0x06a0001f, 0x06d0001f,
+	0x06a00020, 0x06d00020, 0x0690000a, 0x06bfffda, 0x06c0001a,
+	0x0400085a, 0x0680000d, 0x0680001b, 0x06c0001b, 0x0400071b,
+	0x06800009, 0x0680c00e, 0x0680054f, 0x0740039a, 0x0400138e,
+	0x0740038d, 0x0400138e, 0x0740039b, 0x0400138e, 0x07400389,
+	0x0400138e, 0x0740039d, 0x0400138e, 0x0740038a, 0x0400138e,
+	0x0740039e, 0x0400138e, 0x0740038a, 0x0400138e, 0x0740039f,
+	0x0400138e, 0x0740038a, 0x0400138e, 0x074003a0, 0x0400138e,
+	0x0740038a, 0x0400138e, 0x0aea004f, 0x044013cf, 0x0690000e,
+	0x06c0000e, 0x064ac10f, 0x0200e3ce, 0x0680000f, 0x0603510e,
+	0x06803f0d, 0x0603520d, 0x06a0c00d, 0x0603500d, 0x0643500d,
+	0x0580f34d, 0x0bef804d, 0x00000000, 0x040153cf, 0x0b611e8f,
+	0x06807e0d, 0x0c7ffd00, 0x0200e34e, 0x064d330d, 0x0900834d,
+	0x0680000e, 0x0680054f, 0x0b8053cd, 0x00000000, 0x0401538e,
+	0x0c7fff40, 0x040153cf, 0x07c0028e, 0x044013cf, 0x07c002cf,
+	0x060d371a, 0x060d391b, 0x060d4a1d, 0x060d4b1e, 0x060d4c1f,
+	0x060d4d20, 0x060d4a1d, 0x060d4a1d, 0x060d381a, 0x060d3a1b,
+	0x060d4e1d, 0x060d4f1e, 0x060d501f, 0x060d5120, 0x0cc00000,
+	0x00000000, 0x0aa28008, 0x064d1e0e, 0x064d1a0f, 0x0947d38f,
+	0x0240f88e, 0x07c0084f, 0x0400088e, 0x064d370e, 0x0cb80003,
+	0x064d390f, 0x0c7f0fc0, 0x00000000, 0x078004c8, 0x0b214048,
+	0x04401208, 0x07c004c8, 0x06bfffc9, 0x060d3709, 0x07800488,
+	0x0aa38008, 0x04401208, 0x0a630008, 0x07c00488, 0x0c00eb00,
+	0x00000000, 0x06bfffc9, 0x060d3709, 0x060d3809, 0x064ad508,
+	0x07c00488, 0x07800308, 0x04001208, 0x07c004c8, 0x064d3533,
+	0x064d3e08, 0x09104208, 0x09784cc8, 0x064d3b34, 0x064d3c35,
+	0x060d371a, 0x064d3510, 0x0908c250, 0x0a620009, 0x060d391b,
+	0x06bfffc9, 0x06c00009, 0x060d3809, 0x06800009, 0x06c00009,
+	0x060d3a09, 0x09004250, 0x0aa1c249, 0x080d3601, 0x080d3603,
+	0x080d3605, 0x080d3606, 0x0c7801c0, 0x00000000, 0x080d3602,
+	0x080d3603, 0x080d3604, 0x080d3605, 0x080d3606, 0x064d3708,
+	0x064d3e09, 0x080d360f, 0x0780080a, 0x0680400b, 0x0a8152ca,
+	0x0780084b, 0x0740028b, 0x06807ccb, 0x0b8112ca, 0x0400128a,
+	0x0680400b, 0x0240c2ca, 0x0603520c, 0x064ad20a, 0x0603510a,
+	0x06a0400b, 0x0603500b, 0x054012cc, 0x0200a2ca, 0x060ad20a,
+	0x0643500b, 0x0580f2cb, 0x0bef804b, 0x00000000, 0x0680400a,
+	0x09208333, 0x090882f3, 0x0950830b, 0x0740028c, 0x0400128a,
+	0x09384333, 0x090042f3, 0x0950830b, 0x0740028c, 0x0400128a,
+	0x09210334, 0x0740028c, 0x0400128a, 0x074002b4, 0x0400128a,
+	0x09210335, 0x0740028c, 0x0400128a, 0x074002b5, 0x0400128a,
+	0x09346208, 0x09508248, 0x07400289, 0x0400128a, 0x078008c8,
+	0x04001208, 0x07c008c8, 0x04803208, 0x064f6809, 0x0aa28008,
+	0x064f640b, 0x064f6509, 0x0aa1c048, 0x064f610b, 0x064f6609,
+	0x0aa10088, 0x064f620b, 0x064f6709, 0x064f630b, 0x07400289,
+	0x0400128a, 0x0740028b, 0x0400128a, 0x06800009, 0x07400289,
+	0x0400128a, 0x07400289, 0x0400128a, 0x07c0080a, 0x0908c210,
+	0x0680c10a, 0x07800289, 0x0a814248, 0x02409248, 0x04401249,
+	0x05402249, 0x0680c00a, 0x0200a289, 0x0740028e, 0x0400128a,
+	0x0581038e, 0x0740028e, 0x0400128a, 0x0740028f, 0x0400128a,
+	0x058103cf, 0x0740028f, 0x0400528a, 0x078002c9, 0x0b42a248,
+	0x07800309, 0x0b428248, 0x0700029a, 0x0400128a, 0x0700028e,
+	0x0961068e, 0x0400128a, 0x0700029b, 0x0400128a, 0x0700028f,
+	0x096106cf, 0x07800548, 0x07800309, 0x0ac1a248, 0x07800289,
+	0x0240a248, 0x0ba0900a, 0x0c7ee640, 0x0540228a, 0x02009289,
+	0x0680c00a, 0x0200a289, 0x064f6d08, 0x09203208, 0x0b63c108,
+	0x07800548, 0x04001208, 0x07c00548, 0x07800309, 0x04001249,
+	0x0b002248, 0x0c7ee2c0, 0x07000288, 0x0400128a, 0x07000289,
+	0x09610209, 0x060f7608, 0x0c7ffc40, 0x0400328a, 0x0c7ee0c0,
+	0x00000000, 0x0908c210, 0x07800289, 0x02409248, 0x05402249,
+	0x0680c00a, 0x0200a289, 0x064d0009, 0x09384249, 0x0a6f8009,
+	0x00000000, 0x064d3609, 0x0a6ec009, 0x00000000, 0x064d370e,
+	0x064d390f, 0x0740028e, 0x0400128a, 0x0581038e, 0x0740028e,
+	0x0400128a, 0x0740028f, 0x0400128a, 0x058103cf, 0x0740028f,
+	0x0400128a, 0x0690000e, 0x06c0000e, 0x064ac10f, 0x0200e3ce,
+	0x0780028f, 0x054033cf, 0x0200e3ce, 0x0603510e, 0x0680400d,
+	0x0603520d, 0x06a0c00d, 0x0603500d, 0x0908c210, 0x07800309,
+	0x0b84d248, 0x04001208, 0x0920c210, 0x07800349, 0x0b404248,
+	0x06800008, 0x0c7811c0, 0x07c00548, 0x080d3000, 0x080d1f30,
+	0x06bc0008, 0x060d1f08, 0x06800008, 0x07c00548, 0x080f6d00,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x064d1608, 0x0befc108, 0x00000000, 0x06800008,
+	0x06e00008, 0x060d1c08, 0x080d1d00, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x064d1608,
+	0x0befc108, 0x00000000, 0x064d1b08, 0x09808648, 0x060d1b08,
+	0x064d1608, 0x0befc108, 0x00000000, 0x0643500b, 0x0580f2cb,
+	0x0bef804b, 0x00000000, 0x0780080a, 0x0780084b, 0x0740028b,
+	0x0400128a, 0x0680400b, 0x0240c2ca, 0x0603520c, 0x064ad20a,
+	0x0603510a, 0x06a0400b, 0x0603500b, 0x0643500b, 0x0580f2cb,
+	0x0bef804b, 0x00000000, 0x07800188, 0x04001208, 0x07c00188,
+	0x07800208, 0x04002208, 0x07c00208, 0x080ac009, 0x06800022,
+	0x06804008, 0x07c00808, 0x07c008c8, 0x06800008, 0x07c00888,
+	0x0c7ec3c0, 0x08007801, 0x07c00288, 0x0403f248, 0x07c002c9,
+	0x05403208, 0x0690000e, 0x06c0000e, 0x064ac10f, 0x0200e3ce,
+	0x0200e20e, 0x0680400f, 0x06b0c010, 0x0643500d, 0x0580f34d,
+	0x0bef804d, 0x00000000, 0x0643530d, 0x0900c34d, 0x0a6f800d,
+	0x00000000, 0x0603510e, 0x0603520f, 0x06035010, 0x0643500d,
+	0x0580f34d, 0x0bef804d, 0x00000000, 0x0c7fd2c0, 0x0680c00a,
+	0x078004c8, 0x0b224048, 0x04401208, 0x07c004c8, 0x06a00089,
+	0x06f00009, 0x060d4c09, 0x0b20c048, 0x00000000, 0x060d4d09,
+	0x07800488, 0x0aa44008, 0x04401208, 0x0a63c008, 0x07c00488,
+	0x0c00a700, 0x00000000, 0x06bfffc9, 0x060d3809, 0x06a00089,
+	0x06f00009, 0x060d4c09, 0x060d4d09, 0x064ad508, 0x07c00488,
+	0x07800308, 0x04001208, 0x07c004c8, 0x064d4a11, 0x064d4b12,
+	0x064d4c13, 0x064d4d14, 0x060d4a1d, 0x060d4b1e, 0x060d4c1f,
+	0x060d4d20, 0x060d371a, 0x064d3510, 0x0908c250, 0x0a638009,
+	0x060d391b, 0x06a00009, 0x06d00009, 0x060d4e09, 0x060d4f09,
+	0x060d5009, 0x060d5109, 0x06bfffc9, 0x06c00009, 0x060d3809,
+	0x06800009, 0x06c00009, 0x060d3a09, 0x064d3533, 0x09004250,
+	0x0b62c249, 0x080d3607, 0x080d3601, 0x0c00ae80, 0x080d3608,
+	0x080d3609, 0x080d3604, 0x080d3605, 0x080d3606, 0x0c780500,
+	0x00000000, 0x064d3e08, 0x09104208, 0x09784cc8, 0x064d3b34,
+	0x064d3c35, 0x080d5201, 0x0aa1c249, 0x080d3601, 0x080d3603,
+	0x080d3605, 0x080d3606, 0x0c7801c0, 0x00000000, 0x080d3602,
+	0x080d3603, 0x080d3604, 0x080d3605, 0x080d3606, 0x064d0009,
+	0x09384249, 0x0aaf8209, 0x00000000, 0x09004373, 0x064d3e09,
+	0x064d3708, 0x080d360f, 0x0780080a, 0x0680400b, 0x0a8172ca,
+	0x0780084b, 0x0740028b, 0x0a60c20d, 0x06807ccb, 0x068075cb,
+	0x0b8112ca, 0x0400128a, 0x0680400b, 0x0240c2ca, 0x0603520c,
+	0x064ad20a, 0x0603510a, 0x06a0400b, 0x0603500b, 0x054012cc,
+	0x0200a2ca, 0x060ad20a, 0x0643500b, 0x0580f2cb, 0x0bef804b,
+	0x00000000, 0x0680400a, 0x09208333, 0x090882f3, 0x0950830b,
+	0x0740028c, 0x0400128a, 0x09384333, 0x064d3533, 0x090042f3,
+	0x0950830b, 0x0740028c, 0x0400128a, 0x0b66024d, 0x09210323,
+	0x0740028c, 0x0400128a, 0x074002a3, 0x0400128a, 0x0aa300cd,
+	0x0a61820d, 0x0921032b, 0x0c00a040, 0x00000000, 0x0c7805c0,
+	0x00000000, 0x0740028c, 0x0400128a, 0x074002ab, 0x0c780480,
+	0x0400128a, 0x09210327, 0x0740028c, 0x0400128a, 0x074002a7,
+	0x0c780300, 0x0400128a, 0x09210334, 0x0740028c, 0x0400128a,
+	0x074002b4, 0x0400128a, 0x09210335, 0x0740028c, 0x0400128a,
+	0x074002b5, 0x0400128a, 0x09346208, 0x09508248, 0x07400289,
+	0x0400128a, 0x078008c8, 0x04001208, 0x07c008c8, 0x04803208,
+	0x064f6809, 0x0aa28008, 0x064f640b, 0x064f6509, 0x0aa1c048,
+	0x064f610b, 0x064f6609, 0x0aa10088, 0x064f620b, 0x064f6709,
+	0x064f630b, 0x07400289, 0x0400128a, 0x0740028b, 0x0400128a,
+	0x06800009, 0x07400289, 0x0400128a, 0x07400289, 0x0400128a,
+	0x07c0080a, 0x0908c210, 0x0aa10008, 0x0680bfca, 0x0c0014c0,
+	0x04401208, 0x0908c210, 0x07800309, 0x0b843248, 0x00000000,
+	0x064d0009, 0x09384249, 0x0a6f8009, 0x00000000, 0x064d3609,
+	0x0a6ec009, 0x00000000, 0x0920c290, 0x07800349, 0x0b80c24a,
+	0x00000000, 0x064d5309, 0x0aa1c009, 0x00000000, 0x060d2109,
+	0x080d2001, 0x064d2009, 0x0befc049, 0x00000000, 0x0c7fb100,
+	0x00000000, 0x064d370e, 0x064d390f, 0x064d4a11, 0x064d4b12,
+	0x064d4c13, 0x064d4d14, 0x0c000c80, 0x07800308, 0x0c001540,
+	0x06800011, 0x07800594, 0x0a628014, 0x06bffdca, 0x06430413,
+	0x0603040a, 0x00400000, 0x07800594, 0x0aafc014, 0x00000000,
+	0x00800000, 0x06030413, 0x09814014, 0x07c00594, 0x06a00014,
+	0x06d00014, 0x060d4d14, 0x06800009, 0x07c00549, 0x080f6d00,
+	0x060f6f14, 0x060f6f14, 0x060f6f14, 0x060f6f14, 0x06bfffca,
+	0x06c0000a, 0x060f770a, 0x0c001900, 0x0680c00a, 0x060d4a1d,
+	0x060d4b1e, 0x060d4c1f, 0x060d4d20, 0x0c780280, 0x0680c30a,
+	0x0401928a, 0x0908c210, 0x04002208, 0x078002c9, 0x0b004248,
+	0x0c000b00, 0x0908c450, 0x0680c60a, 0x0c001500, 0x00000000,
+	0x0c7e7780, 0x00000000, 0x07800289, 0x0240a248, 0x0540324a,
+	0x0540228a, 0x02009289, 0x0680c00a, 0x0200a289, 0x0740028e,
+	0x0400128a, 0x0581038e, 0x0740028e, 0x0400128a, 0x0740028f,
+	0x0400128a, 0x058103cf, 0x0740028f, 0x0400128a, 0x07400291,
+	0x0400128a, 0x05810451, 0x07400291, 0x0400128a, 0x07400292,
+	0x0400128a, 0x05810492, 0x07400292, 0x0400128a, 0x07400293,
+	0x0400128a, 0x058104d3, 0x07400293, 0x0400128a, 0x07400294,
+	0x0400128a, 0x05810514, 0x0cc00000, 0x07400294, 0x0690000e,
+	0x06c0000e, 0x064ac10f, 0x0200e3ce, 0x0780028f, 0x0540434f,
+	0x054033cf, 0x0200f34f, 0x0200e3ce, 0x0603510e, 0x06803f0d,
+	0x0603520d, 0x06a0c00d, 0x0603500d, 0x07c00291, 0x04014251,
+	0x07c002c9, 0x05404251, 0x05403211, 0x02008248, 0x0690000e,
+	0x06c0000e, 0x064ac10f, 0x0200e3ce, 0x0200e20e, 0x06803f0f,
+	0x06b0c010, 0x0643500d, 0x0580f34d, 0x0bef804d, 0x00000000,
+	0x0643530d, 0x0900c34d, 0x0a6f800d, 0x00000000, 0x0603510e,
+	0x0603520f, 0x06035010, 0x0643500d, 0x0580f34d, 0x0bef804d,
+	0x0cc00000, 0x00000000, 0x040006a1, 0x070002a1, 0x0400128a,
+	0x07000289, 0x09610849, 0x0400128a, 0x040006dc, 0x0700029c,
+	0x0400128a, 0x07000289, 0x09610709, 0x0400128a, 0x0700029d,
+	0x0400128a, 0x07000289, 0x09610749, 0x0400128a, 0x0700029e,
+	0x0400128a, 0x07000289, 0x09610789, 0x0400128a, 0x0700029f,
+	0x0400128a, 0x07000289, 0x096107c9, 0x0400128a, 0x070002a0,
+	0x0400128a, 0x07000289, 0x09610809, 0x07800548, 0x07800289,
+	0x0240a248, 0x0ba0854a, 0x0cc00000, 0x0540324a, 0x0540228a,
+	0x02009289, 0x0680c00a, 0x0200a289, 0x064f6d08, 0x09203248,
+	0x0b608109, 0x0a208048, 0x0c780a80, 0x07800548, 0x078002c9,
+	0x0acfd248, 0x04001208, 0x07c00548, 0x07800309, 0x04001249,
+	0x0b003248, 0x0c7801c0, 0x0400128a, 0x07000288, 0x0400128a,
+	0x07000289, 0x09610209, 0x060f7608, 0x0400328a, 0x07000288,
+	0x0400128a, 0x07000289, 0x09610209, 0x060f6e08, 0x0400128a,
+	0x07000288, 0x0400128a, 0x07000289, 0x09610209, 0x060f6e08,
+	0x0400128a, 0x07000288, 0x0400128a, 0x07000289, 0x09610209,
+	0x060f6e08, 0x0400128a, 0x07000288, 0x0400128a, 0x07000289,
+	0x09610209, 0x060f6e08, 0x0c7ff500, 0x0400128a, 0x0cc00000,
+	0x00000000, 0x064d1602, 0x09162082, 0x0aa0c002, 0x0c7fff40,
+	0x00000000, 0x0c7e4b80, 0x00000000, 0x080f3601, 0x0cb80004,
+	0x064f3e08, 0x0be0c088, 0x0c780e40, 0x00000000, 0x080f3e02,
+	0x064f1f08, 0x09361248, 0x0aa10009, 0x09042248, 0x0c7e4840,
+	0x00000000, 0x0aa14009, 0x0680324a, 0x0aa0c049, 0x0680348a,
+	0x0680390a, 0x07800088, 0x07800309, 0x0b809248, 0x04001208,
+	0x078000c9, 0x07800348, 0x0b803209, 0x04001249, 0x06800009,
+	0x07c000c9, 0x06800008, 0x07c00088, 0x0950c288, 0x0a60c008,
+	0x07800309, 0x0980a50a, 0x0a403248, 0x00000000, 0x0980a58a,
+	0x078000c8, 0x0a60c008, 0x060f4108, 0x0980a54a, 0x07800408,
+	0x0ac03248, 0x04001208, 0x0980a5ca, 0x0ac03248, 0x07c00408,
+	0x0980a54a, 0x07800448, 0x0aa28008, 0x04401208, 0x0a620008,
+	0x07c00448, 0x0980a50a, 0x0980a54a, 0x064ad508, 0x07c00448,
+	0x06800008, 0x07c00408, 0x0980a7ca, 0x060f1f0a, 0x064f3e08,
+	0x0be0c108, 0x0c7e3b40, 0x00000000, 0x064f4b08, 0x09384248,
+	0x0aa10009, 0x064f4a08, 0x0c7e39c0, 0x00000000, 0x080f3e04,
+	0x0920c248, 0x0780034a, 0x0b408289, 0x04001249, 0x0960c209,
+	0x060f4a08, 0x06800008, 0x07800309, 0x0948c209, 0x07c00588,
+	0x0c7e3680, 0x00000000, 0x0680c008, 0x06094008, 0x06803009,
+	0x06804008, 0x0d000009, 0x06094108, 0x06800008, 0x06094008,
+	0x0cc00000, 0x00000000, 0x0cc00000, 0x00000000, 0x0c000ac0,
+	0x00000000, 0x0780034a, 0x0400128a, 0x040002ca, 0x07800309,
+	0x04001249, 0x096102c9, 0x0609520b, 0x054042ca, 0x0968c2c9,
+	0x0609080b, 0x0681010a, 0x06c3474a, 0x0609070a, 0x06490b0a,
+	0x0980a00a, 0x0980a0ca, 0x06090b0a, 0x09c0a00a, 0x09c0a0ca,
+	0x06090b0a, 0x0698000a, 0x06c0000a, 0x064ac109, 0x0200a24a,
+	0x0609440a, 0x060f370a, 0x06a0000a, 0x06c0000a, 0x0200a24a,
+	0x0609450a, 0x060f380a, 0x0cc00000, 0x00000000, 0x0c0005c0,
+	0x00000000, 0x08095003, 0x08095000, 0x06820889, 0x06c00209,
+	0x0cc00000, 0x06095109, 0x0683ffc9, 0x0649090a, 0x0a21004a,
+	0x0aa0c009, 0x0c7fff40, 0x04401249, 0x06490b0a, 0x0980a00a,
+	0x0980a0ca, 0x06090b0a, 0x09c0a00a, 0x09c0a0ca, 0x06090b0a,
+	0x0cc00000, 0x00000000, 0x0683ffca, 0x0649530b, 0x090012cb,
+	0x0649bb09, 0x0920c249, 0x020092c9, 0x0aa10009, 0x0aa0c00a,
+	0x0c7ffe40, 0x0440128a, 0x0cc00000, 0x00000000, 0x080d1f30,
+	0x06bc0008, 0x060d1f08, 0x064d1e08, 0x09c087c8, 0x060d1e08,
+	0x06800008, 0x06c00408, 0x060d1f08, 0x06800048, 0x06c00408,
+	0x060d1f08, 0x06a19408, 0x060d1f08, 0x064d1e08, 0x098087c8,
+	0x060d1e08, 0x064d3508, 0x0920c248, 0x0780030a, 0x0400128a,
+	0x0e00024a, 0x0908c208, 0x09508209, 0x064d3509, 0x0908c249,
+	0x0f000280, 0x0200a24a, 0x0961020a, 0x060d3308, 0x0c062240,
+	0x060d210a, 0x0c0621c0, 0x080d2107, 0x0c062140, 0x080d2100,
+	0x07800148, 0x07800189, 0x0680040a, 0x0240a20a, 0x03409289,
+	0x09605248, 0x060d1f09, 0x078001c8, 0x0c061ec0, 0x060d2108,
+	0x07800108, 0x07800209, 0x0680040a, 0x0240a20a, 0x03409289,
+	0x09605248, 0x060d1f09, 0x080d1f20, 0x080d1f20, 0x064f1a08,
+	0x09086208, 0x07800049, 0x0c06d940, 0x02408248, 0x0c061ac0,
+	0x060d2108, 0x0cc00000, 0x00000000, 0x064d5308, 0x0aa1c008,
+	0x00000000, 0x060d2108, 0x080d2001, 0x064d2008, 0x0befc048,
+	0x00000000, 0x080d5300, 0x080d1f30, 0x06bc0008, 0x060d1f08,
+	0x064d1e08, 0x09c087c8, 0x060d1e08, 0x06800008, 0x06c00408,
+	0x060d1f08, 0x06800048, 0x06c00408, 0x060d1f08, 0x06a10408,
+	0x060d1f08, 0x064d1e08, 0x098087c8, 0x060d1e08, 0x064d3508,
+	0x0920c248, 0x0780030a, 0x0400128a, 0x0e00024a, 0x0908c208,
+	0x09508209, 0x064d3509, 0x0908c249, 0x0f000280, 0x0200a24a,
+	0x0961020a, 0x060d3308, 0x0c061000, 0x060d210a, 0x0c060f80,
+	0x080d2105, 0x0c060f00, 0x080d2100, 0x07800148, 0x07800189,
+	0x0680040a, 0x0240a20a, 0x03409289, 0x09605248, 0x060d1f09,
+	0x07800108, 0x07800209, 0x0680040a, 0x0240a20a, 0x03409289,
+	0x09605248, 0x060d1f09, 0x080d1f20, 0x080d1f20, 0x080d1f20,
+	0x064f1a08, 0x092e2248, 0x0aaf8009, 0x09086208, 0x07800049,
+	0x0c06c700, 0x02408248, 0x0c060880, 0x060d2108, 0x0cc00000,
+	0x00000000, 0x064d340a, 0x091c128a, 0x0aaf800a, 0x080d4800,
+	0x064d4923, 0x064d4924, 0x064d4925, 0x064d4926, 0x064d4927,
+	0x064d4928, 0x064d4929, 0x064d492a, 0x064d492b, 0x064d492c,
+	0x064d492d, 0x064d492e, 0x064d492f, 0x064d4930, 0x064d4931,
+	0x064d4932, 0x0cc00000, 0x080d5201, 0x09210324, 0x0740028c,
+	0x0400128a, 0x074002a4, 0x0400128a, 0x09210325, 0x0740028c,
+	0x0400128a, 0x074002a5, 0x0400128a, 0x09210326, 0x0740028c,
+	0x0400128a, 0x074002a6, 0x0400128a, 0x09210327, 0x0740028c,
+	0x0400128a, 0x074002a7, 0x0400128a, 0x09210328, 0x0740028c,
+	0x0400128a, 0x074002a8, 0x0400128a, 0x09210329, 0x0740028c,
+	0x0400128a, 0x074002a9, 0x0400128a, 0x0921032a, 0x0740028c,
+	0x0400128a, 0x074002aa, 0x0400128a, 0x0921032b, 0x0740028c,
+	0x0400128a, 0x074002ab, 0x0400128a, 0x0921032c, 0x0740028c,
+	0x0400128a, 0x074002ac, 0x0400128a, 0x0921032d, 0x0740028c,
+	0x0400128a, 0x074002ad, 0x0400128a, 0x0921032e, 0x0740028c,
+	0x0400128a, 0x074002ae, 0x0400128a, 0x0921032f, 0x0740028c,
+	0x0400128a, 0x074002af, 0x0400128a, 0x09210330, 0x0740028c,
+	0x0400128a, 0x074002b0, 0x0400128a, 0x09210331, 0x0740028c,
+	0x0400128a, 0x074002b1, 0x0400128a, 0x09210332, 0x0740028c,
+	0x0400128a, 0x074002b2, 0x0cc00000, 0x0400128a, 0x064ac036,
+	0x0aa34076, 0x0aa300b6, 0x0aa2c136, 0x0aa280f6, 0x00000000,
+	0x07800580, 0x0a2e4040, 0x00000000, 0x060f4b00, 0x06800000,
+	0x07c00580, 0x0c7ffd00, 0x00000000, 0x08030504, 0x0c7ffc40,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
+};
diff --git a/drivers/amlogic/amports/arch/ucode/h265/vh265_mc.c b/drivers/amlogic/amports/arch/ucode/h265/vh265_mc.c
index 20241ab..a661fc7 100644
--- a/drivers/amlogic/amports/arch/ucode/h265/vh265_mc.c
+++ b/drivers/amlogic/amports/arch/ucode/h265/vh265_mc.c
@@ -16,20 +16,19 @@
 */
 
 #include "../firmware_def.h"
-/* project_dos revision 3000 */
-/* commit 0b5b647ea7c53b124cbfff21e567509ebe14802b*/
+/* commit 11e8fec363d34cf56b1c661c2d670ea7d9a9b454*/
 
 /* #undef SEND_PARAM_WITH_REG */
-#define VERSTR "856d6bbb"
+#define VERSTR "11e8fec3"
 
 const u32  vh265_mc[] __initconst = {
 	0x06810001, 0x06800000, 0x0d000001, 0x07400040, 0x0c000900,
 	0x00000000, 0x06bffe40, 0x07c00000, 0x06030400, 0x00400000,
-	0x0800c0ff, 0x0c0321c0, 0x00000000, 0x00000000, 0x00000000,
+	0x0800c0ff, 0x0c033300, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x0c7ffd80, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x00000000, 0x0c7a5440, 0x00000000, 0x0c7a0240,
+	0x00000000, 0x00000000, 0x0c7a6580, 0x00000000, 0x0c7a1380,
 	0x06412108, 0x0c780900, 0x00000000, 0x0cc00000, 0x00400000,
 	0x0800c000, 0x08002515, 0x08002608, 0x06bfbb80, 0x06ffbfc0,
 	0x06070500, 0x06070600, 0x06070700, 0x06803fc0, 0x07c00140,
@@ -38,175 +37,181 @@ const u32  vh265_mc[] __initconst = {
 	0x06a04008, 0x06035008, 0x06435008, 0x0580f208, 0x0bef8048,
 	0x00000000, 0x06435308, 0x0900c208, 0x0a6f8008, 0x00000000,
 	0x0cc00000, 0x00000000, 0x06bfff88, 0x06030408, 0x00400000,
-	0x0640c008, 0x0a618808, 0x00000000, 0x0c02ec80, 0x00000000,
-	0x0c79f240, 0x0800c0ff, 0x0aa0c048, 0x0c781c80, 0x00000000,
-	0x06410c08, 0x08010e90, 0x09326208, 0x0aa0c808, 0x0c79f000,
+	0x0640c008, 0x0a618808, 0x00000000, 0x0c02fdc0, 0x00000000,
+	0x0c7a0380, 0x0800c0ff, 0x0aa0c048, 0x0c781f40, 0x00000000,
+	0x06410c08, 0x08010e90, 0x09326208, 0x0aa0c808, 0x0c7a0140,
 	0x0800c0fe, 0x07803688, 0x09808008, 0x07c03688, 0x06410c08,
 	0x08010e90, 0x09384288, 0x09223248, 0x07c00189, 0x09201248,
 	0x07c001c9, 0x08010e90, 0x07800148, 0x0a805288, 0x07c0010a,
-	0x0aa0ffc8, 0x0c026bc0, 0x05407308, 0x0780010a, 0x07c0014a,
+	0x0aa0ffc8, 0x0c027d00, 0x05407308, 0x0780010a, 0x07c0014a,
 	0x06410c08, 0x08010e88, 0x09305248, 0x07c00209, 0x06410c08,
 	0x08010e90, 0x09210248, 0x07c00249, 0x06410c08, 0x08010e90,
 	0x09210248, 0x07c00289, 0x06410c08, 0x08010e84, 0x09384248,
 	0x07c04f49, 0x08010e90, 0x08010e90, 0x08010e8c, 0x06410c08,
-	0x08010e88, 0x09308248, 0x07c002c9, 0x0780018b, 0x0aa3800b,
-	0x00000000, 0x06410c0a, 0x08010e90, 0x0aa2800b, 0x093e124a,
-	0x0aa08009, 0x0c780000, 0x093c124a, 0x0aa08009, 0x0c780000,
-	0x0540228a, 0x0c7ffe00, 0x044012cb, 0x06410c08, 0x08010e81,
-	0x093e1248, 0x0780018b, 0x0a60c009, 0x0680000a, 0x0780018a,
-	0x0ac0a2ca, 0x00000000, 0x0c01e000, 0x06800309, 0x0c01df80,
-	0x06800409, 0x0c01df00, 0x06800509, 0x0c7ffe00, 0x0400128a,
-	0x08010e86, 0x06806008, 0x06010e08, 0x06410f08, 0x0befc0c8,
-	0x09118208, 0x0aa08008, 0x0c780000, 0x06410c08, 0x08010e81,
-	0x093e1248, 0x0aa38009, 0x08010e90, 0x08010e90, 0x08010e90,
-	0x08010e90, 0x06410c08, 0x08010e81, 0x093e1248, 0x0aa0c009,
-	0x0c01d900, 0x06800049, 0x0c01d880, 0x06800049, 0x0aa04008,
-	0x08010e81, 0x07800148, 0x0aa0ffc8, 0x0c025600, 0x05407308,
-	0x0c79d580, 0x0800c0ff, 0x0aa0c088, 0x0c78bf00, 0x00000000,
-	0x06410c08, 0x08010e90, 0x09326208, 0x0aa0c848, 0x0c79d340,
-	0x0800c0fe, 0x07803688, 0x09808048, 0x07c03688, 0x06410c08,
-	0x08010e88, 0x09384288, 0x07c0060a, 0x09323248, 0x07c00649,
-	0x09301248, 0x07c00689, 0x07800148, 0x0a808288, 0x07c0010a,
-	0x0c024f40, 0x05407308, 0x0780010a, 0x07c0014a, 0x0c025ac0,
-	0x0540730a, 0x06410c08, 0x08010e88, 0x09305248, 0x07c006c9,
-	0x06410c08, 0x08010e90, 0x09210248, 0x07c00709, 0x06410c08,
-	0x08010e90, 0x09210248, 0x07c00749, 0x06410c08, 0x08010e84,
-	0x08010e90, 0x08010e90, 0x08010e8c, 0x06410c08, 0x08010e88,
-	0x09308248, 0x07c00789, 0x0780064b, 0x0aa3800b, 0x00000000,
-	0x06410c0a, 0x08010e90, 0x0aa2800b, 0x093e124a, 0x0aa08009,
-	0x0c780000, 0x093c124a, 0x0aa08009, 0x0c780000, 0x0540228a,
-	0x0c7ffe00, 0x044012cb, 0x0c01c5c0, 0x06800049, 0x078007c9,
-	0x0a805209, 0x07c00108, 0x0aa0ffc9, 0x0c024980, 0x05407309,
-	0x07800108, 0x07c007c8, 0x0c01c340, 0x06800809, 0x0c01c2c0,
-	0x06800849, 0x0c01c240, 0x06800889, 0x07800848, 0x07800889,
-	0x09610209, 0x06412309, 0x0a805209, 0x06460309, 0x093e1249,
-	0x0a6f8009, 0x00000000, 0x06012308, 0x06410c08, 0x08010e81,
-	0x093e1248, 0x0aa28009, 0x07c01609, 0x0c01be00, 0x06801649,
-	0x0c01bd80, 0x06801689, 0x0c01bd00, 0x068016c9, 0x0c01bc80,
-	0x06801709, 0x0c01bc00, 0x068008c9, 0x0c01bb80, 0x06800909,
-	0x0c01bb00, 0x06800949, 0x06410c08, 0x08010e81, 0x093e1248,
-	0x0780064b, 0x0a60c009, 0x0680000a, 0x0780064a, 0x0ac0a2ca,
-	0x00000000, 0x0c01b840, 0x06800989, 0x0c01b7c0, 0x06800a89,
-	0x0c01b740, 0x06800b89, 0x0c7ffe00, 0x0400128a, 0x0c01b640,
-	0x06800c89, 0x07800c89, 0x07c00d09, 0x0c01b540, 0x06800cc9,
-	0x07800c89, 0x07800cc8, 0x02009209, 0x07c00d49, 0x07800d48,
-	0x0a6300c8, 0x07800849, 0x0403f249, 0x05806249, 0x07c00e09,
-	0x07800889, 0x0403f249, 0x05806249, 0x07c00e49, 0x08040640,
-	0x0c780900, 0x06824260, 0x0a630088, 0x07800849, 0x0401f249,
-	0x05805249, 0x07c00e09, 0x07800889, 0x0401f249, 0x05805249,
-	0x07c00e49, 0x08040620, 0x0c780600, 0x068247e0, 0x0a630048,
-	0x07800849, 0x0400f249, 0x05804249, 0x07c00e09, 0x07800889,
-	0x0400f249, 0x05804249, 0x07c00e49, 0x08040610, 0x0c780300,
-	0x06825020, 0x07800849, 0x04007249, 0x05803249, 0x07c00e09,
-	0x07800889, 0x04007249, 0x05803249, 0x07c00e49, 0x08040608,
-	0x06825b60, 0x07800e08, 0x07800e49, 0x0e000248, 0x00000000,
-	0x00000000, 0x06800009, 0x0f000200, 0x04401208, 0x0aa10008,
-	0x05801208, 0x0c7fff80, 0x04001249, 0x07c01449, 0x07800849,
-	0x0780088a, 0x0960f24a, 0x06040209, 0x07800e09, 0x07800e4a,
-	0x0960c24a, 0x06040309, 0x08040400, 0x0c01a280, 0x06800049,
-	0x07800049, 0x07c00d89, 0x0c01a180, 0x06800089, 0x07800049,
-	0x07800088, 0x02009209, 0x07c00dc9, 0x0c01a000, 0x06800ec9,
-	0x0c019f80, 0x06800f09, 0x06410c08, 0x08010e81, 0x093e1248,
-	0x0aa38009, 0x07c00f49, 0x06410c08, 0x08010e81, 0x093e1248,
-	0x0aa0c009, 0x0c001a80, 0x00000000, 0x078007c8, 0x0aa0c008,
-	0x068f000c, 0x069f000c, 0x0c023a80, 0x00000000, 0x06410c08,
-	0x08010e83, 0x093e1248, 0x07c00f89, 0x093c1248, 0x07c00fc9,
-	0x093a1248, 0x0aa58009, 0x06800009, 0x06410c08, 0x08010e88,
-	0x09384248, 0x04001249, 0x07c01049, 0x09304248, 0x04001249,
-	0x07c01089, 0x0c019680, 0x068010c9, 0x0c019600, 0x06801109,
-	0x078010c9, 0x02008248, 0x07c01108, 0x06410c08, 0x08010e81,
-	0x093e1248, 0x07c01149, 0x06800049, 0x07c01009, 0x0c019340,
-	0x06801189, 0x0680000e, 0x0780118f, 0x044013cf, 0x0aa1000f,
-	0x058013cf, 0x0c7fff80, 0x0400138e, 0x07c011ce, 0x0780118f,
-	0x0680000e, 0x0b4143ce, 0x00000000, 0x0480f20e, 0x05404208,
-	0x0680800d, 0x0200d20d, 0x0c002940, 0x00000000, 0x0480f20e,
-	0x0aa1c3c8, 0x00000000, 0x0400120e, 0x0b4043c8, 0x00000000,
-	0x0c780100, 0x00000000, 0x0c0049c0, 0x00000000, 0x0c7ffb80,
-	0x0400138e, 0x06410c08, 0x08010e81, 0x093e1248, 0x07c01209,
-	0x0aa28009, 0x0c018a00, 0x06801249, 0x0aa1c008, 0x06410c08,
-	0x08010e89, 0x09308248, 0x092e1248, 0x0c7ffec0, 0x04401208,
-	0x06410c08, 0x08010e83, 0x093e1248, 0x07c01289, 0x093c1248,
-	0x07c012c9, 0x093a1248, 0x06800008, 0x07c014c8, 0x07c01508,
-	0x07c01548, 0x07c01588, 0x0aa0c009, 0x0c004b80, 0x00000000,
-	0x08010e81, 0x078007c8, 0x0aa0ffc8, 0x0c020880, 0x05407308,
-	0x0c7981c0, 0x0800c0ff, 0x068c8408, 0x06c41508, 0x06070508,
-	0x06070608, 0x06070708, 0x0680000b, 0x0680000a, 0x06410c08,
-	0x08010e81, 0x093e1248, 0x0aa08009, 0x0c780f00, 0x0c017f40,
-	0x06800049, 0x0aa140cb, 0x0400e3ca, 0x0ba0c0ca, 0x0680038f,
-	0x068003cf, 0x0a60c00b, 0x0c780180, 0x0647050d, 0x0a60c04b,
-	0x0c7800c0, 0x0647060d, 0x0647070d, 0x0aa38008, 0x0400038f,
-	0x0aa300cb, 0x0680000e, 0x0240f20a, 0x0aa2410f, 0x0920438d,
-	0x0aa1c0cf, 0x0918438d, 0x0aa1408f, 0x0910438d, 0x0aa0c04f,
-	0x0908438d, 0x0900438d, 0x0a61c0cb, 0x0a60c00a, 0x0c7800c0,
-	0x0970434e, 0x0978434e, 0x0c780ec0, 0x0607070d, 0x0aa1c00a,
-	0x0aa2004a, 0x0aa2408a, 0x0aa280ca, 0x0aa2c10a, 0x0c7802c0,
-	0x0968434e, 0x0c780240, 0x0940434e, 0x0c7801c0, 0x0948434e,
-	0x0c780140, 0x0950434e, 0x0c7800c0, 0x0958434e, 0x0960434e,
-	0x0aa1000b, 0x0aa1404b, 0x0c7809c0, 0x0607070d, 0x0c780940,
-	0x0607050d, 0x0c7808c0, 0x0607060d, 0x0ba2c08b, 0x0680020c,
-	0x0c0171c0, 0x06800049, 0x04008308, 0x0aa0c08b, 0x0680f808,
-	0x0680f988, 0x02008288, 0x06070208, 0x0607040c, 0x0aa1c00b,
-	0x0680e008, 0x0aa1404b, 0x06800008, 0x0aa0c08b, 0x06806008,
-	0x0680c008, 0x0680040e, 0x0aa1000b, 0x0540424a, 0x0680100e,
-	0x0540624a, 0x02008248, 0x06070208, 0x0680004d, 0x0c016bc0,
-	0x06800049, 0x0200c20c, 0x048ff30c, 0x0607040c, 0x0b8fb38d,
-	0x0400134d, 0x0ba0c0cb, 0x06800149, 0x06800049, 0x0b40324a,
-	0x0c7fe6c0, 0x0400128a, 0x0b60c0cb, 0x0c7fe5c0, 0x040012cb,
-	0x0cc00000, 0x00000000, 0x0aa1400e, 0x06800009, 0x06410c08,
-	0x08010e81, 0x093e1248, 0x0a608009, 0x0c781540, 0x07801189,
-	0x0a40624e, 0x0440144e, 0x0c016300, 0x06800049, 0x0c002500,
-	0x02411211, 0x0480f451, 0x05404451, 0x06808008, 0x02011211,
-	0x06800010, 0x06800012, 0x06410c08, 0x08010e81, 0x093e1288,
-	0x0c015fc0, 0x06800049, 0x0aa1000a, 0x040014c8, 0x06800009,
-	0x024134c9, 0x0b60c412, 0x06a0000b, 0x0700044b, 0x04001451,
-	0x04001492, 0x0200c2d3, 0x091e12cb, 0x0900e30c, 0x06410c08,
-	0x08010e81, 0x093e1288, 0x095c130a, 0x0a62000a, 0x06410c08,
-	0x08010e81, 0x093e1288, 0x0a61000a, 0x0a62400b, 0x0c7ffb80,
-	0x00000000, 0x0740034c, 0x0400134d, 0x04001410, 0x0a60c00b,
-	0x0c7ffa00, 0x00000000, 0x0b60c410, 0x06a00008, 0x07400348,
-	0x0ae08050, 0x0c780780, 0x0440134d, 0x07000351, 0x0900e451,
-	0x091a1491, 0x06900013, 0x0aa0c012, 0x02012453, 0x02412453,
-	0x0680004c, 0x0b41240c, 0x0241130d, 0x07000451, 0x0900e451,
-	0x091a12d1, 0x06900013, 0x0aa0c00b, 0x0200b453, 0x0240b453,
-	0x0b4072d2, 0x0241130d, 0x0400048b, 0x0700044b, 0x07000353,
-	0x0740034b, 0x07400453, 0x0c7ffc00, 0x0400130c, 0x0c7ff8c0,
-	0x04401410, 0x0cc00000, 0x00000000, 0x0c014ec0, 0x06800049,
-	0x0c014e40, 0x06800089, 0x06800010, 0x0680000a, 0x0680000b,
-	0x0780004c, 0x0b41130b, 0x0c014c80, 0x068000c9, 0x0240a20a,
-	0x0440128a, 0x06410c08, 0x08010e81, 0x093e1248, 0x0900e20a,
-	0x095c1209, 0x07400348, 0x0400134d, 0x04001410, 0x0bacc410,
-	0x040012cb, 0x0cc00000, 0x00000000, 0x0680000a, 0x0680000b,
-	0x0780008c, 0x0b41130b, 0x0c014780, 0x068000c9, 0x0200a20a,
-	0x0400128a, 0x06410c08, 0x08010e81, 0x093e1248, 0x0900e20a,
-	0x095c1209, 0x07400348, 0x0400134d, 0x04001410, 0x0bacc410,
-	0x040012cb, 0x0cc00000, 0x00000000, 0x06a00008, 0x07400348,
-	0x0cc00000, 0x00000000, 0x0580424e, 0x07c01489, 0x05409249,
-	0x0640c208, 0x02008248, 0x06035108, 0x06808008, 0x06035208,
-	0x06a08008, 0x06035008, 0x06435008, 0x0580f208, 0x0bef8048,
-	0x00000000, 0x06435308, 0x0900c208, 0x0a6f8008, 0x00000000,
-	0x0cc00000, 0x00000000, 0x05804251, 0x07801488, 0x0a80e209,
-	0x07c01489, 0x05409249, 0x0640c208, 0x02008248, 0x06035108,
-	0x06808008, 0x06035208, 0x06b08008, 0x06035008, 0x06435008,
-	0x0580f208, 0x0bef8048, 0x00000000, 0x0cc00000, 0x00000000,
-	0x06410c08, 0x08010e81, 0x093e1248, 0x0aa34009, 0x00000000,
-	0x06410c08, 0x08010e88, 0x09308248, 0x07c01309, 0x0a61ffc9,
-	0x06410c08, 0x08010e90, 0x09210248, 0x06410c08, 0x08010e90,
-	0x09210248, 0x06410c08, 0x08010e81, 0x093e1248, 0x0aa0c009,
-	0x093c1248, 0x08010e81, 0x06410c08, 0x08010e81, 0x093e1248,
-	0x0aa24009, 0x06410c08, 0x08010e85, 0x09361248, 0x0aa14009,
+	0x08010e88, 0x09308248, 0x07c002c9, 0x0780018b, 0x0aa6400b,
+	0x00000000, 0x06410c0a, 0x08010e90, 0x0aa5400b, 0x093e124a,
+	0x0aa30009, 0x06410c08, 0x08010e88, 0x06410c08, 0x08010e90,
+	0x06410c08, 0x08010e90, 0x06410c08, 0x08010e84, 0x08010e90,
+	0x08010e90, 0x08010e8c, 0x093c124a, 0x0aa0c009, 0x06410c08,
+	0x08010e88, 0x0540228a, 0x0c7ffb40, 0x044012cb, 0x06410c08,
+	0x08010e81, 0x093e1248, 0x0780018b, 0x0a60c009, 0x0680000a,
+	0x0780018a, 0x0ac0a2ca, 0x00000000, 0x0c01ee80, 0x06800309,
+	0x0c01ee00, 0x06800409, 0x0c01ed80, 0x06800509, 0x0c7ffe00,
+	0x0400128a, 0x08010e86, 0x06806008, 0x06010e08, 0x06410f08,
+	0x0befc0c8, 0x09118208, 0x0aa08008, 0x0c780000, 0x06410c08,
+	0x08010e81, 0x093e1248, 0x0aa38009, 0x08010e90, 0x08010e90,
+	0x08010e90, 0x08010e90, 0x06410c08, 0x08010e81, 0x093e1248,
+	0x0aa0c009, 0x0c01e780, 0x06800049, 0x0c01e700, 0x06800049,
+	0x0aa04008, 0x08010e81, 0x07800148, 0x0aa0ffc8, 0x0c026480,
+	0x05407308, 0x0c79e400, 0x0800c0ff, 0x0aa0c088, 0x0c78c3c0,
+	0x00000000, 0x06410c08, 0x08010e90, 0x09326208, 0x0aa0c848,
+	0x0c79e1c0, 0x0800c0fe, 0x07803688, 0x09808048, 0x07c03688,
+	0x06410c08, 0x08010e88, 0x09384288, 0x07c0060a, 0x09323248,
+	0x07c00649, 0x09301248, 0x07c00689, 0x07800148, 0x0a808288,
+	0x07c0010a, 0x0c025dc0, 0x05407308, 0x0780010a, 0x07c0014a,
+	0x0c026940, 0x0540730a, 0x06410c08, 0x08010e88, 0x09305248,
+	0x07c006c9, 0x06410c08, 0x08010e90, 0x09210248, 0x07c00709,
+	0x06410c08, 0x08010e90, 0x09210248, 0x07c00749, 0x06410c08,
+	0x08010e84, 0x08010e90, 0x08010e90, 0x08010e8c, 0x06410c08,
+	0x08010e88, 0x09308248, 0x07c00789, 0x0780064b, 0x0aa6400b,
+	0x00000000, 0x06410c0a, 0x08010e90, 0x0aa5400b, 0x093e124a,
+	0x0aa30009, 0x06410c08, 0x08010e88, 0x06410c08, 0x08010e90,
+	0x06410c08, 0x08010e90, 0x06410c08, 0x08010e84, 0x08010e90,
+	0x08010e90, 0x08010e8c, 0x093c124a, 0x0aa0c009, 0x06410c08,
+	0x08010e88, 0x0540228a, 0x0c7ffb40, 0x044012cb, 0x0c01d180,
+	0x06800049, 0x078007c9, 0x0a805209, 0x07c00108, 0x0aa0ffc9,
+	0x0c025540, 0x05407309, 0x07800108, 0x07c007c8, 0x0c01cf00,
+	0x06800809, 0x0c01ce80, 0x06800849, 0x0c01ce00, 0x06800889,
+	0x07800848, 0x07800889, 0x09610209, 0x06412309, 0x0a805209,
+	0x06460309, 0x093e1249, 0x0a6f8009, 0x00000000, 0x06012308,
+	0x06410c08, 0x08010e81, 0x093e1248, 0x0aa28009, 0x07c01609,
+	0x0c01c9c0, 0x06801649, 0x0c01c940, 0x06801689, 0x0c01c8c0,
+	0x068016c9, 0x0c01c840, 0x06801709, 0x0c01c7c0, 0x068008c9,
+	0x0c01c740, 0x06800909, 0x0c01c6c0, 0x06800949, 0x06410c08,
+	0x08010e81, 0x093e1248, 0x0780064b, 0x0a60c009, 0x0680000a,
+	0x0780064a, 0x0ac0a2ca, 0x00000000, 0x0c01c400, 0x06800989,
+	0x0c01c380, 0x06800a89, 0x0c01c300, 0x06800b89, 0x0c7ffe00,
+	0x0400128a, 0x0c01c200, 0x06800c89, 0x07800c89, 0x07c00d09,
+	0x0c01c100, 0x06800cc9, 0x07800c89, 0x07800cc8, 0x02009209,
+	0x07c00d49, 0x07800d48, 0x0a6300c8, 0x07800849, 0x0403f249,
+	0x05806249, 0x07c00e09, 0x07800889, 0x0403f249, 0x05806249,
+	0x07c00e49, 0x08040640, 0x0c780900, 0x068253a0, 0x0a630088,
+	0x07800849, 0x0401f249, 0x05805249, 0x07c00e09, 0x07800889,
+	0x0401f249, 0x05805249, 0x07c00e49, 0x08040620, 0x0c780600,
+	0x06825920, 0x0a630048, 0x07800849, 0x0400f249, 0x05804249,
+	0x07c00e09, 0x07800889, 0x0400f249, 0x05804249, 0x07c00e49,
+	0x08040610, 0x0c780300, 0x06826160, 0x07800849, 0x04007249,
+	0x05803249, 0x07c00e09, 0x07800889, 0x04007249, 0x05803249,
+	0x07c00e49, 0x08040608, 0x06826ca0, 0x07800e08, 0x07800e49,
+	0x0e000248, 0x00000000, 0x00000000, 0x06800009, 0x0f000200,
+	0x04401208, 0x0aa10008, 0x05801208, 0x0c7fff80, 0x04001249,
+	0x07c01449, 0x06460309, 0x093e1249, 0x0a6f8009, 0x00000000,
+	0x07800849, 0x0780088a, 0x0960f24a, 0x06040209, 0x07800e09,
+	0x07800e4a, 0x0960c24a, 0x06040309, 0x08040400, 0x0c01ad40,
+	0x06800049, 0x07800049, 0x07c00d89, 0x0c01ac40, 0x06800089,
+	0x07800049, 0x07800088, 0x02009209, 0x07c00dc9, 0x0c01aac0,
+	0x06800ec9, 0x0c01aa40, 0x06800f09, 0x06410c08, 0x08010e81,
+	0x093e1248, 0x0aa38009, 0x07c00f49, 0x06410c08, 0x08010e81,
+	0x093e1248, 0x0aa0c009, 0x0c001a80, 0x00000000, 0x078007c8,
+	0x0aa0c008, 0x068f000c, 0x069f000c, 0x0c024540, 0x00000000,
+	0x06410c08, 0x08010e83, 0x093e1248, 0x07c00f89, 0x093c1248,
+	0x07c00fc9, 0x093a1248, 0x0aa58009, 0x06800009, 0x06410c08,
+	0x08010e88, 0x09384248, 0x04001249, 0x07c01049, 0x09304248,
+	0x04001249, 0x07c01089, 0x0c01a140, 0x068010c9, 0x0c01a0c0,
+	0x06801109, 0x078010c9, 0x02008248, 0x07c01108, 0x06410c08,
+	0x08010e81, 0x093e1248, 0x07c01149, 0x06800049, 0x07c01009,
+	0x0c019e00, 0x06801189, 0x0680000e, 0x0780118f, 0x044013cf,
+	0x0aa1000f, 0x058013cf, 0x0c7fff80, 0x0400138e, 0x07c011ce,
+	0x0780118f, 0x0680000e, 0x0b4143ce, 0x00000000, 0x0480f20e,
+	0x05404208, 0x0680800d, 0x0200d20d, 0x0c002940, 0x00000000,
+	0x0480f20e, 0x0aa1c3c8, 0x00000000, 0x0400120e, 0x0b4043c8,
+	0x00000000, 0x0c780100, 0x00000000, 0x0c0049c0, 0x00000000,
+	0x0c7ffb80, 0x0400138e, 0x06410c08, 0x08010e81, 0x093e1248,
+	0x07c01209, 0x0aa28009, 0x0c0194c0, 0x06801249, 0x0aa1c008,
+	0x06410c08, 0x08010e89, 0x09308248, 0x092e1248, 0x0c7ffec0,
+	0x04401208, 0x06410c08, 0x08010e83, 0x093e1248, 0x07c01289,
+	0x093c1248, 0x07c012c9, 0x093a1248, 0x06800008, 0x07c014c8,
+	0x07c01508, 0x07c01548, 0x07c01588, 0x0aa0c009, 0x0c004b80,
+	0x00000000, 0x08010e81, 0x078007c8, 0x0aa0ffc8, 0x0c021340,
+	0x05407308, 0x0c798c80, 0x0800c0ff, 0x068c8408, 0x06c41508,
+	0x06070508, 0x06070608, 0x06070708, 0x0680000b, 0x0680000a,
+	0x06410c08, 0x08010e81, 0x093e1248, 0x0aa08009, 0x0c780f00,
+	0x0c018a00, 0x06800049, 0x0aa140cb, 0x0400e3ca, 0x0ba0c0ca,
+	0x0680038f, 0x068003cf, 0x0a60c00b, 0x0c780180, 0x0647050d,
+	0x0a60c04b, 0x0c7800c0, 0x0647060d, 0x0647070d, 0x0aa38008,
+	0x0400038f, 0x0aa300cb, 0x0680000e, 0x0240f20a, 0x0aa2410f,
+	0x0920438d, 0x0aa1c0cf, 0x0918438d, 0x0aa1408f, 0x0910438d,
+	0x0aa0c04f, 0x0908438d, 0x0900438d, 0x0a61c0cb, 0x0a60c00a,
+	0x0c7800c0, 0x0970434e, 0x0978434e, 0x0c780ec0, 0x0607070d,
+	0x0aa1c00a, 0x0aa2004a, 0x0aa2408a, 0x0aa280ca, 0x0aa2c10a,
+	0x0c7802c0, 0x0968434e, 0x0c780240, 0x0940434e, 0x0c7801c0,
+	0x0948434e, 0x0c780140, 0x0950434e, 0x0c7800c0, 0x0958434e,
+	0x0960434e, 0x0aa1000b, 0x0aa1404b, 0x0c7809c0, 0x0607070d,
+	0x0c780940, 0x0607050d, 0x0c7808c0, 0x0607060d, 0x0ba2c08b,
+	0x0680020c, 0x0c017c80, 0x06800049, 0x04008308, 0x0aa0c08b,
+	0x0680f808, 0x0680f988, 0x02008288, 0x06070208, 0x0607040c,
+	0x0aa1c00b, 0x0680e008, 0x0aa1404b, 0x06800008, 0x0aa0c08b,
+	0x06806008, 0x0680c008, 0x0680040e, 0x0aa1000b, 0x0540424a,
+	0x0680100e, 0x0540624a, 0x02008248, 0x06070208, 0x0680004d,
+	0x0c017680, 0x06800049, 0x0200c20c, 0x048ff30c, 0x0607040c,
+	0x0b8fb38d, 0x0400134d, 0x0ba0c0cb, 0x06800149, 0x06800049,
+	0x0b40324a, 0x0c7fe6c0, 0x0400128a, 0x0b60c0cb, 0x0c7fe5c0,
+	0x040012cb, 0x0cc00000, 0x00000000, 0x0aa1400e, 0x06800009,
+	0x06410c08, 0x08010e81, 0x093e1248, 0x0a608009, 0x0c781540,
+	0x07801189, 0x0a40624e, 0x0440144e, 0x0c016dc0, 0x06800049,
+	0x0c002500, 0x02411211, 0x0480f451, 0x05404451, 0x06808008,
+	0x02011211, 0x06800010, 0x06800012, 0x06410c08, 0x08010e81,
+	0x093e1288, 0x0c016a80, 0x06800049, 0x0aa1000a, 0x040014c8,
+	0x06800009, 0x024134c9, 0x0b60c412, 0x06a0000b, 0x0700044b,
+	0x04001451, 0x04001492, 0x0200c2d3, 0x091e12cb, 0x0900e30c,
+	0x06410c08, 0x08010e81, 0x093e1288, 0x095c130a, 0x0a62000a,
+	0x06410c08, 0x08010e81, 0x093e1288, 0x0a61000a, 0x0a62400b,
+	0x0c7ffb80, 0x00000000, 0x0740034c, 0x0400134d, 0x04001410,
+	0x0a60c00b, 0x0c7ffa00, 0x00000000, 0x0b60c410, 0x06a00008,
+	0x07400348, 0x0ae08050, 0x0c780780, 0x0440134d, 0x07000351,
+	0x0900e451, 0x091a1491, 0x06900013, 0x0aa0c012, 0x02012453,
+	0x02412453, 0x0680004c, 0x0b41240c, 0x0241130d, 0x07000451,
+	0x0900e451, 0x091a12d1, 0x06900013, 0x0aa0c00b, 0x0200b453,
+	0x0240b453, 0x0b4072d2, 0x0241130d, 0x0400048b, 0x0700044b,
+	0x07000353, 0x0740034b, 0x07400453, 0x0c7ffc00, 0x0400130c,
+	0x0c7ff8c0, 0x04401410, 0x0cc00000, 0x00000000, 0x0c015980,
+	0x06800049, 0x0c015900, 0x06800089, 0x06800010, 0x0680000a,
+	0x0680000b, 0x0780004c, 0x0b41130b, 0x0c015740, 0x068000c9,
+	0x0240a20a, 0x0440128a, 0x06410c08, 0x08010e81, 0x093e1248,
+	0x0900e20a, 0x095c1209, 0x07400348, 0x0400134d, 0x04001410,
+	0x0bacc410, 0x040012cb, 0x0cc00000, 0x00000000, 0x0680000a,
+	0x0680000b, 0x0780008c, 0x0b41130b, 0x0c015240, 0x068000c9,
+	0x0200a20a, 0x0400128a, 0x06410c08, 0x08010e81, 0x093e1248,
+	0x0900e20a, 0x095c1209, 0x07400348, 0x0400134d, 0x04001410,
+	0x0bacc410, 0x040012cb, 0x0cc00000, 0x00000000, 0x06a00008,
+	0x07400348, 0x0cc00000, 0x00000000, 0x0580424e, 0x07c01489,
+	0x05409249, 0x0640c208, 0x02008248, 0x06035108, 0x06808008,
+	0x06035208, 0x06a08008, 0x06035008, 0x06435008, 0x0580f208,
+	0x0bef8048, 0x00000000, 0x06435308, 0x0900c208, 0x0a6f8008,
+	0x00000000, 0x0cc00000, 0x00000000, 0x05804251, 0x07801488,
+	0x0a80e209, 0x07c01489, 0x05409249, 0x0640c208, 0x02008248,
+	0x06035108, 0x06808008, 0x06035208, 0x06b08008, 0x06035008,
+	0x06435008, 0x0580f208, 0x0bef8048, 0x00000000, 0x0cc00000,
+	0x00000000, 0x06410c08, 0x08010e81, 0x093e1248, 0x0aa34009,
+	0x00000000, 0x06410c08, 0x08010e88, 0x09308248, 0x07c01309,
+	0x0a61ffc9, 0x06410c08, 0x08010e90, 0x09210248, 0x06410c08,
+	0x08010e90, 0x09210248, 0x06410c08, 0x08010e81, 0x093e1248,
+	0x0aa0c009, 0x093c1248, 0x08010e81, 0x06410c08, 0x08010e81,
+	0x093e1248, 0x0aa34009, 0x0924e248, 0x07c04fc9, 0x09050248,
+	0x07c05989, 0x06410c08, 0x08010e85, 0x09361248, 0x0aa14009,
 	0x00000000, 0x08010e88, 0x00000000, 0x08010e90, 0x06410c08,
-	0x08010e81, 0x093e1248, 0x0aa14009, 0x0c012f80, 0x06800089,
-	0x0c012f00, 0x06800089, 0x06410c08, 0x08010e84, 0x093e1248,
+	0x08010e81, 0x093e1248, 0x0aa14009, 0x0c013940, 0x06800089,
+	0x0c0138c0, 0x06800089, 0x06410c08, 0x08010e84, 0x093e1248,
 	0x093c1248, 0x093a1248, 0x07c015c9, 0x09381248, 0x0aa38009,
 	0x06410c08, 0x09118208, 0x0a60c008, 0x0cc00000, 0x00000000,
-	0x0c012b40, 0x06801349, 0x0c012ac0, 0x06801389, 0x0c012a40,
-	0x068013c9, 0x0c0129c0, 0x06801409, 0x06410c08, 0x08010e81,
+	0x0c013500, 0x06801349, 0x0c013480, 0x06801389, 0x0c013400,
+	0x068013c9, 0x0c013380, 0x06801409, 0x06410c08, 0x08010e81,
 	0x093e1248, 0x0aa10009, 0x06410c08, 0x09018208, 0x0a608008,
 	0x0c7807c0, 0x06410c08, 0x08010e90, 0x09210248, 0x07c014c9,
 	0x06410c08, 0x08010e90, 0x09210248, 0x07c01509, 0x06410c08,
 	0x08010e90, 0x09210248, 0x07c01549, 0x06410c08, 0x08010e90,
 	0x09210248, 0x07c01589, 0x06410c08, 0x08010e81, 0x093e1248,
-	0x0aa10009, 0x0c012240, 0x06800049, 0x04001208, 0x06410c08,
+	0x0aa10009, 0x0c012c00, 0x06800049, 0x04001208, 0x06410c08,
 	0x08010e81, 0x093e1248, 0x0aa10009, 0x0680004a, 0x0c000100,
 	0x0780064b, 0x0cc00000, 0x00000000, 0x0a60c00a, 0x0c7807c0,
 	0x00000000, 0x06410c08, 0x08010e82, 0x093c2248, 0x0aaec009,
@@ -216,96 +221,98 @@ const u32  vh265_mc[] __initconst = {
 	0x09304248, 0x0aa1000c, 0x06410c08, 0x08010e84, 0x09384248,
 	0x06410c08, 0x08010e8f, 0x09365248, 0x092c5248, 0x09225248,
 	0x0cc00000, 0x00000000, 0x0aa0c0c8, 0x0c783240, 0x00000000,
-	0x06410c08, 0x08010e90, 0x09326208, 0x0aa0c888, 0x0c791400,
-	0x0800c0fe, 0x07803688, 0x09808088, 0x07c03688, 0x0c0113c0,
+	0x06410c08, 0x08010e90, 0x09326208, 0x0aa0c888, 0x0c791dc0,
+	0x0800c0fe, 0x07803688, 0x09808088, 0x07c03688, 0x0c011d80,
 	0x06800049, 0x07801749, 0x0a805209, 0x07c00108, 0x0aa0ffc9,
-	0x0c01a840, 0x05407309, 0x07800108, 0x07c01748, 0x0c011140,
+	0x0c01b200, 0x05407309, 0x07800108, 0x07c01748, 0x0c011b00,
 	0x06801789, 0x078007ca, 0x0a806288, 0x07c00108, 0x0780010a,
-	0x07c007ca, 0x0c01a040, 0x0540730a, 0x0780060a, 0x07800148,
-	0x0a804288, 0x07c0014a, 0x0c019980, 0x0540730a, 0x06410c08,
+	0x07c007ca, 0x0c01aa00, 0x0540730a, 0x0780060a, 0x07800148,
+	0x0a804288, 0x07c0014a, 0x0c01a340, 0x0540730a, 0x06410c08,
 	0x08010e87, 0x093e1248, 0x07c017c9, 0x093c1248, 0x07c01809,
 	0x09363248, 0x07c01849, 0x09341248, 0x07c01889, 0x09321248,
-	0x07c018c9, 0x0c010a80, 0x06801909, 0x04001208, 0x07c01908,
-	0x0c010980, 0x06801949, 0x04001208, 0x07c01948, 0x0c010a40,
+	0x07c018c9, 0x0c011440, 0x06801909, 0x04001208, 0x07c01908,
+	0x0c011340, 0x06801949, 0x04001208, 0x07c01948, 0x0c011400,
 	0x06801989, 0x0401a208, 0x07c01988, 0x06410c08, 0x08010e83,
 	0x093e1248, 0x07c019c9, 0x093c1248, 0x07c01a09, 0x093a1248,
-	0x07c01a49, 0x0aa10009, 0x06800008, 0x0c010500, 0x06801a89,
-	0x07c01a88, 0x0c010600, 0x06801ac9, 0x0c010580, 0x06801b09,
+	0x07c01a49, 0x0aa10009, 0x06800008, 0x0c010ec0, 0x06801a89,
+	0x07c01a88, 0x0c010fc0, 0x06801ac9, 0x0c010f40, 0x06801b09,
 	0x06410c08, 0x08010e86, 0x093e1248, 0x07c01b49, 0x093c1248,
 	0x07c01b89, 0x093a1248, 0x07c01bc9, 0x09381248, 0x07c01c09,
 	0x09361248, 0x07c01c49, 0x09341248, 0x07c01fc9, 0x0aa0c009,
-	0x0c0155c0, 0x00000000, 0x06800048, 0x07c01f88, 0x07801c89,
+	0x0c015f80, 0x00000000, 0x06800048, 0x07c01f88, 0x07801c89,
 	0x07801c48, 0x02c09209, 0x07c01c89, 0x0a608008, 0x0c780a80,
-	0x0c00fd00, 0x06801d09, 0x07800e08, 0x07c01d88, 0x0c00fc00,
+	0x0c0106c0, 0x06801d09, 0x07800e08, 0x07c01d88, 0x0c0105c0,
 	0x06801d49, 0x07800e48, 0x07c01e88, 0x06410c08, 0x08010e81,
-	0x093e1248, 0x07c01cc9, 0x0aa14009, 0x0c015840, 0x00000000,
+	0x093e1248, 0x07c01cc9, 0x0aa14009, 0x0c016200, 0x00000000,
 	0x0c780580, 0x00000000, 0x07801d0b, 0x0ae0010b, 0x0680000a,
-	0x0b4072ca, 0x0c00f7c0, 0x0407624a, 0x04001208, 0x07400248,
+	0x0b4072ca, 0x0c010180, 0x0407624a, 0x04001208, 0x07400248,
 	0x0c7ffec0, 0x0400128a, 0x07801d4b, 0x0ae0010b, 0x0680000a,
-	0x0b4072ca, 0x0c00f540, 0x0407a24a, 0x04001208, 0x07400248,
+	0x0b4072ca, 0x0c00ff00, 0x0407a24a, 0x04001208, 0x07400248,
 	0x0c7ffec0, 0x0400128a, 0x06410c08, 0x08010e81, 0x093e1248,
 	0x07c01f89, 0x06410c08, 0x08010e82, 0x093e1248, 0x07c02009,
 	0x093c1248, 0x0a618009, 0x07c02049, 0x07c02089, 0x07c020c9,
 	0x0c780340, 0x07c02109, 0x06410c08, 0x08010e82, 0x093e1248,
-	0x07c02049, 0x093c1248, 0x0a618009, 0x07c02089, 0x0c00f000,
-	0x068020c9, 0x0c00ef80, 0x06802109, 0x06410c08, 0x08010e81,
+	0x07c02049, 0x093c1248, 0x0a618009, 0x07c02089, 0x0c00f9c0,
+	0x068020c9, 0x0c00f940, 0x06802109, 0x06410c08, 0x08010e81,
 	0x093e1248, 0x0a628009, 0x07800f48, 0x0aa28008, 0x07801788,
-	0x0aa0c008, 0x068f000c, 0x069f000c, 0x0c019d80, 0x00000000,
-	0x0c7800c0, 0x0c0767c0, 0x00000000, 0x06410c08, 0x08010e81,
-	0x093e1248, 0x07c02149, 0x0c00e880, 0x06802189, 0x04002208,
+	0x0aa0c008, 0x068f000c, 0x069f000c, 0x0c01a740, 0x00000000,
+	0x0c7800c0, 0x0c0766c0, 0x00000000, 0x06410c08, 0x08010e81,
+	0x093e1248, 0x07c02149, 0x0c00f240, 0x06802189, 0x04002208,
 	0x07c02188, 0x06410c08, 0x08010e81, 0x093e1248, 0x07c021c9,
-	0x08010e81, 0x0c01a3c0, 0x00000000, 0x07801748, 0x0aa0ffc8,
-	0x0c017b40, 0x05407308, 0x0c78e3c0, 0x0800c0ff, 0x0680400d,
-	0x0aa0c1c8, 0x0c780d80, 0x00000000, 0x08010e90, 0x06803fcb,
+	0x08010e81, 0x0c01ad80, 0x00000000, 0x07801748, 0x0aa0ffc8,
+	0x0c018500, 0x05407308, 0x0c78ed80, 0x0800c0ff, 0x0680400d,
+	0x0aa0c1c8, 0x0c781000, 0x00000000, 0x08010e90, 0x06803fcb,
 	0x06800009, 0x06410c08, 0x08010e88, 0x09308208, 0x02009209,
 	0x0a8fc2c8, 0x0680000a, 0x06410c08, 0x08010e88, 0x09308208,
-	0x0200a20a, 0x0a8fc2c8, 0x00000000, 0x06801027, 0x0c021bc0,
-	0x04000a09, 0x06801067, 0x0c021b00, 0x04000a0a, 0x0440134d,
-	0x0aa0800d, 0x0a60800a, 0x0c780680, 0x0aa2c049, 0x00000000,
-	0x0aa9800a, 0x00000000, 0x06410c08, 0x08010e88, 0x06801127,
-	0x0c0217c0, 0x04000a08, 0x0c7ffe40, 0x0440128a, 0x078015c9,
+	0x0200a20a, 0x0a8fc2c8, 0x00000000, 0x06801027, 0x0c022580,
+	0x04000a09, 0x06801067, 0x0c0224c0, 0x04000a0a, 0x0440134d,
+	0x0aa0800d, 0x0a60800a, 0x0c780900, 0x0aa54049, 0x0aa2e249,
+	0x00000000, 0x0aa9400a, 0x00000000, 0x06410c08, 0x08010e88,
+	0x06801127, 0x0c022140, 0x04000a08, 0x0c7ffe40, 0x0440128a,
+	0x0961024a, 0x0600d309, 0x0800c00c, 0x08007401, 0x0640c00a,
+	0x0a6fc34a, 0x00000000, 0x0c780400, 0x00000000, 0x078015c9,
 	0x0a22c049, 0x00000000, 0x06410c08, 0x08010e87, 0x09327208,
-	0x07c04f88, 0x068010a7, 0x0c0214c0, 0x04000a08, 0x08010e81,
-	0x0440128a, 0x0c7ffac0, 0x00000000, 0x0c78d5c0, 0x0800c0ff,
-	0x0aa0c108, 0x0c787640, 0x00000000, 0x0c021d80, 0x069fffa9,
+	0x07c04f88, 0x068010a7, 0x0c021c00, 0x04000a08, 0x08010e81,
+	0x0440128a, 0x0c7ff880, 0x00000000, 0x0c78dd00, 0x0800c0ff,
+	0x0aa0c108, 0x0c787640, 0x00000000, 0x0c0224c0, 0x069fffa9,
 	0x06410c08, 0x08010e90, 0x09326208, 0x0b210548, 0x07c02208,
-	0x0c78d2c0, 0x0800c0fe, 0x06410c08, 0x08010e81, 0x093e1248,
+	0x0c78da00, 0x0800c0fe, 0x06410c08, 0x08010e81, 0x093e1248,
 	0x07c02249, 0x07802208, 0x0ba1c408, 0x06800009, 0x0ae14548,
 	0x06800009, 0x06410c08, 0x08010e81, 0x093e1248, 0x07c02289,
-	0x0c00d000, 0x06800049, 0x07801749, 0x0a812248, 0x07c00108,
-	0x0a633fc9, 0x00000000, 0x0c0159c0, 0x0680000c, 0x0c015e80,
-	0x0680000c, 0x0c018000, 0x00000000, 0x0680000c, 0x07c00e8c,
-	0x0c021a00, 0x00000000, 0x07800108, 0x07c01748, 0x0c017540,
+	0x0c00d740, 0x06800049, 0x07801749, 0x0a812248, 0x07c00108,
+	0x0a633fc9, 0x00000000, 0x0c016100, 0x0680000c, 0x0c0165c0,
+	0x0680000c, 0x0c018740, 0x00000000, 0x0680000c, 0x07c00e8c,
+	0x0c022140, 0x00000000, 0x07800108, 0x07c01748, 0x0c017c80,
 	0x05407308, 0x07801788, 0x078007c9, 0x0a806248, 0x07c00108,
-	0x07800109, 0x07c007c9, 0x0c015a00, 0x05407309, 0x0780060a,
-	0x07800148, 0x0a804288, 0x07c0014a, 0x0c015340, 0x0540730a,
+	0x07800109, 0x07c007c9, 0x0c016140, 0x05407309, 0x0780060a,
+	0x07800148, 0x0a804288, 0x07c0014a, 0x0c015a80, 0x0540730a,
 	0x07802248, 0x06800009, 0x0aa10008, 0x07c02309, 0x0c780440,
 	0x07c022c9, 0x078017c8, 0x0aa14008, 0x06800009, 0x06410c08,
 	0x08010e81, 0x093e1248, 0x07c02309, 0x07801449, 0x06410c08,
 	0x0680080a, 0x0240a24a, 0x098091c9, 0x06010e09, 0x03808288,
 	0x07c022c8, 0x07802308, 0x0aa0c008, 0x0c784d00, 0x00000000,
-	0x0c01c480, 0x00000000, 0x07801848, 0x0aa0c008, 0x098081c8,
-	0x06010e08, 0x0c00bf80, 0x06802349, 0x07801808, 0x0aa14008,
+	0x0c01cbc0, 0x00000000, 0x07801848, 0x0aa0c008, 0x098081c8,
+	0x06010e08, 0x0c00c6c0, 0x06802349, 0x07801808, 0x0aa14008,
 	0x06800049, 0x06410c08, 0x08010e81, 0x093e1248, 0x07c02389,
 	0x07802209, 0x0aa084c9, 0x0a610509, 0x06800008, 0x0c7818c0,
 	0x07c023c8, 0x06410c08, 0x07800949, 0x04004249, 0x0680080a,
 	0x0240a24a, 0x098091c9, 0x06010e09, 0x03808288, 0x07c023c8,
 	0x06410c08, 0x08010e81, 0x093e1248, 0x0a614009, 0x0680400d,
-	0x0c0752c0, 0x0780118e, 0x0c780600, 0x078011c9, 0x06410c08,
+	0x0c074f40, 0x0780118e, 0x0c780600, 0x078011c9, 0x06410c08,
 	0x068007ca, 0x0240a24a, 0x098091c9, 0x06010e09, 0x03808288,
-	0x05801208, 0x07c02408, 0x0c0777c0, 0x04000448, 0x0480f211,
+	0x05801208, 0x07c02408, 0x0c077440, 0x04000448, 0x0480f211,
 	0x05404208, 0x06808009, 0x02009209, 0x0680400d, 0x06800008,
 	0x0700024a, 0x0740034a, 0x0400134d, 0x04001208, 0x0baf0408,
 	0x04001249, 0x07801208, 0x0a608008, 0x0c780b80, 0x0780124a,
-	0x0aa1400a, 0x0680000b, 0x0c00b040, 0x06800049, 0x040002c8,
-	0x0c00af80, 0x06800049, 0x0200c20b, 0x0a60800c, 0x0c7808c0,
+	0x0aa1400a, 0x0680000b, 0x0c00b780, 0x06800049, 0x040002c8,
+	0x0c00b6c0, 0x06800049, 0x0200c20b, 0x0a60800c, 0x0c7808c0,
 	0x0ac0f2cc, 0x07801248, 0x0ba60048, 0x07801248, 0x0b21c088,
 	0x06802049, 0x0b214108, 0x06802089, 0x0b20c208, 0x068020c9,
 	0x06802109, 0x06410c08, 0x06010e09, 0x0c780340, 0x00000000,
 	0x06410c08, 0x07800949, 0x04004249, 0x0680080a, 0x0240a24a,
 	0x098091c9, 0x06010e09, 0x03808288, 0x06410c08, 0x08010e81,
 	0x093e1248, 0x06410c08, 0x08010e81, 0x093e1248, 0x0aa0c009,
-	0x0c00a6c0, 0x06800049, 0x0c7ff780, 0x0440130c, 0x0c01a240,
+	0x0c00ae00, 0x06800049, 0x0c7ff780, 0x0440130c, 0x0c01a980,
 	0x00000000, 0x07801288, 0x0aa14008, 0x06800009, 0x06410c08,
 	0x08010e81, 0x093e1248, 0x07c02449, 0x07800fc8, 0x0a610008,
 	0x07c02488, 0x0c780200, 0x07c024c8, 0x06410c08, 0x08010e82,
@@ -313,11 +320,11 @@ const u32  vh265_mc[] __initconst = {
 	0x0a60c08b, 0x0c781700, 0x00000000, 0x0641170a, 0x06410c08,
 	0x08010e81, 0x093e1248, 0x0a628009, 0x07801909, 0x09546289,
 	0x07c02509, 0x0a60c00b, 0x06800009, 0x07801949, 0x09606289,
-	0x0c7803c0, 0x07c02549, 0x0c009c40, 0x06802509, 0x07802509,
-	0x04001249, 0x09546289, 0x07c02509, 0x0aa1c04b, 0x0c009a80,
+	0x0c7803c0, 0x07c02549, 0x0c00a380, 0x06802509, 0x07802509,
+	0x04001249, 0x09546289, 0x07c02509, 0x0aa1c04b, 0x0c00a1c0,
 	0x06802549, 0x07802549, 0x04001249, 0x09606289, 0x07c02549,
 	0x0601170a, 0x06800009, 0x07c02c89, 0x07802149, 0x0aa14009,
-	0x07802c49, 0x0b20c049, 0x0c019c00, 0x00000000, 0x0a61400b,
+	0x07802c49, 0x0b20c049, 0x0c01a340, 0x00000000, 0x0a61400b,
 	0x06800009, 0x06410c08, 0x08010e81, 0x093e1248, 0x0641170a,
 	0x096c1289, 0x0601170a, 0x07c02589, 0x078018c9, 0x0aa14009,
 	0x06800009, 0x06410c08, 0x08010e81, 0x093e1248, 0x07c025c9,
@@ -325,44 +332,44 @@ const u32  vh265_mc[] __initconst = {
 	0x0a61400b, 0x06800049, 0x06410c08, 0x08010e81, 0x093e1248,
 	0x07c02609, 0x0aa1808b, 0x0aa0c009, 0x06802549, 0x06802509,
 	0x07000249, 0x0ae10049, 0x06800009, 0x0c780100, 0x07c02649,
-	0x0c008dc0, 0x06802649, 0x0aa0c04b, 0x07801b89, 0x07801bc9,
+	0x0c009500, 0x06802649, 0x0aa0c04b, 0x07801b89, 0x07801bc9,
 	0x06047b09, 0x08047c00, 0x0aa10009, 0x08047d00, 0x0c007540,
-	0x00000000, 0x0c008b00, 0x06802689, 0x06800149, 0x02409209,
-	0x06411708, 0x096e3209, 0x06011708, 0x0c008b00, 0x068026c9,
+	0x00000000, 0x0c009240, 0x06802689, 0x06800149, 0x02409209,
+	0x06411708, 0x096e3209, 0x06011708, 0x0c009240, 0x068026c9,
 	0x07801988, 0x079026c9, 0x02008248, 0x07c02708, 0x07802349,
 	0x09446248, 0x078024c8, 0x09501248, 0x07802488, 0x09521248,
 	0x07800d08, 0x09542248, 0x07800d48, 0x09582248, 0x07800d88,
 	0x095c2248, 0x07800dc8, 0x09602248, 0x07801ac8, 0x09647248,
 	0x07801b08, 0x09727248, 0x06011109, 0x06411009, 0x09809389,
-	0x06011009, 0x07801b48, 0x0aa3c008, 0x0c008380, 0x06802749,
-	0x0c008300, 0x06802789, 0x06411109, 0x07801ac8, 0x0780274a,
+	0x06011009, 0x07801b48, 0x0aa3c008, 0x0c008ac0, 0x06802749,
+	0x0c008a40, 0x06802789, 0x06411109, 0x07801ac8, 0x0780274a,
 	0x02008288, 0x09647248, 0x07801b08, 0x0780278a, 0x02008288,
 	0x09727248, 0x06011109, 0x07802048, 0x0aa14008, 0x06800009,
 	0x06410c08, 0x08010e81, 0x093e1248, 0x07c027c9, 0x0a620009,
 	0x07802089, 0x07c02809, 0x078020c9, 0x07c02849, 0x07802109,
 	0x0c7802c0, 0x07c02889, 0x06410c08, 0x08010e81, 0x093e1248,
-	0x0a618009, 0x07c02809, 0x0c007b00, 0x06802849, 0x0c007a80,
+	0x0a618009, 0x07c02809, 0x0c008240, 0x06802849, 0x0c0081c0,
 	0x06802889, 0x07802008, 0x0aa34008, 0x06800009, 0x07802488,
 	0x0a61c008, 0x078024c8, 0x0a614008, 0x07802808, 0x0aa0c008,
 	0x0c780140, 0x06800009, 0x06410c08, 0x08010e81, 0x093e1248,
 	0x07c028c9, 0x07801c48, 0x0a610008, 0x07801fc8, 0x0a608008,
-	0x0c780440, 0x0c007340, 0x06802909, 0x0780290b, 0x0aa3400b,
-	0x0c007240, 0x06800049, 0x04001308, 0x0680080a, 0x0240a30a,
+	0x0c780440, 0x0c007a80, 0x06802909, 0x0780290b, 0x0aa3400b,
+	0x0c007980, 0x06800049, 0x04001308, 0x0680080a, 0x0240a30a,
 	0x0980c1cc, 0x06410c08, 0x06010e0c, 0x03808288, 0x07c00048,
-	0x0aef004b, 0x044012cb, 0x078021c8, 0x0aa20008, 0x0c006ec0,
+	0x0aef004b, 0x044012cb, 0x078021c8, 0x0aa20008, 0x0c007600,
 	0x06800049, 0x0aa14008, 0x00000000, 0x08010e88, 0x0c7fff40,
-	0x04401208, 0x0c013e40, 0x00000000, 0x0640ce09, 0x0a240089,
+	0x04401208, 0x0c014580, 0x00000000, 0x0640ce09, 0x0a240089,
 	0x06460308, 0x093e1208, 0x0a6f8008, 0x00000000, 0x06420408,
 	0x09c08748, 0x06020408, 0x06460108, 0x0a216008, 0x00000000,
 	0x06460408, 0x0a2fc048, 0x00000000, 0x06460408, 0x06060408,
 	0x07802248, 0x0aa28008, 0x00000000, 0x06460408, 0x09808708,
 	0x06060408, 0x06400408, 0x09808508, 0x09808588, 0x06000408,
-	0x08000400, 0x0c01ad80, 0x069fffe9, 0x0640d208, 0x0a240208,
+	0x08000400, 0x0c01b4c0, 0x069fffe9, 0x0640d208, 0x0a240208,
 	0x07803688, 0x0be30208, 0x078022c9, 0x0a60c009, 0x07802349,
 	0x0aa20089, 0x0640d209, 0x0928c209, 0x04001208, 0x0968c248,
-	0x0600d209, 0x0c7860c0, 0x0800c0ff, 0x098080c8, 0x07c03688,
-	0x0800c008, 0x08007401, 0x0c785f40, 0x00000000, 0x0aa0c148,
-	0x0c784800, 0x00000000, 0x0c01a700, 0x069fff69, 0x08010e81,
+	0x0600d209, 0x0c786800, 0x0800c0ff, 0x098080c8, 0x07c03688,
+	0x0800c008, 0x08007401, 0x0c786680, 0x00000000, 0x0aa0c148,
+	0x0c784800, 0x00000000, 0x0c01ae40, 0x069fff69, 0x08010e81,
 	0x06812008, 0x06010e08, 0x00000000, 0x08010e00, 0x07802308,
 	0x0a60c008, 0x06800008, 0x07c02948, 0x07802248, 0x0aa58008,
 	0x06800008, 0x07c02b88, 0x07c02bc8, 0x07c00e88, 0x07c02988,
@@ -370,13 +377,13 @@ const u32  vh265_mc[] __initconst = {
 	0x07800e08, 0x07801d88, 0x07c02a88, 0x07c02b08, 0x0aa0c009,
 	0x07800e48, 0x07801e88, 0x07c02ac8, 0x07c02b48, 0x0c780280,
 	0x068001df, 0x078022c8, 0x07800e89, 0x0a806248, 0x06800827,
-	0x0c019200, 0x078022e8, 0x0c785400, 0x0800c0ff, 0x07802308,
+	0x0c019940, 0x078022e8, 0x0c785b40, 0x0800c0ff, 0x07802308,
 	0x0a61c008, 0x00000000, 0x068001df, 0x07802b89, 0x07802bc8,
 	0x09508248, 0x07c02d09, 0x07802b89, 0x0a614049, 0x07801fc9,
 	0x0aa0c009, 0x00000000, 0x0981f15f, 0x07802b89, 0x07802bc8,
 	0x0958c248, 0x0978425f, 0x06011609, 0x0c000300, 0x00000000,
-	0x07800e88, 0x09808788, 0x098087c8, 0x06012408, 0x0c019640,
-	0x07800ea9, 0x06a00008, 0x06011408, 0x0c786440, 0x00000000,
+	0x07800e88, 0x09808788, 0x098087c8, 0x06012408, 0x0c019d80,
+	0x07800ea9, 0x06a00008, 0x06011408, 0x0c786b80, 0x00000000,
 	0x07802a89, 0x07c02cc9, 0x07802bc9, 0x07802a4a, 0x0a40b289,
 	0x0680000c, 0x07802b8b, 0x07802a0a, 0x0a40728b, 0x0680000c,
 	0x0a614009, 0x0680008c, 0x0a60c00a, 0x0680008c, 0x068000cc,
@@ -413,15 +420,15 @@ const u32  vh265_mc[] __initconst = {
 	0x0a6f0009, 0x091e5248, 0x0a6e8009, 0x00000000, 0x06440008,
 	0x09808008, 0x06040008, 0x09c08008, 0x06040008, 0x08040701,
 	0x07802308, 0x0aa4c008, 0x07802b88, 0x0a614008, 0x07801fc9,
-	0x0aa0c009, 0x0c007a80, 0x00000000, 0x06411009, 0x091c1249,
+	0x0aa0c009, 0x0c0081c0, 0x00000000, 0x06411009, 0x091c1249,
 	0x0a6f8009, 0x00000000, 0x06411009, 0x098093c9, 0x06011009,
 	0x06411009, 0x091e1249, 0x0a6f8009, 0x0cc00000, 0x00000000,
 	0x06411009, 0x091c1249, 0x0a6f8009, 0x00000000, 0x07800e09,
-	0x0ae0c049, 0x0c007300, 0x00000000, 0x06411009, 0x098093c9,
+	0x0ae0c049, 0x0c007a40, 0x00000000, 0x06411009, 0x098093c9,
 	0x06011009, 0x08011c00, 0x08011e00, 0x06411009, 0x091e1249,
 	0x0a6f8009, 0x0cc00000, 0x00000000, 0x0a60fc08, 0x00000000,
-	0x08010e90, 0x0c7815c0, 0x0800c0ff, 0x0780080b, 0x0c001600,
-	0x06800049, 0x06047e08, 0x0aa1000b, 0x0c0016c0, 0x06800049,
+	0x08010e90, 0x0c781d00, 0x0800c0ff, 0x0780080b, 0x0c001d40,
+	0x06800049, 0x06047e08, 0x0aa1000b, 0x0c001e00, 0x06800049,
 	0x06047f08, 0x08048000, 0x0c0002c0, 0x0780250a, 0x06047c0c,
 	0x0780234a, 0x0a61400a, 0x08048020, 0x0c000140, 0x0780254a,
 	0x06047d0c, 0x0cc00000, 0x00000000, 0x0400034a, 0x06410c0e,
@@ -432,283 +439,1143 @@ const u32  vh265_mc[] __initconst = {
 	0x0aa1c00d, 0x093e13ce, 0x0580130c, 0x097e130f, 0x0540138e,
 	0x0c7ffec0, 0x0440134d, 0x0680040d, 0x0240d28d, 0x0380c34c,
 	0x0400034c, 0x0ae0c00a, 0x0cc00000, 0x00000000, 0x0680000e,
-	0x0680000f, 0x0900140d, 0x0aa1c010, 0x0c000900, 0x06800049,
-	0x09408388, 0x0c000840, 0x06800049, 0x094083c8, 0x0920140d,
-	0x0aa34010, 0x0c000700, 0x06800049, 0x09508388, 0x0c000640,
-	0x06800049, 0x0950a3c8, 0x0c000580, 0x06800049, 0x09608388,
-	0x0c0004c0, 0x06800049, 0x0964a3c8, 0x0604810e, 0x0604810f,
-	0x0580134d, 0x0c7ff880, 0x0440128a, 0x00800000, 0x07800008,
-	0x0c7e02c0, 0x06030408, 0x06806008, 0x06010e08, 0x06410f08,
-	0x0befc0c8, 0x09118208, 0x0cc00000, 0x07400248, 0x0680e008,
-	0x06010e08, 0x06410f08, 0x0befc0c8, 0x09118208, 0x0cc00000,
-	0x07400248, 0x06410509, 0x06bfff89, 0x06030409, 0x00400000,
-	0x0be0c108, 0x0c7ffa40, 0x00000000, 0x08012104, 0x07800e09,
-	0x0ae0c049, 0x06411c22, 0x04000862, 0x0a26891f, 0x06011c21,
-	0x0a21481f, 0x0c005140, 0x00000000, 0x0a25411f, 0x09c1f15f,
-	0x07801fc9, 0x0aa48009, 0x08011e00, 0x0be42022, 0x06a907c9,
-	0x06012b09, 0x00000000, 0x00000000, 0x06412b09, 0x0c005080,
-	0x00000000, 0x06411009, 0x098093c9, 0x06011009, 0x06411009,
-	0x091e1249, 0x0a6f8009, 0x0c780840, 0x00000000, 0x0a2fa022,
-	0x06a907c9, 0x06012b09, 0x00000000, 0x00000000, 0x06412b09,
-	0x0c010080, 0x00000000, 0x06411609, 0x093e1249, 0x0aa4c009,
-	0x06800008, 0x07c02948, 0x06411109, 0x07802708, 0x09446248,
-	0x06011109, 0x06411009, 0x09809389, 0x06011009, 0x06411e08,
-	0x0be22008, 0x068001df, 0x0c07a080, 0x0978479f, 0x06420409,
-	0x09c09749, 0x0c780100, 0x06020409, 0x0c7feac0, 0x0800c0ff,
-	0x0601161e, 0x07800e88, 0x09808788, 0x098087c8, 0x06012408,
-	0x0c013200, 0x07800ea9, 0x06a00008, 0x06011408, 0x07801c48,
-	0x0aa0c008, 0x0c00f900, 0x00000000, 0x09c1f09f, 0x07800e88,
-	0x04001208, 0x07c00e88, 0x07802948, 0x04001208, 0x07c02948,
-	0x0a21409f, 0x07802b09, 0x0b803248, 0x00000000, 0x09c1f05f,
-	0x07802b88, 0x0a618048, 0x04001208, 0x07801fc9, 0x0aa0c009,
-	0x00000000, 0x0981f15f, 0x07802a89, 0x0b815248, 0x07c02b88,
-	0x07802a08, 0x07c02b88, 0x0981f09f, 0x07800e88, 0x07800e09,
-	0x02008248, 0x07802b09, 0x02408248, 0x07c00e88, 0x07802bc8,
-	0x04001208, 0x07802ac9, 0x0b807248, 0x07c02bc8, 0x07801c48,
-	0x0aa0c008, 0x0c7806c0, 0x00000000, 0x0981f0df, 0x07802bc8,
-	0x04001208, 0x07802ac9, 0x0b80f248, 0x07802b88, 0x04001208,
-	0x07802a89, 0x0b80b248, 0x07800e09, 0x0b807248, 0x07802bc8,
-	0x04001208, 0x07800e49, 0x0b803248, 0x0c7800c0, 0x09c1f11f,
-	0x0981f11f, 0x0981f0df, 0x07802b9e, 0x07802bc8, 0x0958c788,
-	0x0978479f, 0x0cb80020, 0x00000000, 0x06800048, 0x07c02308,
-	0x07802988, 0x07801d0c, 0x0b41a308, 0x06801d89, 0x02009209,
-	0x0700024a, 0x07802a0b, 0x0200b28b, 0x07c02a0b, 0x07c02b8b,
-	0x07802a4b, 0x07c02bcb, 0x04001208, 0x0b808308, 0x07c02988,
-	0x07800e09, 0x07c02a89, 0x07802a0a, 0x02409289, 0x0c780ac0,
-	0x07c02b09, 0x04001249, 0x0700024a, 0x07c02b0a, 0x07802a8b,
-	0x0200b28b, 0x0c780900, 0x07c02a8b, 0x078029c8, 0x07801d4c,
-	0x0b802308, 0x0c7ff600, 0x06800008, 0x07c02988, 0x07c02b88,
-	0x07c02a08, 0x07801d89, 0x07c02b09, 0x07c02a89, 0x078029c8,
-	0x06801e89, 0x02009209, 0x0700024a, 0x07802a4b, 0x0200b28b,
-	0x07c02a4b, 0x07c02bcb, 0x04001208, 0x0b808308, 0x07c029c8,
-	0x07800e49, 0x07c02ac9, 0x07802a4a, 0x02409289, 0x0c780200,
-	0x07c02b49, 0x04001249, 0x0700024a, 0x07c02b4a, 0x07802acb,
-	0x0200b28b, 0x07c02acb, 0x07802a48, 0x07800e09, 0x0e000248,
-	0x00000000, 0x00000000, 0x07802a09, 0x0f000200, 0x02008248,
-	0x07c00e88, 0x0c7fe780, 0x04c177df, 0x07802b89, 0x07802a0a,
-	0x0400228a, 0x0b407289, 0x04402209, 0x0440128a, 0x07802a88,
-	0x0b403289, 0x04401208, 0x04401208, 0x0680c009, 0x02009209,
-	0x07400262, 0x0a21009f, 0x06800021, 0x0c7fc040, 0x00000000,
-	0x07802b88, 0x0680c009, 0x02009209, 0x0c7fbf00, 0x07000261,
-	0x07802b89, 0x07802a0a, 0x0400228a, 0x0b407289, 0x04402209,
-	0x0440128a, 0x07802a88, 0x0b403289, 0x04401208, 0x04401208,
-	0x0680c009, 0x05801288, 0x02009289, 0x0700024a, 0x0a20c048,
-	0x0c7800c0, 0x094082a2, 0x095102a2, 0x0740024a, 0x0a21009f,
-	0x06800021, 0x0c7fb940, 0x00000000, 0x07802b88, 0x0680c009,
-	0x05801288, 0x02009289, 0x0700024a, 0x0a20c048, 0x0911084a,
-	0x0900884a, 0x0c7fb6c0, 0x00000000, 0x07802b89, 0x07802a0a,
-	0x0400228a, 0x0b407289, 0x04402209, 0x0440128a, 0x07802a88,
-	0x0b403289, 0x04401208, 0x04401208, 0x0680c009, 0x05802288,
-	0x02009289, 0x0700024a, 0x09002208, 0x0a60c008, 0x0c780240,
-	0x095842a2, 0x0a60c048, 0x0c780180, 0x095042a2, 0x0a60c088,
-	0x0c7800c0, 0x094842a2, 0x094042a2, 0x0740024a, 0x0a21009f,
-	0x06800021, 0x0c7faf40, 0x00000000, 0x07802b88, 0x0680c009,
-	0x05802288, 0x02009289, 0x0700024a, 0x09002208, 0x0aa1c008,
-	0x0918484a, 0x0aa14048, 0x0910484a, 0x0aa0c088, 0x0908484a,
-	0x0900484a, 0x0c7fab80, 0x00000000, 0x0c780080, 0x06800021,
-	0x0c7faa80, 0x00000000, 0x06412106, 0x090c1186, 0x0a6f8006,
-	0x0c7dac80, 0x00000000, 0x06804009, 0x06012d09, 0x06800f8a,
-	0x08012e00, 0x00000000, 0x0d07ff8a, 0x00000000, 0x0cc00000,
-	0x00000000, 0x06804009, 0x06012c09, 0x06809009, 0x06012d09,
-	0x06800f8a, 0x06412e09, 0x0d07ffca, 0x06012e09, 0x0cc00000,
-	0x00000000, 0x06809009, 0x06012c09, 0x06804009, 0x06012d09,
-	0x06800f8a, 0x06412e09, 0x0d07ffca, 0x06012e09, 0x06411109,
-	0x07802708, 0x09446248, 0x06011109, 0x0cc00000, 0x00000000,
-	0x07800e08, 0x07801d09, 0x0a608009, 0x0c780880, 0x0aa18049,
-	0x0aa20089, 0x0aa640c9, 0x0a608109, 0x0c7806c0, 0x0c780000,
-	0x05801288, 0x0c780680, 0x07c01d8a, 0x05802288, 0x0540124a,
-	0x02009289, 0x0b0fe209, 0x0400128a, 0x0440224a, 0x07c01d89,
-	0x05401289, 0x0400128a, 0x0540124a, 0x02009289, 0x05401208,
-	0x0b003209, 0x07801d89, 0x0440128a, 0x0240a24a, 0x0c780200,
-	0x07c01dca, 0x0c000b40, 0x06801d8c, 0x0c780100, 0x00000000,
-	0x0c000dc0, 0x06801d8c, 0x07800e48, 0x07801d49, 0x0a608009,
-	0x0c780880, 0x0aa18049, 0x0aa20089, 0x0aa640c9, 0x0a608109,
-	0x0c7806c0, 0x0c780000, 0x05801288, 0x0c780680, 0x07c01e8a,
-	0x05802288, 0x0540124a, 0x02009289, 0x0b0fe209, 0x0400128a,
-	0x0440224a, 0x07c01e89, 0x05401289, 0x0400128a, 0x0540124a,
-	0x02009289, 0x05401208, 0x0b003209, 0x07801e89, 0x0440128a,
-	0x0240a24a, 0x0c780200, 0x07c01eca, 0x0c000200, 0x06801e8c,
-	0x0cc00000, 0x00000000, 0x0c000480, 0x06801e8c, 0x0cc00000,
-	0x00000000, 0x05802348, 0x0740030d, 0x05801248, 0x0240a349,
-	0x0400130c, 0x0740030a, 0x054012c8, 0x0200b20b, 0x058022cb,
-	0x0240a24b, 0x0400130c, 0x0740030a, 0x0cc00000, 0x00000000,
-	0x05803288, 0x0540224a, 0x02009289, 0x0b0fe209, 0x0400128a,
-	0x0440224a, 0x07400309, 0x054012c8, 0x04000349, 0x0540224a,
+	0x0680000f, 0x0900140d, 0x0aa1c010, 0x0c001040, 0x06800049,
+	0x09408388, 0x0c000f80, 0x06800049, 0x094083c8, 0x0920140d,
+	0x0aa44010, 0x0c000e40, 0x06800049, 0x09508388, 0x0c000d80,
+	0x06800049, 0x0c000400, 0x09121248, 0x0950a3c8, 0x0c000c40,
+	0x06800049, 0x09608388, 0x0c000b80, 0x06800049, 0x0c000200,
+	0x09121248, 0x0964a3c8, 0x0604810e, 0x0604810f, 0x0580134d,
+	0x0c7ff780, 0x0440128a, 0x090e1408, 0x0a816409, 0x0a62c009,
+	0x09101248, 0x0aa0c009, 0x0cc00000, 0x06805fc8, 0x090c1248,
+	0x0aa0c009, 0x0cc00000, 0x06804008, 0x0cc00000, 0x06801fc8,
+	0x09101248, 0x0a60c009, 0x0cc00000, 0x0680a008, 0x090c1248,
+	0x0a60c009, 0x0cc00000, 0x0680bfc8, 0x0cc00000, 0x0680e008,
+	0x0cc00000, 0x00000000, 0x00800000, 0x07800008, 0x0c7df180,
+	0x06030408, 0x06806008, 0x06010e08, 0x06410f08, 0x0befc0c8,
+	0x09118208, 0x0cc00000, 0x07400248, 0x0680e008, 0x06010e08,
+	0x06410f08, 0x0befc0c8, 0x09118208, 0x0cc00000, 0x07400248,
+	0x06410509, 0x06bfff89, 0x06030409, 0x00400000, 0x0be0c108,
+	0x0c7ffa40, 0x00000000, 0x08012104, 0x07800e09, 0x0ae0c049,
+	0x06411c22, 0x04000862, 0x0a26891f, 0x06011c21, 0x0a21481f,
+	0x0c005140, 0x00000000, 0x0a25411f, 0x09c1f15f, 0x07801fc9,
+	0x0aa48009, 0x08011e00, 0x0be42022, 0x06a907c9, 0x06012b09,
+	0x00000000, 0x00000000, 0x06412b09, 0x0c005080, 0x00000000,
+	0x06411009, 0x098093c9, 0x06011009, 0x06411009, 0x091e1249,
+	0x0a6f8009, 0x0c780840, 0x00000000, 0x0a2fa022, 0x06a907c9,
+	0x06012b09, 0x00000000, 0x00000000, 0x06412b09, 0x0c010080,
+	0x00000000, 0x06411609, 0x093e1249, 0x0aa4c009, 0x06800008,
+	0x07c02948, 0x06411109, 0x07802708, 0x09446248, 0x06011109,
+	0x06411009, 0x09809389, 0x06011009, 0x06411e08, 0x0be22008,
+	0x068001df, 0x0c079940, 0x0978479f, 0x06420409, 0x09c09749,
+	0x0c780100, 0x06020409, 0x0c7feac0, 0x0800c0ff, 0x0601161e,
+	0x07800e88, 0x09808788, 0x098087c8, 0x06012408, 0x0c013200,
+	0x07800ea9, 0x06a00008, 0x06011408, 0x07801c48, 0x0aa0c008,
+	0x0c00f900, 0x00000000, 0x09c1f09f, 0x07800e88, 0x04001208,
+	0x07c00e88, 0x07802948, 0x04001208, 0x07c02948, 0x0a21409f,
+	0x07802b09, 0x0b803248, 0x00000000, 0x09c1f05f, 0x07802b88,
+	0x0a618048, 0x04001208, 0x07801fc9, 0x0aa0c009, 0x00000000,
+	0x0981f15f, 0x07802a89, 0x0b815248, 0x07c02b88, 0x07802a08,
+	0x07c02b88, 0x0981f09f, 0x07800e88, 0x07800e09, 0x02008248,
+	0x07802b09, 0x02408248, 0x07c00e88, 0x07802bc8, 0x04001208,
+	0x07802ac9, 0x0b807248, 0x07c02bc8, 0x07801c48, 0x0aa0c008,
+	0x0c7806c0, 0x00000000, 0x0981f0df, 0x07802bc8, 0x04001208,
+	0x07802ac9, 0x0b80f248, 0x07802b88, 0x04001208, 0x07802a89,
+	0x0b80b248, 0x07800e09, 0x0b807248, 0x07802bc8, 0x04001208,
+	0x07800e49, 0x0b803248, 0x0c7800c0, 0x09c1f11f, 0x0981f11f,
+	0x0981f0df, 0x07802b9e, 0x07802bc8, 0x0958c788, 0x0978479f,
+	0x0cb80020, 0x00000000, 0x06800048, 0x07c02308, 0x07802988,
+	0x07801d0c, 0x0b41a308, 0x06801d89, 0x02009209, 0x0700024a,
+	0x07802a0b, 0x0200b28b, 0x07c02a0b, 0x07c02b8b, 0x07802a4b,
+	0x07c02bcb, 0x04001208, 0x0b808308, 0x07c02988, 0x07800e09,
+	0x07c02a89, 0x07802a0a, 0x02409289, 0x0c780ac0, 0x07c02b09,
+	0x04001249, 0x0700024a, 0x07c02b0a, 0x07802a8b, 0x0200b28b,
+	0x0c780900, 0x07c02a8b, 0x078029c8, 0x07801d4c, 0x0b802308,
+	0x0c7ff600, 0x06800008, 0x07c02988, 0x07c02b88, 0x07c02a08,
+	0x07801d89, 0x07c02b09, 0x07c02a89, 0x078029c8, 0x06801e89,
+	0x02009209, 0x0700024a, 0x07802a4b, 0x0200b28b, 0x07c02a4b,
+	0x07c02bcb, 0x04001208, 0x0b808308, 0x07c029c8, 0x07800e49,
+	0x07c02ac9, 0x07802a4a, 0x02409289, 0x0c780200, 0x07c02b49,
+	0x04001249, 0x0700024a, 0x07c02b4a, 0x07802acb, 0x0200b28b,
+	0x07c02acb, 0x07802a48, 0x07800e09, 0x0e000248, 0x00000000,
+	0x00000000, 0x07802a09, 0x0f000200, 0x02008248, 0x07c00e88,
+	0x0c7fe780, 0x04c177df, 0x07802b89, 0x07802a0a, 0x0400228a,
+	0x0b407289, 0x04402209, 0x0440128a, 0x07802a88, 0x0b403289,
+	0x04401208, 0x04401208, 0x0680c009, 0x02009209, 0x07400262,
+	0x0a21009f, 0x06800021, 0x0c7fc040, 0x00000000, 0x07802b88,
+	0x0680c009, 0x02009209, 0x0c7fbf00, 0x07000261, 0x07802b89,
+	0x07802a0a, 0x0400228a, 0x0b407289, 0x04402209, 0x0440128a,
+	0x07802a88, 0x0b403289, 0x04401208, 0x04401208, 0x0680c009,
+	0x05801288, 0x02009289, 0x0700024a, 0x0a20c048, 0x0c7800c0,
+	0x094082a2, 0x095102a2, 0x0740024a, 0x0a21009f, 0x06800021,
+	0x0c7fb940, 0x00000000, 0x07802b88, 0x0680c009, 0x05801288,
+	0x02009289, 0x0700024a, 0x0a20c048, 0x0911084a, 0x0900884a,
+	0x0c7fb6c0, 0x00000000, 0x07802b89, 0x07802a0a, 0x0400228a,
+	0x0b407289, 0x04402209, 0x0440128a, 0x07802a88, 0x0b403289,
+	0x04401208, 0x04401208, 0x0680c009, 0x05802288, 0x02009289,
+	0x0700024a, 0x09002208, 0x0a60c008, 0x0c780240, 0x095842a2,
+	0x0a60c048, 0x0c780180, 0x095042a2, 0x0a60c088, 0x0c7800c0,
+	0x094842a2, 0x094042a2, 0x0740024a, 0x0a21009f, 0x06800021,
+	0x0c7faf40, 0x00000000, 0x07802b88, 0x0680c009, 0x05802288,
+	0x02009289, 0x0700024a, 0x09002208, 0x0aa1c008, 0x0918484a,
+	0x0aa14048, 0x0910484a, 0x0aa0c088, 0x0908484a, 0x0900484a,
+	0x0c7fab80, 0x00000000, 0x0c780080, 0x06800021, 0x0c7faa80,
+	0x00000000, 0x06412106, 0x090c1186, 0x0a6f8006, 0x0c7d9b40,
+	0x00000000, 0x06804009, 0x06012d09, 0x06800f8a, 0x08012e00,
+	0x00000000, 0x0d07ff8a, 0x00000000, 0x0cc00000, 0x00000000,
+	0x06804009, 0x06012c09, 0x06809009, 0x06012d09, 0x06800f8a,
+	0x06412e09, 0x0d07ffca, 0x06012e09, 0x0cc00000, 0x00000000,
+	0x06809009, 0x06012c09, 0x06804009, 0x06012d09, 0x06800f8a,
+	0x06412e09, 0x0d07ffca, 0x06012e09, 0x06411109, 0x07802708,
+	0x09446248, 0x06011109, 0x0cc00000, 0x00000000, 0x07800e08,
+	0x07801d09, 0x0a608009, 0x0c780880, 0x0aa18049, 0x0aa20089,
+	0x0aa640c9, 0x0a608109, 0x0c7806c0, 0x0c780000, 0x05801288,
+	0x0c780680, 0x07c01d8a, 0x05802288, 0x0540124a, 0x02009289,
+	0x0b0fe209, 0x0400128a, 0x0440224a, 0x07c01d89, 0x05401289,
+	0x0400128a, 0x0540124a, 0x02009289, 0x05401208, 0x0b003209,
+	0x07801d89, 0x0440128a, 0x0240a24a, 0x0c780200, 0x07c01dca,
+	0x0c000b40, 0x06801d8c, 0x0c780100, 0x00000000, 0x0c000dc0,
+	0x06801d8c, 0x07800e48, 0x07801d49, 0x0a608009, 0x0c780880,
+	0x0aa18049, 0x0aa20089, 0x0aa640c9, 0x0a608109, 0x0c7806c0,
+	0x0c780000, 0x05801288, 0x0c780680, 0x07c01e8a, 0x05802288,
+	0x0540124a, 0x02009289, 0x0b0fe209, 0x0400128a, 0x0440224a,
+	0x07c01e89, 0x05401289, 0x0400128a, 0x0540124a, 0x02009289,
+	0x05401208, 0x0b003209, 0x07801e89, 0x0440128a, 0x0240a24a,
+	0x0c780200, 0x07c01eca, 0x0c000200, 0x06801e8c, 0x0cc00000,
+	0x00000000, 0x0c000480, 0x06801e8c, 0x0cc00000, 0x00000000,
+	0x05802348, 0x0740030d, 0x05801248, 0x0240a349, 0x0400130c,
+	0x0740030a, 0x054012c8, 0x0200b20b, 0x058022cb, 0x0240a24b,
+	0x0400130c, 0x0740030a, 0x0cc00000, 0x00000000, 0x05803288,
+	0x0540224a, 0x02009289, 0x0b0fe209, 0x0400128a, 0x0440224a,
+	0x07400309, 0x054012c8, 0x04000349, 0x0540224a, 0x02009289,
+	0x0b0fe2c9, 0x0400128a, 0x0440224a, 0x0240a349, 0x0400130c,
+	0x0740030a, 0x054012c8, 0x0200b20b, 0x04000349, 0x0540224a,
+	0x02009289, 0x0b0fe2c9, 0x0400128a, 0x0440224a, 0x0240a349,
+	0x0400130c, 0x0740030a, 0x054022c8, 0x04000349, 0x0540224a,
 	0x02009289, 0x0b0fe2c9, 0x0400128a, 0x0440224a, 0x0240a349,
-	0x0400130c, 0x0740030a, 0x054012c8, 0x0200b20b, 0x04000349,
-	0x0540224a, 0x02009289, 0x0b0fe2c9, 0x0400128a, 0x0440224a,
-	0x0240a349, 0x0400130c, 0x0740030a, 0x054022c8, 0x04000349,
-	0x0540224a, 0x02009289, 0x0b0fe2c9, 0x0400128a, 0x0440224a,
-	0x0240a349, 0x0400130c, 0x0740030a, 0x0cc00000, 0x00000000,
-	0x0640c308, 0x02008308, 0x06035108, 0x06800808, 0x06035208,
-	0x06800149, 0x0680c00a, 0x0700024b, 0x0740028b, 0x0b6105c9,
-	0x04001249, 0x0c7fff00, 0x0400128a, 0x06a0c008, 0x06035008,
-	0x06435008, 0x0580f208, 0x0bef8048, 0x00000000, 0x06435308,
-	0x0900c208, 0x0a6f8008, 0x00000000, 0x0cc00000, 0x00000000,
+	0x0400130c, 0x0740030a, 0x0cc00000, 0x00000000, 0x0640c308,
+	0x02008308, 0x06035108, 0x06800808, 0x06035208, 0x06800149,
+	0x0680c00a, 0x0700024b, 0x0740028b, 0x0b6105c9, 0x04001249,
+	0x0c7fff00, 0x0400128a, 0x06a0c008, 0x06035008, 0x06435008,
+	0x0580f208, 0x0bef8048, 0x00000000, 0x06435308, 0x0900c208,
+	0x0a6f8008, 0x00000000, 0x0cc00000, 0x00000000, 0x0640c408,
+	0x02008308, 0x06035108, 0x06801408, 0x06035208, 0x06800609,
+	0x0680c00a, 0x0700024b, 0x0740028b, 0x0b611709, 0x04001249,
+	0x0c7fff00, 0x0400128a, 0x06a0c008, 0x06035008, 0x06435008,
+	0x0580f208, 0x0bef8048, 0x00000000, 0x06435308, 0x0900c208,
+	0x0a6f8008, 0x00000000, 0x0cc00000, 0x00000000, 0x0640c308,
+	0x02008308, 0x06035108, 0x06800808, 0x06035208, 0x06b0c008,
+	0x06035008, 0x06435008, 0x0580f208, 0x0bef8048, 0x00000000,
+	0x06800149, 0x0680c00a, 0x0700028b, 0x0740024b, 0x0b6105c9,
+	0x04001249, 0x0c7fff00, 0x0400128a, 0x0cc00000, 0x00000000,
 	0x0640c408, 0x02008308, 0x06035108, 0x06801408, 0x06035208,
-	0x06800609, 0x0680c00a, 0x0700024b, 0x0740028b, 0x0b611709,
-	0x04001249, 0x0c7fff00, 0x0400128a, 0x06a0c008, 0x06035008,
-	0x06435008, 0x0580f208, 0x0bef8048, 0x00000000, 0x06435308,
-	0x0900c208, 0x0a6f8008, 0x00000000, 0x0cc00000, 0x00000000,
-	0x0640c308, 0x02008308, 0x06035108, 0x06800808, 0x06035208,
 	0x06b0c008, 0x06035008, 0x06435008, 0x0580f208, 0x0bef8048,
-	0x00000000, 0x06800149, 0x0680c00a, 0x0700028b, 0x0740024b,
-	0x0b6105c9, 0x04001249, 0x0c7fff00, 0x0400128a, 0x0cc00000,
-	0x00000000, 0x0640c408, 0x02008308, 0x06035108, 0x06801408,
-	0x06035208, 0x06b0c008, 0x06035008, 0x06435008, 0x0580f208,
-	0x0bef8048, 0x00000000, 0x06800609, 0x0680c00a, 0x0700028b,
-	0x0740024b, 0x0b611709, 0x04001249, 0x0c7fff00, 0x0400128a,
-	0x0cc00000, 0x00000000, 0x0640c508, 0x02008308, 0x06035108,
-	0x06801467, 0x0c00a580, 0x06435128, 0x06800c08, 0x06035208,
-	0x06801749, 0x0680c00a, 0x0700024b, 0x0740028b, 0x0b6121c9,
-	0x04001249, 0x0c7fff00, 0x0400128a, 0x06a0c008, 0x06035008,
-	0x06435008, 0x0580f208, 0x0bef8048, 0x00000000, 0x06435308,
-	0x0900c208, 0x0a6f8008, 0x00000000, 0x07800f48, 0x0aa20008,
-	0x0540330c, 0x07801788, 0x0aa0c008, 0x06800008, 0x06900008,
-	0x0c000100, 0x0200c20c, 0x0cc00000, 0x00000000, 0x0680000d,
-	0x08070300, 0x0680c00b, 0x0680000a, 0x06470408, 0x06470409,
-	0x09508209, 0x074002c8, 0x040012cb, 0x0baeffca, 0x0400128a,
-	0x0aa3800d, 0x00000000, 0x06470508, 0x07c0fe88, 0x09210208,
-	0x07c0fec8, 0x06470608, 0x07c0ff08, 0x09210208, 0x07c0ff48,
-	0x06470708, 0x07c0ff88, 0x09210208, 0x07c0ffc8, 0x0640cd08,
-	0x02008308, 0x0540924d, 0x02008248, 0x06035108, 0x06804008,
-	0x06035208, 0x06a0c008, 0x06035008, 0x06435008, 0x0580f208,
-	0x0bef8048, 0x00000000, 0x0ba0c04d, 0x0cc00000, 0x00000000,
-	0x0c7ff640, 0x0400134d, 0x0640c508, 0x02008308, 0x06035108,
-	0x06801427, 0x0c009180, 0x06435128, 0x06800c08, 0x06035208,
+	0x00000000, 0x06800609, 0x0680c00a, 0x0700028b, 0x0740024b,
+	0x0b611709, 0x04001249, 0x0c7fff00, 0x0400128a, 0x0cc00000,
+	0x00000000, 0x0640c508, 0x02008308, 0x06035108, 0x06801467,
+	0x0c00a580, 0x06435128, 0x06800c08, 0x06035208, 0x06801749,
+	0x0680c00a, 0x0700024b, 0x0740028b, 0x0b6121c9, 0x04001249,
+	0x0c7fff00, 0x0400128a, 0x06a0c008, 0x06035008, 0x06435008,
+	0x0580f208, 0x0bef8048, 0x00000000, 0x06435308, 0x0900c208,
+	0x0a6f8008, 0x00000000, 0x07800f48, 0x0aa20008, 0x0540330c,
+	0x07801788, 0x0aa0c008, 0x06800008, 0x06900008, 0x0c000100,
+	0x0200c20c, 0x0cc00000, 0x00000000, 0x0680000d, 0x08070300,
+	0x0680c00b, 0x0680000a, 0x06470408, 0x06470409, 0x09508209,
+	0x074002c8, 0x040012cb, 0x0baeffca, 0x0400128a, 0x0aa3800d,
+	0x00000000, 0x06470508, 0x07c0fe88, 0x09210208, 0x07c0fec8,
+	0x06470608, 0x07c0ff08, 0x09210208, 0x07c0ff48, 0x06470708,
+	0x07c0ff88, 0x09210208, 0x07c0ffc8, 0x0640cd08, 0x02008308,
+	0x0540924d, 0x02008248, 0x06035108, 0x06804008, 0x06035208,
+	0x06a0c008, 0x06035008, 0x06435008, 0x0580f208, 0x0bef8048,
+	0x00000000, 0x0ba0c04d, 0x0cc00000, 0x00000000, 0x0c7ff640,
+	0x0400134d, 0x0640c508, 0x02008308, 0x06035108, 0x06801427,
+	0x0c009180, 0x06435128, 0x06800c08, 0x06035208, 0x06b0c008,
+	0x06035008, 0x06435008, 0x0580f208, 0x0bef8048, 0x00000000,
+	0x06801749, 0x0680c00a, 0x0700028b, 0x0740024b, 0x0b6121c9,
+	0x04001249, 0x0c7fff00, 0x0400128a, 0x0c000e00, 0x00000000,
+	0x07800f48, 0x0aa20008, 0x0540330c, 0x07801788, 0x0aa0c008,
+	0x06800008, 0x06900008, 0x0c000100, 0x0200c20c, 0x0cc00000,
+	0x00000000, 0x0680000d, 0x08070200, 0x0640cd08, 0x02008308,
+	0x0540924d, 0x02008248, 0x06035108, 0x06804008, 0x06035208,
 	0x06b0c008, 0x06035008, 0x06435008, 0x0580f208, 0x0bef8048,
-	0x00000000, 0x06801749, 0x0680c00a, 0x0700028b, 0x0740024b,
-	0x0b6121c9, 0x04001249, 0x0c7fff00, 0x0400128a, 0x0c000e00,
-	0x00000000, 0x07800f48, 0x0aa20008, 0x0540330c, 0x07801788,
-	0x0aa0c008, 0x06800008, 0x06900008, 0x0c000100, 0x0200c20c,
-	0x0cc00000, 0x00000000, 0x0680000d, 0x08070200, 0x0640cd08,
-	0x02008308, 0x0540924d, 0x02008248, 0x06035108, 0x06804008,
-	0x06035208, 0x06b0c008, 0x06035008, 0x06435008, 0x0580f208,
-	0x0bef8048, 0x00000000, 0x0680c00b, 0x0680000a, 0x070002c8,
-	0x040012cb, 0x06070408, 0x09108248, 0x06070409, 0x0baeffca,
-	0x0400128a, 0x0aa3800d, 0x00000000, 0x0780fe88, 0x0780fec9,
-	0x09610209, 0x06070508, 0x0780ff08, 0x0780ff49, 0x09610209,
-	0x06070608, 0x0780ff88, 0x0780ffc9, 0x09610209, 0x06070708,
-	0x0ba0c04d, 0x0cc00000, 0x00000000, 0x0c7ff640, 0x0400134d,
-	0x07801888, 0x07801a09, 0x09421209, 0x078019c9, 0x09441209,
-	0x07801c09, 0x09461209, 0x07800f09, 0x09483209, 0x07800ec9,
-	0x094e3209, 0x07800f89, 0x09741209, 0x07801a49, 0x09761209,
-	0x07800d49, 0x07801a8a, 0x02409289, 0x09782209, 0x06011708,
-	0x06412508, 0x07801009, 0x09401209, 0x078010c9, 0x09482209,
-	0x07801109, 0x094c2209, 0x07801049, 0x09504209, 0x07801089,
-	0x09584209, 0x06800cc9, 0x09706209, 0x078008c9, 0x09442209,
-	0x0aa18009, 0x0680018a, 0x04401249, 0x0340a24a, 0x0960420a,
-	0x09808048, 0x07800909, 0x097c2209, 0x0aa18009, 0x0680018a,
-	0x04401249, 0x0340a24a, 0x0968420a, 0x09808048, 0x06012508,
-	0x06470108, 0x07800f49, 0x09401209, 0x09421209, 0x09441209,
-	0x07800d49, 0x09482209, 0x06070108, 0x06470b08, 0x078008c9,
-	0x09402209, 0x07800909, 0x09482209, 0x09502209, 0x06070b08,
-	0x06440808, 0x078012c9, 0x09401209, 0x078019c9, 0x09421209,
-	0x06040808, 0x06440c08, 0x078008c9, 0x09402209, 0x07800909,
-	0x09442209, 0x06040c08, 0x0cc00000, 0x00000000, 0x07802508,
-	0x07c04408, 0x07802548, 0x07c04448, 0x07802348, 0x07c04488,
-	0x07802448, 0x07c044c8, 0x07802308, 0x07c04508, 0x078022c8,
-	0x07c04548, 0x07800848, 0x07c045c8, 0x07800888, 0x07c04608,
-	0x07800c88, 0x07c04648, 0x07800cc8, 0x07c04688, 0x07800948,
-	0x07c046c8, 0x078023c8, 0x07c04708, 0x07802608, 0x07c04748,
-	0x07802648, 0x07c04788, 0x07802188, 0x07c047c8, 0x07802688,
-	0x07c04808, 0x07800a88, 0x07c04848, 0x07802c88, 0x07c04888,
-	0x07801c48, 0x07801cc9, 0x05401249, 0x02c08248, 0x07c048c8,
-	0x07801d08, 0x07c04908, 0x07801d48, 0x07c04948, 0x07801d88,
-	0x07c04988, 0x07801dc8, 0x07c049c8, 0x07801e08, 0x07c04a08,
-	0x07801e48, 0x07c04a48, 0x07801e88, 0x07c04a88, 0x07801ec8,
-	0x07c04ac8, 0x07801f08, 0x07c04b08, 0x07801f48, 0x07c04b48,
-	0x078020c8, 0x07c04bc8, 0x07802108, 0x07c04c08, 0x07802848,
-	0x07c04c48, 0x07802888, 0x07c04c88, 0x07801ac8, 0x07c04cc8,
-	0x07801b08, 0x07c04d08, 0x07802248, 0x07c04d48, 0x078014c8,
-	0x07c04e08, 0x07801508, 0x07c04e48, 0x07801548, 0x07c04e88,
-	0x07801588, 0x07c04ec8, 0x078008c8, 0x07800909, 0x09484209,
-	0x07c04f08, 0x07801608, 0x07c05808, 0x07801648, 0x07c05848,
-	0x07801688, 0x07c05888, 0x078016c8, 0x07c058c8, 0x07801708,
-	0x07c05908, 0x07800808, 0x07c05948, 0x06800009, 0x07801148,
-	0x0a20c048, 0x07801008, 0x09809009, 0x0a20c048, 0x07801f88,
-	0x09809049, 0x0a20c048, 0x07802008, 0x09809089, 0x0a20c048,
-	0x07802048, 0x098090c9, 0x0a20c048, 0x07802088, 0x09809109,
-	0x0a20c048, 0x078027c8, 0x09809149, 0x0a20c048, 0x07802808,
-	0x09809189, 0x0a20c048, 0x07802488, 0x098091c9, 0x0a20c048,
-	0x078024c8, 0x09809209, 0x0a20c048, 0x078028c8, 0x09809249,
-	0x0a20c048, 0x00000000, 0x09809289, 0x07c04b89, 0x0680500a,
-	0x06802d48, 0x07000209, 0x07400289, 0x0400128a, 0x0baf7508,
-	0x04001208, 0x0640c108, 0x06035108, 0x06802008, 0x06035208,
-	0x06a04008, 0x06035008, 0x06435008, 0x0580f208, 0x0bef8048,
-	0x00000000, 0x06435308, 0x0900c208, 0x0a6f8008, 0x00000000,
-	0x0cc00000, 0x00000000, 0x0800cf00, 0x0800c0ff, 0x06800009,
-	0x0680ffca, 0x07000248, 0x09808408, 0x0600cf08, 0x00000000,
-	0x0640cf08, 0x0a6fc008, 0x0b403289, 0x0c7ffe40, 0x04001249,
-	0x0cc00000, 0x00000000, 0x0680000a, 0x0680000b, 0x06804008,
-	0x07000209, 0x0580f209, 0x0be20048, 0x0580e209, 0x0a20c048,
-	0x0400128a, 0x040012cb, 0x06804008, 0x0bae040a, 0x02008288,
-	0x07c02c4b, 0x0cc00000, 0x00000000, 0x06800009, 0x07c02c49,
-	0x068003ca, 0x068043c8, 0x07400209, 0x0440128a, 0x0aef800a,
-	0x04401208, 0x06a00009, 0x07400209, 0x0cc00000, 0x00000000,
-	0x06800048, 0x07c02608, 0x07c02448, 0x0cc00000, 0x00000000,
-	0x06802d4d, 0x06410c08, 0x08010e81, 0x093e1248, 0x0aa10009,
-	0x07c02c89, 0x0c0003c0, 0x0780250c, 0x0a62c00b, 0x00000000,
-	0x06410c08, 0x08010e81, 0x093e1248, 0x0aa18009, 0x07802c89,
-	0x09809049, 0x07c02c89, 0x0c000100, 0x0780254c, 0x0cc00000,
-	0x00000000, 0x07802c48, 0x0b21c088, 0x06800049, 0x0b214108,
-	0x06800089, 0x0b20c208, 0x068000c9, 0x06800109, 0x0680080a,
-	0x0240a24a, 0x098091c9, 0x06410c08, 0x06010e09, 0x03808288,
-	0x07400348, 0x0400134d, 0x0aeec04c, 0x0440130c, 0x0cc00000,
-	0x00000000, 0x06460409, 0x09001289, 0x0aaf800a, 0x00000000,
-	0x0cc00000, 0x00000000, 0x07802b88, 0x0680d009, 0x02009209,
-	0x0700024d, 0x07802bc8, 0x0680ee09, 0x02009209, 0x0700024e,
-	0x0680000f, 0x0ac0338d, 0x06ee000f, 0x06ea000f, 0x06050a0f,
-	0x07802b88, 0x0b615e08, 0x0680d009, 0x02009209, 0x07802d0d,
-	0x0740024d, 0x07802bc8, 0x0b615108, 0x0680ee09, 0x02009209,
-	0x07802d0e, 0x0740024e, 0x0cc00000, 0x00000000, 0x07800863,
-	0x068003e4, 0x05408924, 0x0b813923, 0x078014e3, 0x054108e3,
-	0x07801525, 0x02c23963, 0x07801564, 0x05410924, 0x078015a5,
-	0x02c24964, 0x0aa28023, 0x0aa24024, 0x054059a3, 0x024268e6,
-	0x0ac06926, 0x00000000, 0x0800c080, 0x08007401, 0x0c780000,
-	0x00000000, 0x0cc00000, 0x00000000, 0x067f2f23, 0x0befc063,
-	0x0a20c0a3, 0x0c07f940, 0x00000000, 0x0640c023, 0x0a617fa3,
-	0x00000000, 0x06803ba7, 0x0c001d00, 0x04000a26, 0x0a6d7fe3,
-	0x00000000, 0x0640d223, 0x0be0c063, 0x0908c9a3, 0x06800026,
-	0x040019a6, 0x0aa10066, 0x068004a7, 0x0c001a40, 0x04000a26,
-	0x06410b23, 0x098230a3, 0x06010b23, 0x06412123, 0x0a2fc063,
-	0x00000000, 0x0d07fda6, 0x00000000, 0x06410c23, 0x06814027,
-	0x0c001740, 0x06410c28, 0x058089a3, 0x0aa18026, 0x06802824,
-	0x0aa10066, 0x06802624, 0x0c780140, 0x00000000, 0x06010e24,
-	0x00000000, 0x06410c23, 0x092039a3, 0x07c04da6, 0x093269a3,
-	0x07c04de6, 0x06410d23, 0x06410b23, 0x0600d326, 0x06800067,
-	0x0c001240, 0x04000a26, 0x0a6288a6, 0x00000000, 0x0640ce24,
-	0x0a21c0a4, 0x06411624, 0x093e1924, 0x0aa10024, 0x06440123,
-	0x0a2fc063, 0x00000000, 0x08012101, 0x0640d224, 0x0a60c926,
-	0x058108e4, 0x0a20c063, 0x0a214064, 0x00000000, 0x0800c009,
-	0x0c7fee00, 0x08007401, 0x0640d224, 0x0be580a4, 0x09042924,
-	0x0a60c0e4, 0x068003e3, 0x07c036a3, 0x06803c25, 0x078036a3,
-	0x0aa3c826, 0x0a270063, 0x0aa34866, 0x0aa308a6, 0x0a2640a3,
-	0x0a260123, 0x0aa24064, 0x0be18223, 0x0a20c0a4, 0x0b218566,
-	0x0c7804c0, 0x0aa08526, 0x0a6444e6, 0x098230e3, 0x07c036a3,
-	0x0aa38826, 0x06800065, 0x0aa30866, 0x068000a5, 0x0aa288a6,
-	0x068000e5, 0x0b220566, 0x06800125, 0x0640d224, 0x05811924,
-	0x0a20c064, 0x0aa0c9e6, 0x068001e5, 0x06803c25, 0x0ae1c566,
-	0x0a61bc25, 0x0640d224, 0x0928c8e4, 0x040018e3, 0x0968c923,
-	0x0600d224, 0x068000a7, 0x0c000180, 0x04000a25, 0x0600c025,
-	0x08030504, 0x0c7fe140, 0x00000000, 0x0600d128, 0x078036e8,
-	0x0aa18028, 0x00000000, 0x0600d027, 0x08007401, 0x0640d027,
-	0x0a6fc027, 0x00000000, 0x0cc00000, 0x00000000, 0x0600d128,
-	0x078036e8, 0x0aa54028, 0x00000000, 0x0640cf28, 0x06035128,
-	0x0680fc28, 0x06035228, 0x06a00028, 0x06035028, 0x06435028,
-	0x0580fa28, 0x0bef8068, 0x00000000, 0x06435328, 0x0900ca28,
-	0x0a6f8028, 0x00000000, 0x09827427, 0x0600d027, 0x08007401,
-	0x0640d027, 0x0a6fc027, 0x0cc00000, 0x00000000, 0x06810028,
-	0x06800008, 0x06410c27, 0x08010e90, 0x092109e7, 0x07400227,
-	0x0d07ff28, 0x04001208, 0x0cc00000, 0x00000000, 0x0aa54029,
-	0x04000a29, 0x0640d427, 0x090109e7, 0x0a411a27, 0x0640d427,
-	0x092029e7, 0x0a614067, 0x00000000, 0x0c07f500, 0x06800028,
-	0x0c780180, 0x0a6d80e7, 0x00000000, 0x0c07fa00, 0x00000000,
-	0x0c780040, 0x04000a29, 0x0600d428, 0x0c7ffbc0, 0x00000000,
-	0x0cc00000, 0x00000000, 0x07800848, 0x07800889, 0x09610209,
-	0x06012308, 0x06800208, 0x07800d49, 0x03408248, 0x06040608,
-	0x07800849, 0x0780088a, 0x0960f24a, 0x06040209, 0x07800e09,
-	0x07800e4a, 0x0960c24a, 0x06040309, 0x08040400, 0x0cc00000,
+	0x00000000, 0x0680c00b, 0x0680000a, 0x070002c8, 0x040012cb,
+	0x06070408, 0x09108248, 0x06070409, 0x0baeffca, 0x0400128a,
+	0x0aa3800d, 0x00000000, 0x0780fe88, 0x0780fec9, 0x09610209,
+	0x06070508, 0x0780ff08, 0x0780ff49, 0x09610209, 0x06070608,
+	0x0780ff88, 0x0780ffc9, 0x09610209, 0x06070708, 0x0ba0c04d,
+	0x0cc00000, 0x00000000, 0x0c7ff640, 0x0400134d, 0x07801888,
+	0x07801a09, 0x09421209, 0x078019c9, 0x09441209, 0x07801c09,
+	0x09461209, 0x07800f09, 0x09483209, 0x07800ec9, 0x094e3209,
+	0x07800f89, 0x09741209, 0x07801a49, 0x09761209, 0x07800d49,
+	0x07801a8a, 0x02409289, 0x09782209, 0x06011708, 0x06412508,
+	0x07801009, 0x09401209, 0x078010c9, 0x09482209, 0x07801109,
+	0x094c2209, 0x07801049, 0x09504209, 0x07801089, 0x09584209,
+	0x06800cc9, 0x09706209, 0x078008c9, 0x09442209, 0x0aa18009,
+	0x0680018a, 0x04401249, 0x0340a24a, 0x0960420a, 0x09808048,
+	0x07800909, 0x097c2209, 0x0aa18009, 0x0680018a, 0x04401249,
+	0x0340a24a, 0x0968420a, 0x09808048, 0x06012508, 0x06470108,
+	0x07800f49, 0x09401209, 0x09421209, 0x09441209, 0x07800d49,
+	0x09482209, 0x06070108, 0x06470b08, 0x078008c9, 0x09402209,
+	0x07800909, 0x09482209, 0x09502209, 0x06070b08, 0x06440808,
+	0x078012c9, 0x09401209, 0x078019c9, 0x09421209, 0x06040808,
+	0x06440c08, 0x078008c9, 0x09402209, 0x07800909, 0x09442209,
+	0x06040c08, 0x0cc00000, 0x00000000, 0x07802508, 0x07c04408,
+	0x07802548, 0x07c04448, 0x07802348, 0x07c04488, 0x07802448,
+	0x07c044c8, 0x07802308, 0x07c04508, 0x078022c8, 0x07c04548,
+	0x07800848, 0x07c045c8, 0x07800888, 0x07c04608, 0x07800c88,
+	0x07c04648, 0x07800cc8, 0x07c04688, 0x07800948, 0x07c046c8,
+	0x078023c8, 0x07c04708, 0x07802608, 0x07c04748, 0x07802648,
+	0x07c04788, 0x07802188, 0x07c047c8, 0x07802688, 0x07c04808,
+	0x07800a88, 0x07c04848, 0x07802c88, 0x07c04888, 0x07801c48,
+	0x07801cc9, 0x05401249, 0x02c08248, 0x07c048c8, 0x07801d08,
+	0x07c04908, 0x07801d48, 0x07c04948, 0x07801d88, 0x07c04988,
+	0x07801dc8, 0x07c049c8, 0x07801e08, 0x07c04a08, 0x07801e48,
+	0x07c04a48, 0x07801e88, 0x07c04a88, 0x07801ec8, 0x07c04ac8,
+	0x07801f08, 0x07c04b08, 0x07801f48, 0x07c04b48, 0x078020c8,
+	0x07c04bc8, 0x07802108, 0x07c04c08, 0x07802848, 0x07c04c48,
+	0x07802888, 0x07c04c88, 0x07801ac8, 0x07c04cc8, 0x07801b08,
+	0x07c04d08, 0x07802248, 0x07c04d48, 0x078014c8, 0x07c04e08,
+	0x07801508, 0x07c04e48, 0x07801548, 0x07c04e88, 0x07801588,
+	0x07c04ec8, 0x078008c8, 0x07800909, 0x09484209, 0x07c04f08,
+	0x07801608, 0x07c05808, 0x07801648, 0x07c05848, 0x07801688,
+	0x07c05888, 0x078016c8, 0x07c058c8, 0x07801708, 0x07c05908,
+	0x07800808, 0x07c05948, 0x06800009, 0x07801148, 0x0a20c048,
+	0x07801008, 0x09809009, 0x0a20c048, 0x07801f88, 0x09809049,
+	0x0a20c048, 0x07802008, 0x09809089, 0x0a20c048, 0x07802048,
+	0x098090c9, 0x0a20c048, 0x07802088, 0x09809109, 0x0a20c048,
+	0x078027c8, 0x09809149, 0x0a20c048, 0x07802808, 0x09809189,
+	0x0a20c048, 0x07802488, 0x098091c9, 0x0a20c048, 0x078024c8,
+	0x09809209, 0x0a20c048, 0x078028c8, 0x09809249, 0x0a20c048,
+	0x00000000, 0x09809289, 0x07c04b89, 0x0680500a, 0x06802d48,
+	0x07000209, 0x07400289, 0x0400128a, 0x0baf7508, 0x04001208,
+	0x0640c108, 0x06035108, 0x06802008, 0x06035208, 0x06a04008,
+	0x06035008, 0x06435008, 0x0580f208, 0x0bef8048, 0x00000000,
+	0x06435308, 0x0900c208, 0x0a6f8008, 0x00000000, 0x0cc00000,
+	0x00000000, 0x0800cf00, 0x0800c0ff, 0x06800009, 0x0680ffca,
+	0x07000248, 0x09808408, 0x0600cf08, 0x00000000, 0x0640cf08,
+	0x0a6fc008, 0x0b403289, 0x0c7ffe40, 0x04001249, 0x0cc00000,
+	0x00000000, 0x0680000a, 0x0680000b, 0x06804008, 0x07000209,
+	0x0580f209, 0x0be20048, 0x0580e209, 0x0a20c048, 0x0400128a,
+	0x040012cb, 0x06804008, 0x0bae040a, 0x02008288, 0x07c02c4b,
+	0x0cc00000, 0x00000000, 0x06800009, 0x07c02c49, 0x068003ca,
+	0x068043c8, 0x07400209, 0x0440128a, 0x0aef800a, 0x04401208,
+	0x06a00009, 0x07400209, 0x0cc00000, 0x00000000, 0x06800048,
+	0x07c02608, 0x07c02448, 0x0cc00000, 0x00000000, 0x06802d4d,
+	0x06410c08, 0x08010e81, 0x093e1248, 0x0aa10009, 0x07c02c89,
+	0x0c0003c0, 0x0780250c, 0x0a62c00b, 0x00000000, 0x06410c08,
+	0x08010e81, 0x093e1248, 0x0aa18009, 0x07802c89, 0x09809049,
+	0x07c02c89, 0x0c000100, 0x0780254c, 0x0cc00000, 0x00000000,
+	0x07802c48, 0x0b21c088, 0x06800049, 0x0b214108, 0x06800089,
+	0x0b20c208, 0x068000c9, 0x06800109, 0x0680080a, 0x0240a24a,
+	0x098091c9, 0x06410c08, 0x06010e09, 0x03808288, 0x07400348,
+	0x0400134d, 0x0aeec04c, 0x0440130c, 0x0cc00000, 0x00000000,
+	0x06460409, 0x09001289, 0x0aaf800a, 0x00000000, 0x0cc00000,
+	0x00000000, 0x07802b88, 0x0680d009, 0x02009209, 0x0700024d,
+	0x07802bc8, 0x0680ee09, 0x02009209, 0x0700024e, 0x0680000f,
+	0x0ac0338d, 0x06ee000f, 0x06ea000f, 0x06050a0f, 0x07802b88,
+	0x0b615e08, 0x0680d009, 0x02009209, 0x07802d0d, 0x0740024d,
+	0x07802bc8, 0x0b615108, 0x0680ee09, 0x02009209, 0x07802d0e,
+	0x0740024e, 0x0cc00000, 0x00000000, 0x07800863, 0x068003e4,
+	0x05408924, 0x0b813923, 0x078014e3, 0x054108e3, 0x07801525,
+	0x02c23963, 0x07801564, 0x05410924, 0x078015a5, 0x02c24964,
+	0x0aa28023, 0x0aa24024, 0x054059a3, 0x024268e6, 0x0ac06926,
+	0x00000000, 0x0800c080, 0x08007401, 0x0c780000, 0x00000000,
+	0x0cc00000, 0x00000000, 0x067f2f23, 0x0befc063, 0x0a20c0a3,
+	0x0c07f940, 0x00000000, 0x0640c023, 0x0a617fa3, 0x00000000,
+	0x06803ba7, 0x0c001d00, 0x04000a26, 0x0a6d7fe3, 0x00000000,
+	0x0640d223, 0x0be0c063, 0x0908c9a3, 0x06800026, 0x040019a6,
+	0x0aa10066, 0x068004a7, 0x0c001a40, 0x04000a26, 0x06410b23,
+	0x098230a3, 0x06010b23, 0x06412123, 0x0a2fc063, 0x00000000,
+	0x0d07fda6, 0x00000000, 0x06410c23, 0x06814027, 0x0c001740,
+	0x06410c28, 0x058089a3, 0x0aa18026, 0x06802824, 0x0aa10066,
+	0x06802624, 0x0c780140, 0x00000000, 0x06010e24, 0x00000000,
+	0x06410c23, 0x092039a3, 0x07c04da6, 0x093269a3, 0x07c04de6,
+	0x06410d23, 0x06410b23, 0x0600d326, 0x06800067, 0x0c001240,
+	0x04000a26, 0x0a6288a6, 0x00000000, 0x0640ce24, 0x0a21c0a4,
+	0x06411624, 0x093e1924, 0x0aa10024, 0x06440123, 0x0a2fc063,
+	0x00000000, 0x08012101, 0x0640d224, 0x0a60c926, 0x058108e4,
+	0x0a20c063, 0x0a214064, 0x00000000, 0x0800c009, 0x0c7fee00,
+	0x08007401, 0x0a6149e6, 0x05811924, 0x0a20c064, 0x0c780880,
+	0x068001e5, 0x0640d224, 0x0be580a4, 0x09042924, 0x0a60c0e4,
+	0x068003e3, 0x07c036a3, 0x06803c25, 0x078036a3, 0x0aa3c826,
+	0x0a25c063, 0x0aa34866, 0x0aa308a6, 0x0a2500a3, 0x0a24c123,
+	0x0aa24064, 0x0be18223, 0x0a20c0a4, 0x0b218566, 0x0c780380,
+	0x0aa08526, 0x0a6304e6, 0x098230e3, 0x07c036a3, 0x0aa24826,
+	0x06800065, 0x0aa1c866, 0x068000a5, 0x0aa148a6, 0x068000e5,
+	0x0b20c566, 0x06800125, 0x06803c25, 0x0ae1c566, 0x0a61bc25,
+	0x0640d224, 0x0928c8e4, 0x040018e3, 0x0968c923, 0x0600d224,
+	0x068000a7, 0x0c000180, 0x04000a25, 0x0600c025, 0x08030504,
+	0x0c7fe140, 0x00000000, 0x0600d128, 0x078036e8, 0x0aa18028,
+	0x00000000, 0x0600d027, 0x08007401, 0x0640d027, 0x0a6fc027,
+	0x00000000, 0x0cc00000, 0x00000000, 0x0600d128, 0x078036e8,
+	0x0aa54028, 0x00000000, 0x0640cf28, 0x06035128, 0x0680fc28,
+	0x06035228, 0x06a00028, 0x06035028, 0x06435028, 0x0580fa28,
+	0x0bef8068, 0x00000000, 0x06435328, 0x0900ca28, 0x0a6f8028,
+	0x00000000, 0x09827427, 0x0600d027, 0x08007401, 0x0640d027,
+	0x0a6fc027, 0x0cc00000, 0x00000000, 0x06810028, 0x06800008,
+	0x06410c27, 0x08010e90, 0x092109e7, 0x07400227, 0x0d07ff28,
+	0x04001208, 0x0cc00000, 0x00000000, 0x0aa54029, 0x04000a29,
+	0x0640d427, 0x090109e7, 0x0a411a27, 0x0640d427, 0x092029e7,
+	0x0a614067, 0x00000000, 0x0c07f500, 0x06800028, 0x0c780180,
+	0x0a6d80e7, 0x00000000, 0x0c07fa00, 0x00000000, 0x0c780040,
+	0x04000a29, 0x0600d428, 0x0c7ffbc0, 0x00000000, 0x0cc00000,
+	0x00000000, 0x07800848, 0x07800889, 0x09610209, 0x06012308,
+	0x06800208, 0x07800d49, 0x03408248, 0x06040608, 0x07800849,
+	0x0780088a, 0x0960f24a, 0x06040209, 0x07800e09, 0x07800e4a,
+	0x0960c24a, 0x06040309, 0x08040400, 0x0cc00000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
@@ -718,6 +1585,7 @@ const u32  vh265_mc[] __initconst = {
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000
 };
 
 
diff --git a/drivers/amlogic/amports/arch/ucode/mpeg4/vmpeg4_mc.c b/drivers/amlogic/amports/arch/ucode/mpeg4/vmpeg4_mc.c
index cd4e1b2..9536c0c 100644
--- a/drivers/amlogic/amports/arch/ucode/mpeg4/vmpeg4_mc.c
+++ b/drivers/amlogic/amports/arch/ucode/mpeg4/vmpeg4_mc.c
@@ -20,80 +20,86 @@
 #define VERSTR "00000"
 
 const u32 vmpeg4_mc_4[] __initconst = {
-	0x06807801, 0x06800000, 0x0d000001, 0x07400040, 0x0c014380, 0x00000000,
-	0x00000000, 0x00000000, 0x080c0002, 0x080c2901, 0x06bfde80,
-	0x07c017c0, 0x06030400, 0x00400000, 0x0c019a00, 0x00000000,
-	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0c7ffe80,
+	0x0680c001, 0x06800000, 0x0d000001, 0x07400040, 0x0c014d40,
+	0x00000000, 0x00000000, 0x00000000, 0x080c0002, 0x080c2901,
+	0x06bfde80, 0x07c017c0, 0x06030400, 0x00400000, 0x0c01a400,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x0c7ffe80, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x0c780400, 0x04001965, 0x0cc00000, 0x00400000,
-	0x0c7804c0, 0x064c0007, 0x0c79a100, 0x06800025, 0x0cc00000,
-	0x00400000, 0x0cc00000, 0x00400000, 0x0cc00000, 0x00400000,
-	0x0c79ee00, 0x06800025, 0x0cc00000, 0x00400000, 0x06800025,
-	0x00800000, 0x078017c9, 0x0c7ffec0, 0x06030409, 0x078001c9,
-	0x0aa0c009, 0x0c78ff80, 0x00000000, 0x06bfdd89, 0x06030409,
-	0x00400000, 0x07801509, 0x0aa2c109, 0x07c0151f, 0x0a2c4047,
-	0x06800025, 0x0aa14009, 0x0a608049, 0x0c790940, 0x0a608089,
-	0x0c78fc00, 0x0a240807, 0x0c788a40, 0x00000000, 0x0683ffc8,
-	0x0ba20048, 0x064c0007, 0x0a2f8047, 0x04401208, 0x064c3a07,
-	0x090061c7, 0x0aae8647, 0x00000000, 0x06800007, 0x0c017100,
-	0x07c003c7, 0x0c792b00, 0x0bec9007, 0x078003c7, 0x0a6fc007,
-	0x07800007, 0x07800988, 0x0b822207, 0x06800007, 0x07c00007,
-	0x0a628060, 0x06a00008, 0x06e00008, 0x06431e09, 0x0befc049,
-	0x00000000, 0x080c24a0, 0x060c2208, 0x0c780300, 0x060c2208,
-	0x0a6280a0, 0x00000000, 0x06431e09, 0x0befc049, 0x00000000,
-	0x080c24c0, 0x080c2200, 0x080c2200, 0x080c2200, 0x080c2200,
-	0x078016c8, 0x04001208, 0x078009c9, 0x0b80a248, 0x07c016c8,
-	0x0c020500, 0x00000000, 0x078003c7, 0x0a6fc007, 0x0c792180,
-	0x00000000, 0x06431e09, 0x0befc049, 0x07800347, 0x0a61c007,
-	0x00000000, 0x064c2907, 0x091c21c7, 0x0a60c0c7, 0x0c021000,
-	0x00000000, 0x0aa080a0, 0x0c780f40, 0x078003c7, 0x0a6fc007,
-	0x07801bc8, 0x0a63c008, 0x078004c8, 0x0a634348, 0x06800107,
-	0x07c003c7, 0x08030580, 0x068003c9, 0x07c00149, 0x06800007,
-	0x0c018d80, 0x07c01d07, 0x07800007, 0x040011c7, 0x0c7fef80,
-	0x07c00007, 0x0c792d80, 0x078003c7, 0x0a6fc007, 0x078005c7,
-	0x0ba0c087, 0x06800007, 0x06800047, 0x07c01fc7, 0x07800787,
-	0x0aa180c7, 0x06810007, 0x060e0907, 0x060e0a07, 0x0c780440,
-	0x060e0b07, 0x07800507, 0x0aa0c007, 0x068000c8, 0x068003c8,
-	0x060e1408, 0x064e1507, 0x060e0907, 0x04003208, 0x060e1408,
-	0x064e1507, 0x060e0a07, 0x04003208, 0x060e1408, 0x064e1507,
-	0x060e0b07, 0x0683ffc7, 0x080e1418, 0x060e1507, 0x080e141b,
-	0x060e1507, 0x080e141e, 0x060e1507, 0x080e1421, 0x0c01f280,
-	0x060e1507, 0x0c785580, 0x00000000, 0x0aa6c020, 0x00000000,
-	0x0fc011c0, 0x0aa64007, 0x080c2803, 0x06800347, 0x07c00147,
-	0x06431e07, 0x0befc047, 0x00000000, 0x080c24a0, 0x060c2224,
-	0x060c2224, 0x06800007, 0x07c01d07, 0x06800025, 0x064c3c07,
-	0x091011c7, 0x0ae1c225, 0x0aaf8007, 0x064c3c07, 0x091011c7,
-	0x0aae8007, 0x0c7ff000, 0x080c2800, 0x0c7fda80, 0x00000000,
-	0x080c2801, 0x064c2807, 0x0a2fc047, 0x064c0008, 0x0a209008,
-	0x0c7fd8c0, 0x058011c7, 0x09004207, 0x07c00148, 0x090821c7,
-	0x07c00187, 0x0aa140c8, 0x080c2800, 0x0aa0c108, 0x0c781900,
-	0x00000000, 0x0fc011c0, 0x0540e1c7, 0x060c2d07, 0x080c2802,
-	0x064c2807, 0x0a2fc047, 0x058011c7, 0x07800188, 0x09444207,
-	0x07c01388, 0x07800148, 0x0a644108, 0x080c2800, 0x0fc021c0,
-	0x0b61c087, 0x07800109, 0x024091c9, 0x0b620089, 0x04401249,
-	0x0c780180, 0x06800049, 0x020091c9, 0x0b20c809, 0x04401249,
-	0x068007c9, 0x07c00109, 0x0c012f80, 0x040001c9, 0x07801fcb,
-	0x0aa1400b, 0x078005c9, 0x0b60c089, 0x0c004880, 0x00000000,
-	0x068fdfca, 0x06feffca, 0x064e0408, 0x02808288, 0x078005ca,
-	0x0ba0c08a, 0x064c0909, 0x098083c8, 0x0ac0424a, 0x0780000a,
-	0x0a60c00a, 0x0400128a, 0x09808388, 0x0b80324a, 0x00000000,
-	0x098081c8, 0x07802007, 0x09605207, 0x07800007, 0x040811c7,
+	0x00000000, 0x00000000, 0x0c780400, 0x04001965, 0x0cc00000,
+	0x00400000, 0x0c7804c0, 0x064c0007, 0x0c79ab00, 0x06800025,
+	0x0cc00000, 0x00400000, 0x0cc00000, 0x00400000, 0x0cc00000,
+	0x00400000, 0x0c79f800, 0x06800025, 0x0cc00000, 0x00400000,
+	0x06800025, 0x00800000, 0x078017c9, 0x0c7ffec0, 0x06030409,
+	0x078001c9, 0x0aa0c009, 0x0c790940, 0x00000000, 0x06bfdd89,
+	0x06030409, 0x00400000, 0x07801509, 0x0aa2c109, 0x07c0151f,
+	0x0a2c4047, 0x06800025, 0x0aa14009, 0x0a608049, 0x0c791300,
+	0x0a608089, 0x0c7905c0, 0x0a240807, 0x0c789400, 0x00000000,
+	0x0683ffc8, 0x0ba20048, 0x064c0007, 0x0a2f8047, 0x04401208,
+	0x064c3a07, 0x090061c7, 0x0aae8647, 0x00000000, 0x06800007,
+	0x0c017b00, 0x07c003c7, 0x0c7934c0, 0x0bec9007, 0x078003c7,
+	0x0a6fc007, 0x07800007, 0x07800988, 0x0b822207, 0x06800007,
+	0x07c00007, 0x0a628060, 0x06a00008, 0x06e00008, 0x06431e09,
+	0x0befc049, 0x00000000, 0x080c24a0, 0x060c2208, 0x0c780300,
+	0x060c2208, 0x0a6280a0, 0x00000000, 0x06431e09, 0x0befc049,
+	0x00000000, 0x080c24c0, 0x080c2200, 0x080c2200, 0x080c2200,
+	0x080c2200, 0x078016c8, 0x04001208, 0x078009c9, 0x0b80a248,
+	0x07c016c8, 0x0c020f00, 0x00000000, 0x078003c7, 0x0a6fc007,
+	0x0c792b40, 0x00000000, 0x06431e09, 0x0befc049, 0x07800347,
+	0x0aa0c007, 0x0c780880, 0x00000000, 0x064c1d07, 0x09227207,
+	0x0a678008, 0x064c2a08, 0x064c3607, 0x091081c7, 0x095101c8,
+	0x064c3b08, 0x09103248, 0x04001209, 0x03807207, 0x0900f207,
+	0x0a650008, 0x0580f1c7, 0x06800048, 0x05407208, 0x03808248,
+	0x04401208, 0x0a40e207, 0x064c1d07, 0x0a60c009, 0x00000000,
+	0x054081c7, 0x06800009, 0x09201207, 0x0a610008, 0x054011c7,
+	0x0c7fff40, 0x04001249, 0x060c0e09, 0x0c021300, 0x00000000,
+	0x0aa080a0, 0x0c780f40, 0x078003c7, 0x0a6fc007, 0x07801bc8,
+	0x0a63c008, 0x078004c8, 0x0a634348, 0x06800107, 0x07c003c7,
+	0x08030580, 0x068003c9, 0x07c00149, 0x06800007, 0x0c019080,
+	0x07c01d07, 0x07800007, 0x040011c7, 0x0c7fe880, 0x07c00007,
+	0x0c793040, 0x078003c7, 0x0a6fc007, 0x078005c7, 0x0ba0c087,
+	0x06800007, 0x06800047, 0x07c01fc7, 0x07800787, 0x0aa180c7,
+	0x06810007, 0x060e0907, 0x060e0a07, 0x0c780440, 0x060e0b07,
+	0x07800507, 0x0aa0c007, 0x068000c8, 0x068003c8, 0x060e1408,
+	0x064e1507, 0x060e0907, 0x04003208, 0x060e1408, 0x064e1507,
+	0x060e0a07, 0x04003208, 0x060e1408, 0x064e1507, 0x060e0b07,
+	0x0683ffc7, 0x080e1418, 0x060e1507, 0x080e141b, 0x060e1507,
+	0x080e141e, 0x060e1507, 0x080e1421, 0x0c01f580, 0x060e1507,
+	0x0c7855c0, 0x00000000, 0x0aa6c020, 0x00000000, 0x0fc011c0,
+	0x0aa64007, 0x080c2803, 0x06800347, 0x07c00147, 0x06431e07,
+	0x0befc047, 0x00000000, 0x080c24a0, 0x060c2224, 0x060c2224,
+	0x06800007, 0x07c01d07, 0x06800025, 0x064c3c07, 0x091011c7,
+	0x0ae1c225, 0x0aaf8007, 0x064c3c07, 0x091011c7, 0x0aae8007,
+	0x0c7ff000, 0x080c2800, 0x0c7fd380, 0x00000000, 0x080c2801,
+	0x064c2807, 0x0a2fc047, 0x064c0008, 0x0a209008, 0x0c7fd1c0,
+	0x058011c7, 0x09004207, 0x07c00148, 0x090821c7, 0x07c00187,
+	0x0aa140c8, 0x080c2800, 0x0aa0c108, 0x0c781940, 0x00000000,
+	0x0fc011c0, 0x0540e1c7, 0x060c2d07, 0x080c2802, 0x064c2807,
+	0x0a2fc047, 0x058011c7, 0x07800188, 0x09444207, 0x07c01388,
+	0x07800148, 0x0a644108, 0x080c2800, 0x0fc021c0, 0x0b61c087,
+	0x07800109, 0x024091c9, 0x0b620089, 0x04401249, 0x0c780180,
+	0x06800049, 0x020091c9, 0x0b20c809, 0x04401249, 0x068007c9,
+	0x07c00109, 0x0c013240, 0x040001c9, 0x07801fcb, 0x0aa1400b,
+	0x078005c9, 0x0b60c089, 0x0c0048c0, 0x00000000, 0x068fdfca,
+	0x06feffca, 0x064e0408, 0x02808288, 0x078005ca, 0x0ba0c08a,
+	0x064c0909, 0x098083c8, 0x0ac0424a, 0x0780000a, 0x0a60c00a,
+	0x0400128a, 0x09808388, 0x0b80324a, 0x00000000, 0x098081c8,
+	0x07808007, 0x09605207, 0x07800007, 0x06808049, 0x02007247,
 	0x070001c7, 0x096a5207, 0x060e0408, 0x091e1248, 0x07c01fc9,
 	0x07801388, 0x060c2b08, 0x06880008, 0x098083c8, 0x07800507,
 	0x07801989, 0x0a610049, 0x09581207, 0x09808408, 0x098083c8,
 	0x060e0508, 0x06800009, 0x07800bc8, 0x09541248, 0x060c2a09,
 	0x07801c07, 0x0aa1c007, 0x080c2c03, 0x0fc011c0, 0x07c01cc7,
-	0x068000c9, 0x094a1247, 0x060c2c09, 0x0c01d240, 0x00000000,
-	0x080c0080, 0x0c015a00, 0x00000000, 0x080c24a0, 0x080c2200,
+	0x068000c9, 0x094a1247, 0x060c2c09, 0x0c01d500, 0x00000000,
+	0x080c0080, 0x0c015cc0, 0x00000000, 0x080c24a0, 0x080c2200,
 	0x080c2200, 0x07800007, 0x040011c7, 0x07c00007, 0x07800147,
-	0x0c012fc0, 0x07c00447, 0x0c7fb800, 0x00000000, 0x0a60c0e0,
+	0x0c013240, 0x07c00447, 0x0c7fb0c0, 0x00000000, 0x0a60c0e0,
 	0x06800007, 0x0fc011c0, 0x07c01707, 0x080c2802, 0x064c2807,
 	0x0a2fc047, 0x058011c7, 0x068003c8, 0x024071c8, 0x07800188,
 	0x09444207, 0x07c01388, 0x07800148, 0x0a644048, 0x080c2800,
 	0x0fc021c0, 0x0b61c087, 0x07800109, 0x024091c9, 0x0b620089,
 	0x04401249, 0x0c780180, 0x06800049, 0x020091c9, 0x0b20c809,
-	0x04401249, 0x068007c9, 0x07c00109, 0x0c011640, 0x040001c9,
+	0x04401249, 0x068007c9, 0x07c00109, 0x0c0118c0, 0x040001c9,
 	0x07801388, 0x060c2b08, 0x07801c07, 0x0a60c007, 0x0c7806c0,
 	0x06800009, 0x0aa10008, 0x080c2800, 0x0fc011c0, 0x07c01cc7,
 	0x07800148, 0x0aa14088, 0x06800009, 0x0aa0c148, 0x07800489,
@@ -118,22 +124,24 @@ const u32 vmpeg4_mc_4[] __initconst = {
 	0x060c2207, 0x064e1507, 0x060c2207, 0x080c2147, 0x078004c7,
 	0x07c00387, 0x07800487, 0x07c00247, 0x07801107, 0x07c01787,
 	0x06800107, 0x07c003c7, 0x08030580, 0x064c2407, 0x0befc3c7,
-	0x00000000, 0x07800147, 0x0aa10147, 0x0c0137c0, 0x00000000,
-	0x0c7800c0, 0x0c015e00, 0x00000000, 0x07800007, 0x040011c7,
-	0x0c7f8f40, 0x07c00007, 0x07801fcb, 0x0aa1400b, 0x078005c9,
+	0x00000000, 0x07800147, 0x0aa10147, 0x0c013a80, 0x00000000,
+	0x0c7800c0, 0x0c0160c0, 0x00000000, 0x07800007, 0x040011c7,
+	0x0c7f8800, 0x07c00007, 0x07801fcb, 0x0aa1400b, 0x078005c9,
 	0x0b60c089, 0x0c000e40, 0x00000000, 0x068fdfca, 0x06feffca,
 	0x064e0408, 0x02808288, 0x078005ca, 0x0ba0c08a, 0x064c0909,
 	0x098083c8, 0x0ac0424a, 0x0780000a, 0x0a60c00a, 0x0400128a,
 	0x09808388, 0x0b80324a, 0x00000000, 0x098081c8, 0x060e0408,
-	0x091e1248, 0x07c01fc9, 0x0c019f40, 0x00000000, 0x064c2407,
+	0x091e1248, 0x07c01fc9, 0x0c01a200, 0x00000000, 0x064c2407,
 	0x0befc3c7, 0x078003c7, 0x0a6fc007, 0x00000000, 0x080c2130,
-	0x080c2800, 0x064c2408, 0x0befc3c8, 0x0c012c80, 0x00000000,
+	0x080c2800, 0x064c2408, 0x0befc3c8, 0x0c012f40, 0x00000000,
 	0x07800007, 0x040011c7, 0x07c00007, 0x07801d08, 0x07801d47,
 	0x09421207, 0x07801d87, 0x09441207, 0x07c00308, 0x07800148,
-	0x0aa0c348, 0x07c00448, 0x0c7f8240, 0x078003c7, 0x0a6fc007,
+	0x0aa0c348, 0x07c00448, 0x0c7f7b00, 0x078003c7, 0x0a6fc007,
 	0x00000000, 0x080c24e0, 0x064c2207, 0x064c2208, 0x080c24c0,
-	0x060c2207, 0x0c7f89c0, 0x060c2208, 0x0780044b, 0x0aa1034b,
-	0x064e160b, 0x090102cb, 0x0aaf800b, 0x0681000b, 0x060e090b,
+	0x060c2207, 0x0c7f8280, 0x060c2208, 0x0780044b, 0x0aa3834b,
+	0x00000000, 0x069fffc9, 0x04401249, 0x0aa1c009, 0x00000000,
+	0x064e160b, 0x090102cb, 0x0aaec00b, 0x0c780140, 0x00000000,
+	0x0809d501, 0x0c7fffc0, 0x00000000, 0x0681000b, 0x060e090b,
 	0x060e0a0b, 0x0cc00000, 0x060e0b0b, 0x064e0009, 0x064e0e0b,
 	0x064e0c0c, 0x083f0040, 0x083f0000, 0x0680020d, 0x0d00000d,
 	0x00000000, 0x060e0009, 0x060e0e0b, 0x0cc00000, 0x060e0c0c,
@@ -156,7 +164,7 @@ const u32 vmpeg4_mc_4[] __initconst = {
 	0x0a6103c7, 0x07c01887, 0x0fc101c0, 0x0609c507, 0x0fc011c0,
 	0x0aa30007, 0x00000000, 0x0fc021c0, 0x07c018c7, 0x0fc021c0,
 	0x0a21c047, 0x00000000, 0x0fc101c0, 0x0fc101c0, 0x0fc101c0,
-	0x0fc0f1c0, 0x0fc101c0, 0x0fc021c0, 0x0aa0c007, 0x0c7f6780,
+	0x0fc0f1c0, 0x0fc101c0, 0x0fc021c0, 0x0aa0c007, 0x0c7f5dc0,
 	0x00000000, 0x0fc011c0, 0x0fc101c0, 0x07c01907, 0x0649c308,
 	0x09410207, 0x0609c308, 0x0b220087, 0x06800048, 0x06800008,
 	0x06800049, 0x0b004247, 0x05401249, 0x0c7fff80, 0x04001208,
@@ -184,7 +192,7 @@ const u32 vmpeg4_mc_4[] __initconst = {
 	0x040011c7, 0x058011c7, 0x0d000007, 0x060e030a, 0x04c08208,
 	0x060e0008, 0x07801807, 0x0aa18047, 0x00000000, 0x0fc011c0,
 	0x0540b1c7, 0x09807007, 0x060c0107, 0x0fc011c0, 0x0aa60007,
-	0x0fc011c0, 0x07c00347, 0x0aa0c047, 0x0c016080, 0x00000000,
+	0x0fc011c0, 0x07c00347, 0x0aa0c047, 0x0c0160c0, 0x00000000,
 	0x0fc011c0, 0x0a20c047, 0x00000000, 0x0fc011c0, 0x07801807,
 	0x06800008, 0x0aa18047, 0x06800007, 0x0fc011c0, 0x0a624007,
 	0x0fc01200, 0x0a61c008, 0x07c01a07, 0x07c01a48, 0x0fc011c0,
@@ -212,7 +220,7 @@ const u32 vmpeg4_mc_4[] __initconst = {
 	0x0c780540, 0x07c010c7, 0x07801008, 0x04001208, 0x0ae44048,
 	0x07c01008, 0x078010c9, 0x02007247, 0x0b21c007, 0x0b406247,
 	0x0b406247, 0x00000000, 0x024091c9, 0x0c7fff40, 0x04080208,
-	0x0c7f2280, 0x058011c7, 0x0b403247, 0x00000000, 0x04080208,
+	0x0c7f18c0, 0x058011c7, 0x0b403247, 0x00000000, 0x04080208,
 	0x07c01008, 0x090071c8, 0x090e7208, 0x09545207, 0x060e0708,
 	0x07800047, 0x0b624087, 0x0aa180a0, 0x0aa08020, 0x0aa10007,
 	0x040011c7, 0x0c780100, 0x07c00047, 0x0c784c00, 0x00000000,
@@ -222,21 +230,21 @@ const u32 vmpeg4_mc_4[] __initconst = {
 	0x07c01b07, 0x0fc031c0, 0x07c000c7, 0x07801c07, 0x0aa20007,
 	0x00000000, 0x0fc011c0, 0x07c01c47, 0x0fc011c0, 0x07c01c87,
 	0x054021c7, 0x060c0307, 0x0a6740e0, 0x07801e47, 0x0aa6c007,
-	0x09066207, 0x0aa08088, 0x0c7fae00, 0x0c00a740, 0x06801ec8,
-	0x07901ee3, 0x06801409, 0x09510263, 0x060c2109, 0x0c00a5c0,
+	0x09066207, 0x0aa08088, 0x0c7fae00, 0x0c00a780, 0x06801ec8,
+	0x07901ee3, 0x06801409, 0x09510263, 0x060c2109, 0x0c00a600,
 	0x06801f08, 0x07901f08, 0x06801809, 0x09510248, 0x060c2109,
-	0x096108c8, 0x0c00a400, 0x06801f48, 0x0c00a380, 0x06801f88,
+	0x096108c8, 0x0c00a440, 0x06801f48, 0x0c00a3c0, 0x06801f88,
 	0x05401923, 0x09c24424, 0x0942f923, 0x0a20c047, 0x0c7fa880,
 	0x00000000, 0x0fc051c0, 0x0c006f00, 0x07c00107, 0x0c006c40,
 	0x00000000, 0x0a6180a0, 0x078003c7, 0x0a6fc007, 0x06800107,
 	0x07c003c7, 0x08030580, 0x0aa28020, 0x06800048, 0x0a6100a0,
 	0x0fc03200, 0x0fc03240, 0x07c01b89, 0x07c01b48, 0x09503248,
 	0x09809149, 0x060c2109, 0x060c0e08, 0x06800025, 0x06490908,
-	0x0ae10225, 0x00000000, 0x0bef4048, 0x0c780080, 0x0c7f0840,
+	0x0ae10225, 0x00000000, 0x0bef4048, 0x0c780080, 0x0c7efe80,
 	0x0683ffc7, 0x0649bb08, 0x0900c208, 0x0aa10008, 0x0aa0c007,
 	0x0c7fff00, 0x044011c7, 0x06490b07, 0x09807007, 0x06090b07,
 	0x06090b07, 0x09c07007, 0x06090b07, 0x0649c909, 0x0aa10009,
-	0x06800087, 0x0c7efe00, 0x07c01507, 0x07801487, 0x0a608007,
+	0x06800087, 0x0c7ef440, 0x07c01507, 0x07801487, 0x0a608007,
 	0x0c780b00, 0x044011c7, 0x0aa0c087, 0x07801549, 0x078015c9,
 	0x0b20c1c9, 0x00000000, 0x0c780940, 0x07800fc8, 0x0609ca08,
 	0x07c00fdf, 0x0680420a, 0x02007289, 0x070001c7, 0x054101c7,
@@ -255,7 +263,7 @@ const u32 vmpeg4_mc_4[] __initconst = {
 	0x078048ca, 0x07804908, 0x09610288, 0x0a240807, 0x06800148,
 	0x0780494a, 0x07804988, 0x09610288, 0x0a22d007, 0x06800188,
 	0x078049ca, 0x07804a08, 0x09610288, 0x0a21a007, 0x068001c8,
-	0x0809cd11, 0x06800047, 0x0c7ee600, 0x07c01507, 0x0809cd00,
+	0x0809cd11, 0x06800047, 0x0c7edc40, 0x07c01507, 0x0809cd00,
 	0x07801607, 0x090041c7, 0x0a8051c8, 0x0a6200a0, 0x07801607,
 	0x090841c7, 0x0a4051c8, 0x06800047, 0x03407207, 0x0c7ff180,
 	0x02c091c9, 0x07800b47, 0x0680400f, 0x020093c8, 0x07400247,
@@ -276,16 +284,16 @@ const u32 vmpeg4_mc_4[] __initconst = {
 	0x05810208, 0x0c7800c0, 0x00000000, 0x058103cf, 0x02c083c8,
 	0x06098108, 0x06499108, 0x05410208, 0x058103c8, 0x02c083c8,
 	0x06098208, 0x080980f4, 0x07801b07, 0x06800048, 0x09421207,
-	0x0c7ee000, 0x06090708, 0x06800025, 0x0ae20225, 0x064c0007,
+	0x0c7ed640, 0x06090708, 0x06800025, 0x0ae20225, 0x064c0007,
 	0x0a2f8047, 0x00000000, 0x064c3a07, 0x090061c7, 0x0aae8647,
-	0x0c7800c0, 0x0c7ecf80, 0x00000000, 0x080c2800, 0x080c0002,
-	0x0c7ec880, 0x00000000, 0x0649c007, 0x07c04647, 0x058101c7,
+	0x0c7800c0, 0x0c7ec5c0, 0x00000000, 0x080c2800, 0x080c0002,
+	0x0c7ebec0, 0x00000000, 0x0649c007, 0x07c04647, 0x058101c7,
 	0x07c04687, 0x0649c107, 0x07c046c7, 0x058101c7, 0x07c04707,
 	0x0649c207, 0x07c04747, 0x058101c7, 0x07c04787, 0x0649c307,
 	0x07c047c7, 0x058101c7, 0x07c04807, 0x0649d007, 0x07c04847,
 	0x058101c7, 0x07c04887, 0x0649d107, 0x07c048c7, 0x058101c7,
 	0x07c04907, 0x0649d207, 0x07c04947, 0x058101c7, 0x07c04987,
-	0x0649d307, 0x07c049c7, 0x058101c7, 0x07c04a07, 0x0c004240,
+	0x0649d307, 0x07c049c7, 0x058101c7, 0x07c04a07, 0x0c004280,
 	0x06800025, 0x08002501, 0x08002605, 0x08002708, 0x08002815,
 	0x08002c14, 0x08002a09, 0x08002b17, 0x06830002, 0x06032602,
 	0x08032261, 0x08032101, 0x0cc00000, 0x00000000, 0x080c2804,
@@ -302,9 +310,9 @@ const u32 vmpeg4_mc_4[] __initconst = {
 	0x080c2141, 0x064e1507, 0x060c2207, 0x064e1507, 0x060c2207,
 	0x064e1507, 0x060c2207, 0x080c2147, 0x064c2407, 0x0befc3c7,
 	0x078004c7, 0x07c00387, 0x07800487, 0x07c00247, 0x07801107,
-	0x07c01787, 0x06800107, 0x07c003c7, 0x0c0078c0, 0x00000000,
+	0x07c01787, 0x06800107, 0x07c003c7, 0x0c007900, 0x00000000,
 	0x08030580, 0x07800007, 0x040011c7, 0x07c00007, 0x06431e07,
-	0x0befc047, 0x0c7eb2c0, 0x00000000, 0x0fc01200, 0x0fc011c0,
+	0x0befc047, 0x0c7ea900, 0x00000000, 0x0fc01200, 0x0fc011c0,
 	0x0aa28047, 0x06800147, 0x0fc011c0, 0x0aa1c047, 0x06800187,
 	0x0fc011c0, 0x0aa10047, 0x068001c7, 0x0fc011c0, 0x06800207,
 	0x07c00147, 0x0a60c008, 0x06800007, 0x0fc061c0, 0x07c01387,
@@ -312,7 +320,7 @@ const u32 vmpeg4_mc_4[] __initconst = {
 	0x0fc011c0, 0x0aa38007, 0x07800108, 0x0fc011c0, 0x0aa14007,
 	0x0b21c748, 0x04002208, 0x0c780140, 0x068007c8, 0x0b60c0c8,
 	0x04402208, 0x06800048, 0x07c00108, 0x0c0005c0, 0x040001c8,
-	0x0c7eef80, 0x00000000, 0x06a00007, 0x06e00007, 0x080c24a0,
+	0x0c7eed00, 0x00000000, 0x06a00007, 0x06e00007, 0x080c24a0,
 	0x060c2207, 0x060c2207, 0x060c2207, 0x060c2207, 0x060c2207,
 	0x0cc00000, 0x060c2207, 0x07801988, 0x094c11c8, 0x0c07fd00,
 	0x060e0407, 0x06800007, 0x07c01cc7, 0x07c00907, 0x0cc00000,
@@ -331,165 +339,156 @@ const u32 vmpeg4_mc_4[] __initconst = {
 	0x06800087, 0x05c0438e, 0x0540138e, 0x0200e1ce, 0x0ae1000f,
 	0x06bfffcd, 0x0300e34e, 0x0400138e, 0x0cc00000, 0x040003ce,
 	0x07800007, 0x0ae10007, 0x07800109, 0x07800988, 0x02007207,
-	0x044011c7, 0x040811c7, 0x074001c9, 0x0cc00000, 0x07c02009,
-	0x0681f409, 0x04401249, 0x0aefc009, 0x00000000, 0x083f0040,
-	0x083f0000, 0x08090b65, 0x00000000, 0x08090b60, 0x06498e07,
-	0x09807007, 0x068007c9, 0x097051c9, 0x06098e07, 0x0681f409,
-	0x04601249, 0x0c4fffc0, 0x00000000, 0x06800009, 0x097051c9,
-	0x09c07007, 0x06098e07, 0x064c0007, 0x09c07187, 0x09807207,
-	0x060c0007, 0x064c0807, 0x09807347, 0x060c0807, 0x083f0040,
-	0x083f0000, 0x08090b65, 0x0cc00000, 0x08090b60, 0x0680001f,
-	0x07c0149f, 0x07c014df, 0x07c0151f, 0x064c091f, 0x07c0175f,
-	0x07c0005f, 0x06800020, 0x06803fc2, 0x07c01542, 0x07c01582,
-	0x07c015c2, 0x07c01602, 0x060c091f, 0x080c0101, 0x080c2901,
-	0x06840442, 0x060c2e02, 0x064c4027, 0x064c4226, 0x024269e6,
-	0x040089a6, 0x07c006e6, 0x058109a6, 0x07c00726, 0x0649cf31,
-	0x0809c500, 0x0649c707, 0x0aa6c007, 0x09010207, 0x092101c7,
-	0x0401f287, 0x0580528a, 0x0403e247, 0x05806249, 0x09610289,
-	0x04000287, 0x0649c709, 0x09610247, 0x0609c709, 0x0400f1c7,
-	0x058041c7, 0x060c0907, 0x07c00987, 0x04401247, 0x07c00609,
-	0x0961020a, 0x06090808, 0x06c00008, 0x0649c707, 0x094101c8,
-	0x0609c707, 0x0400f208, 0x05804208, 0x07c009c8, 0x0809c300,
-	0x0809cb00, 0x0cc00000, 0x00000000, 0x0649c803, 0x0aa14003,
-	0x078014c2, 0x028020c2, 0x07c014c2, 0x0809c800, 0x07801502,
-	0x0aa0c002, 0x06800102, 0x06030502, 0x064c0002, 0x0be14042,
-	0x0ba1d025, 0x06800102, 0x07c01502, 0x08030504, 0x06800025,
-	0x0cc00000, 0x00000000, 0x078001c2, 0x0aa1c002, 0x078016c2,
-	0x078009c3, 0x0a4040c2, 0x00000000, 0x06800102, 0x06030502,
-	0x0cc00000, 0x00000000, 0x0fc02240, 0x0aa4c009, 0x0680000a,
-	0x0b6180c9, 0x0680010a, 0x0fc01280, 0x09422289, 0x0c780140,
-	0x0440128a, 0x0fc01240, 0x0a6fc009, 0x0400128a, 0x06800049,
-	0x03409289, 0x05801249, 0x0f80028a, 0x0b40424a, 0x05401249,
-	0x04401249, 0x0240a24a, 0x0740020a, 0x0cc00000, 0x0fc01240,
-	0x064c441a, 0x0912169a, 0x0aaf801a, 0x0c7e60c0, 0x00000000,
-	0x06490628, 0x0aefcc28, 0x00000000, 0x07800028, 0x078016e9,
-	0x09508a68, 0x068000a8, 0x06c00028, 0x06090628, 0x06090629,
-	0x06881068, 0x06090628, 0x0cc00000, 0x00000000, 0x06490628,
-	0x0aefcc28, 0x06c00028, 0x069001a8, 0x069fffea, 0x06090628,
-	0x06090629, 0x05401a23, 0x06090628, 0x09210a23, 0x05401a28,
-	0x02828aa8, 0x06090628, 0x06985168, 0x0c782700, 0x06090628,
-	0x078003e8, 0x0a6fc028, 0x07800028, 0x078016e9, 0x06800030,
-	0x09508a68, 0x0780016b, 0x07801d2a, 0x04601aaa, 0x0c500ec0,
-	0x0aa4802b, 0x0690002a, 0x0aa4006b, 0x0aa8c36b, 0x0aa883eb,
-	0x0aa3422b, 0x00000000, 0x06a0002a, 0x0aa281eb, 0x06c0002a,
-	0x06b0002a, 0x0aa1c1ab, 0x06c0002a, 0x04602aeb, 0x0c500980,
-	0x0690002a, 0x0c7e5900, 0x00000000, 0x06490628, 0x0aefcc28,
-	0x068000a8, 0x02c28aa8, 0x09441a30, 0x06090628, 0x06090629,
-	0x069fffeb, 0x06900028, 0x0a00ca2a, 0x080c2400, 0x080e1424,
-	0x064c2228, 0x060e1528, 0x060e1528, 0x060e1528, 0x060e1528,
-	0x09210a68, 0x06090628, 0x02828ae9, 0x06090628, 0x06a00028,
-	0x0a007a2a, 0x080c2440, 0x064c2228, 0x09210a68, 0x06090628,
-	0x02828ae9, 0x06090628, 0x0688d068, 0x02c28aa8, 0x09441a30,
-	0x0c781780, 0x06090628, 0x09441ab0, 0x06031f2a, 0x0680016b,
-	0x09510ae9, 0x0c781600, 0x06031e2b, 0x0aa241eb, 0x06a0002a,
-	0x0aa1c1ab, 0x06b0002a, 0x0aa1416b, 0x0aa1026b, 0x06800070,
-	0x0690002a, 0x06800030, 0x06490628, 0x0aefcc28, 0x06c0002a,
-	0x068408a8, 0x02c28aa8, 0x09441a30, 0x06090628, 0x06090629,
-	0x069fffec, 0x06900028, 0x0a00ba2a, 0x080c2400, 0x064c222e,
-	0x0609062e, 0x09210a2e, 0x09c28068, 0x02828b28, 0x09828428,
-	0x07801d6d, 0x095e1a2d, 0x06090628, 0x06a00028, 0x0a00ba2a,
-	0x080c2440, 0x064c2228, 0x06090628, 0x09210a28, 0x09c28068,
-	0x02828b28, 0x09828428, 0x07801ded, 0x095e1a2d, 0x06090628,
-	0x068c5828, 0x02c28aa8, 0x09441a30, 0x06090628, 0x06860828,
-	0x02c28aa8, 0x09441a30, 0x06090628, 0x06900028, 0x0a00ba2a,
-	0x080c2410, 0x064c222f, 0x0609062f, 0x09210a2f, 0x09c28068,
-	0x02828b28, 0x09828428, 0x07801dad, 0x095e1a2d, 0x06090628,
-	0x06a00028, 0x0a00ba2a, 0x080c2450, 0x064c2228, 0x06090628,
-	0x09210a28, 0x09c28068, 0x02828b28, 0x09828428, 0x07801e2d,
-	0x095e1a2d, 0x06090628, 0x068ed868, 0x02c28aa8, 0x09441a30,
-	0x06090628, 0x080c24a0, 0x080e1424, 0x064c2228, 0x060e152e,
-	0x060e152f, 0x060e1528, 0x0c780080, 0x060e1528, 0x0cc00000,
-	0x00000000, 0x07800028, 0x078016e9, 0x06800030, 0x09508a68,
-	0x0780016b, 0x0780026a, 0x04601aaa, 0x0c500c00, 0x0aa1416b,
-	0x00000000, 0x06800070, 0x0a61826b, 0x00000000, 0x078003a8,
-	0x04602a28, 0x0c500840, 0x0c7800c0, 0x0c780000, 0x00000000,
-	0x06490628, 0x0aefcc28, 0x06b000a8, 0x09441a30, 0x06090628,
-	0x06090629, 0x069fffeb, 0x06900028, 0x080c2400, 0x080e1424,
-	0x064c2228, 0x060e1528, 0x060e1528, 0x060e1528, 0x060e1528,
-	0x09210a68, 0x06090628, 0x02828ae9, 0x06090628, 0x080c2440,
-	0x064c2228, 0x09210a68, 0x06090628, 0x02828ae9, 0x06090628,
-	0x06b8d068, 0x09441a30, 0x0c781340, 0x06090628, 0x06b0002a,
-	0x09441ab0, 0x06031f2a, 0x0680016b, 0x09510ae9, 0x0c781180,
-	0x06031e2b, 0x0aa1416b, 0x0aa1026b, 0x06800070, 0x0c7ff5c0,
-	0x00000000, 0x06490628, 0x0aefcc28, 0x06b408a8, 0x09441a30,
-	0x06090628, 0x06090629, 0x069fffec, 0x06900028, 0x080c2400,
+	0x044011c7, 0x06808048, 0x02007207, 0x074001c9, 0x0cc00000,
+	0x07c08009, 0x0681f409, 0x04401249, 0x0aefc009, 0x00000000,
+	0x083f0040, 0x083f0000, 0x08090b65, 0x00000000, 0x08090b60,
+	0x06498e07, 0x09807007, 0x068007c9, 0x097051c9, 0x06098e07,
+	0x0681f409, 0x04601249, 0x0c4fffc0, 0x00000000, 0x06800009,
+	0x097051c9, 0x09c07007, 0x06098e07, 0x064c0007, 0x09c07187,
+	0x09807207, 0x060c0007, 0x064c0807, 0x09807347, 0x060c0807,
+	0x083f0040, 0x083f0000, 0x08090b65, 0x0cc00000, 0x08090b60,
+	0x0680001f, 0x07c0149f, 0x07c014df, 0x07c0151f, 0x064c091f,
+	0x07c0175f, 0x07c0005f, 0x06800020, 0x06803fc2, 0x07c01542,
+	0x07c01582, 0x07c015c2, 0x07c01602, 0x060c091f, 0x080c0101,
+	0x080c2901, 0x06840442, 0x060c2e02, 0x064c4027, 0x064c4226,
+	0x024269e6, 0x040089a6, 0x07c006e6, 0x058109a6, 0x07c00726,
+	0x0649cf31, 0x0809c500, 0x0649c707, 0x0aa6c007, 0x09010207,
+	0x092101c7, 0x0401f287, 0x0580528a, 0x0403e247, 0x05806249,
+	0x09610289, 0x04000287, 0x0649c709, 0x09610247, 0x0609c709,
+	0x0400f1c7, 0x058041c7, 0x060c0907, 0x07c00987, 0x04401247,
+	0x07c00609, 0x0961020a, 0x06090808, 0x06c00008, 0x0649c707,
+	0x094101c8, 0x0609c707, 0x0400f208, 0x05804208, 0x07c009c8,
+	0x0809c300, 0x0809cb00, 0x0cc00000, 0x00000000, 0x0649c803,
+	0x0aa14003, 0x078014c2, 0x028020c2, 0x07c014c2, 0x0809c800,
+	0x07801502, 0x0aa0c002, 0x06800102, 0x06030502, 0x064c0002,
+	0x0be14042, 0x0ba1d025, 0x06800102, 0x07c01502, 0x08030504,
+	0x06800025, 0x0cc00000, 0x00000000, 0x078001c2, 0x0aa1c002,
+	0x078016c2, 0x078009c3, 0x0a4040c2, 0x00000000, 0x06800102,
+	0x06030502, 0x0cc00000, 0x00000000, 0x0fc02240, 0x0aa4c009,
+	0x0680000a, 0x0b6180c9, 0x0680010a, 0x0fc01280, 0x09422289,
+	0x0c780140, 0x0440128a, 0x0fc01240, 0x0a6fc009, 0x0400128a,
+	0x06800049, 0x03409289, 0x05801249, 0x0f80028a, 0x0b40424a,
+	0x05401249, 0x04401249, 0x0240a24a, 0x0740020a, 0x0cc00000,
+	0x0fc01240, 0x064c441a, 0x0912169a, 0x0aaf801a, 0x0c7e56c0,
+	0x00000000, 0x06490628, 0x0aefcc28, 0x00000000, 0x07800028,
+	0x078016e9, 0x09508a68, 0x068000a8, 0x06c00028, 0x06090628,
+	0x06090629, 0x06881068, 0x06090628, 0x0cc00000, 0x00000000,
+	0x06490628, 0x0aefcc28, 0x06c00028, 0x069001a8, 0x069fffea,
+	0x06090628, 0x06090629, 0x05401a23, 0x06090628, 0x09210a23,
+	0x05401a28, 0x02828aa8, 0x06090628, 0x06985168, 0x0c782700,
+	0x06090628, 0x078003e8, 0x0a6fc028, 0x07800028, 0x078016e9,
+	0x06800030, 0x09508a68, 0x0780016b, 0x07801d2a, 0x04601aaa,
+	0x0c500ec0, 0x0aa4802b, 0x0690002a, 0x0aa4006b, 0x0aa8c36b,
+	0x0aa883eb, 0x0aa3422b, 0x00000000, 0x06a0002a, 0x0aa281eb,
+	0x06c0002a, 0x06b0002a, 0x0aa1c1ab, 0x06c0002a, 0x04602aeb,
+	0x0c500980, 0x0690002a, 0x0c7e4f00, 0x00000000, 0x06490628,
+	0x0aefcc28, 0x068000a8, 0x02c28aa8, 0x09441a30, 0x06090628,
+	0x06090629, 0x069fffeb, 0x06900028, 0x0a00ca2a, 0x080c2400,
+	0x080e1424, 0x064c2228, 0x060e1528, 0x060e1528, 0x060e1528,
+	0x060e1528, 0x09210a68, 0x06090628, 0x02828ae9, 0x06090628,
+	0x06a00028, 0x0a007a2a, 0x080c2440, 0x064c2228, 0x09210a68,
+	0x06090628, 0x02828ae9, 0x06090628, 0x0688d068, 0x02c28aa8,
+	0x09441a30, 0x0c781780, 0x06090628, 0x09441ab0, 0x06031f2a,
+	0x0680016b, 0x09510ae9, 0x0c781600, 0x06031e2b, 0x0aa241eb,
+	0x06a0002a, 0x0aa1c1ab, 0x06b0002a, 0x0aa1416b, 0x0aa1026b,
+	0x06800070, 0x0690002a, 0x06800030, 0x06490628, 0x0aefcc28,
+	0x06c0002a, 0x068408a8, 0x02c28aa8, 0x09441a30, 0x06090628,
+	0x06090629, 0x069fffec, 0x06900028, 0x0a00ba2a, 0x080c2400,
 	0x064c222e, 0x0609062e, 0x09210a2e, 0x09c28068, 0x02828b28,
-	0x09828428, 0x078017ad, 0x095e1a2d, 0x06090628, 0x080c2440,
-	0x064c2228, 0x06090628, 0x09210a28, 0x09c28068, 0x02828b28,
-	0x09828428, 0x06090628, 0x06bc5828, 0x09441a30, 0x06090628,
-	0x06b60828, 0x09441a30, 0x06090628, 0x06900028, 0x080c2410,
-	0x064c222f, 0x0609062f, 0x09210a2f, 0x09c28068, 0x02828b28,
-	0x09828428, 0x078017ad, 0x05801b6d, 0x095e1a2d, 0x06090628,
-	0x080c2450, 0x064c2228, 0x06090628, 0x09210a28, 0x09c28068,
-	0x02828b28, 0x09828428, 0x098283e8, 0x06090628, 0x06bed868,
+	0x09828428, 0x07801d6d, 0x095e1a2d, 0x06090628, 0x06a00028,
+	0x0a00ba2a, 0x080c2440, 0x064c2228, 0x06090628, 0x09210a28,
+	0x09c28068, 0x02828b28, 0x09828428, 0x07801ded, 0x095e1a2d,
+	0x06090628, 0x068c5828, 0x02c28aa8, 0x09441a30, 0x06090628,
+	0x06860828, 0x02c28aa8, 0x09441a30, 0x06090628, 0x06900028,
+	0x0a00ba2a, 0x080c2410, 0x064c222f, 0x0609062f, 0x09210a2f,
+	0x09c28068, 0x02828b28, 0x09828428, 0x07801dad, 0x095e1a2d,
+	0x06090628, 0x06a00028, 0x0a00ba2a, 0x080c2450, 0x064c2228,
+	0x06090628, 0x09210a28, 0x09c28068, 0x02828b28, 0x09828428,
+	0x07801e2d, 0x095e1a2d, 0x06090628, 0x068ed868, 0x02c28aa8,
 	0x09441a30, 0x06090628, 0x080c24a0, 0x080e1424, 0x064c2228,
-	0x060e152e, 0x060e152f, 0x060e1528, 0x060e1528, 0x0cc00000,
-	0x00000000, 0x064e1215, 0x091e1555, 0x0a208055, 0x0c782300,
-	0x0649d915, 0x0900c555, 0x0a6f8015, 0x00000000, 0x078003d5,
-	0x0aa08055, 0x0c780940, 0x07800596, 0x0aa1c016, 0x04401596,
-	0x07c00596, 0x078005d6, 0x04401596, 0x0c7814c0, 0x07c005d6,
-	0x07800916, 0x07800295, 0x05408555, 0x02015595, 0x04003596,
-	0x07c00916, 0x05404595, 0x02016c56, 0x060e1316, 0x07800517,
-	0x0aa0c017, 0x06a16016, 0x06a16196, 0x07c00416, 0x069fffd7,
-	0x044015d7, 0x0aa1c017, 0x00000000, 0x064e1615, 0x09010555,
-	0x0aaec015, 0x04401555, 0x060e1615, 0x06c00016, 0x060e1216,
-	0x06800095, 0x0c781880, 0x07c003d5, 0x0a660095, 0x078005d6,
-	0x0aa18016, 0x04401596, 0x0b210056, 0x07c005d6, 0x0c780bc0,
-	0x00000000, 0x07800956, 0x07800295, 0x05408555, 0x02015595,
+	0x060e152e, 0x060e152f, 0x060e1528, 0x0c780080, 0x060e1528,
+	0x0cc00000, 0x00000000, 0x07800028, 0x078016e9, 0x06800030,
+	0x09508a68, 0x0780016b, 0x0780026a, 0x04601aaa, 0x0c500c00,
+	0x0aa1416b, 0x00000000, 0x06800070, 0x0a61826b, 0x00000000,
+	0x078003a8, 0x04602a28, 0x0c500840, 0x0c7800c0, 0x0c780000,
+	0x00000000, 0x06490628, 0x0aefcc28, 0x06b000a8, 0x09441a30,
+	0x06090628, 0x06090629, 0x069fffeb, 0x06900028, 0x080c2400,
+	0x080e1424, 0x064c2228, 0x060e1528, 0x060e1528, 0x060e1528,
+	0x060e1528, 0x09210a68, 0x06090628, 0x02828ae9, 0x06090628,
+	0x080c2440, 0x064c2228, 0x09210a68, 0x06090628, 0x02828ae9,
+	0x06090628, 0x06b8d068, 0x09441a30, 0x0c781340, 0x06090628,
+	0x06b0002a, 0x09441ab0, 0x06031f2a, 0x0680016b, 0x09510ae9,
+	0x0c781180, 0x06031e2b, 0x0aa1416b, 0x0aa1026b, 0x06800070,
+	0x0c7ff5c0, 0x00000000, 0x06490628, 0x0aefcc28, 0x06b408a8,
+	0x09441a30, 0x06090628, 0x06090629, 0x069fffec, 0x06900028,
+	0x080c2400, 0x064c222e, 0x0609062e, 0x09210a2e, 0x09c28068,
+	0x02828b28, 0x09828428, 0x078017ad, 0x095e1a2d, 0x06090628,
+	0x080c2440, 0x064c2228, 0x06090628, 0x09210a28, 0x09c28068,
+	0x02828b28, 0x09828428, 0x06090628, 0x06bc5828, 0x09441a30,
+	0x06090628, 0x06b60828, 0x09441a30, 0x06090628, 0x06900028,
+	0x080c2410, 0x064c222f, 0x0609062f, 0x09210a2f, 0x09c28068,
+	0x02828b28, 0x09828428, 0x078017ad, 0x05801b6d, 0x095e1a2d,
+	0x06090628, 0x080c2450, 0x064c2228, 0x06090628, 0x09210a28,
+	0x09c28068, 0x02828b28, 0x09828428, 0x098283e8, 0x06090628,
+	0x06bed868, 0x09441a30, 0x06090628, 0x080c24a0, 0x080e1424,
+	0x064c2228, 0x060e152e, 0x060e152f, 0x060e1528, 0x060e1528,
+	0x0cc00000, 0x00000000, 0x064e1215, 0x091e1555, 0x0a208055,
+	0x0c782300, 0x0649d915, 0x0900c555, 0x0a6f8015, 0x00000000,
+	0x078003d5, 0x0aa08055, 0x0c780940, 0x07800596, 0x0aa1c016,
+	0x04401596, 0x07c00596, 0x078005d6, 0x04401596, 0x0c7814c0,
+	0x07c005d6, 0x07800916, 0x07800295, 0x05408555, 0x02015595,
+	0x04003596, 0x07c00916, 0x05404595, 0x02016c56, 0x060e1316,
+	0x07800517, 0x0aa0c017, 0x06a16016, 0x06a16196, 0x07c00416,
+	0x069fffd7, 0x044015d7, 0x0aa1c017, 0x00000000, 0x064e1615,
+	0x09010555, 0x0aaec015, 0x04401555, 0x060e1615, 0x06c00016,
+	0x060e1216, 0x06800095, 0x0c781880, 0x07c003d5, 0x0a660095,
+	0x078005d6, 0x0aa18016, 0x04401596, 0x0b210056, 0x07c005d6,
+	0x0c780bc0, 0x00000000, 0x07800956, 0x07800295, 0x05408555,
+	0x02015595, 0x04003596, 0x07c00956, 0x05404595, 0x02016c56,
+	0x060e1316, 0x07800415, 0x09c151d5, 0x06c00015, 0x060e1215,
+	0x068000d5, 0x0c781280, 0x07c003d5, 0x0aa080d5, 0x0c780700,
+	0x07800516, 0x0aa0c016, 0x06800017, 0x06800317, 0x060e1417,
+	0x07800795, 0x07c00755, 0x0683ffd5, 0x064e1516, 0x0900c5d6,
+	0x0a40b5d5, 0x091845d6, 0x07c00797, 0x064e1516, 0x064e1516,
+	0x064e1516, 0x080c24e0, 0x060c2216, 0x064e1516, 0x0c780200,
+	0x060c2216, 0x068000d6, 0x07c00796, 0x06800016, 0x080c24e0,
+	0x060c2216, 0x060c2216, 0x0aa080a0, 0x0c780a00, 0x078003d5,
+	0x0a644115, 0x07800956, 0x068ac015, 0x05408555, 0x02015595,
 	0x04003596, 0x07c00956, 0x05404595, 0x02016c56, 0x060e1316,
-	0x07800415, 0x09c151d5, 0x06c00015, 0x060e1215, 0x068000d5,
-	0x0c781280, 0x07c003d5, 0x0aa080d5, 0x0c780700, 0x07800516,
-	0x0aa0c016, 0x06800017, 0x06800317, 0x060e1417, 0x07800795,
-	0x07c00755, 0x0683ffd5, 0x064e1516, 0x0900c5d6, 0x0a40b5d5,
-	0x091845d6, 0x07c00797, 0x064e1516, 0x064e1516, 0x064e1516,
-	0x080c24e0, 0x060c2216, 0x064e1516, 0x0c780200, 0x060c2216,
-	0x068000d6, 0x07c00796, 0x06800016, 0x080c24e0, 0x060c2216,
-	0x060c2216, 0x0aa080a0, 0x0c780a00, 0x078003d5, 0x0a644115,
-	0x07800956, 0x068ac015, 0x05408555, 0x02015595, 0x04003596,
-	0x07c00956, 0x05404595, 0x02016c56, 0x060e1316, 0x06a16015,
-	0x09c151d5, 0x06c00015, 0x060e1215, 0x06800195, 0x0c780640,
-	0x07c003d5, 0x0aa0c195, 0x0c780500, 0x00000000, 0x06431e18,
-	0x0befc058, 0x064e1418, 0x080e1400, 0x064e1516, 0x0683ffd5,
-	0x0900c5d6, 0x09203656, 0x0a8045d5, 0x091845d6, 0x068000d7,
-	0x06800019, 0x07c004d7, 0x090015d9, 0x07c00497, 0x090225d9,
-	0x07c01117, 0x060e1418, 0x06800015, 0x07c003d5, 0x0cc00000,
-	0x00400000, 0x06800047, 0x07c003c7, 0x07800507, 0x050011c7,
-	0x07c00507, 0x064e1608, 0x09010208, 0x04001208, 0x060e1608,
-	0x0aa0c007, 0x06800008, 0x06800308, 0x060e1408, 0x06b7ffc7,
-	0x06c00007, 0x060e1507, 0x060e1524, 0x060e1524, 0x060e1524,
-	0x060e1524, 0x0cc00000, 0x08030580, 0x078003c7, 0x0a6fc007,
-	0x07800447, 0x0aa0c0c7, 0x0aa98347, 0x0a638107, 0x07800507,
-	0x050011c7, 0x07c00507, 0x06800047, 0x07c003c7, 0x080c24e0,
-	0x064c2207, 0x064c2208, 0x080c24c0, 0x060c2207, 0x060c2208,
-	0x0cc00000, 0x08030580, 0x06800047, 0x07c003c7, 0x07800507,
-	0x050011c7, 0x07c00507, 0x080e1424, 0x064e1509, 0x064e150a,
-	0x064e150b, 0x064e150c, 0x0aa0c007, 0x06800008, 0x06800308,
-	0x060e1408, 0x0683ffc7, 0x07800448, 0x095841c8, 0x07800308,
-	0x096031c8, 0x060e1507, 0x060e1509, 0x060e150a, 0x060e150b,
-	0x060e150c, 0x0cc00000, 0x08030580, 0x07800987, 0x078009c8,
-	0x06800009, 0x0d000008, 0x020091c9, 0x04401249, 0x06800047,
-	0x0ba10089, 0x05801249, 0x0c7fff80, 0x040011c7, 0x0cc00000,
-	0x07c00687, 0x06800208, 0x064c3b07, 0x091031c7, 0x024071c8,
-	0x0f8001c7, 0x0fc0f1c0, 0x064c0e07, 0x040011c7, 0x0f8001c7,
-	0x07800687, 0x0f8001c7, 0x0fc051c0, 0x0c073dc0, 0x07c00107,
-	0x0fc011c0, 0x0aa0c007, 0x0c000640, 0x00000000, 0x078002c7,
-	0x07801988, 0x094c11c8, 0x0c0736c0, 0x060e0407, 0x06800007,
-	0x07c01cc7, 0x078005c7, 0x0b210087, 0x07800988, 0x04002208,
-	0x024081c8, 0x07800947, 0x04401208, 0x02007207, 0x05401208,
-	0x02007207, 0x07c00947, 0x07800987, 0x040011c7, 0x07c005c7,
-	0x0cc00000, 0x00000000, 0x0fc011c0, 0x0a600007, 0x0fc011c0,
-	0x07801408, 0x0f8001c8, 0x0fc011c0, 0x0fc021c0, 0x0fc03200,
-	0x0aa10007, 0x0aa0c047, 0x0fc03200, 0x0fc03200, 0x0cc00000,
-	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x06a16015, 0x09c151d5, 0x06c00015, 0x060e1215, 0x06800195,
+	0x0c780640, 0x07c003d5, 0x0aa0c195, 0x0c780500, 0x00000000,
+	0x06431e18, 0x0befc058, 0x064e1418, 0x080e1400, 0x064e1516,
+	0x0683ffd5, 0x0900c5d6, 0x09203656, 0x0a8045d5, 0x091845d6,
+	0x068000d7, 0x06800019, 0x07c004d7, 0x090015d9, 0x07c00497,
+	0x090225d9, 0x07c01117, 0x060e1418, 0x06800015, 0x07c003d5,
+	0x0cc00000, 0x00400000, 0x06800047, 0x07c003c7, 0x07800507,
+	0x050011c7, 0x07c00507, 0x064e1608, 0x09010208, 0x04001208,
+	0x060e1608, 0x0aa0c007, 0x06800008, 0x06800308, 0x060e1408,
+	0x06b7ffc7, 0x06c00007, 0x060e1507, 0x060e1524, 0x060e1524,
+	0x060e1524, 0x060e1524, 0x0cc00000, 0x08030580, 0x078003c7,
+	0x0a6fc007, 0x07800447, 0x0aa0c0c7, 0x0aa98347, 0x0a638107,
+	0x07800507, 0x050011c7, 0x07c00507, 0x06800047, 0x07c003c7,
+	0x080c24e0, 0x064c2207, 0x064c2208, 0x080c24c0, 0x060c2207,
+	0x060c2208, 0x0cc00000, 0x08030580, 0x06800047, 0x07c003c7,
+	0x07800507, 0x050011c7, 0x07c00507, 0x080e1424, 0x064e1509,
+	0x064e150a, 0x064e150b, 0x064e150c, 0x0aa0c007, 0x06800008,
+	0x06800308, 0x060e1408, 0x0683ffc7, 0x07800448, 0x095841c8,
+	0x07800308, 0x096031c8, 0x060e1507, 0x060e1509, 0x060e150a,
+	0x060e150b, 0x060e150c, 0x0cc00000, 0x08030580, 0x07800987,
+	0x078009c8, 0x06800009, 0x0d000008, 0x020091c9, 0x04401249,
+	0x06800047, 0x0ba10089, 0x05801249, 0x0c7fff80, 0x040011c7,
+	0x0cc00000, 0x07c00687, 0x06800208, 0x064c3b07, 0x091031c7,
+	0x024071c8, 0x0f8001c7, 0x0fc0f1c0, 0x064c0e07, 0x040011c7,
+	0x0f8001c7, 0x07800687, 0x0f8001c7, 0x0fc051c0, 0x0c073d80,
+	0x07c00107, 0x0fc011c0, 0x0aa0c007, 0x0c000640, 0x00000000,
+	0x078002c7, 0x07801988, 0x094c11c8, 0x0c073680, 0x060e0407,
+	0x06800007, 0x07c01cc7, 0x078005c7, 0x0b210087, 0x07800988,
+	0x04002208, 0x024081c8, 0x07800947, 0x04401208, 0x02007207,
+	0x05401208, 0x02007207, 0x07c00947, 0x07800987, 0x040011c7,
+	0x07c005c7, 0x0cc00000, 0x00000000, 0x0fc011c0, 0x0a600007,
+	0x0fc011c0, 0x07801408, 0x0f8001c8, 0x0fc011c0, 0x0fc021c0,
+	0x0fc03200, 0x0aa10007, 0x0aa0c047, 0x0fc03200, 0x0fc03200,
+	0x0cc00000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
@@ -634,108 +633,116 @@ const u32 vmpeg4_mc_4[] __initconst = {
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x06bff7c0, 0x06032400, 0x00400000, 0x0c780000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x06bff7c0, 0x06032400, 0x00400000,
+	0x0c780000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x00000000, 0x00000000, 0x0cc00000, 0x00400000,
-	0x0cc00000, 0x00400000, 0x0cc00000, 0x00400000, 0x0cc00000,
-	0x00400000, 0x0cc00000, 0x00400000, 0x0c780200, 0x06431e07,
-	0x0cc00000, 0x00400000, 0x0cc00000, 0x00400000, 0x0cc00000,
-	0x00400000, 0x09027207, 0x0a654048, 0x068fdfca, 0x06feffca,
-	0x064e0408, 0x02808288, 0x09108287, 0x0ba0c08a, 0x064c0909,
-	0x098083c8, 0x0ac0424a, 0x09208287, 0x0a60c00a, 0x0400128a,
-	0x09808388, 0x0b80324a, 0x00000000, 0x098081c8, 0x0c780d40,
-	0x060e0408, 0x0c780cc0, 0x00000000, 0x0a6f8088, 0x0680002c,
-	0x080e1424, 0x09110a47, 0x06431f2a, 0x069fffeb, 0x06490628,
-	0x0aefcc28, 0x05404a2c, 0x060c2428, 0x068010a8, 0x02c28aa8,
-	0x09462a2c, 0x06090628, 0x06090629, 0x064c2228, 0x060e1528,
-	0x09210b68, 0x06090628, 0x02828aed, 0x06090628, 0x06a00028,
-	0x0a009a2a, 0x05404a2c, 0x098281a8, 0x060c2428, 0x064c2228,
-	0x09210b68, 0x06090628, 0x02828aed, 0x06090628, 0x0ba9c0ec,
-	0x04001b2c, 0x06881068, 0x02c28aa8, 0x06090628, 0x080c2480,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0cc00000,
+	0x00400000, 0x0cc00000, 0x00400000, 0x0cc00000, 0x00400000,
+	0x0cc00000, 0x00400000, 0x0cc00000, 0x00400000, 0x0c780200,
+	0x06431e07, 0x0cc00000, 0x00400000, 0x0cc00000, 0x00400000,
+	0x0cc00000, 0x00400000, 0x09027207, 0x0a654048, 0x068fdfca,
+	0x06feffca, 0x064e0408, 0x02808288, 0x09108287, 0x0ba0c08a,
+	0x064c0909, 0x098083c8, 0x0ac0424a, 0x09208287, 0x0a60c00a,
+	0x0400128a, 0x09808388, 0x0b80324a, 0x00000000, 0x098081c8,
+	0x0c780d40, 0x060e0408, 0x0c780cc0, 0x00000000, 0x0a6f8088,
+	0x0680002c, 0x080e1424, 0x09110a47, 0x06431f2a, 0x069fffeb,
+	0x06490628, 0x0aefcc28, 0x05404a2c, 0x060c2428, 0x068010a8,
+	0x02c28aa8, 0x09462a2c, 0x06090628, 0x06090629, 0x064c2228,
+	0x060e1528, 0x09210b68, 0x06090628, 0x02828aed, 0x06090628,
+	0x06a00028, 0x0a009a2a, 0x05404a2c, 0x098281a8, 0x060c2428,
 	0x064c2228, 0x09210b68, 0x06090628, 0x02828aed, 0x06090628,
-	0x06a00028, 0x0a006a2a, 0x064c2228, 0x09210b68, 0x06090628,
-	0x02828aed, 0x06090628, 0x08031e00, 0x0cc00000, 0x00400000
+	0x0ba9c0ec, 0x04001b2c, 0x06881068, 0x02c28aa8, 0x06090628,
+	0x080c2480, 0x064c2228, 0x09210b68, 0x06090628, 0x02828aed,
+	0x06090628, 0x06a00028, 0x0a006a2a, 0x064c2228, 0x09210b68,
+	0x06090628, 0x02828aed, 0x06090628, 0x08031e00, 0x0cc00000,
+	0x00400000
 };
 
 const u32 __initconst vmpeg4_mc_5[] = {
-	0x06807801, 0x06800000, 0x0d000001, 0x07400040, 0x0c014380, 0x00000000,
-	0x00000000, 0x00000000, 0x080c0002, 0x080c2901, 0x06bfde80,
-	0x07c017c0, 0x06030400, 0x00400000, 0x0c019a00, 0x00000000,
-	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0c7ffe80,
+	0x0680c001, 0x06800000, 0x0d000001, 0x07400040, 0x0c014d40,
+	0x00000000, 0x00000000, 0x00000000, 0x080c0002, 0x080c2901,
+	0x06bfde80, 0x07c017c0, 0x06030400, 0x00400000, 0x0c01a400,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x0c7ffe80, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x0c780400, 0x04001965, 0x0cc00000, 0x00400000,
-	0x0c7804c0, 0x064c0007, 0x0c79a100, 0x06800025, 0x0cc00000,
-	0x00400000, 0x0cc00000, 0x00400000, 0x0cc00000, 0x00400000,
-	0x0c79ee00, 0x06800025, 0x0cc00000, 0x00400000, 0x06800025,
-	0x00800000, 0x078017c9, 0x0c7ffec0, 0x06030409, 0x078001c9,
-	0x0aa0c009, 0x0c78ff80, 0x00000000, 0x06bfdd89, 0x06030409,
-	0x00400000, 0x07801509, 0x0aa2c109, 0x07c0151f, 0x0a2c4047,
-	0x06800025, 0x0aa14009, 0x0a608049, 0x0c790940, 0x0a608089,
-	0x0c78fc00, 0x0a240807, 0x0c788a40, 0x00000000, 0x0683ffc8,
-	0x0ba20048, 0x064c0007, 0x0a2f8047, 0x04401208, 0x064c3a07,
-	0x090061c7, 0x0aae8647, 0x00000000, 0x06800007, 0x0c017100,
-	0x07c003c7, 0x0c792b00, 0x0bec9007, 0x078003c7, 0x0a6fc007,
-	0x07800007, 0x07800988, 0x0b822207, 0x06800007, 0x07c00007,
-	0x0a628060, 0x06a00008, 0x06e00008, 0x06431e09, 0x0befc049,
-	0x00000000, 0x080c24a0, 0x060c2208, 0x0c780300, 0x060c2208,
-	0x0a6280a0, 0x00000000, 0x06431e09, 0x0befc049, 0x00000000,
-	0x080c24c0, 0x080c2200, 0x080c2200, 0x080c2200, 0x080c2200,
-	0x078016c8, 0x04001208, 0x078009c9, 0x0b80a248, 0x07c016c8,
-	0x0c020500, 0x00000000, 0x078003c7, 0x0a6fc007, 0x0c792180,
-	0x00000000, 0x06431e09, 0x0befc049, 0x07800347, 0x0a61c007,
-	0x00000000, 0x064c2907, 0x091c21c7, 0x0a60c0c7, 0x0c021000,
-	0x00000000, 0x0aa080a0, 0x0c780f40, 0x078003c7, 0x0a6fc007,
-	0x07801bc8, 0x0a63c008, 0x078004c8, 0x0a634348, 0x06800107,
-	0x07c003c7, 0x08030580, 0x068003c9, 0x07c00149, 0x06800007,
-	0x0c018d80, 0x07c01d07, 0x07800007, 0x040011c7, 0x0c7fef80,
-	0x07c00007, 0x0c792d80, 0x078003c7, 0x0a6fc007, 0x078005c7,
-	0x0ba0c087, 0x06800007, 0x06800047, 0x07c01fc7, 0x07800787,
-	0x0aa180c7, 0x06810007, 0x060e0907, 0x060e0a07, 0x0c780440,
-	0x060e0b07, 0x07800507, 0x0aa0c007, 0x068000c8, 0x068003c8,
-	0x060e1408, 0x064e1507, 0x060e0907, 0x04003208, 0x060e1408,
-	0x064e1507, 0x060e0a07, 0x04003208, 0x060e1408, 0x064e1507,
-	0x060e0b07, 0x0683ffc7, 0x080e1418, 0x060e1507, 0x080e141b,
-	0x060e1507, 0x080e141e, 0x060e1507, 0x080e1421, 0x0c01f280,
-	0x060e1507, 0x0c785580, 0x00000000, 0x0aa6c020, 0x00000000,
-	0x0fc011c0, 0x0aa64007, 0x080c2803, 0x06800347, 0x07c00147,
-	0x06431e07, 0x0befc047, 0x00000000, 0x080c24a0, 0x060c2224,
-	0x060c2224, 0x06800007, 0x07c01d07, 0x06800025, 0x064c3c07,
-	0x091011c7, 0x0ae1c225, 0x0aaf8007, 0x064c3c07, 0x091011c7,
-	0x0aae8007, 0x0c7ff000, 0x080c2800, 0x0c7fda80, 0x00000000,
-	0x080c2801, 0x064c2807, 0x0a2fc047, 0x064c0008, 0x0a209008,
-	0x0c7fd8c0, 0x058011c7, 0x09004207, 0x07c00148, 0x090821c7,
-	0x07c00187, 0x0aa140c8, 0x080c2800, 0x0aa0c108, 0x0c781900,
-	0x00000000, 0x0fc011c0, 0x0540e1c7, 0x060c2d07, 0x080c2802,
-	0x064c2807, 0x0a2fc047, 0x058011c7, 0x07800188, 0x09444207,
-	0x07c01388, 0x07800148, 0x0a644108, 0x080c2800, 0x0fc021c0,
-	0x0b61c087, 0x07800109, 0x024091c9, 0x0b620089, 0x04401249,
-	0x0c780180, 0x06800049, 0x020091c9, 0x0b20c809, 0x04401249,
-	0x068007c9, 0x07c00109, 0x0c012f80, 0x040001c9, 0x07801fcb,
-	0x0aa1400b, 0x078005c9, 0x0b60c089, 0x0c004880, 0x00000000,
-	0x068fdfca, 0x06feffca, 0x064e0408, 0x02808288, 0x078005ca,
-	0x0ba0c08a, 0x064c0909, 0x098083c8, 0x0ac0424a, 0x0780000a,
-	0x0a60c00a, 0x0400128a, 0x09808388, 0x0b80324a, 0x00000000,
-	0x098081c8, 0x07802007, 0x09605207, 0x07800007, 0x040811c7,
+	0x00000000, 0x00000000, 0x0c780400, 0x04001965, 0x0cc00000,
+	0x00400000, 0x0c7804c0, 0x064c0007, 0x0c79ab00, 0x06800025,
+	0x0cc00000, 0x00400000, 0x0cc00000, 0x00400000, 0x0cc00000,
+	0x00400000, 0x0c79f800, 0x06800025, 0x0cc00000, 0x00400000,
+	0x06800025, 0x00800000, 0x078017c9, 0x0c7ffec0, 0x06030409,
+	0x078001c9, 0x0aa0c009, 0x0c790940, 0x00000000, 0x06bfdd89,
+	0x06030409, 0x00400000, 0x07801509, 0x0aa2c109, 0x07c0151f,
+	0x0a2c4047, 0x06800025, 0x0aa14009, 0x0a608049, 0x0c791300,
+	0x0a608089, 0x0c7905c0, 0x0a240807, 0x0c789400, 0x00000000,
+	0x0683ffc8, 0x0ba20048, 0x064c0007, 0x0a2f8047, 0x04401208,
+	0x064c3a07, 0x090061c7, 0x0aae8647, 0x00000000, 0x06800007,
+	0x0c017b00, 0x07c003c7, 0x0c7934c0, 0x0bec9007, 0x078003c7,
+	0x0a6fc007, 0x07800007, 0x07800988, 0x0b822207, 0x06800007,
+	0x07c00007, 0x0a628060, 0x06a00008, 0x06e00008, 0x06431e09,
+	0x0befc049, 0x00000000, 0x080c24a0, 0x060c2208, 0x0c780300,
+	0x060c2208, 0x0a6280a0, 0x00000000, 0x06431e09, 0x0befc049,
+	0x00000000, 0x080c24c0, 0x080c2200, 0x080c2200, 0x080c2200,
+	0x080c2200, 0x078016c8, 0x04001208, 0x078009c9, 0x0b80a248,
+	0x07c016c8, 0x0c020f00, 0x00000000, 0x078003c7, 0x0a6fc007,
+	0x0c792b40, 0x00000000, 0x06431e09, 0x0befc049, 0x07800347,
+	0x0aa0c007, 0x0c780880, 0x00000000, 0x064c1d07, 0x09227207,
+	0x0a678008, 0x064c2a08, 0x064c3607, 0x091081c7, 0x095101c8,
+	0x064c3b08, 0x09103248, 0x04001209, 0x03807207, 0x0900f207,
+	0x0a650008, 0x0580f1c7, 0x06800048, 0x05407208, 0x03808248,
+	0x04401208, 0x0a40e207, 0x064c1d07, 0x0a60c009, 0x00000000,
+	0x054081c7, 0x06800009, 0x09201207, 0x0a610008, 0x054011c7,
+	0x0c7fff40, 0x04001249, 0x060c0e09, 0x0c021300, 0x00000000,
+	0x0aa080a0, 0x0c780f40, 0x078003c7, 0x0a6fc007, 0x07801bc8,
+	0x0a63c008, 0x078004c8, 0x0a634348, 0x06800107, 0x07c003c7,
+	0x08030580, 0x068003c9, 0x07c00149, 0x06800007, 0x0c019080,
+	0x07c01d07, 0x07800007, 0x040011c7, 0x0c7fe880, 0x07c00007,
+	0x0c793040, 0x078003c7, 0x0a6fc007, 0x078005c7, 0x0ba0c087,
+	0x06800007, 0x06800047, 0x07c01fc7, 0x07800787, 0x0aa180c7,
+	0x06810007, 0x060e0907, 0x060e0a07, 0x0c780440, 0x060e0b07,
+	0x07800507, 0x0aa0c007, 0x068000c8, 0x068003c8, 0x060e1408,
+	0x064e1507, 0x060e0907, 0x04003208, 0x060e1408, 0x064e1507,
+	0x060e0a07, 0x04003208, 0x060e1408, 0x064e1507, 0x060e0b07,
+	0x0683ffc7, 0x080e1418, 0x060e1507, 0x080e141b, 0x060e1507,
+	0x080e141e, 0x060e1507, 0x080e1421, 0x0c01f580, 0x060e1507,
+	0x0c7855c0, 0x00000000, 0x0aa6c020, 0x00000000, 0x0fc011c0,
+	0x0aa64007, 0x080c2803, 0x06800347, 0x07c00147, 0x06431e07,
+	0x0befc047, 0x00000000, 0x080c24a0, 0x060c2224, 0x060c2224,
+	0x06800007, 0x07c01d07, 0x06800025, 0x064c3c07, 0x091011c7,
+	0x0ae1c225, 0x0aaf8007, 0x064c3c07, 0x091011c7, 0x0aae8007,
+	0x0c7ff000, 0x080c2800, 0x0c7fd380, 0x00000000, 0x080c2801,
+	0x064c2807, 0x0a2fc047, 0x064c0008, 0x0a209008, 0x0c7fd1c0,
+	0x058011c7, 0x09004207, 0x07c00148, 0x090821c7, 0x07c00187,
+	0x0aa140c8, 0x080c2800, 0x0aa0c108, 0x0c781940, 0x00000000,
+	0x0fc011c0, 0x0540e1c7, 0x060c2d07, 0x080c2802, 0x064c2807,
+	0x0a2fc047, 0x058011c7, 0x07800188, 0x09444207, 0x07c01388,
+	0x07800148, 0x0a644108, 0x080c2800, 0x0fc021c0, 0x0b61c087,
+	0x07800109, 0x024091c9, 0x0b620089, 0x04401249, 0x0c780180,
+	0x06800049, 0x020091c9, 0x0b20c809, 0x04401249, 0x068007c9,
+	0x07c00109, 0x0c013240, 0x040001c9, 0x07801fcb, 0x0aa1400b,
+	0x078005c9, 0x0b60c089, 0x0c0048c0, 0x00000000, 0x068fdfca,
+	0x06feffca, 0x064e0408, 0x02808288, 0x078005ca, 0x0ba0c08a,
+	0x064c0909, 0x098083c8, 0x0ac0424a, 0x0780000a, 0x0a60c00a,
+	0x0400128a, 0x09808388, 0x0b80324a, 0x00000000, 0x098081c8,
+	0x07808007, 0x09605207, 0x07800007, 0x06808049, 0x02007247,
 	0x070001c7, 0x096a5207, 0x060e0408, 0x091e1248, 0x07c01fc9,
 	0x07801388, 0x060c2b08, 0x06880008, 0x098083c8, 0x07800507,
 	0x07801989, 0x0a610049, 0x09581207, 0x09808408, 0x098083c8,
 	0x060e0508, 0x06800009, 0x07800bc8, 0x09541248, 0x060c2a09,
 	0x07801c07, 0x0aa1c007, 0x080c2c03, 0x0fc011c0, 0x07c01cc7,
-	0x068000c9, 0x094a1247, 0x060c2c09, 0x0c01d240, 0x00000000,
-	0x080c0080, 0x0c015a00, 0x00000000, 0x080c24a0, 0x080c2200,
+	0x068000c9, 0x094a1247, 0x060c2c09, 0x0c01d500, 0x00000000,
+	0x080c0080, 0x0c015cc0, 0x00000000, 0x080c24a0, 0x080c2200,
 	0x080c2200, 0x07800007, 0x040011c7, 0x07c00007, 0x07800147,
-	0x0c012fc0, 0x07c00447, 0x0c7fb800, 0x00000000, 0x0a60c0e0,
+	0x0c013240, 0x07c00447, 0x0c7fb0c0, 0x00000000, 0x0a60c0e0,
 	0x06800007, 0x0fc011c0, 0x07c01707, 0x080c2802, 0x064c2807,
 	0x0a2fc047, 0x058011c7, 0x068003c8, 0x024071c8, 0x07800188,
 	0x09444207, 0x07c01388, 0x07800148, 0x0a644048, 0x080c2800,
 	0x0fc021c0, 0x0b61c087, 0x07800109, 0x024091c9, 0x0b620089,
 	0x04401249, 0x0c780180, 0x06800049, 0x020091c9, 0x0b20c809,
-	0x04401249, 0x068007c9, 0x07c00109, 0x0c011640, 0x040001c9,
+	0x04401249, 0x068007c9, 0x07c00109, 0x0c0118c0, 0x040001c9,
 	0x07801388, 0x060c2b08, 0x07801c07, 0x0a60c007, 0x0c7806c0,
 	0x06800009, 0x0aa10008, 0x080c2800, 0x0fc011c0, 0x07c01cc7,
 	0x07800148, 0x0aa14088, 0x06800009, 0x0aa0c148, 0x07800489,
@@ -760,22 +767,24 @@ const u32 __initconst vmpeg4_mc_5[] = {
 	0x060c2207, 0x064e1507, 0x060c2207, 0x080c2147, 0x078004c7,
 	0x07c00387, 0x07800487, 0x07c00247, 0x07801107, 0x07c01787,
 	0x06800107, 0x07c003c7, 0x08030580, 0x064c2407, 0x0befc3c7,
-	0x00000000, 0x07800147, 0x0aa10147, 0x0c0137c0, 0x00000000,
-	0x0c7800c0, 0x0c015e00, 0x00000000, 0x07800007, 0x040011c7,
-	0x0c7f8f40, 0x07c00007, 0x07801fcb, 0x0aa1400b, 0x078005c9,
+	0x00000000, 0x07800147, 0x0aa10147, 0x0c013a80, 0x00000000,
+	0x0c7800c0, 0x0c0160c0, 0x00000000, 0x07800007, 0x040011c7,
+	0x0c7f8800, 0x07c00007, 0x07801fcb, 0x0aa1400b, 0x078005c9,
 	0x0b60c089, 0x0c000e40, 0x00000000, 0x068fdfca, 0x06feffca,
 	0x064e0408, 0x02808288, 0x078005ca, 0x0ba0c08a, 0x064c0909,
 	0x098083c8, 0x0ac0424a, 0x0780000a, 0x0a60c00a, 0x0400128a,
 	0x09808388, 0x0b80324a, 0x00000000, 0x098081c8, 0x060e0408,
-	0x091e1248, 0x07c01fc9, 0x0c019f40, 0x00000000, 0x064c2407,
+	0x091e1248, 0x07c01fc9, 0x0c01a200, 0x00000000, 0x064c2407,
 	0x0befc3c7, 0x078003c7, 0x0a6fc007, 0x00000000, 0x080c2130,
-	0x080c2800, 0x064c2408, 0x0befc3c8, 0x0c012c80, 0x00000000,
+	0x080c2800, 0x064c2408, 0x0befc3c8, 0x0c012f40, 0x00000000,
 	0x07800007, 0x040011c7, 0x07c00007, 0x07801d08, 0x07801d47,
 	0x09421207, 0x07801d87, 0x09441207, 0x07c00308, 0x07800148,
-	0x0aa0c348, 0x07c00448, 0x0c7f8240, 0x078003c7, 0x0a6fc007,
+	0x0aa0c348, 0x07c00448, 0x0c7f7b00, 0x078003c7, 0x0a6fc007,
 	0x00000000, 0x080c24e0, 0x064c2207, 0x064c2208, 0x080c24c0,
-	0x060c2207, 0x0c7f89c0, 0x060c2208, 0x0780044b, 0x0aa1034b,
-	0x064e160b, 0x090102cb, 0x0aaf800b, 0x0681000b, 0x060e090b,
+	0x060c2207, 0x0c7f8280, 0x060c2208, 0x0780044b, 0x0aa3834b,
+	0x00000000, 0x069fffc9, 0x04401249, 0x0aa1c009, 0x00000000,
+	0x064e160b, 0x090102cb, 0x0aaec00b, 0x0c780140, 0x00000000,
+	0x0809d501, 0x0c7fffc0, 0x00000000, 0x0681000b, 0x060e090b,
 	0x060e0a0b, 0x0cc00000, 0x060e0b0b, 0x064e0009, 0x064e0e0b,
 	0x064e0c0c, 0x083f0040, 0x083f0000, 0x0680020d, 0x0d00000d,
 	0x00000000, 0x060e0009, 0x060e0e0b, 0x0cc00000, 0x060e0c0c,
@@ -798,7 +807,7 @@ const u32 __initconst vmpeg4_mc_5[] = {
 	0x0a6103c7, 0x07c01887, 0x0fc101c0, 0x0609c507, 0x0fc011c0,
 	0x0aa30007, 0x00000000, 0x0fc021c0, 0x07c018c7, 0x0fc021c0,
 	0x0a21c047, 0x00000000, 0x0fc101c0, 0x0fc101c0, 0x0fc101c0,
-	0x0fc0f1c0, 0x0fc101c0, 0x0fc021c0, 0x0aa0c007, 0x0c7f6780,
+	0x0fc0f1c0, 0x0fc101c0, 0x0fc021c0, 0x0aa0c007, 0x0c7f5dc0,
 	0x00000000, 0x0fc011c0, 0x0fc101c0, 0x07c01907, 0x0649c308,
 	0x09410207, 0x0609c308, 0x0b220087, 0x06800048, 0x06800008,
 	0x06800049, 0x0b004247, 0x05401249, 0x0c7fff80, 0x04001208,
@@ -826,7 +835,7 @@ const u32 __initconst vmpeg4_mc_5[] = {
 	0x040011c7, 0x058011c7, 0x0d000007, 0x060e030a, 0x04c08208,
 	0x060e0008, 0x07801807, 0x0aa18047, 0x00000000, 0x0fc011c0,
 	0x0540b1c7, 0x09807007, 0x060c0107, 0x0fc011c0, 0x0aa60007,
-	0x0fc011c0, 0x07c00347, 0x0aa0c047, 0x0c016080, 0x00000000,
+	0x0fc011c0, 0x07c00347, 0x0aa0c047, 0x0c0160c0, 0x00000000,
 	0x0fc011c0, 0x0a20c047, 0x00000000, 0x0fc011c0, 0x07801807,
 	0x06800008, 0x0aa18047, 0x06800007, 0x0fc011c0, 0x0a624007,
 	0x0fc01200, 0x0a61c008, 0x07c01a07, 0x07c01a48, 0x0fc011c0,
@@ -854,7 +863,7 @@ const u32 __initconst vmpeg4_mc_5[] = {
 	0x0c780540, 0x07c010c7, 0x07801008, 0x04001208, 0x0ae44048,
 	0x07c01008, 0x078010c9, 0x02007247, 0x0b21c007, 0x0b406247,
 	0x0b406247, 0x00000000, 0x024091c9, 0x0c7fff40, 0x04080208,
-	0x0c7f2280, 0x058011c7, 0x0b403247, 0x00000000, 0x04080208,
+	0x0c7f18c0, 0x058011c7, 0x0b403247, 0x00000000, 0x04080208,
 	0x07c01008, 0x090071c8, 0x090e7208, 0x09545207, 0x060e0708,
 	0x07800047, 0x0b624087, 0x0aa180a0, 0x0aa08020, 0x0aa10007,
 	0x040011c7, 0x0c780100, 0x07c00047, 0x0c784c00, 0x00000000,
@@ -864,21 +873,21 @@ const u32 __initconst vmpeg4_mc_5[] = {
 	0x07c01b07, 0x0fc031c0, 0x07c000c7, 0x07801c07, 0x0aa20007,
 	0x00000000, 0x0fc011c0, 0x07c01c47, 0x0fc011c0, 0x07c01c87,
 	0x054021c7, 0x060c0307, 0x0a6740e0, 0x07801e47, 0x0aa6c007,
-	0x09066207, 0x0aa08088, 0x0c7fae00, 0x0c00a740, 0x06801ec8,
-	0x07901ee3, 0x06801409, 0x09510263, 0x060c2109, 0x0c00a5c0,
+	0x09066207, 0x0aa08088, 0x0c7fae00, 0x0c00a780, 0x06801ec8,
+	0x07901ee3, 0x06801409, 0x09510263, 0x060c2109, 0x0c00a600,
 	0x06801f08, 0x07901f08, 0x06801809, 0x09510248, 0x060c2109,
-	0x096108c8, 0x0c00a400, 0x06801f48, 0x0c00a380, 0x06801f88,
+	0x096108c8, 0x0c00a440, 0x06801f48, 0x0c00a3c0, 0x06801f88,
 	0x05401923, 0x09c24424, 0x0942f923, 0x0a20c047, 0x0c7fa880,
 	0x00000000, 0x0fc051c0, 0x0c006f00, 0x07c00107, 0x0c006c40,
 	0x00000000, 0x0a6180a0, 0x078003c7, 0x0a6fc007, 0x06800107,
 	0x07c003c7, 0x08030580, 0x0aa28020, 0x06800048, 0x0a6100a0,
 	0x0fc03200, 0x0fc03240, 0x07c01b89, 0x07c01b48, 0x09503248,
 	0x09809149, 0x060c2109, 0x060c0e08, 0x06800025, 0x06490908,
-	0x0ae10225, 0x00000000, 0x0bef4048, 0x0c780080, 0x0c7f0840,
+	0x0ae10225, 0x00000000, 0x0bef4048, 0x0c780080, 0x0c7efe80,
 	0x0683ffc7, 0x0649bb08, 0x0900c208, 0x0aa10008, 0x0aa0c007,
 	0x0c7fff00, 0x044011c7, 0x06490b07, 0x09807007, 0x06090b07,
 	0x06090b07, 0x09c07007, 0x06090b07, 0x0649c909, 0x0aa10009,
-	0x06800087, 0x0c7efe00, 0x07c01507, 0x07801487, 0x0a608007,
+	0x06800087, 0x0c7ef440, 0x07c01507, 0x07801487, 0x0a608007,
 	0x0c780b00, 0x044011c7, 0x0aa0c087, 0x07801549, 0x078015c9,
 	0x0b20c1c9, 0x00000000, 0x0c780940, 0x07800fc8, 0x0609ca08,
 	0x07c00fdf, 0x0680420a, 0x02007289, 0x070001c7, 0x054101c7,
@@ -897,7 +906,7 @@ const u32 __initconst vmpeg4_mc_5[] = {
 	0x078048ca, 0x07804908, 0x09610288, 0x0a240807, 0x06800148,
 	0x0780494a, 0x07804988, 0x09610288, 0x0a22d007, 0x06800188,
 	0x078049ca, 0x07804a08, 0x09610288, 0x0a21a007, 0x068001c8,
-	0x0809cd11, 0x06800047, 0x0c7ee600, 0x07c01507, 0x0809cd00,
+	0x0809cd11, 0x06800047, 0x0c7edc40, 0x07c01507, 0x0809cd00,
 	0x07801607, 0x090041c7, 0x0a8051c8, 0x0a6200a0, 0x07801607,
 	0x090841c7, 0x0a4051c8, 0x06800047, 0x03407207, 0x0c7ff180,
 	0x02c091c9, 0x07800b47, 0x0680400f, 0x020093c8, 0x07400247,
@@ -918,16 +927,16 @@ const u32 __initconst vmpeg4_mc_5[] = {
 	0x05810208, 0x0c7800c0, 0x00000000, 0x058103cf, 0x02c083c8,
 	0x06098108, 0x06499108, 0x05410208, 0x058103c8, 0x02c083c8,
 	0x06098208, 0x080980f4, 0x07801b07, 0x06800048, 0x09421207,
-	0x0c7ee000, 0x06090708, 0x06800025, 0x0ae20225, 0x064c0007,
+	0x0c7ed640, 0x06090708, 0x06800025, 0x0ae20225, 0x064c0007,
 	0x0a2f8047, 0x00000000, 0x064c3a07, 0x090061c7, 0x0aae8647,
-	0x0c7800c0, 0x0c7ecf80, 0x00000000, 0x080c2800, 0x080c0002,
-	0x0c7ec880, 0x00000000, 0x0649c007, 0x07c04647, 0x058101c7,
+	0x0c7800c0, 0x0c7ec5c0, 0x00000000, 0x080c2800, 0x080c0002,
+	0x0c7ebec0, 0x00000000, 0x0649c007, 0x07c04647, 0x058101c7,
 	0x07c04687, 0x0649c107, 0x07c046c7, 0x058101c7, 0x07c04707,
 	0x0649c207, 0x07c04747, 0x058101c7, 0x07c04787, 0x0649c307,
 	0x07c047c7, 0x058101c7, 0x07c04807, 0x0649d007, 0x07c04847,
 	0x058101c7, 0x07c04887, 0x0649d107, 0x07c048c7, 0x058101c7,
 	0x07c04907, 0x0649d207, 0x07c04947, 0x058101c7, 0x07c04987,
-	0x0649d307, 0x07c049c7, 0x058101c7, 0x07c04a07, 0x0c004240,
+	0x0649d307, 0x07c049c7, 0x058101c7, 0x07c04a07, 0x0c004280,
 	0x06800025, 0x08002501, 0x08002605, 0x08002708, 0x08002815,
 	0x08002c14, 0x08002a09, 0x08002b17, 0x06830002, 0x06032602,
 	0x08032261, 0x08032101, 0x0cc00000, 0x00000000, 0x080c2804,
@@ -944,9 +953,9 @@ const u32 __initconst vmpeg4_mc_5[] = {
 	0x080c2141, 0x064e1507, 0x060c2207, 0x064e1507, 0x060c2207,
 	0x064e1507, 0x060c2207, 0x080c2147, 0x064c2407, 0x0befc3c7,
 	0x078004c7, 0x07c00387, 0x07800487, 0x07c00247, 0x07801107,
-	0x07c01787, 0x06800107, 0x07c003c7, 0x0c0078c0, 0x00000000,
+	0x07c01787, 0x06800107, 0x07c003c7, 0x0c007900, 0x00000000,
 	0x08030580, 0x07800007, 0x040011c7, 0x07c00007, 0x06431e07,
-	0x0befc047, 0x0c7eb2c0, 0x00000000, 0x0fc01200, 0x0fc011c0,
+	0x0befc047, 0x0c7ea900, 0x00000000, 0x0fc01200, 0x0fc011c0,
 	0x0aa28047, 0x06800147, 0x0fc011c0, 0x0aa1c047, 0x06800187,
 	0x0fc011c0, 0x0aa10047, 0x068001c7, 0x0fc011c0, 0x06800207,
 	0x07c00147, 0x0a60c008, 0x06800007, 0x0fc061c0, 0x07c01387,
@@ -954,7 +963,7 @@ const u32 __initconst vmpeg4_mc_5[] = {
 	0x0fc011c0, 0x0aa38007, 0x07800108, 0x0fc011c0, 0x0aa14007,
 	0x0b21c748, 0x04002208, 0x0c780140, 0x068007c8, 0x0b60c0c8,
 	0x04402208, 0x06800048, 0x07c00108, 0x0c0005c0, 0x040001c8,
-	0x0c7eef80, 0x00000000, 0x06a00007, 0x06e00007, 0x080c24a0,
+	0x0c7eed00, 0x00000000, 0x06a00007, 0x06e00007, 0x080c24a0,
 	0x060c2207, 0x060c2207, 0x060c2207, 0x060c2207, 0x060c2207,
 	0x0cc00000, 0x060c2207, 0x07801988, 0x094c11c8, 0x0c07fd00,
 	0x060e0407, 0x06800007, 0x07c01cc7, 0x07c00907, 0x0cc00000,
@@ -973,165 +982,156 @@ const u32 __initconst vmpeg4_mc_5[] = {
 	0x06800087, 0x05c0438e, 0x0540138e, 0x0200e1ce, 0x0ae1000f,
 	0x06bfffcd, 0x0300e34e, 0x0400138e, 0x0cc00000, 0x040003ce,
 	0x07800007, 0x0ae10007, 0x07800109, 0x07800988, 0x02007207,
-	0x044011c7, 0x040811c7, 0x074001c9, 0x0cc00000, 0x07c02009,
-	0x0681f409, 0x04401249, 0x0aefc009, 0x00000000, 0x083f0040,
-	0x083f0000, 0x08090b65, 0x00000000, 0x08090b60, 0x06498e07,
-	0x09807007, 0x068007c9, 0x097051c9, 0x06098e07, 0x0681f409,
-	0x04601249, 0x0c4fffc0, 0x00000000, 0x06800009, 0x097051c9,
-	0x09c07007, 0x06098e07, 0x064c0007, 0x09c07187, 0x09807207,
-	0x060c0007, 0x064c0807, 0x09807347, 0x060c0807, 0x083f0040,
-	0x083f0000, 0x08090b65, 0x0cc00000, 0x08090b60, 0x0680001f,
-	0x07c0149f, 0x07c014df, 0x07c0151f, 0x064c091f, 0x07c0175f,
-	0x07c0005f, 0x06800020, 0x06803fc2, 0x07c01542, 0x07c01582,
-	0x07c015c2, 0x07c01602, 0x060c091f, 0x080c0101, 0x080c2901,
-	0x06840442, 0x060c2e02, 0x064c4027, 0x064c4226, 0x024269e6,
-	0x040089a6, 0x07c006e6, 0x058109a6, 0x07c00726, 0x0649cf31,
-	0x0809c500, 0x0649c707, 0x0aa6c007, 0x09010207, 0x092101c7,
-	0x0401f287, 0x0580528a, 0x0403e247, 0x05806249, 0x09610289,
-	0x0649c709, 0x09610247, 0x0609c709, 0x0400f1c7, 0x058041c7,
-	0x060c0907, 0x07c00987, 0x04401247, 0x07c00609, 0x05404287,
-	0x0649c707, 0x094101c8, 0x0609c707, 0x0400f208, 0x05804208,
-	0x07c009c8, 0x05404208, 0x0961020a, 0x06090808, 0x0809c300,
-	0x0809cb00, 0x0cc00000, 0x00000000, 0x0649c803, 0x0aa14003,
-	0x078014c2, 0x028020c2, 0x07c014c2, 0x0809c800, 0x07801502,
-	0x0aa0c002, 0x06800102, 0x06030502, 0x064c0002, 0x0be14042,
-	0x0ba1d025, 0x06800102, 0x07c01502, 0x08030504, 0x06800025,
-	0x0cc00000, 0x00000000, 0x078001c2, 0x0aa1c002, 0x078016c2,
-	0x078009c3, 0x0a4040c2, 0x00000000, 0x06800102, 0x06030502,
-	0x0cc00000, 0x00000000, 0x0fc02240, 0x0aa4c009, 0x0680000a,
-	0x0b6180c9, 0x0680010a, 0x0fc01280, 0x09422289, 0x0c780140,
-	0x0440128a, 0x0fc01240, 0x0a6fc009, 0x0400128a, 0x06800049,
-	0x03409289, 0x05801249, 0x0f80028a, 0x0b40424a, 0x05401249,
-	0x04401249, 0x0240a24a, 0x0740020a, 0x0cc00000, 0x0fc01240,
-	0x064c441a, 0x0912169a, 0x0aaf801a, 0x0c7e60c0, 0x00000000,
-	0x06490628, 0x0aefcc28, 0x00000000, 0x07800028, 0x078016e9,
-	0x09508a68, 0x068000a8, 0x06c00028, 0x06090628, 0x06090629,
-	0x06881068, 0x06090628, 0x0cc00000, 0x00000000, 0x06490628,
-	0x0aefcc28, 0x06c00028, 0x069001a8, 0x069fffea, 0x06090628,
-	0x06090629, 0x05401a23, 0x06090628, 0x09210a23, 0x05401a28,
-	0x02828aa8, 0x06090628, 0x06985168, 0x0c782700, 0x06090628,
-	0x078003e8, 0x0a6fc028, 0x07800028, 0x078016e9, 0x06800030,
-	0x09508a68, 0x0780016b, 0x07801d2a, 0x04601aaa, 0x0c500ec0,
-	0x0aa4802b, 0x0690002a, 0x0aa4006b, 0x0aa8c36b, 0x0aa883eb,
-	0x0aa3422b, 0x00000000, 0x06a0002a, 0x0aa281eb, 0x06c0002a,
-	0x06b0002a, 0x0aa1c1ab, 0x06c0002a, 0x04602aeb, 0x0c500980,
-	0x0690002a, 0x0c7e5900, 0x00000000, 0x06490628, 0x0aefcc28,
-	0x068000a8, 0x02c28aa8, 0x09441a30, 0x06090628, 0x06090629,
-	0x069fffeb, 0x06900028, 0x0a00ca2a, 0x080c2400, 0x080e1424,
-	0x064c2228, 0x060e1528, 0x060e1528, 0x060e1528, 0x060e1528,
-	0x09210a68, 0x06090628, 0x02828ae9, 0x06090628, 0x06a00028,
-	0x0a007a2a, 0x080c2440, 0x064c2228, 0x09210a68, 0x06090628,
-	0x02828ae9, 0x06090628, 0x0688d068, 0x02c28aa8, 0x09441a30,
-	0x0c781780, 0x06090628, 0x09441ab0, 0x06031f2a, 0x0680016b,
-	0x09510ae9, 0x0c781600, 0x06031e2b, 0x0aa241eb, 0x06a0002a,
-	0x0aa1c1ab, 0x06b0002a, 0x0aa1416b, 0x0aa1026b, 0x06800070,
-	0x0690002a, 0x06800030, 0x06490628, 0x0aefcc28, 0x06c0002a,
-	0x068408a8, 0x02c28aa8, 0x09441a30, 0x06090628, 0x06090629,
-	0x069fffec, 0x06900028, 0x0a00ba2a, 0x080c2400, 0x064c222e,
-	0x0609062e, 0x09210a2e, 0x09c28068, 0x02828b28, 0x09828428,
-	0x07801d6d, 0x095e1a2d, 0x06090628, 0x06a00028, 0x0a00ba2a,
-	0x080c2440, 0x064c2228, 0x06090628, 0x09210a28, 0x09c28068,
-	0x02828b28, 0x09828428, 0x07801ded, 0x095e1a2d, 0x06090628,
-	0x068c5828, 0x02c28aa8, 0x09441a30, 0x06090628, 0x06860828,
-	0x02c28aa8, 0x09441a30, 0x06090628, 0x06900028, 0x0a00ba2a,
-	0x080c2410, 0x064c222f, 0x0609062f, 0x09210a2f, 0x09c28068,
-	0x02828b28, 0x09828428, 0x07801dad, 0x095e1a2d, 0x06090628,
-	0x06a00028, 0x0a00ba2a, 0x080c2450, 0x064c2228, 0x06090628,
-	0x09210a28, 0x09c28068, 0x02828b28, 0x09828428, 0x07801e2d,
-	0x095e1a2d, 0x06090628, 0x068ed868, 0x02c28aa8, 0x09441a30,
-	0x06090628, 0x080c24a0, 0x080e1424, 0x064c2228, 0x060e152e,
-	0x060e152f, 0x060e1528, 0x0c780080, 0x060e1528, 0x0cc00000,
-	0x00000000, 0x07800028, 0x078016e9, 0x06800030, 0x09508a68,
-	0x0780016b, 0x0780026a, 0x04601aaa, 0x0c500c00, 0x0aa1416b,
-	0x00000000, 0x06800070, 0x0a61826b, 0x00000000, 0x078003a8,
-	0x04602a28, 0x0c500840, 0x0c7800c0, 0x0c780000, 0x00000000,
-	0x06490628, 0x0aefcc28, 0x06b000a8, 0x09441a30, 0x06090628,
-	0x06090629, 0x069fffeb, 0x06900028, 0x080c2400, 0x080e1424,
-	0x064c2228, 0x060e1528, 0x060e1528, 0x060e1528, 0x060e1528,
-	0x09210a68, 0x06090628, 0x02828ae9, 0x06090628, 0x080c2440,
-	0x064c2228, 0x09210a68, 0x06090628, 0x02828ae9, 0x06090628,
-	0x06b8d068, 0x09441a30, 0x0c781340, 0x06090628, 0x06b0002a,
-	0x09441ab0, 0x06031f2a, 0x0680016b, 0x09510ae9, 0x0c781180,
-	0x06031e2b, 0x0aa1416b, 0x0aa1026b, 0x06800070, 0x0c7ff5c0,
-	0x00000000, 0x06490628, 0x0aefcc28, 0x06b408a8, 0x09441a30,
-	0x06090628, 0x06090629, 0x069fffec, 0x06900028, 0x080c2400,
+	0x044011c7, 0x06808048, 0x02007207, 0x074001c9, 0x0cc00000,
+	0x07c08009, 0x0681f409, 0x04401249, 0x0aefc009, 0x00000000,
+	0x083f0040, 0x083f0000, 0x08090b65, 0x00000000, 0x08090b60,
+	0x06498e07, 0x09807007, 0x068007c9, 0x097051c9, 0x06098e07,
+	0x0681f409, 0x04601249, 0x0c4fffc0, 0x00000000, 0x06800009,
+	0x097051c9, 0x09c07007, 0x06098e07, 0x064c0007, 0x09c07187,
+	0x09807207, 0x060c0007, 0x064c0807, 0x09807347, 0x060c0807,
+	0x083f0040, 0x083f0000, 0x08090b65, 0x0cc00000, 0x08090b60,
+	0x0680001f, 0x07c0149f, 0x07c014df, 0x07c0151f, 0x064c091f,
+	0x07c0175f, 0x07c0005f, 0x06800020, 0x06803fc2, 0x07c01542,
+	0x07c01582, 0x07c015c2, 0x07c01602, 0x060c091f, 0x080c0101,
+	0x080c2901, 0x06840442, 0x060c2e02, 0x064c4027, 0x064c4226,
+	0x024269e6, 0x040089a6, 0x07c006e6, 0x058109a6, 0x07c00726,
+	0x0649cf31, 0x0809c500, 0x0649c707, 0x0aa6c007, 0x09010207,
+	0x092101c7, 0x0401f287, 0x0580528a, 0x0403e247, 0x05806249,
+	0x09610289, 0x0649c709, 0x09610247, 0x0609c709, 0x0400f1c7,
+	0x058041c7, 0x060c0907, 0x07c00987, 0x04401247, 0x07c00609,
+	0x05404287, 0x0649c707, 0x094101c8, 0x0609c707, 0x0400f208,
+	0x05804208, 0x07c009c8, 0x05404208, 0x0961020a, 0x06090808,
+	0x0809c300, 0x0809cb00, 0x0cc00000, 0x00000000, 0x0649c803,
+	0x0aa14003, 0x078014c2, 0x028020c2, 0x07c014c2, 0x0809c800,
+	0x07801502, 0x0aa0c002, 0x06800102, 0x06030502, 0x064c0002,
+	0x0be14042, 0x0ba1d025, 0x06800102, 0x07c01502, 0x08030504,
+	0x06800025, 0x0cc00000, 0x00000000, 0x078001c2, 0x0aa1c002,
+	0x078016c2, 0x078009c3, 0x0a4040c2, 0x00000000, 0x06800102,
+	0x06030502, 0x0cc00000, 0x00000000, 0x0fc02240, 0x0aa4c009,
+	0x0680000a, 0x0b6180c9, 0x0680010a, 0x0fc01280, 0x09422289,
+	0x0c780140, 0x0440128a, 0x0fc01240, 0x0a6fc009, 0x0400128a,
+	0x06800049, 0x03409289, 0x05801249, 0x0f80028a, 0x0b40424a,
+	0x05401249, 0x04401249, 0x0240a24a, 0x0740020a, 0x0cc00000,
+	0x0fc01240, 0x064c441a, 0x0912169a, 0x0aaf801a, 0x0c7e56c0,
+	0x00000000, 0x06490628, 0x0aefcc28, 0x00000000, 0x07800028,
+	0x078016e9, 0x09508a68, 0x068000a8, 0x06c00028, 0x06090628,
+	0x06090629, 0x06881068, 0x06090628, 0x0cc00000, 0x00000000,
+	0x06490628, 0x0aefcc28, 0x06c00028, 0x069001a8, 0x069fffea,
+	0x06090628, 0x06090629, 0x05401a23, 0x06090628, 0x09210a23,
+	0x05401a28, 0x02828aa8, 0x06090628, 0x06985168, 0x0c782700,
+	0x06090628, 0x078003e8, 0x0a6fc028, 0x07800028, 0x078016e9,
+	0x06800030, 0x09508a68, 0x0780016b, 0x07801d2a, 0x04601aaa,
+	0x0c500ec0, 0x0aa4802b, 0x0690002a, 0x0aa4006b, 0x0aa8c36b,
+	0x0aa883eb, 0x0aa3422b, 0x00000000, 0x06a0002a, 0x0aa281eb,
+	0x06c0002a, 0x06b0002a, 0x0aa1c1ab, 0x06c0002a, 0x04602aeb,
+	0x0c500980, 0x0690002a, 0x0c7e4f00, 0x00000000, 0x06490628,
+	0x0aefcc28, 0x068000a8, 0x02c28aa8, 0x09441a30, 0x06090628,
+	0x06090629, 0x069fffeb, 0x06900028, 0x0a00ca2a, 0x080c2400,
+	0x080e1424, 0x064c2228, 0x060e1528, 0x060e1528, 0x060e1528,
+	0x060e1528, 0x09210a68, 0x06090628, 0x02828ae9, 0x06090628,
+	0x06a00028, 0x0a007a2a, 0x080c2440, 0x064c2228, 0x09210a68,
+	0x06090628, 0x02828ae9, 0x06090628, 0x0688d068, 0x02c28aa8,
+	0x09441a30, 0x0c781780, 0x06090628, 0x09441ab0, 0x06031f2a,
+	0x0680016b, 0x09510ae9, 0x0c781600, 0x06031e2b, 0x0aa241eb,
+	0x06a0002a, 0x0aa1c1ab, 0x06b0002a, 0x0aa1416b, 0x0aa1026b,
+	0x06800070, 0x0690002a, 0x06800030, 0x06490628, 0x0aefcc28,
+	0x06c0002a, 0x068408a8, 0x02c28aa8, 0x09441a30, 0x06090628,
+	0x06090629, 0x069fffec, 0x06900028, 0x0a00ba2a, 0x080c2400,
 	0x064c222e, 0x0609062e, 0x09210a2e, 0x09c28068, 0x02828b28,
-	0x09828428, 0x078017ad, 0x095e1a2d, 0x06090628, 0x080c2440,
-	0x064c2228, 0x06090628, 0x09210a28, 0x09c28068, 0x02828b28,
-	0x09828428, 0x06090628, 0x06bc5828, 0x09441a30, 0x06090628,
-	0x06b60828, 0x09441a30, 0x06090628, 0x06900028, 0x080c2410,
-	0x064c222f, 0x0609062f, 0x09210a2f, 0x09c28068, 0x02828b28,
-	0x09828428, 0x078017ad, 0x05801b6d, 0x095e1a2d, 0x06090628,
-	0x080c2450, 0x064c2228, 0x06090628, 0x09210a28, 0x09c28068,
-	0x02828b28, 0x09828428, 0x098283e8, 0x06090628, 0x06bed868,
+	0x09828428, 0x07801d6d, 0x095e1a2d, 0x06090628, 0x06a00028,
+	0x0a00ba2a, 0x080c2440, 0x064c2228, 0x06090628, 0x09210a28,
+	0x09c28068, 0x02828b28, 0x09828428, 0x07801ded, 0x095e1a2d,
+	0x06090628, 0x068c5828, 0x02c28aa8, 0x09441a30, 0x06090628,
+	0x06860828, 0x02c28aa8, 0x09441a30, 0x06090628, 0x06900028,
+	0x0a00ba2a, 0x080c2410, 0x064c222f, 0x0609062f, 0x09210a2f,
+	0x09c28068, 0x02828b28, 0x09828428, 0x07801dad, 0x095e1a2d,
+	0x06090628, 0x06a00028, 0x0a00ba2a, 0x080c2450, 0x064c2228,
+	0x06090628, 0x09210a28, 0x09c28068, 0x02828b28, 0x09828428,
+	0x07801e2d, 0x095e1a2d, 0x06090628, 0x068ed868, 0x02c28aa8,
 	0x09441a30, 0x06090628, 0x080c24a0, 0x080e1424, 0x064c2228,
-	0x060e152e, 0x060e152f, 0x060e1528, 0x060e1528, 0x0cc00000,
-	0x00000000, 0x064e1215, 0x091e1555, 0x0a208055, 0x0c782300,
-	0x0649d915, 0x0900c555, 0x0a6f8015, 0x00000000, 0x078003d5,
-	0x0aa08055, 0x0c780940, 0x07800596, 0x0aa1c016, 0x04401596,
-	0x07c00596, 0x078005d6, 0x04401596, 0x0c7814c0, 0x07c005d6,
-	0x07800916, 0x07800295, 0x05408555, 0x02015595, 0x04003596,
-	0x07c00916, 0x05404595, 0x02016c56, 0x060e1316, 0x07800517,
-	0x0aa0c017, 0x06a16016, 0x06a16196, 0x07c00416, 0x069fffd7,
-	0x044015d7, 0x0aa1c017, 0x00000000, 0x064e1615, 0x09010555,
-	0x0aaec015, 0x04401555, 0x060e1615, 0x06c00016, 0x060e1216,
-	0x06800095, 0x0c781880, 0x07c003d5, 0x0a660095, 0x078005d6,
-	0x0aa18016, 0x04401596, 0x0b210056, 0x07c005d6, 0x0c780bc0,
-	0x00000000, 0x07800956, 0x07800295, 0x05408555, 0x02015595,
+	0x060e152e, 0x060e152f, 0x060e1528, 0x0c780080, 0x060e1528,
+	0x0cc00000, 0x00000000, 0x07800028, 0x078016e9, 0x06800030,
+	0x09508a68, 0x0780016b, 0x0780026a, 0x04601aaa, 0x0c500c00,
+	0x0aa1416b, 0x00000000, 0x06800070, 0x0a61826b, 0x00000000,
+	0x078003a8, 0x04602a28, 0x0c500840, 0x0c7800c0, 0x0c780000,
+	0x00000000, 0x06490628, 0x0aefcc28, 0x06b000a8, 0x09441a30,
+	0x06090628, 0x06090629, 0x069fffeb, 0x06900028, 0x080c2400,
+	0x080e1424, 0x064c2228, 0x060e1528, 0x060e1528, 0x060e1528,
+	0x060e1528, 0x09210a68, 0x06090628, 0x02828ae9, 0x06090628,
+	0x080c2440, 0x064c2228, 0x09210a68, 0x06090628, 0x02828ae9,
+	0x06090628, 0x06b8d068, 0x09441a30, 0x0c781340, 0x06090628,
+	0x06b0002a, 0x09441ab0, 0x06031f2a, 0x0680016b, 0x09510ae9,
+	0x0c781180, 0x06031e2b, 0x0aa1416b, 0x0aa1026b, 0x06800070,
+	0x0c7ff5c0, 0x00000000, 0x06490628, 0x0aefcc28, 0x06b408a8,
+	0x09441a30, 0x06090628, 0x06090629, 0x069fffec, 0x06900028,
+	0x080c2400, 0x064c222e, 0x0609062e, 0x09210a2e, 0x09c28068,
+	0x02828b28, 0x09828428, 0x078017ad, 0x095e1a2d, 0x06090628,
+	0x080c2440, 0x064c2228, 0x06090628, 0x09210a28, 0x09c28068,
+	0x02828b28, 0x09828428, 0x06090628, 0x06bc5828, 0x09441a30,
+	0x06090628, 0x06b60828, 0x09441a30, 0x06090628, 0x06900028,
+	0x080c2410, 0x064c222f, 0x0609062f, 0x09210a2f, 0x09c28068,
+	0x02828b28, 0x09828428, 0x078017ad, 0x05801b6d, 0x095e1a2d,
+	0x06090628, 0x080c2450, 0x064c2228, 0x06090628, 0x09210a28,
+	0x09c28068, 0x02828b28, 0x09828428, 0x098283e8, 0x06090628,
+	0x06bed868, 0x09441a30, 0x06090628, 0x080c24a0, 0x080e1424,
+	0x064c2228, 0x060e152e, 0x060e152f, 0x060e1528, 0x060e1528,
+	0x0cc00000, 0x00000000, 0x064e1215, 0x091e1555, 0x0a208055,
+	0x0c782300, 0x0649d915, 0x0900c555, 0x0a6f8015, 0x00000000,
+	0x078003d5, 0x0aa08055, 0x0c780940, 0x07800596, 0x0aa1c016,
+	0x04401596, 0x07c00596, 0x078005d6, 0x04401596, 0x0c7814c0,
+	0x07c005d6, 0x07800916, 0x07800295, 0x05408555, 0x02015595,
+	0x04003596, 0x07c00916, 0x05404595, 0x02016c56, 0x060e1316,
+	0x07800517, 0x0aa0c017, 0x06a16016, 0x06a16196, 0x07c00416,
+	0x069fffd7, 0x044015d7, 0x0aa1c017, 0x00000000, 0x064e1615,
+	0x09010555, 0x0aaec015, 0x04401555, 0x060e1615, 0x06c00016,
+	0x060e1216, 0x06800095, 0x0c781880, 0x07c003d5, 0x0a660095,
+	0x078005d6, 0x0aa18016, 0x04401596, 0x0b210056, 0x07c005d6,
+	0x0c780bc0, 0x00000000, 0x07800956, 0x07800295, 0x05408555,
+	0x02015595, 0x04003596, 0x07c00956, 0x05404595, 0x02016c56,
+	0x060e1316, 0x07800415, 0x09c151d5, 0x06c00015, 0x060e1215,
+	0x068000d5, 0x0c781280, 0x07c003d5, 0x0aa080d5, 0x0c780700,
+	0x07800516, 0x0aa0c016, 0x06800017, 0x06800317, 0x060e1417,
+	0x07800795, 0x07c00755, 0x0683ffd5, 0x064e1516, 0x0900c5d6,
+	0x0a40b5d5, 0x091845d6, 0x07c00797, 0x064e1516, 0x064e1516,
+	0x064e1516, 0x080c24e0, 0x060c2216, 0x064e1516, 0x0c780200,
+	0x060c2216, 0x068000d6, 0x07c00796, 0x06800016, 0x080c24e0,
+	0x060c2216, 0x060c2216, 0x0aa080a0, 0x0c780a00, 0x078003d5,
+	0x0a644115, 0x07800956, 0x068ac015, 0x05408555, 0x02015595,
 	0x04003596, 0x07c00956, 0x05404595, 0x02016c56, 0x060e1316,
-	0x07800415, 0x09c151d5, 0x06c00015, 0x060e1215, 0x068000d5,
-	0x0c781280, 0x07c003d5, 0x0aa080d5, 0x0c780700, 0x07800516,
-	0x0aa0c016, 0x06800017, 0x06800317, 0x060e1417, 0x07800795,
-	0x07c00755, 0x0683ffd5, 0x064e1516, 0x0900c5d6, 0x0a40b5d5,
-	0x091845d6, 0x07c00797, 0x064e1516, 0x064e1516, 0x064e1516,
-	0x080c24e0, 0x060c2216, 0x064e1516, 0x0c780200, 0x060c2216,
-	0x068000d6, 0x07c00796, 0x06800016, 0x080c24e0, 0x060c2216,
-	0x060c2216, 0x0aa080a0, 0x0c780a00, 0x078003d5, 0x0a644115,
-	0x07800956, 0x068ac015, 0x05408555, 0x02015595, 0x04003596,
-	0x07c00956, 0x05404595, 0x02016c56, 0x060e1316, 0x06a16015,
-	0x09c151d5, 0x06c00015, 0x060e1215, 0x06800195, 0x0c780640,
-	0x07c003d5, 0x0aa0c195, 0x0c780500, 0x00000000, 0x06431e18,
-	0x0befc058, 0x064e1418, 0x080e1400, 0x064e1516, 0x0683ffd5,
-	0x0900c5d6, 0x09203656, 0x0a8045d5, 0x091845d6, 0x068000d7,
-	0x06800019, 0x07c004d7, 0x090015d9, 0x07c00497, 0x090225d9,
-	0x07c01117, 0x060e1418, 0x06800015, 0x07c003d5, 0x0cc00000,
-	0x00400000, 0x06800047, 0x07c003c7, 0x07800507, 0x050011c7,
-	0x07c00507, 0x064e1608, 0x09010208, 0x04001208, 0x060e1608,
-	0x0aa0c007, 0x06800008, 0x06800308, 0x060e1408, 0x06b7ffc7,
-	0x06c00007, 0x060e1507, 0x060e1524, 0x060e1524, 0x060e1524,
-	0x060e1524, 0x0cc00000, 0x08030580, 0x078003c7, 0x0a6fc007,
-	0x07800447, 0x0aa0c0c7, 0x0aa98347, 0x0a638107, 0x07800507,
-	0x050011c7, 0x07c00507, 0x06800047, 0x07c003c7, 0x080c24e0,
-	0x064c2207, 0x064c2208, 0x080c24c0, 0x060c2207, 0x060c2208,
-	0x0cc00000, 0x08030580, 0x06800047, 0x07c003c7, 0x07800507,
-	0x050011c7, 0x07c00507, 0x080e1424, 0x064e1509, 0x064e150a,
-	0x064e150b, 0x064e150c, 0x0aa0c007, 0x06800008, 0x06800308,
-	0x060e1408, 0x0683ffc7, 0x07800448, 0x095841c8, 0x07800308,
-	0x096031c8, 0x060e1507, 0x060e1509, 0x060e150a, 0x060e150b,
-	0x060e150c, 0x0cc00000, 0x08030580, 0x07800987, 0x078009c8,
-	0x06800009, 0x0d000008, 0x020091c9, 0x04401249, 0x06800047,
-	0x0ba10089, 0x05801249, 0x0c7fff80, 0x040011c7, 0x0cc00000,
-	0x07c00687, 0x06800208, 0x064c3b07, 0x091031c7, 0x024071c8,
-	0x0f8001c7, 0x0fc0f1c0, 0x064c0e07, 0x040011c7, 0x0f8001c7,
-	0x07800687, 0x0f8001c7, 0x0fc051c0, 0x0c073dc0, 0x07c00107,
-	0x0fc011c0, 0x0aa0c007, 0x0c000640, 0x00000000, 0x078002c7,
-	0x07801988, 0x094c11c8, 0x0c0736c0, 0x060e0407, 0x06800007,
-	0x07c01cc7, 0x078005c7, 0x0b210087, 0x07800988, 0x04002208,
-	0x024081c8, 0x07800947, 0x04401208, 0x02007207, 0x05401208,
-	0x02007207, 0x07c00947, 0x07800987, 0x040011c7, 0x07c005c7,
-	0x0cc00000, 0x00000000, 0x0fc011c0, 0x0a600007, 0x0fc011c0,
-	0x07801408, 0x0f8001c8, 0x0fc011c0, 0x0fc021c0, 0x0fc03200,
-	0x0aa10007, 0x0aa0c047, 0x0fc03200, 0x0fc03200, 0x0cc00000,
-	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x06a16015, 0x09c151d5, 0x06c00015, 0x060e1215, 0x06800195,
+	0x0c780640, 0x07c003d5, 0x0aa0c195, 0x0c780500, 0x00000000,
+	0x06431e18, 0x0befc058, 0x064e1418, 0x080e1400, 0x064e1516,
+	0x0683ffd5, 0x0900c5d6, 0x09203656, 0x0a8045d5, 0x091845d6,
+	0x068000d7, 0x06800019, 0x07c004d7, 0x090015d9, 0x07c00497,
+	0x090225d9, 0x07c01117, 0x060e1418, 0x06800015, 0x07c003d5,
+	0x0cc00000, 0x00400000, 0x06800047, 0x07c003c7, 0x07800507,
+	0x050011c7, 0x07c00507, 0x064e1608, 0x09010208, 0x04001208,
+	0x060e1608, 0x0aa0c007, 0x06800008, 0x06800308, 0x060e1408,
+	0x06b7ffc7, 0x06c00007, 0x060e1507, 0x060e1524, 0x060e1524,
+	0x060e1524, 0x060e1524, 0x0cc00000, 0x08030580, 0x078003c7,
+	0x0a6fc007, 0x07800447, 0x0aa0c0c7, 0x0aa98347, 0x0a638107,
+	0x07800507, 0x050011c7, 0x07c00507, 0x06800047, 0x07c003c7,
+	0x080c24e0, 0x064c2207, 0x064c2208, 0x080c24c0, 0x060c2207,
+	0x060c2208, 0x0cc00000, 0x08030580, 0x06800047, 0x07c003c7,
+	0x07800507, 0x050011c7, 0x07c00507, 0x080e1424, 0x064e1509,
+	0x064e150a, 0x064e150b, 0x064e150c, 0x0aa0c007, 0x06800008,
+	0x06800308, 0x060e1408, 0x0683ffc7, 0x07800448, 0x095841c8,
+	0x07800308, 0x096031c8, 0x060e1507, 0x060e1509, 0x060e150a,
+	0x060e150b, 0x060e150c, 0x0cc00000, 0x08030580, 0x07800987,
+	0x078009c8, 0x06800009, 0x0d000008, 0x020091c9, 0x04401249,
+	0x06800047, 0x0ba10089, 0x05801249, 0x0c7fff80, 0x040011c7,
+	0x0cc00000, 0x07c00687, 0x06800208, 0x064c3b07, 0x091031c7,
+	0x024071c8, 0x0f8001c7, 0x0fc0f1c0, 0x064c0e07, 0x040011c7,
+	0x0f8001c7, 0x07800687, 0x0f8001c7, 0x0fc051c0, 0x0c073d80,
+	0x07c00107, 0x0fc011c0, 0x0aa0c007, 0x0c000640, 0x00000000,
+	0x078002c7, 0x07801988, 0x094c11c8, 0x0c073680, 0x060e0407,
+	0x06800007, 0x07c01cc7, 0x078005c7, 0x0b210087, 0x07800988,
+	0x04002208, 0x024081c8, 0x07800947, 0x04401208, 0x02007207,
+	0x05401208, 0x02007207, 0x07c00947, 0x07800987, 0x040011c7,
+	0x07c005c7, 0x0cc00000, 0x00000000, 0x0fc011c0, 0x0a600007,
+	0x0fc011c0, 0x07801408, 0x0f8001c8, 0x0fc011c0, 0x0fc021c0,
+	0x0fc03200, 0x0aa10007, 0x0aa0c047, 0x0fc03200, 0x0fc03200,
+	0x0cc00000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
@@ -1276,505 +1276,513 @@ const u32 __initconst vmpeg4_mc_5[] = {
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x06bff7c0, 0x06032400, 0x00400000, 0x0c780000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x06bff7c0, 0x06032400, 0x00400000,
+	0x0c780000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x00000000, 0x00000000, 0x0cc00000, 0x00400000,
-	0x0cc00000, 0x00400000, 0x0cc00000, 0x00400000, 0x0cc00000,
-	0x00400000, 0x0cc00000, 0x00400000, 0x0c780200, 0x06431e07,
-	0x0cc00000, 0x00400000, 0x0cc00000, 0x00400000, 0x0cc00000,
-	0x00400000, 0x09027207, 0x0a654048, 0x068fdfca, 0x06feffca,
-	0x064e0408, 0x02808288, 0x09108287, 0x0ba0c08a, 0x064c0909,
-	0x098083c8, 0x0ac0424a, 0x09208287, 0x0a60c00a, 0x0400128a,
-	0x09808388, 0x0b80324a, 0x00000000, 0x098081c8, 0x0c780d40,
-	0x060e0408, 0x0c780cc0, 0x00000000, 0x0a6f8088, 0x0680002c,
-	0x080e1424, 0x09110a47, 0x06431f2a, 0x069fffeb, 0x06490628,
-	0x0aefcc28, 0x05404a2c, 0x060c2428, 0x068010a8, 0x02c28aa8,
-	0x09462a2c, 0x06090628, 0x06090629, 0x064c2228, 0x060e1528,
-	0x09210b68, 0x06090628, 0x02828aed, 0x06090628, 0x06a00028,
-	0x0a009a2a, 0x05404a2c, 0x098281a8, 0x060c2428, 0x064c2228,
-	0x09210b68, 0x06090628, 0x02828aed, 0x06090628, 0x0ba9c0ec,
-	0x04001b2c, 0x06881068, 0x02c28aa8, 0x06090628, 0x080c2480,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0cc00000,
+	0x00400000, 0x0cc00000, 0x00400000, 0x0cc00000, 0x00400000,
+	0x0cc00000, 0x00400000, 0x0cc00000, 0x00400000, 0x0c780200,
+	0x06431e07, 0x0cc00000, 0x00400000, 0x0cc00000, 0x00400000,
+	0x0cc00000, 0x00400000, 0x09027207, 0x0a654048, 0x068fdfca,
+	0x06feffca, 0x064e0408, 0x02808288, 0x09108287, 0x0ba0c08a,
+	0x064c0909, 0x098083c8, 0x0ac0424a, 0x09208287, 0x0a60c00a,
+	0x0400128a, 0x09808388, 0x0b80324a, 0x00000000, 0x098081c8,
+	0x0c780d40, 0x060e0408, 0x0c780cc0, 0x00000000, 0x0a6f8088,
+	0x0680002c, 0x080e1424, 0x09110a47, 0x06431f2a, 0x069fffeb,
+	0x06490628, 0x0aefcc28, 0x05404a2c, 0x060c2428, 0x068010a8,
+	0x02c28aa8, 0x09462a2c, 0x06090628, 0x06090629, 0x064c2228,
+	0x060e1528, 0x09210b68, 0x06090628, 0x02828aed, 0x06090628,
+	0x06a00028, 0x0a009a2a, 0x05404a2c, 0x098281a8, 0x060c2428,
 	0x064c2228, 0x09210b68, 0x06090628, 0x02828aed, 0x06090628,
-	0x06a00028, 0x0a006a2a, 0x064c2228, 0x09210b68, 0x06090628,
-	0x02828aed, 0x06090628, 0x08031e00, 0x0cc00000, 0x00400000
+	0x0ba9c0ec, 0x04001b2c, 0x06881068, 0x02c28aa8, 0x06090628,
+	0x080c2480, 0x064c2228, 0x09210b68, 0x06090628, 0x02828aed,
+	0x06090628, 0x06a00028, 0x0a006a2a, 0x064c2228, 0x09210b68,
+	0x06090628, 0x02828aed, 0x06090628, 0x08031e00, 0x0cc00000,
+	0x00400000
 };
 
 const u32 __initconst vmpeg4_mc_311[] = {
-	0x06807801, 0x06800000, 0x0d000001, 0x07400040, 0x0c00b7c0, 0x00000000,
-	0x00000000, 0x00000000, 0x080c0002, 0x080c2903, 0x06bfde80,
-	0x07c017c0, 0x06030400, 0x00400000, 0x0c015300, 0x00000000,
-	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0c7ffe80,
+	0x06807801, 0x06800000, 0x0d000001, 0x07400040, 0x0c00b7c0,
+	0x00000000, 0x00000000, 0x00000000, 0x080c0002, 0x080c2903,
+	0x06bfde80, 0x07c017c0, 0x06030400, 0x00400000, 0x0c015300,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x0c7ffe80, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x0c780400, 0x04001965, 0x0cc00000, 0x00400000,
-	0x0c780480, 0x064c0007, 0x0c795840, 0x06800025, 0x0cc00000,
-	0x00400000, 0x0cc00000, 0x00400000, 0x0cc00000, 0x00400000,
-	0x0c798740, 0x00000000, 0x0cc00000, 0x00400000, 0x00800000,
-	0x078017c9, 0x0c7fff00, 0x06030409, 0x06bfdd89, 0x06030409,
-	0x00400000, 0x07801509, 0x0aa14009, 0x0a608049, 0x0c788d80,
-	0x0a608089, 0x0c7885c0, 0x0be0c807, 0x0c780980, 0x00000000,
-	0x0c785840, 0x00000000, 0x0681f409, 0x04401249, 0x0aefc009,
-	0x00000000, 0x083f0040, 0x083f0000, 0x08090703, 0x08090700,
-	0x06498e07, 0x09807007, 0x068007c9, 0x097051c9, 0x06098e07,
-	0x0681f409, 0x04401249, 0x0aefc009, 0x00000000, 0x06800009,
-	0x097051c9, 0x09c07007, 0x06098e07, 0x064c0007, 0x09c07187,
-	0x09807207, 0x060c0007, 0x064c0807, 0x09807347, 0x060c0807,
-	0x083f0040, 0x083f0000, 0x08090703, 0x08090700, 0x0c789d00,
-	0x00000000, 0x0a20d007, 0x0c7ff700, 0x00000000, 0x07800247,
-	0x0aa10147, 0x040011c7, 0x0c7824c0, 0x07c00247, 0x07800007,
-	0x07800988, 0x0b83f207, 0x0c00b180, 0x06800007, 0x07c00007,
-	0x07800087, 0x0a618047, 0x06a00008, 0x07c00c08, 0x07c00c48,
-	0x07c03988, 0x07c039c8, 0x078025c8, 0x04001208, 0x078009c9,
-	0x0b815248, 0x07c025c8, 0x07800088, 0x0a644008, 0x00000000,
-	0x0fc05200, 0x0a624008, 0x06800147, 0x0fc01200, 0x0aafc008,
-	0x040011c7, 0x0ba245c7, 0x06800007, 0x0c784600, 0x07c02647,
-	0x0fc0b200, 0x0aae0008, 0x06800407, 0x0fc01200, 0x07c02648,
-	0x0c789180, 0x07800048, 0x04001208, 0x07802587, 0x0b8191c8,
-	0x07c00048, 0x078002c7, 0x07801988, 0x094c11c8, 0x060e0407,
-	0x078003c7, 0x0a6fc007, 0x0c00a840, 0x00000000, 0x0c00a5c0,
-	0x06800007, 0x07c01cc7, 0x07c01bc7, 0x07800947, 0x07800988,
-	0x04401208, 0x07c005c8, 0x02007207, 0x05401208, 0x02007207,
-	0x07c00947, 0x06800007, 0x0c780080, 0x07c00047, 0x06800007,
-	0x07c00247, 0x07800087, 0x0aa3c007, 0x080c2805, 0x07802547,
-	0x0aa2c007, 0x080c2800, 0x0fc011c0, 0x0aa20007, 0x06800347,
-	0x07c00147, 0x06800007, 0x07c01387, 0x07c00a07, 0x0c7806c0,
-	0x07c00207, 0x080c2806, 0x064c2807, 0x0a2fc047, 0x058011c7,
-	0x0ba11007, 0x06800049, 0x06800009, 0x044401c7, 0x07800088,
-	0x0a610008, 0x07c01387, 0x0c00c440, 0x00000000, 0x0a60c009,
-	0x068000c8, 0x06800008, 0x07c00148, 0x080c2800, 0x07c00a09,
-	0x07c00209, 0x0aa0c0c8, 0x0a610108, 0x06800007, 0x0fc011c0,
-	0x07c00207, 0x07801388, 0x060c2b08, 0x07800148, 0x0aa20008,
-	0x0aa1c188, 0x0aa18208, 0x0aa14048, 0x06800009, 0x07c00a49,
-	0x0c7805c0, 0x07c00a89, 0x07802509, 0x0aa0c009, 0x080c280b,
-	0x080c280c, 0x064c2807, 0x0a2fc047, 0x058011c7, 0x06820809,
-	0x0a806247, 0x090c6247, 0x07c00a49, 0x09006247, 0x0c780240,
-	0x07c00a89, 0x080c2800, 0x0fc061c0, 0x044201c7, 0x07c00a47,
-	0x0fc061c0, 0x044201c7, 0x07c00a87, 0x080c2800, 0x07800a09,
-	0x09421249, 0x07801cc8, 0x094a1248, 0x060c2c09, 0x07800a07,
-	0x0a60c007, 0x0c781200, 0x06800007, 0x07800247, 0x0ba0c107,
-	0x068001c7, 0x06800247, 0x07802448, 0x02008207, 0x060c2808,
-	0x064c2807, 0x0a2fc047, 0x058011c7, 0x080c2800, 0x0a65c1c8,
-	0x0b60cc07, 0x0c780cc0, 0x00000000, 0x0fc06200, 0x0b6f4388,
-	0x040281c8, 0x0ba24208, 0x0aae8208, 0x06800c87, 0x0aae0248,
-	0x06800c47, 0x0aad8348, 0x06800c07, 0x0c7809c0, 0x040291c8,
-	0x05401208, 0x0fc011c0, 0x09401207, 0x0babc3c8, 0x040681c8,
-	0x0c780800, 0x0fc081c0, 0x0a640208, 0x0ba75107, 0x00000000,
-	0x0fc05200, 0x0aa68688, 0x0b6646c8, 0x040301c8, 0x0b65c508,
-	0x040311c8, 0x05401208, 0x0fc011c0, 0x09401207, 0x0ba489c8,
-	0x040501c8, 0x0c780400, 0x0fc081c0, 0x0aa08248, 0x0a634288,
-	0x0ba30c07, 0x00000000, 0x0fc06200, 0x0b624208, 0x040281c8,
-	0x05401208, 0x0fc011c0, 0x09401207, 0x0ba103c8, 0x040681c8,
-	0x0c780080, 0x0fc081c0, 0x0aa18007, 0x00000000, 0x0fc01200,
-	0x0aa0c008, 0x06800008, 0x024071c8, 0x07800209, 0x0540e249,
-	0x07800248, 0x0ba18108, 0x0b624148, 0x060c2d09, 0x0940d247,
-	0x0c780200, 0x098093c9, 0x0960d247, 0x098097c9, 0x0c780140,
-	0x060c2d09, 0x0960d247, 0x098097c9, 0x060c2f09, 0x07800249,
-	0x0a62c009, 0x064e0408, 0x07800107, 0x09605207, 0x096a5207,
-	0x060e0408, 0x06880008, 0x098083c8, 0x07800507, 0x09581207,
-	0x060e0508, 0x07800249, 0x07800a08, 0x0aa14008, 0x09809249,
-	0x09c09249, 0x0ba10109, 0x078024c8, 0x07802488, 0x05403208,
-	0x09466248, 0x07800bc8, 0x09541248, 0x060c2a09, 0x07800247,
-	0x0a644007, 0x068fdfc7, 0x064e0408, 0x06ffffc7, 0x028081c8,
-	0x07800047, 0x0a60c007, 0x07800007, 0x098083c8, 0x0a60c007,
-	0x040011c7, 0x09808388, 0x07800989, 0x0b803247, 0x00000000,
-	0x098081c8, 0x060e0408, 0x07800247, 0x0a60c007, 0x0c015500,
-	0x00000000, 0x080c0080, 0x07800247, 0x0a6340c7, 0x07800147,
-	0x0aa340c7, 0x0aa30107, 0x0aa0c3c7, 0x0c005fc0, 0x00000000,
-	0x0c010240, 0x00000000, 0x07800007, 0x040011c7, 0x0c015800,
-	0x07c00007, 0x0c7fa6c0, 0x00000000, 0x0c00fcc0, 0x00000000,
-	0x06800009, 0x07c00a49, 0x07c00a89, 0x07c00c09, 0x07c03989,
-	0x07c00c49, 0x0c7ffc80, 0x07c039c9, 0x0fc081c0, 0x0b2187c7,
-	0x0b21cbc7, 0x0aa16c87, 0x0a60ad87, 0x0c780900, 0x0c784bc0,
-	0x0c784b80, 0x0c784b40, 0x00000000, 0x0fc0c1c0, 0x0fc0c200,
-	0x06811009, 0x0b002248, 0x0c7fa480, 0x04000248, 0x09610247,
-	0x0609c709, 0x0400f1c7, 0x058041c7, 0x060c0907, 0x07c00987,
-	0x04401247, 0x07c00609, 0x05404287, 0x0400f208, 0x05804208,
-	0x07c009c8, 0x05404208, 0x0961020a, 0x06090808, 0x06800007,
-	0x07c01c07, 0x07c01d07, 0x060c0307, 0x07c01987, 0x07c01a07,
-	0x0c784400, 0x00000000, 0x0c780000, 0x00000000, 0x064c5126,
-	0x064c4627, 0x07802b88, 0x05410208, 0x07802b49, 0x02008248,
-	0x0580a208, 0x0e000988, 0x00000000, 0x00000000, 0x00000000,
-	0x0f000200, 0x0f010980, 0x09708226, 0x0540a208, 0x020089c8,
-	0x064c4326, 0x02408988, 0x064c4026, 0x02408988, 0x07c02bc8,
-	0x05810208, 0x07c02c08, 0x06800007, 0x07c00007, 0x07c00047,
-	0x068035c8, 0x07400207, 0x0bafffc8, 0x04001208, 0x07c00507,
-	0x07c025c7, 0x06800047, 0x07c00587, 0x07800607, 0x07c005c7,
-	0x0fc101c0, 0x0fc101c0, 0x0fc101c0, 0x0fc101c0, 0x0fc101c0,
-	0x0a61c007, 0x0fc101c0, 0x0a614007, 0x07802607, 0x040011c7,
-	0x0c783780, 0x07c02607, 0x0fc021c0, 0x07c00087, 0x07800308,
-	0x0b624088, 0x0aa18087, 0x0aa08007, 0x0aa10008, 0x04001208,
-	0x0c780100, 0x07c00308, 0x0c783480, 0x00000000, 0x06800023,
-	0x06800024, 0x0a60c087, 0x068ac008, 0x068ae008, 0x07c00288,
-	0x07800087, 0x0a624047, 0x06800047, 0x07802647, 0x0aa18007,
-	0x06800007, 0x06490707, 0x0a20c087, 0x00000000, 0x06800007,
-	0x07c01b07, 0x0fc051c0, 0x0c00aec0, 0x07c00107, 0x0c006b00,
-	0x00000000, 0x07800087, 0x0a618087, 0x078003c7, 0x0a6fc007,
-	0x06800107, 0x07c003c7, 0x08030580, 0x07800087, 0x0a648007,
-	0x00000000, 0x0fc051c0, 0x07c02407, 0x0aa105c7, 0x069fffc7,
-	0x078009c7, 0x058011c7, 0x07c02587, 0x0c006900, 0x00000000,
-	0x07c02487, 0x0c006840, 0x00000000, 0x07c024c7, 0x0fc011c0,
-	0x0c780300, 0x07c02447, 0x0fc011c0, 0x07c02547, 0x0c006640,
-	0x00000000, 0x07c02487, 0x07c024c7, 0x0fc011c0, 0x07c02447,
-	0x0fc011c0, 0x07c02507, 0x06800025, 0x06490908, 0x0ae0c125,
-	0x0bef8048, 0x00000000, 0x06490b08, 0x09808008, 0x098080c8,
-	0x06090b08, 0x09c08008, 0x09c080c8, 0x06090b08, 0x0683ffc8,
-	0x0649bb07, 0x0900c1c7, 0x0aa10007, 0x0aa0c008, 0x0c7fff00,
-	0x04401208, 0x0649c909, 0x0aa10009, 0x06800087, 0x0c7f7680,
-	0x07c01507, 0x07801487, 0x0a608007, 0x0c780580, 0x044011c7,
-	0x0aa0c087, 0x07801549, 0x078015c9, 0x0ae441c9, 0x00000000,
-	0x040a41c9, 0x070001c7, 0x054101c7, 0x0409c209, 0x07000208,
-	0x094101c8, 0x0609cc07, 0x04081209, 0x07000208, 0x09464248,
-	0x09809209, 0x0609c909, 0x08007401, 0x06800009, 0x07c01489,
-	0x06800009, 0x07c01509, 0x07c02609, 0x078014c7, 0x02c07247,
-	0x07802c4a, 0x07802c88, 0x09610288, 0x0be0c047, 0x0c780a40,
-	0x06800008, 0x07802cca, 0x07802d08, 0x09610288, 0x0be0c087,
-	0x0c7808c0, 0x06800048, 0x07802d4a, 0x07802d88, 0x09610288,
-	0x0a278107, 0x06800088, 0x07802dca, 0x07802e08, 0x09610288,
-	0x0a264207, 0x068000c8, 0x07802e4a, 0x07802e88, 0x09610288,
-	0x0a250407, 0x06800108, 0x07802eca, 0x07802f08, 0x09610288,
-	0x0a23c807, 0x06800148, 0x07802f4a, 0x07802f88, 0x09610288,
-	0x0a229007, 0x06800188, 0x07802fca, 0x07803008, 0x09610288,
-	0x0a216007, 0x068001c8, 0x06800047, 0x0c7f6400, 0x07c01507,
-	0x07802007, 0x090041c7, 0x0a8061c8, 0x07800087, 0x0a620087,
-	0x07802007, 0x090841c7, 0x0a4051c8, 0x06800047, 0x03407207,
-	0x0c7ff1c0, 0x02c091c9, 0x07802bc7, 0x0409c248, 0x07400247,
-	0x07802c07, 0x04008249, 0x07400247, 0x07800087, 0x098070c7,
-	0x04081248, 0x07400247, 0x06800047, 0x03407207, 0x078014c9,
-	0x02c091c9, 0x07c014c9, 0x0609b20a, 0x07800087, 0x04001247,
-	0x07c01489, 0x0a608087, 0x0c780340, 0x07801587, 0x07c015c7,
-	0x07c01588, 0x06499109, 0x06099009, 0x07802009, 0x05404249,
-	0x09404248, 0x07c02009, 0x0609910a, 0x0c7800c0, 0x00000000,
-	0x07c01548, 0x07801b07, 0x06800048, 0x06c00008, 0x09421207,
-	0x0c7f7640, 0x06090708, 0x064c0007, 0x0a2fc047, 0x00000000,
-	0x064c3a07, 0x090061c7, 0x0aaec647, 0x00000000, 0x080c2800,
-	0x080c0002, 0x0c7f5440, 0x00000000, 0x0649c007, 0x07c02c47,
-	0x058101c7, 0x07c02c87, 0x0649c107, 0x07c02cc7, 0x058101c7,
-	0x07c02d07, 0x0649c207, 0x07c02d47, 0x058101c7, 0x07c02d87,
-	0x0649c307, 0x07c02dc7, 0x058101c7, 0x07c02e07, 0x0649d007,
-	0x07c02e47, 0x058101c7, 0x07c02e87, 0x0649d107, 0x07c02ec7,
-	0x058101c7, 0x07c02f07, 0x0649d207, 0x07c02f47, 0x058101c7,
-	0x07c02f87, 0x0649d307, 0x07c02fc7, 0x058101c7, 0x07c03007,
-	0x0c008dc0, 0x00000000, 0x08002501, 0x08002605, 0x08002708,
-	0x08002815, 0x08002c14, 0x069fffc2, 0x07c02582, 0x0cc00000,
-	0x00000000, 0x07800a49, 0x0541a249, 0x05c1a249, 0x07c00a49,
-	0x07800a89, 0x0541a249, 0x05c1a249, 0x07c00a89, 0x0c001bc0,
-	0x00000000, 0x0cc00000, 0x00000000, 0x07800149, 0x0aa280c8,
-	0x0aa24108, 0x06800009, 0x07c00c09, 0x07c03989, 0x0680000f,
-	0x07c00c4f, 0x07c039cf, 0x0cc00000, 0x00000000, 0x0cc00000,
-	0x00000000, 0x0700024f, 0x0ba24047, 0x0900638f, 0x0aa1c00e,
-	0x0440134e, 0x04401387, 0x0340d38d, 0x090e938f, 0x0200e34e,
-	0x0400138e, 0x0a21100f, 0x06bfffcd, 0x0300e38d, 0x0400138e,
-	0x0cc00000, 0x0740024e, 0x06800d48, 0x04001208, 0x0bafcf48,
-	0x07400207, 0x07c03607, 0x07c035c7, 0x0cc00000, 0x00000000,
-	0x06a00007, 0x07c00c07, 0x07c00c47, 0x07c00c87, 0x07c00cc7,
-	0x07c00d07, 0x07c00d47, 0x078025c7, 0x0a618007, 0x06800007,
-	0x06803588, 0x04001208, 0x0baff7c8, 0x07400207, 0x0cc00000,
-	0x00000000, 0x07800007, 0x040011c7, 0x0780098a, 0x0b803287,
-	0x06a00007, 0x06a0000d, 0x0a40f1cf, 0x0a4091ce, 0x0a4051cd,
-	0x0680000f, 0x0680000e, 0x0c780500, 0x0680000d, 0x040003cd,
-	0x0c780440, 0x0400038d, 0x0a40f1cd, 0x0680000f, 0x040003ce,
-	0x0c780300, 0x0400034e, 0x0a4071ce, 0x0a4041cd, 0x0400038f,
-	0x0c7801c0, 0x0400034f, 0x0c780140, 0x0680000e, 0x0a4031cd,
-	0x00000000, 0x0680000d, 0x0b40438f, 0x040001ce, 0x0400038f,
-	0x040003c7, 0x0b4053cd, 0x040001cf, 0x0b40338d, 0x040001cd,
-	0x040001ce, 0x0cc00000, 0x00000000, 0x0200f1cf, 0x06bff00d,
-	0x0ac0434f, 0x0680100d, 0x0cc00000, 0x0200f34f, 0x0680100d,
-	0x0b40234f, 0x0cc00000, 0x0680100d, 0x0cc00000, 0x0240f34f,
-	0x078003c7, 0x0a6fc007, 0x07800147, 0x0aa10347, 0x07900c0f,
-	0x0c780140, 0x00000000, 0x07900a4f, 0x0c780200, 0x00000000,
-	0x07900c8e, 0x0c07efc0, 0x07900d0d, 0x0c07f9c0, 0x07900a4f,
-	0x07c00a4f, 0x07c00c0f, 0x0400024f, 0x07800147, 0x0aa10347,
-	0x07900c4f, 0x0c780140, 0x00000000, 0x07900a8f, 0x0c780200,
-	0x00000000, 0x07900cce, 0x0c07ebc0, 0x07900d4d, 0x0c07f5c0,
-	0x07900a8f, 0x07c00a8f, 0x07c00c4f, 0x0cc00000, 0x00000000,
-	0x060e0709, 0x091e13c7, 0x0aa1000f, 0x04000347, 0x0680000d,
-	0x0240d1cd, 0x060e060d, 0x0680000d, 0x064e060e, 0x0aa0c00f,
-	0x0580538e, 0x0240e38d, 0x0200e20e, 0x0aa0c008, 0x0cc00000,
-	0x0240d1ce, 0x09145349, 0x0240d349, 0x0954524d, 0x060e0709,
-	0x06800009, 0x064e060d, 0x0a60c00f, 0x0580534d, 0x0240d349,
-	0x0cc00000, 0x00000000, 0x0200a28f, 0x05c013ca, 0x0480128a,
-	0x0cc00000, 0x02c0f28f, 0x07801988, 0x094c11c8, 0x0c07dd40,
-	0x060e0407, 0x0c07dac0, 0x06800007, 0x07c01cc7, 0x07c01bc7,
-	0x07c00907, 0x0cc00000, 0x07c00947, 0x0fc011c0, 0x0aa18007,
-	0x06800047, 0x0fc011c0, 0x0aa0c007, 0x06800087, 0x06800107,
-	0x0cc00000, 0x00000000, 0x0780000f, 0x0580338f, 0x0680368d,
-	0x0200d38d, 0x0700034d, 0x048073cf, 0x054013cf, 0x0380d3cd,
-	0x0900234d, 0x054023cd, 0x07c0364f, 0x078035ce, 0x0a20810e,
-	0x0c781ec0, 0x0480c34f, 0x0a66000d, 0x07803608, 0x04814348,
-	0x0aa5000d, 0x05000207, 0x0a61c10d, 0x0be44807, 0x05000207,
-	0x0be3c407, 0x05008207, 0x0c780340, 0x0500c207, 0x0a61c40d,
-	0x0be28807, 0x0503c207, 0x0be20407, 0x05034207, 0x0c780180,
-	0x05030207, 0x0a60c50d, 0x0c7800c0, 0x0503c207, 0x06800008,
-	0x0c782f80, 0x0aa0810d, 0x0c7809c0, 0x07803608, 0x04814348,
-	0x0a61c00d, 0x0bee8807, 0x05000207, 0x0bee0207, 0x05010207,
-	0x0c7ffd80, 0x05014207, 0x0a62410d, 0x0be6c807, 0x05000207,
-	0x0ba10207, 0x0b60c607, 0x0c7805c0, 0x05018207, 0x0c780540,
-	0x0501c207, 0x0a62840d, 0x0a214807, 0x0be44207, 0x05028207,
-	0x0c7803c0, 0x0502c207, 0x0be34407, 0x05034207, 0x0c7802c0,
-	0x05030207, 0x0a62050d, 0x0a214807, 0x0be1c207, 0x05028207,
-	0x0c780140, 0x0502c207, 0x0c7800c0, 0x0503c207, 0x06800008,
-	0x0c782580, 0x0aa0820d, 0x0c780800, 0x07803608, 0x04814348,
-	0x0aa5400d, 0x0a62810d, 0x0a214807, 0x0be64407, 0x05030207,
-	0x0c7805c0, 0x05034207, 0x0be54207, 0x0502c207, 0x0c7804c0,
-	0x05028207, 0x0a62440d, 0x0be40807, 0x0503c207, 0x0ba10207,
-	0x0b60c607, 0x0c780300, 0x05024207, 0x0c780280, 0x05020207,
-	0x0a61c50d, 0x0be1c807, 0x0503c207, 0x0be14207, 0x0502c207,
-	0x0c7800c0, 0x05028207, 0x06800008, 0x0c781d40, 0x0a66030d,
-	0x07803608, 0x04814348, 0x0aa4400d, 0x0a62010d, 0x0a214807,
-	0x0be44407, 0x05030207, 0x0c7803c0, 0x05034207, 0x0c780340,
-	0x0503c207, 0x0a61c40d, 0x0be28807, 0x0503c207, 0x0be20407,
-	0x05034207, 0x0c780180, 0x05030207, 0x0a60c50d, 0x0c7800c0,
-	0x0503c207, 0x06800008, 0x0c781740, 0x0480c34f, 0x0a64800d,
-	0x07803608, 0x04814348, 0x0aa2c00d, 0x0a60810d, 0x0c7fe1c0,
-	0x0a61c40d, 0x0a228807, 0x05000207, 0x0be20407, 0x0500c207,
-	0x0c780180, 0x05008207, 0x0a60c50d, 0x0c7800c0, 0x05000207,
-	0x06800008, 0x0c781280, 0x0aa0810d, 0x0c780680, 0x07803608,
-	0x04814348, 0x0a60800d, 0x0c7fe300, 0x0a60810d, 0x0c7fe440,
-	0x0a62840d, 0x0a214807, 0x0be40407, 0x0500c207, 0x0c780380,
-	0x05008207, 0x0be30207, 0x05010207, 0x0c780280, 0x05014207,
-	0x0a61c50d, 0x0be1c807, 0x05000207, 0x0be14207, 0x05010207,
-	0x0c7800c0, 0x05014207, 0x06800008, 0x0c780bc0, 0x0aa0820d,
-	0x0c780680, 0x07803608, 0x04814348, 0x0a61c00d, 0x0a254807,
-	0x05000207, 0x0be4c207, 0x05014207, 0x0c780440, 0x05010207,
-	0x0a62810d, 0x0a214807, 0x0be34207, 0x05014207, 0x0c7802c0,
-	0x05010207, 0x0be24407, 0x05008207, 0x0c7801c0, 0x0500c207,
-	0x0a60840d, 0x0c7fe4c0, 0x0a60850d, 0x0c7fe680, 0x06800008,
-	0x0c780500, 0x0a64c30d, 0x07803608, 0x04814348, 0x0aa3c00d,
-	0x05000207, 0x0a61c10d, 0x0be30807, 0x05000207, 0x0be28407,
-	0x05008207, 0x0c780200, 0x0500c207, 0x0a60840d, 0x0c7fe7c0,
-	0x0a60c50d, 0x0c7800c0, 0x0503c207, 0x06800008, 0x0c780040,
-	0x07c035cf, 0x07c03608, 0x07c01388, 0x05802208, 0x0780000f,
-	0x0580338f, 0x0680368d, 0x0200d38d, 0x0700034e, 0x048073cf,
-	0x054013cf, 0x038073ce, 0x094021c8, 0x034073c7, 0x06800048,
-	0x034083c8, 0x04401208, 0x02808388, 0x02c0e207, 0x0cc00000,
-	0x0740034e, 0x060c0a07, 0x078000c8, 0x0aa24008, 0x06800009,
-	0x0aa1c1c8, 0x06800049, 0x05401247, 0x0400b249, 0x0b403247,
-	0x06800049, 0x06800009, 0x07c00bc9, 0x0b218107, 0x0ae08207,
-	0x0c780ec0, 0x0b218607, 0x0c780980, 0x00000000, 0x06a02009,
-	0x0c781140, 0x06820207, 0x0aa7c247, 0x068f1749, 0x0aa74287,
-	0x068e5749, 0x0aa6c2c7, 0x068d9549, 0x0aa64307, 0x068cd549,
-	0x0aa5c347, 0x068c53c9, 0x0aa54387, 0x068bd3c9, 0x0aa4c3c7,
-	0x068b5249, 0x0aa44407, 0x068ad249, 0x0aa3c447, 0x068a5109,
-	0x0aa34487, 0x0689d109, 0x0aa2c4c7, 0x06899009, 0x0aa24507,
-	0x06895009, 0x0aa1c547, 0x0688cf09, 0x0aa14587, 0x06888f09,
-	0x0aa0c5c7, 0x06884e49, 0x06880e49, 0x0c780740, 0x00000000,
-	0x0aa34647, 0x06878d89, 0x0aa2c687, 0x06870cc9, 0x0aa246c7,
-	0x0686cc49, 0x0aa1c707, 0x06868bc9, 0x0aa14747, 0x06860b49,
-	0x0aa0c787, 0x0685cac9, 0x06858a49, 0x05401207, 0x04410208,
-	0x044061c7, 0x054081c7, 0x0c780440, 0x094081c8, 0x0aa1c147,
-	0x06999c89, 0x0aa14187, 0x06955c89, 0x0aa0c1c7, 0x06925989,
-	0x06901989, 0x0c7800c0, 0x0c7800c0, 0x04008207, 0x05401207,
-	0x0400d1c7, 0x054071c7, 0x0c780080, 0x094081c8, 0x07c002c7,
-	0x05410249, 0x060e0809, 0x06b00008, 0x064c2d09, 0x09610248,
-	0x060c2d09, 0x09610208, 0x060c2f08, 0x07801988, 0x094c11c8,
-	0x0cc00000, 0x060e0407, 0x0680001f, 0x07c0149f, 0x07c014df,
-	0x07c0151f, 0x07c0261f, 0x07c0031f, 0x064c091f, 0x07c00082,
-	0x06803fc2, 0x07c01542, 0x07c01582, 0x07c015c2, 0x07c02002,
-	0x060c091f, 0x080c0101, 0x080c2903, 0x06840442, 0x060c2e02,
-	0x064c4027, 0x064c4226, 0x024269e6, 0x040089a6, 0x07c02b66,
-	0x058109a6, 0x07c02ba6, 0x0649cf30, 0x0809c500, 0x0809c700,
-	0x0809c300, 0x0809cb00, 0x0cc00000, 0x00000000, 0x0649c803,
-	0x0aa14003, 0x078014c2, 0x028020c2, 0x07c014c2, 0x0809c800,
-	0x07801502, 0x0aa0c002, 0x06800102, 0x06030502, 0x0cc00000,
-	0x00000000, 0x06800402, 0x060c0802, 0x06800002, 0x060c4402,
-	0x06800002, 0x06c07802, 0x060c4002, 0x06bffe02, 0x06c07fc2,
-	0x060c4202, 0x06800002, 0x06c07802, 0x060c4102, 0x06800082,
-	0x060c4802, 0x06bffe02, 0x06c07fc2, 0x060c4502, 0x06810002,
-	0x060c4402, 0x06810042, 0x060c4402, 0x06810002, 0x060c4402,
-	0x068000c2, 0x060c4802, 0x06800082, 0x060c4802, 0x06810182,
-	0x06c00442, 0x060c4402, 0x0cc00000, 0x00000000, 0x064c4419,
-	0x09121659, 0x0aaf8019, 0x0c7ea980, 0x00000000, 0x06490628,
-	0x0aefcc28, 0x00000000, 0x07800028, 0x078025e9, 0x09508a68,
-	0x068000a8, 0x06c00028, 0x06090628, 0x06090629, 0x06881068,
-	0x06090628, 0x0cc00000, 0x00000000, 0x07800028, 0x078025e9,
-	0x09508a68, 0x0780016b, 0x0aa4c0eb, 0x0aa4812b, 0x07801d2a,
-	0x04601aaa, 0x0c500c00, 0x0aa5002b, 0x0690002a, 0x0aa4806b,
-	0x0aa4436b, 0x0aa403eb, 0x0aa3c22b, 0x00000000, 0x06a0002a,
-	0x0aa301eb, 0x06c0002a, 0x06b0002a, 0x0aa241ab, 0x06c0002a,
-	0x0c780000, 0x06800068, 0x06090628, 0x06090629, 0x06889068,
-	0x0c7821c0, 0x06090628, 0x068000a8, 0x02c28aa8, 0x06090628,
-	0x06090629, 0x069fffeb, 0x06900028, 0x0a008a2a, 0x0c002000,
-	0x07900a68, 0x06090628, 0x0c001f40, 0x07900aa8, 0x02828ae8,
-	0x06090628, 0x06a00028, 0x0a008a2a, 0x0c001dc0, 0x07900ae8,
-	0x06090628, 0x0c001d00, 0x07900b28, 0x02828ae8, 0x06090628,
-	0x0688d068, 0x02c28aa8, 0x0c781b00, 0x06090628, 0x0aa3c02b,
-	0x0690002a, 0x0aa3406b, 0x0aa3036b, 0x0aa2c22b, 0x00000000,
-	0x06a0002a, 0x0aa201eb, 0x06c0002a, 0x06b0002a, 0x0aa141ab,
-	0x06c0002a, 0x0aa0c16b, 0x0c7ff440, 0x00000000, 0x068408a8,
-	0x02c28aa8, 0x06090628, 0x06090629, 0x069fffec, 0x06900028,
-	0x0a012a2a, 0x0aa1816b, 0x07900a68, 0x05401a28, 0x06090628,
-	0x0c780180, 0x07900aa8, 0x079011a8, 0x05401a28, 0x06090628,
-	0x07901228, 0x09c28028, 0x05401a28, 0x02828b28, 0x09828428,
-	0x07801d6d, 0x095e1a2d, 0x06090628, 0x06a00028, 0x0a012a2a,
-	0x0aa1816b, 0x07900ae8, 0x05401a28, 0x06090628, 0x0c780180,
-	0x07900b28, 0x079012a8, 0x05401a28, 0x06090628, 0x07901328,
-	0x09c28028, 0x05401a28, 0x02828b28, 0x09828428, 0x07801ded,
-	0x095e1a2d, 0x06090628, 0x068c5828, 0x02c28aa8, 0x06090628,
-	0x06860828, 0x02c28aa8, 0x06090628, 0x06900028, 0x0a012a2a,
-	0x0aa1816b, 0x079016e8, 0x05401a28, 0x06090628, 0x0c780180,
-	0x07901728, 0x079011e8, 0x05401a28, 0x06090628, 0x07901268,
-	0x09c28028, 0x05401a28, 0x02828b28, 0x09828428, 0x07801dad,
-	0x095e1a2d, 0x06090628, 0x06a00028, 0x0a012a2a, 0x0aa1816b,
-	0x07901768, 0x05401a28, 0x06090628, 0x0c780180, 0x079017a8,
-	0x079012e8, 0x05401a28, 0x06090628, 0x07901368, 0x09c28028,
-	0x05401a28, 0x02828b28, 0x09828428, 0x07801e2d, 0x095e1a2d,
-	0x06090628, 0x068ed868, 0x02c28aa8, 0x0c780080, 0x06090628,
-	0x0cc00000, 0x00000000, 0x078019ee, 0x0aa0c06e, 0x00000000,
-	0x05401a28, 0x0cc00000, 0x00000000, 0x078019ee, 0x0aa1006e,
-	0x00000000, 0x05401a28, 0x05401b6d, 0x0cc00000, 0x00000000,
-	0x064e1215, 0x091e1555, 0x0a208055, 0x0c782280, 0x078003d5,
-	0x0aa08055, 0x0c7809c0, 0x07800596, 0x0aa1c016, 0x04401596,
-	0x07c00596, 0x078005d6, 0x04401596, 0x0c7817c0, 0x07c005d6,
-	0x07800916, 0x07800295, 0x05408555, 0x02015595, 0x04003596,
-	0x07c00916, 0x05404595, 0x02016c16, 0x060e1316, 0x07800517,
-	0x0aa0c017, 0x06a16016, 0x06a16196, 0x07c00416, 0x06800017,
-	0x064c3a15, 0x09183555, 0x0be24095, 0x06c00016, 0x0aa1c055,
-	0x0aa18115, 0x064c0015, 0x0be10055, 0x0bae3fd7, 0x040015d7,
-	0x06c00016, 0x060e1216, 0x06800095, 0x0c781880, 0x07c003d5,
-	0x0a658095, 0x078005d6, 0x0aa10016, 0x04401596, 0x0c780ec0,
-	0x07c005d6, 0x07800956, 0x07800295, 0x05408555, 0x02015595,
-	0x04003596, 0x07c00956, 0x05404595, 0x02016c16, 0x060e1316,
-	0x07800415, 0x09c151d5, 0x06c00015, 0x060e1215, 0x068000d5,
-	0x0c781300, 0x07c003d5, 0x0aa080d5, 0x0c780a00, 0x07800516,
-	0x0aa0c016, 0x06800017, 0x06800317, 0x060e1417, 0x07900d15,
-	0x07c00c95, 0x07900d55, 0x07c00cd5, 0x07903a95, 0x07c03a15,
-	0x07903ad5, 0x07c03a55, 0x07800795, 0x07c00755, 0x0683ffd5,
-	0x064e1516, 0x0900c5d6, 0x0a40e5d5, 0x091845d6, 0x07c00797,
-	0x064e1516, 0x064e1516, 0x064e1516, 0x07c00d16, 0x05810596,
-	0x07c00d56, 0x064e1516, 0x07c03a96, 0x05810596, 0x0c780240,
-	0x07c03ad6, 0x068000d6, 0x07c00796, 0x06800016, 0x07c00d16,
-	0x07c00d56, 0x07c03a96, 0x07c03ad6, 0x07800095, 0x0aa08095,
-	0x0c780740, 0x078003d5, 0x0a640115, 0x07800956, 0x07801655,
-	0x05408555, 0x02015595, 0x04003596, 0x07c00956, 0x05404595,
-	0x060e1316, 0x06a16015, 0x09c151d5, 0x06c00015, 0x060e1215,
-	0x06800195, 0x0c7803c0, 0x07c003d5, 0x0aa0c195, 0x0c780280,
-	0x00000000, 0x080e1400, 0x064e1516, 0x0683ffd5, 0x0900c5d6,
-	0x0a8035d5, 0x091845d6, 0x068000d7, 0x07c004d7, 0x06800015,
-	0x07c003d5, 0x0cc00000, 0x00400000, 0x07800507, 0x050011c7,
-	0x07c00507, 0x06800047, 0x07c003c7, 0x07800447, 0x0aa080c7,
-	0x0a608107, 0x0c780440, 0x07800507, 0x0aa0c007, 0x06800008,
-	0x06800308, 0x060e1408, 0x0683ffc7, 0x07800448, 0x095841c8,
-	0x060e1507, 0x07902687, 0x079026c8, 0x096101c8, 0x060e1507,
-	0x060e1507, 0x060e1507, 0x060e1507, 0x0cc00000, 0x08030580,
-	0x078003c7, 0x0a6fc007, 0x07800147, 0x07c00447, 0x07801d07,
-	0x0aa1c007, 0x07900a47, 0x07900c08, 0x07900c49, 0x07c02688,
-	0x0cc00000, 0x07c026c9, 0x07c02687, 0x07800a87, 0x0cc00000,
-	0x07c026c7, 0x07800987, 0x078009c8, 0x06800009, 0x0d000008,
-	0x020091c9, 0x04401249, 0x06800047, 0x0ba10089, 0x05801249,
-	0x0c7fff80, 0x040011c7, 0x0cc00000, 0x07c00687
+	0x00000000, 0x00000000, 0x0c780400, 0x04001965, 0x0cc00000,
+	0x00400000, 0x0c780480, 0x064c0007, 0x0c795840, 0x06800025,
+	0x0cc00000, 0x00400000, 0x0cc00000, 0x00400000, 0x0cc00000,
+	0x00400000, 0x0c798740, 0x00000000, 0x0cc00000, 0x00400000,
+	0x00800000, 0x078017c9, 0x0c7fff00, 0x06030409, 0x06bfdd89,
+	0x06030409, 0x00400000, 0x07801509, 0x0aa14009, 0x0a608049,
+	0x0c788d80, 0x0a608089, 0x0c7885c0, 0x0be0c807, 0x0c780980,
+	0x00000000, 0x0c785840, 0x00000000, 0x0681f409, 0x04401249,
+	0x0aefc009, 0x00000000, 0x083f0040, 0x083f0000, 0x08090703,
+	0x08090700, 0x06498e07, 0x09807007, 0x068007c9, 0x097051c9,
+	0x06098e07, 0x0681f409, 0x04401249, 0x0aefc009, 0x00000000,
+	0x06800009, 0x097051c9, 0x09c07007, 0x06098e07, 0x064c0007,
+	0x09c07187, 0x09807207, 0x060c0007, 0x064c0807, 0x09807347,
+	0x060c0807, 0x083f0040, 0x083f0000, 0x08090703, 0x08090700,
+	0x0c789d00, 0x00000000, 0x0a20d007, 0x0c7ff700, 0x00000000,
+	0x07800247, 0x0aa10147, 0x040011c7, 0x0c7824c0, 0x07c00247,
+	0x07800007, 0x07800988, 0x0b83f207, 0x0c00b180, 0x06800007,
+	0x07c00007, 0x07800087, 0x0a618047, 0x06a00008, 0x07c00c08,
+	0x07c00c48, 0x07c03988, 0x07c039c8, 0x078025c8, 0x04001208,
+	0x078009c9, 0x0b815248, 0x07c025c8, 0x07800088, 0x0a644008,
+	0x00000000, 0x0fc05200, 0x0a624008, 0x06800147, 0x0fc01200,
+	0x0aafc008, 0x040011c7, 0x0ba245c7, 0x06800007, 0x0c784600,
+	0x07c02647, 0x0fc0b200, 0x0aae0008, 0x06800407, 0x0fc01200,
+	0x07c02648, 0x0c789180, 0x07800048, 0x04001208, 0x07802587,
+	0x0b8191c8, 0x07c00048, 0x078002c7, 0x07801988, 0x094c11c8,
+	0x060e0407, 0x078003c7, 0x0a6fc007, 0x0c00a840, 0x00000000,
+	0x0c00a5c0, 0x06800007, 0x07c01cc7, 0x07c01bc7, 0x07800947,
+	0x07800988, 0x04401208, 0x07c005c8, 0x02007207, 0x05401208,
+	0x02007207, 0x07c00947, 0x06800007, 0x0c780080, 0x07c00047,
+	0x06800007, 0x07c00247, 0x07800087, 0x0aa3c007, 0x080c2805,
+	0x07802547, 0x0aa2c007, 0x080c2800, 0x0fc011c0, 0x0aa20007,
+	0x06800347, 0x07c00147, 0x06800007, 0x07c01387, 0x07c00a07,
+	0x0c7806c0, 0x07c00207, 0x080c2806, 0x064c2807, 0x0a2fc047,
+	0x058011c7, 0x0ba11007, 0x06800049, 0x06800009, 0x044401c7,
+	0x07800088, 0x0a610008, 0x07c01387, 0x0c00c440, 0x00000000,
+	0x0a60c009, 0x068000c8, 0x06800008, 0x07c00148, 0x080c2800,
+	0x07c00a09, 0x07c00209, 0x0aa0c0c8, 0x0a610108, 0x06800007,
+	0x0fc011c0, 0x07c00207, 0x07801388, 0x060c2b08, 0x07800148,
+	0x0aa20008, 0x0aa1c188, 0x0aa18208, 0x0aa14048, 0x06800009,
+	0x07c00a49, 0x0c7805c0, 0x07c00a89, 0x07802509, 0x0aa0c009,
+	0x080c280b, 0x080c280c, 0x064c2807, 0x0a2fc047, 0x058011c7,
+	0x06820809, 0x0a806247, 0x090c6247, 0x07c00a49, 0x09006247,
+	0x0c780240, 0x07c00a89, 0x080c2800, 0x0fc061c0, 0x044201c7,
+	0x07c00a47, 0x0fc061c0, 0x044201c7, 0x07c00a87, 0x080c2800,
+	0x07800a09, 0x09421249, 0x07801cc8, 0x094a1248, 0x060c2c09,
+	0x07800a07, 0x0a60c007, 0x0c781200, 0x06800007, 0x07800247,
+	0x0ba0c107, 0x068001c7, 0x06800247, 0x07802448, 0x02008207,
+	0x060c2808, 0x064c2807, 0x0a2fc047, 0x058011c7, 0x080c2800,
+	0x0a65c1c8, 0x0b60cc07, 0x0c780cc0, 0x00000000, 0x0fc06200,
+	0x0b6f4388, 0x040281c8, 0x0ba24208, 0x0aae8208, 0x06800c87,
+	0x0aae0248, 0x06800c47, 0x0aad8348, 0x06800c07, 0x0c7809c0,
+	0x040291c8, 0x05401208, 0x0fc011c0, 0x09401207, 0x0babc3c8,
+	0x040681c8, 0x0c780800, 0x0fc081c0, 0x0a640208, 0x0ba75107,
+	0x00000000, 0x0fc05200, 0x0aa68688, 0x0b6646c8, 0x040301c8,
+	0x0b65c508, 0x040311c8, 0x05401208, 0x0fc011c0, 0x09401207,
+	0x0ba489c8, 0x040501c8, 0x0c780400, 0x0fc081c0, 0x0aa08248,
+	0x0a634288, 0x0ba30c07, 0x00000000, 0x0fc06200, 0x0b624208,
+	0x040281c8, 0x05401208, 0x0fc011c0, 0x09401207, 0x0ba103c8,
+	0x040681c8, 0x0c780080, 0x0fc081c0, 0x0aa18007, 0x00000000,
+	0x0fc01200, 0x0aa0c008, 0x06800008, 0x024071c8, 0x07800209,
+	0x0540e249, 0x07800248, 0x0ba18108, 0x0b624148, 0x060c2d09,
+	0x0940d247, 0x0c780200, 0x098093c9, 0x0960d247, 0x098097c9,
+	0x0c780140, 0x060c2d09, 0x0960d247, 0x098097c9, 0x060c2f09,
+	0x07800249, 0x0a62c009, 0x064e0408, 0x07800107, 0x09605207,
+	0x096a5207, 0x060e0408, 0x06880008, 0x098083c8, 0x07800507,
+	0x09581207, 0x060e0508, 0x07800249, 0x07800a08, 0x0aa14008,
+	0x09809249, 0x09c09249, 0x0ba10109, 0x078024c8, 0x07802488,
+	0x05403208, 0x09466248, 0x07800bc8, 0x09541248, 0x060c2a09,
+	0x07800247, 0x0a644007, 0x068fdfc7, 0x064e0408, 0x06ffffc7,
+	0x028081c8, 0x07800047, 0x0a60c007, 0x07800007, 0x098083c8,
+	0x0a60c007, 0x040011c7, 0x09808388, 0x07800989, 0x0b803247,
+	0x00000000, 0x098081c8, 0x060e0408, 0x07800247, 0x0a60c007,
+	0x0c015500, 0x00000000, 0x080c0080, 0x07800247, 0x0a6340c7,
+	0x07800147, 0x0aa340c7, 0x0aa30107, 0x0aa0c3c7, 0x0c005fc0,
+	0x00000000, 0x0c010240, 0x00000000, 0x07800007, 0x040011c7,
+	0x0c015800, 0x07c00007, 0x0c7fa6c0, 0x00000000, 0x0c00fcc0,
+	0x00000000, 0x06800009, 0x07c00a49, 0x07c00a89, 0x07c00c09,
+	0x07c03989, 0x07c00c49, 0x0c7ffc80, 0x07c039c9, 0x0fc081c0,
+	0x0b2187c7, 0x0b21cbc7, 0x0aa16c87, 0x0a60ad87, 0x0c780900,
+	0x0c784bc0, 0x0c784b80, 0x0c784b40, 0x00000000, 0x0fc0c1c0,
+	0x0fc0c200, 0x06811009, 0x0b002248, 0x0c7fa480, 0x04000248,
+	0x09610247, 0x0609c709, 0x0400f1c7, 0x058041c7, 0x060c0907,
+	0x07c00987, 0x04401247, 0x07c00609, 0x05404287, 0x0400f208,
+	0x05804208, 0x07c009c8, 0x05404208, 0x0961020a, 0x06090808,
+	0x06800007, 0x07c01c07, 0x07c01d07, 0x060c0307, 0x07c01987,
+	0x07c01a07, 0x0c784400, 0x00000000, 0x0c780000, 0x00000000,
+	0x064c5126, 0x064c4627, 0x07802b88, 0x05410208, 0x07802b49,
+	0x02008248, 0x0580a208, 0x0e000988, 0x00000000, 0x00000000,
+	0x00000000, 0x0f000200, 0x0f010980, 0x09708226, 0x0540a208,
+	0x020089c8, 0x064c4326, 0x02408988, 0x064c4026, 0x02408988,
+	0x07c02bc8, 0x05810208, 0x07c02c08, 0x06800007, 0x07c00007,
+	0x07c00047, 0x068035c8, 0x07400207, 0x0bafffc8, 0x04001208,
+	0x07c00507, 0x07c025c7, 0x06800047, 0x07c00587, 0x07800607,
+	0x07c005c7, 0x0fc101c0, 0x0fc101c0, 0x0fc101c0, 0x0fc101c0,
+	0x0fc101c0, 0x0a61c007, 0x0fc101c0, 0x0a614007, 0x07802607,
+	0x040011c7, 0x0c783780, 0x07c02607, 0x0fc021c0, 0x07c00087,
+	0x07800308, 0x0b624088, 0x0aa18087, 0x0aa08007, 0x0aa10008,
+	0x04001208, 0x0c780100, 0x07c00308, 0x0c783480, 0x00000000,
+	0x06800023, 0x06800024, 0x0a60c087, 0x068ac008, 0x068ae008,
+	0x07c00288, 0x07800087, 0x0a624047, 0x06800047, 0x07802647,
+	0x0aa18007, 0x06800007, 0x06490707, 0x0a20c087, 0x00000000,
+	0x06800007, 0x07c01b07, 0x0fc051c0, 0x0c00aec0, 0x07c00107,
+	0x0c006b00, 0x00000000, 0x07800087, 0x0a618087, 0x078003c7,
+	0x0a6fc007, 0x06800107, 0x07c003c7, 0x08030580, 0x07800087,
+	0x0a648007, 0x00000000, 0x0fc051c0, 0x07c02407, 0x0aa105c7,
+	0x069fffc7, 0x078009c7, 0x058011c7, 0x07c02587, 0x0c006900,
+	0x00000000, 0x07c02487, 0x0c006840, 0x00000000, 0x07c024c7,
+	0x0fc011c0, 0x0c780300, 0x07c02447, 0x0fc011c0, 0x07c02547,
+	0x0c006640, 0x00000000, 0x07c02487, 0x07c024c7, 0x0fc011c0,
+	0x07c02447, 0x0fc011c0, 0x07c02507, 0x06800025, 0x06490908,
+	0x0ae0c125, 0x0bef8048, 0x00000000, 0x06490b08, 0x09808008,
+	0x098080c8, 0x06090b08, 0x09c08008, 0x09c080c8, 0x06090b08,
+	0x0683ffc8, 0x0649bb07, 0x0900c1c7, 0x0aa10007, 0x0aa0c008,
+	0x0c7fff00, 0x04401208, 0x0649c909, 0x0aa10009, 0x06800087,
+	0x0c7f7680, 0x07c01507, 0x07801487, 0x0a608007, 0x0c780580,
+	0x044011c7, 0x0aa0c087, 0x07801549, 0x078015c9, 0x0ae441c9,
+	0x00000000, 0x040a41c9, 0x070001c7, 0x054101c7, 0x0409c209,
+	0x07000208, 0x094101c8, 0x0609cc07, 0x04081209, 0x07000208,
+	0x09464248, 0x09809209, 0x0609c909, 0x08007401, 0x06800009,
+	0x07c01489, 0x06800009, 0x07c01509, 0x07c02609, 0x078014c7,
+	0x02c07247, 0x07802c4a, 0x07802c88, 0x09610288, 0x0be0c047,
+	0x0c780a40, 0x06800008, 0x07802cca, 0x07802d08, 0x09610288,
+	0x0be0c087, 0x0c7808c0, 0x06800048, 0x07802d4a, 0x07802d88,
+	0x09610288, 0x0a278107, 0x06800088, 0x07802dca, 0x07802e08,
+	0x09610288, 0x0a264207, 0x068000c8, 0x07802e4a, 0x07802e88,
+	0x09610288, 0x0a250407, 0x06800108, 0x07802eca, 0x07802f08,
+	0x09610288, 0x0a23c807, 0x06800148, 0x07802f4a, 0x07802f88,
+	0x09610288, 0x0a229007, 0x06800188, 0x07802fca, 0x07803008,
+	0x09610288, 0x0a216007, 0x068001c8, 0x06800047, 0x0c7f6400,
+	0x07c01507, 0x07802007, 0x090041c7, 0x0a8061c8, 0x07800087,
+	0x0a620087, 0x07802007, 0x090841c7, 0x0a4051c8, 0x06800047,
+	0x03407207, 0x0c7ff1c0, 0x02c091c9, 0x07802bc7, 0x0409c248,
+	0x07400247, 0x07802c07, 0x04008249, 0x07400247, 0x07800087,
+	0x098070c7, 0x04081248, 0x07400247, 0x06800047, 0x03407207,
+	0x078014c9, 0x02c091c9, 0x07c014c9, 0x0609b20a, 0x07800087,
+	0x04001247, 0x07c01489, 0x0a608087, 0x0c780340, 0x07801587,
+	0x07c015c7, 0x07c01588, 0x06499109, 0x06099009, 0x07802009,
+	0x05404249, 0x09404248, 0x07c02009, 0x0609910a, 0x0c7800c0,
+	0x00000000, 0x07c01548, 0x07801b07, 0x06800048, 0x06c00008,
+	0x09421207, 0x0c7f7640, 0x06090708, 0x064c0007, 0x0a2fc047,
+	0x00000000, 0x064c3a07, 0x090061c7, 0x0aaec647, 0x00000000,
+	0x080c2800, 0x080c0002, 0x0c7f5440, 0x00000000, 0x0649c007,
+	0x07c02c47, 0x058101c7, 0x07c02c87, 0x0649c107, 0x07c02cc7,
+	0x058101c7, 0x07c02d07, 0x0649c207, 0x07c02d47, 0x058101c7,
+	0x07c02d87, 0x0649c307, 0x07c02dc7, 0x058101c7, 0x07c02e07,
+	0x0649d007, 0x07c02e47, 0x058101c7, 0x07c02e87, 0x0649d107,
+	0x07c02ec7, 0x058101c7, 0x07c02f07, 0x0649d207, 0x07c02f47,
+	0x058101c7, 0x07c02f87, 0x0649d307, 0x07c02fc7, 0x058101c7,
+	0x07c03007, 0x0c008dc0, 0x00000000, 0x08002501, 0x08002605,
+	0x08002708, 0x08002815, 0x08002c14, 0x069fffc2, 0x07c02582,
+	0x0cc00000, 0x00000000, 0x07800a49, 0x0541a249, 0x05c1a249,
+	0x07c00a49, 0x07800a89, 0x0541a249, 0x05c1a249, 0x07c00a89,
+	0x0c001bc0, 0x00000000, 0x0cc00000, 0x00000000, 0x07800149,
+	0x0aa280c8, 0x0aa24108, 0x06800009, 0x07c00c09, 0x07c03989,
+	0x0680000f, 0x07c00c4f, 0x07c039cf, 0x0cc00000, 0x00000000,
+	0x0cc00000, 0x00000000, 0x0700024f, 0x0ba24047, 0x0900638f,
+	0x0aa1c00e, 0x0440134e, 0x04401387, 0x0340d38d, 0x090e938f,
+	0x0200e34e, 0x0400138e, 0x0a21100f, 0x06bfffcd, 0x0300e38d,
+	0x0400138e, 0x0cc00000, 0x0740024e, 0x06800d48, 0x04001208,
+	0x0bafcf48, 0x07400207, 0x07c03607, 0x07c035c7, 0x0cc00000,
+	0x00000000, 0x06a00007, 0x07c00c07, 0x07c00c47, 0x07c00c87,
+	0x07c00cc7, 0x07c00d07, 0x07c00d47, 0x078025c7, 0x0a618007,
+	0x06800007, 0x06803588, 0x04001208, 0x0baff7c8, 0x07400207,
+	0x0cc00000, 0x00000000, 0x07800007, 0x040011c7, 0x0780098a,
+	0x0b803287, 0x06a00007, 0x06a0000d, 0x0a40f1cf, 0x0a4091ce,
+	0x0a4051cd, 0x0680000f, 0x0680000e, 0x0c780500, 0x0680000d,
+	0x040003cd, 0x0c780440, 0x0400038d, 0x0a40f1cd, 0x0680000f,
+	0x040003ce, 0x0c780300, 0x0400034e, 0x0a4071ce, 0x0a4041cd,
+	0x0400038f, 0x0c7801c0, 0x0400034f, 0x0c780140, 0x0680000e,
+	0x0a4031cd, 0x00000000, 0x0680000d, 0x0b40438f, 0x040001ce,
+	0x0400038f, 0x040003c7, 0x0b4053cd, 0x040001cf, 0x0b40338d,
+	0x040001cd, 0x040001ce, 0x0cc00000, 0x00000000, 0x0200f1cf,
+	0x06bff00d, 0x0ac0434f, 0x0680100d, 0x0cc00000, 0x0200f34f,
+	0x0680100d, 0x0b40234f, 0x0cc00000, 0x0680100d, 0x0cc00000,
+	0x0240f34f, 0x078003c7, 0x0a6fc007, 0x07800147, 0x0aa10347,
+	0x07900c0f, 0x0c780140, 0x00000000, 0x07900a4f, 0x0c780200,
+	0x00000000, 0x07900c8e, 0x0c07efc0, 0x07900d0d, 0x0c07f9c0,
+	0x07900a4f, 0x07c00a4f, 0x07c00c0f, 0x0400024f, 0x07800147,
+	0x0aa10347, 0x07900c4f, 0x0c780140, 0x00000000, 0x07900a8f,
+	0x0c780200, 0x00000000, 0x07900cce, 0x0c07ebc0, 0x07900d4d,
+	0x0c07f5c0, 0x07900a8f, 0x07c00a8f, 0x07c00c4f, 0x0cc00000,
+	0x00000000, 0x060e0709, 0x091e13c7, 0x0aa1000f, 0x04000347,
+	0x0680000d, 0x0240d1cd, 0x060e060d, 0x0680000d, 0x064e060e,
+	0x0aa0c00f, 0x0580538e, 0x0240e38d, 0x0200e20e, 0x0aa0c008,
+	0x0cc00000, 0x0240d1ce, 0x09145349, 0x0240d349, 0x0954524d,
+	0x060e0709, 0x06800009, 0x064e060d, 0x0a60c00f, 0x0580534d,
+	0x0240d349, 0x0cc00000, 0x00000000, 0x0200a28f, 0x05c013ca,
+	0x0480128a, 0x0cc00000, 0x02c0f28f, 0x07801988, 0x094c11c8,
+	0x0c07dd40, 0x060e0407, 0x0c07dac0, 0x06800007, 0x07c01cc7,
+	0x07c01bc7, 0x07c00907, 0x0cc00000, 0x07c00947, 0x0fc011c0,
+	0x0aa18007, 0x06800047, 0x0fc011c0, 0x0aa0c007, 0x06800087,
+	0x06800107, 0x0cc00000, 0x00000000, 0x0780000f, 0x0580338f,
+	0x0680368d, 0x0200d38d, 0x0700034d, 0x048073cf, 0x054013cf,
+	0x0380d3cd, 0x0900234d, 0x054023cd, 0x07c0364f, 0x078035ce,
+	0x0a20810e, 0x0c781ec0, 0x0480c34f, 0x0a66000d, 0x07803608,
+	0x04814348, 0x0aa5000d, 0x05000207, 0x0a61c10d, 0x0be44807,
+	0x05000207, 0x0be3c407, 0x05008207, 0x0c780340, 0x0500c207,
+	0x0a61c40d, 0x0be28807, 0x0503c207, 0x0be20407, 0x05034207,
+	0x0c780180, 0x05030207, 0x0a60c50d, 0x0c7800c0, 0x0503c207,
+	0x06800008, 0x0c782f80, 0x0aa0810d, 0x0c7809c0, 0x07803608,
+	0x04814348, 0x0a61c00d, 0x0bee8807, 0x05000207, 0x0bee0207,
+	0x05010207, 0x0c7ffd80, 0x05014207, 0x0a62410d, 0x0be6c807,
+	0x05000207, 0x0ba10207, 0x0b60c607, 0x0c7805c0, 0x05018207,
+	0x0c780540, 0x0501c207, 0x0a62840d, 0x0a214807, 0x0be44207,
+	0x05028207, 0x0c7803c0, 0x0502c207, 0x0be34407, 0x05034207,
+	0x0c7802c0, 0x05030207, 0x0a62050d, 0x0a214807, 0x0be1c207,
+	0x05028207, 0x0c780140, 0x0502c207, 0x0c7800c0, 0x0503c207,
+	0x06800008, 0x0c782580, 0x0aa0820d, 0x0c780800, 0x07803608,
+	0x04814348, 0x0aa5400d, 0x0a62810d, 0x0a214807, 0x0be64407,
+	0x05030207, 0x0c7805c0, 0x05034207, 0x0be54207, 0x0502c207,
+	0x0c7804c0, 0x05028207, 0x0a62440d, 0x0be40807, 0x0503c207,
+	0x0ba10207, 0x0b60c607, 0x0c780300, 0x05024207, 0x0c780280,
+	0x05020207, 0x0a61c50d, 0x0be1c807, 0x0503c207, 0x0be14207,
+	0x0502c207, 0x0c7800c0, 0x05028207, 0x06800008, 0x0c781d40,
+	0x0a66030d, 0x07803608, 0x04814348, 0x0aa4400d, 0x0a62010d,
+	0x0a214807, 0x0be44407, 0x05030207, 0x0c7803c0, 0x05034207,
+	0x0c780340, 0x0503c207, 0x0a61c40d, 0x0be28807, 0x0503c207,
+	0x0be20407, 0x05034207, 0x0c780180, 0x05030207, 0x0a60c50d,
+	0x0c7800c0, 0x0503c207, 0x06800008, 0x0c781740, 0x0480c34f,
+	0x0a64800d, 0x07803608, 0x04814348, 0x0aa2c00d, 0x0a60810d,
+	0x0c7fe1c0, 0x0a61c40d, 0x0a228807, 0x05000207, 0x0be20407,
+	0x0500c207, 0x0c780180, 0x05008207, 0x0a60c50d, 0x0c7800c0,
+	0x05000207, 0x06800008, 0x0c781280, 0x0aa0810d, 0x0c780680,
+	0x07803608, 0x04814348, 0x0a60800d, 0x0c7fe300, 0x0a60810d,
+	0x0c7fe440, 0x0a62840d, 0x0a214807, 0x0be40407, 0x0500c207,
+	0x0c780380, 0x05008207, 0x0be30207, 0x05010207, 0x0c780280,
+	0x05014207, 0x0a61c50d, 0x0be1c807, 0x05000207, 0x0be14207,
+	0x05010207, 0x0c7800c0, 0x05014207, 0x06800008, 0x0c780bc0,
+	0x0aa0820d, 0x0c780680, 0x07803608, 0x04814348, 0x0a61c00d,
+	0x0a254807, 0x05000207, 0x0be4c207, 0x05014207, 0x0c780440,
+	0x05010207, 0x0a62810d, 0x0a214807, 0x0be34207, 0x05014207,
+	0x0c7802c0, 0x05010207, 0x0be24407, 0x05008207, 0x0c7801c0,
+	0x0500c207, 0x0a60840d, 0x0c7fe4c0, 0x0a60850d, 0x0c7fe680,
+	0x06800008, 0x0c780500, 0x0a64c30d, 0x07803608, 0x04814348,
+	0x0aa3c00d, 0x05000207, 0x0a61c10d, 0x0be30807, 0x05000207,
+	0x0be28407, 0x05008207, 0x0c780200, 0x0500c207, 0x0a60840d,
+	0x0c7fe7c0, 0x0a60c50d, 0x0c7800c0, 0x0503c207, 0x06800008,
+	0x0c780040, 0x07c035cf, 0x07c03608, 0x07c01388, 0x05802208,
+	0x0780000f, 0x0580338f, 0x0680368d, 0x0200d38d, 0x0700034e,
+	0x048073cf, 0x054013cf, 0x038073ce, 0x094021c8, 0x034073c7,
+	0x06800048, 0x034083c8, 0x04401208, 0x02808388, 0x02c0e207,
+	0x0cc00000, 0x0740034e, 0x060c0a07, 0x078000c8, 0x0aa24008,
+	0x06800009, 0x0aa1c1c8, 0x06800049, 0x05401247, 0x0400b249,
+	0x0b403247, 0x06800049, 0x06800009, 0x07c00bc9, 0x0b218107,
+	0x0ae08207, 0x0c780ec0, 0x0b218607, 0x0c780980, 0x00000000,
+	0x06a02009, 0x0c781140, 0x06820207, 0x0aa7c247, 0x068f1749,
+	0x0aa74287, 0x068e5749, 0x0aa6c2c7, 0x068d9549, 0x0aa64307,
+	0x068cd549, 0x0aa5c347, 0x068c53c9, 0x0aa54387, 0x068bd3c9,
+	0x0aa4c3c7, 0x068b5249, 0x0aa44407, 0x068ad249, 0x0aa3c447,
+	0x068a5109, 0x0aa34487, 0x0689d109, 0x0aa2c4c7, 0x06899009,
+	0x0aa24507, 0x06895009, 0x0aa1c547, 0x0688cf09, 0x0aa14587,
+	0x06888f09, 0x0aa0c5c7, 0x06884e49, 0x06880e49, 0x0c780740,
+	0x00000000, 0x0aa34647, 0x06878d89, 0x0aa2c687, 0x06870cc9,
+	0x0aa246c7, 0x0686cc49, 0x0aa1c707, 0x06868bc9, 0x0aa14747,
+	0x06860b49, 0x0aa0c787, 0x0685cac9, 0x06858a49, 0x05401207,
+	0x04410208, 0x044061c7, 0x054081c7, 0x0c780440, 0x094081c8,
+	0x0aa1c147, 0x06999c89, 0x0aa14187, 0x06955c89, 0x0aa0c1c7,
+	0x06925989, 0x06901989, 0x0c7800c0, 0x0c7800c0, 0x04008207,
+	0x05401207, 0x0400d1c7, 0x054071c7, 0x0c780080, 0x094081c8,
+	0x07c002c7, 0x05410249, 0x060e0809, 0x06b00008, 0x064c2d09,
+	0x09610248, 0x060c2d09, 0x09610208, 0x060c2f08, 0x07801988,
+	0x094c11c8, 0x0cc00000, 0x060e0407, 0x0680001f, 0x07c0149f,
+	0x07c014df, 0x07c0151f, 0x07c0261f, 0x07c0031f, 0x064c091f,
+	0x07c00082, 0x06803fc2, 0x07c01542, 0x07c01582, 0x07c015c2,
+	0x07c02002, 0x060c091f, 0x080c0101, 0x080c2903, 0x06840442,
+	0x060c2e02, 0x064c4027, 0x064c4226, 0x024269e6, 0x040089a6,
+	0x07c02b66, 0x058109a6, 0x07c02ba6, 0x0649cf30, 0x0809c500,
+	0x0809c700, 0x0809c300, 0x0809cb00, 0x0cc00000, 0x00000000,
+	0x0649c803, 0x0aa14003, 0x078014c2, 0x028020c2, 0x07c014c2,
+	0x0809c800, 0x07801502, 0x0aa0c002, 0x06800102, 0x06030502,
+	0x0cc00000, 0x00000000, 0x06800402, 0x060c0802, 0x06800002,
+	0x060c4402, 0x06800002, 0x06c07802, 0x060c4002, 0x06bffe02,
+	0x06c07fc2, 0x060c4202, 0x06800002, 0x06c07802, 0x060c4102,
+	0x06800082, 0x060c4802, 0x06bffe02, 0x06c07fc2, 0x060c4502,
+	0x06810002, 0x060c4402, 0x06810042, 0x060c4402, 0x06810002,
+	0x060c4402, 0x068000c2, 0x060c4802, 0x06800082, 0x060c4802,
+	0x06810182, 0x06c00442, 0x060c4402, 0x0cc00000, 0x00000000,
+	0x064c4419, 0x09121659, 0x0aaf8019, 0x0c7ea980, 0x00000000,
+	0x06490628, 0x0aefcc28, 0x00000000, 0x07800028, 0x078025e9,
+	0x09508a68, 0x068000a8, 0x06c00028, 0x06090628, 0x06090629,
+	0x06881068, 0x06090628, 0x0cc00000, 0x00000000, 0x07800028,
+	0x078025e9, 0x09508a68, 0x0780016b, 0x0aa4c0eb, 0x0aa4812b,
+	0x07801d2a, 0x04601aaa, 0x0c500c00, 0x0aa5002b, 0x0690002a,
+	0x0aa4806b, 0x0aa4436b, 0x0aa403eb, 0x0aa3c22b, 0x00000000,
+	0x06a0002a, 0x0aa301eb, 0x06c0002a, 0x06b0002a, 0x0aa241ab,
+	0x06c0002a, 0x0c780000, 0x06800068, 0x06090628, 0x06090629,
+	0x06889068, 0x0c7821c0, 0x06090628, 0x068000a8, 0x02c28aa8,
+	0x06090628, 0x06090629, 0x069fffeb, 0x06900028, 0x0a008a2a,
+	0x0c002000, 0x07900a68, 0x06090628, 0x0c001f40, 0x07900aa8,
+	0x02828ae8, 0x06090628, 0x06a00028, 0x0a008a2a, 0x0c001dc0,
+	0x07900ae8, 0x06090628, 0x0c001d00, 0x07900b28, 0x02828ae8,
+	0x06090628, 0x0688d068, 0x02c28aa8, 0x0c781b00, 0x06090628,
+	0x0aa3c02b, 0x0690002a, 0x0aa3406b, 0x0aa3036b, 0x0aa2c22b,
+	0x00000000, 0x06a0002a, 0x0aa201eb, 0x06c0002a, 0x06b0002a,
+	0x0aa141ab, 0x06c0002a, 0x0aa0c16b, 0x0c7ff440, 0x00000000,
+	0x068408a8, 0x02c28aa8, 0x06090628, 0x06090629, 0x069fffec,
+	0x06900028, 0x0a012a2a, 0x0aa1816b, 0x07900a68, 0x05401a28,
+	0x06090628, 0x0c780180, 0x07900aa8, 0x079011a8, 0x05401a28,
+	0x06090628, 0x07901228, 0x09c28028, 0x05401a28, 0x02828b28,
+	0x09828428, 0x07801d6d, 0x095e1a2d, 0x06090628, 0x06a00028,
+	0x0a012a2a, 0x0aa1816b, 0x07900ae8, 0x05401a28, 0x06090628,
+	0x0c780180, 0x07900b28, 0x079012a8, 0x05401a28, 0x06090628,
+	0x07901328, 0x09c28028, 0x05401a28, 0x02828b28, 0x09828428,
+	0x07801ded, 0x095e1a2d, 0x06090628, 0x068c5828, 0x02c28aa8,
+	0x06090628, 0x06860828, 0x02c28aa8, 0x06090628, 0x06900028,
+	0x0a012a2a, 0x0aa1816b, 0x079016e8, 0x05401a28, 0x06090628,
+	0x0c780180, 0x07901728, 0x079011e8, 0x05401a28, 0x06090628,
+	0x07901268, 0x09c28028, 0x05401a28, 0x02828b28, 0x09828428,
+	0x07801dad, 0x095e1a2d, 0x06090628, 0x06a00028, 0x0a012a2a,
+	0x0aa1816b, 0x07901768, 0x05401a28, 0x06090628, 0x0c780180,
+	0x079017a8, 0x079012e8, 0x05401a28, 0x06090628, 0x07901368,
+	0x09c28028, 0x05401a28, 0x02828b28, 0x09828428, 0x07801e2d,
+	0x095e1a2d, 0x06090628, 0x068ed868, 0x02c28aa8, 0x0c780080,
+	0x06090628, 0x0cc00000, 0x00000000, 0x078019ee, 0x0aa0c06e,
+	0x00000000, 0x05401a28, 0x0cc00000, 0x00000000, 0x078019ee,
+	0x0aa1006e, 0x00000000, 0x05401a28, 0x05401b6d, 0x0cc00000,
+	0x00000000, 0x064e1215, 0x091e1555, 0x0a208055, 0x0c782280,
+	0x078003d5, 0x0aa08055, 0x0c7809c0, 0x07800596, 0x0aa1c016,
+	0x04401596, 0x07c00596, 0x078005d6, 0x04401596, 0x0c7817c0,
+	0x07c005d6, 0x07800916, 0x07800295, 0x05408555, 0x02015595,
+	0x04003596, 0x07c00916, 0x05404595, 0x02016c16, 0x060e1316,
+	0x07800517, 0x0aa0c017, 0x06a16016, 0x06a16196, 0x07c00416,
+	0x06800017, 0x064c3a15, 0x09183555, 0x0be24095, 0x06c00016,
+	0x0aa1c055, 0x0aa18115, 0x064c0015, 0x0be10055, 0x0bae3fd7,
+	0x040015d7, 0x06c00016, 0x060e1216, 0x06800095, 0x0c781880,
+	0x07c003d5, 0x0a658095, 0x078005d6, 0x0aa10016, 0x04401596,
+	0x0c780ec0, 0x07c005d6, 0x07800956, 0x07800295, 0x05408555,
+	0x02015595, 0x04003596, 0x07c00956, 0x05404595, 0x02016c16,
+	0x060e1316, 0x07800415, 0x09c151d5, 0x06c00015, 0x060e1215,
+	0x068000d5, 0x0c781300, 0x07c003d5, 0x0aa080d5, 0x0c780a00,
+	0x07800516, 0x0aa0c016, 0x06800017, 0x06800317, 0x060e1417,
+	0x07900d15, 0x07c00c95, 0x07900d55, 0x07c00cd5, 0x07903a95,
+	0x07c03a15, 0x07903ad5, 0x07c03a55, 0x07800795, 0x07c00755,
+	0x0683ffd5, 0x064e1516, 0x0900c5d6, 0x0a40e5d5, 0x091845d6,
+	0x07c00797, 0x064e1516, 0x064e1516, 0x064e1516, 0x07c00d16,
+	0x05810596, 0x07c00d56, 0x064e1516, 0x07c03a96, 0x05810596,
+	0x0c780240, 0x07c03ad6, 0x068000d6, 0x07c00796, 0x06800016,
+	0x07c00d16, 0x07c00d56, 0x07c03a96, 0x07c03ad6, 0x07800095,
+	0x0aa08095, 0x0c780740, 0x078003d5, 0x0a640115, 0x07800956,
+	0x07801655, 0x05408555, 0x02015595, 0x04003596, 0x07c00956,
+	0x05404595, 0x060e1316, 0x06a16015, 0x09c151d5, 0x06c00015,
+	0x060e1215, 0x06800195, 0x0c7803c0, 0x07c003d5, 0x0aa0c195,
+	0x0c780280, 0x00000000, 0x080e1400, 0x064e1516, 0x0683ffd5,
+	0x0900c5d6, 0x0a8035d5, 0x091845d6, 0x068000d7, 0x07c004d7,
+	0x06800015, 0x07c003d5, 0x0cc00000, 0x00400000, 0x07800507,
+	0x050011c7, 0x07c00507, 0x06800047, 0x07c003c7, 0x07800447,
+	0x0aa080c7, 0x0a608107, 0x0c780440, 0x07800507, 0x0aa0c007,
+	0x06800008, 0x06800308, 0x060e1408, 0x0683ffc7, 0x07800448,
+	0x095841c8, 0x060e1507, 0x07902687, 0x079026c8, 0x096101c8,
+	0x060e1507, 0x060e1507, 0x060e1507, 0x060e1507, 0x0cc00000,
+	0x08030580, 0x078003c7, 0x0a6fc007, 0x07800147, 0x07c00447,
+	0x07801d07, 0x0aa1c007, 0x07900a47, 0x07900c08, 0x07900c49,
+	0x07c02688, 0x0cc00000, 0x07c026c9, 0x07c02687, 0x07800a87,
+	0x0cc00000, 0x07c026c7, 0x07800987, 0x078009c8, 0x06800009,
+	0x0d000008, 0x020091c9, 0x04401249, 0x06800047, 0x0ba10089,
+	0x05801249, 0x0c7fff80, 0x040011c7, 0x0cc00000, 0x07c00687
 };
 
 const u32 __initconst h263_mc[] = {
-	0x06807801, 0x06800000, 0x0d000001, 0x07400040, 0x0c0140c0, 0x00000000,
-	0x00000000, 0x00000000, 0x080c0002, 0x00000000, 0x06bfde80,
-	0x07c017c0, 0x06030400, 0x00400000, 0x0c019780, 0x00000000,
-	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0c7ffe80,
+	0x0680c001, 0x06800000, 0x0d000001, 0x07400040, 0x0c014a80,
+	0x00000000, 0x00000000, 0x00000000, 0x080c0002, 0x00000000,
+	0x06bfde80, 0x07c017c0, 0x06030400, 0x00400000, 0x0c01a180,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x0c7ffe80, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
 	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x0c780400, 0x04001965, 0x0cc00000, 0x00400000,
-	0x0c780540, 0x064c0007, 0x0c799e80, 0x06800025, 0x0cc00000,
-	0x00400000, 0x0cc00000, 0x00400000, 0x0cc00000, 0x00400000,
-	0x0c79f680, 0x06800025, 0x0cc00000, 0x00400000, 0x06800025,
-	0x00800000, 0x078017c9, 0x0c7ffec0, 0x06030409, 0x0c781240,
-	0x00000000, 0x078001c9, 0x0aa0c009, 0x0c78fc00, 0x00000000,
-	0x06bfdd89, 0x06030409, 0x00400000, 0x07801509, 0x0aa30109,
-	0x07c0151f, 0x0a2bc047, 0x06800025, 0x0aac80c9, 0x0aa14009,
-	0x0a608049, 0x0c790640, 0x0a608089, 0x0c78f840, 0x0a240807,
-	0x0c78b180, 0x00000000, 0x0683ffc8, 0x0ba20048, 0x064c0007,
-	0x0a2f8047, 0x04401208, 0x064c3a07, 0x090061c7, 0x0aae8647,
-	0x00000000, 0x06800007, 0x0c016e00, 0x07c003c7, 0x0c792780,
-	0x0bec9007, 0x078003c7, 0x0a6fc007, 0x07800007, 0x07800988,
-	0x0b81c207, 0x06800007, 0x07c00007, 0x0a61c060, 0x06a00008,
-	0x06e00008, 0x080c24a0, 0x060c2208, 0x0c780240, 0x060c2208,
-	0x0a61c0a0, 0x00000000, 0x080c24c0, 0x080c2200, 0x080c2200,
-	0x080c2200, 0x080c2200, 0x078016c8, 0x04001208, 0x078009c9,
-	0x0b808248, 0x07c016c8, 0x0c020dc0, 0x00000000, 0x078003c7,
-	0x0a6fc007, 0x0c791f80, 0x00000000, 0x07800992, 0x078009d3,
-	0x0680000f, 0x06800010, 0x06800007, 0x07c01507, 0x064c4707,
-	0x06810008, 0x0ac04207, 0x068000c7, 0x0c7feb00, 0x07c01507,
-	0x06490607, 0x0aefcc07, 0x00000000, 0x0540838f, 0x02c0e40e,
-	0x0fc081c0, 0x0a62c007, 0x00000000, 0x06900187, 0x06090607,
-	0x0609060e, 0x08090600, 0x08090600, 0x06985147, 0x06090607,
-	0x0c781f80, 0x00000000, 0x0aa28087, 0x0aa600c7, 0x00000000,
-	0x06800087, 0x06090607, 0x0609060e, 0x06881047, 0x06090607,
-	0x0c781100, 0x00000000, 0x06900087, 0x06090607, 0x0609060e,
-	0x0fc101c0, 0x091a1207, 0x095c11c8, 0x06090607, 0x0fc101c0,
-	0x091a1207, 0x095c11c8, 0x06090607, 0x06985047, 0x06090607,
-	0x0c780d40, 0x00000000, 0x06901087, 0x06090607, 0x0609060e,
-	0x0fc101c0, 0x091a1207, 0x095c11c8, 0x06090607, 0x0fc101c0,
-	0x091a1207, 0x095c11c8, 0x06090607, 0x06901207, 0x06090607,
-	0x0fc101c0, 0x091a1207, 0x095c11c8, 0x06090607, 0x0fc101c0,
-	0x091a1207, 0x095c11c8, 0x06090607, 0x06901407, 0x06090607,
-	0x0fc101c0, 0x091a1207, 0x095c11c8, 0x06090607, 0x0fc101c0,
-	0x091a1207, 0x095c11c8, 0x06090607, 0x06901607, 0x06090607,
-	0x0fc101c0, 0x091a1207, 0x095c11c8, 0x06090607, 0x0fc101c0,
-	0x091a1207, 0x095c11c8, 0x06090607, 0x06981047, 0x06090607,
-	0x0fc101c0, 0x091a1207, 0x095c11c8, 0x06090607, 0x0fc101c0,
-	0x091a1207, 0x095c11c8, 0x06090607, 0x080c2540, 0x080c0a10,
-	0x080c2c01, 0x080c2a00, 0x06800007, 0x098077c7, 0x060c2d07,
-	0x098073c7, 0x060c2f07, 0x0680000d, 0x06800009, 0x064c2407,
-	0x0a20c3c7, 0x0c7fff80, 0x00000000, 0x080c25c0, 0x06800707,
-	0x060e0007, 0x06bc000c, 0x06c0000c, 0x064c2507, 0x0a2fe007,
-	0x00000000, 0x0fc102c0, 0x0a80a30b, 0x0918428b, 0x06800049,
-	0x0aa0c3ca, 0x0c7ffe00, 0x060c240b, 0x060c270b, 0x0fc102c0,
-	0x0c7ffd00, 0x060c240b, 0x0aa14009, 0x00000000, 0x060c240c,
-	0x0c7801c0, 0x00000000, 0x060c2409, 0x064c2507, 0x0a2fe007,
-	0x00000000, 0x060c240c, 0x0400134d, 0x0aa0c18d, 0x0c7ff700,
-	0x00000000, 0x040013cf, 0x0a80348f, 0x0c7fda40, 0x00000000,
-	0x04001410, 0x0a8054d0, 0x00000000, 0x0680000f, 0x0c7fd8c0,
-	0x00000000, 0x06490907, 0x0befc047, 0x00000000, 0x0c78f580,
-	0x00000000, 0x07800347, 0x0a61c007, 0x00000000, 0x064c2907,
-	0x091c21c7, 0x0a60c0c7, 0x0c01ef40, 0x00000000, 0x0aa080a0,
-	0x0c780f40, 0x078003c7, 0x0a6fc007, 0x07801bc8, 0x0a63c008,
-	0x078004c8, 0x0a634348, 0x06800107, 0x07c003c7, 0x08030580,
-	0x068003c9, 0x07c00149, 0x06800007, 0x0c016240, 0x07c01d07,
-	0x07800007, 0x040011c7, 0x0c7fc780, 0x07c00007, 0x0c790300,
-	0x078003c7, 0x0a6fc007, 0x078005c7, 0x0ba0c087, 0x06800007,
-	0x06800047, 0x07c01fc7, 0x07800787, 0x0aa180c7, 0x06810007,
-	0x060e0907, 0x060e0a07, 0x0c780440, 0x060e0b07, 0x07800507,
-	0x0aa0c007, 0x068000c8, 0x068003c8, 0x060e1408, 0x064e1507,
-	0x060e0907, 0x04003208, 0x060e1408, 0x064e1507, 0x060e0a07,
-	0x04003208, 0x060e1408, 0x064e1507, 0x060e0b07, 0x0683ffc7,
-	0x080e1418, 0x060e1507, 0x080e141b, 0x060e1507, 0x080e141e,
-	0x060e1507, 0x080e1421, 0x0c01d1c0, 0x060e1507, 0x0c7854c0,
-	0x00000000, 0x0aa60020, 0x00000000, 0x0fc011c0, 0x0aa58007,
-	0x080c2803, 0x06800347, 0x07c00147, 0x080c24a0, 0x060c2224,
-	0x060c2224, 0x06800007, 0x07c01d07, 0x06800025, 0x064c3c07,
-	0x091011c7, 0x0ae1c225, 0x0aaf8007, 0x064c3c07, 0x091011c7,
-	0x0aae8007, 0x0c7ff0c0, 0x080c2800, 0x0c7fb340, 0x00000000,
-	0x080c2801, 0x064c2807, 0x0a2fc047, 0x064c0008, 0x0a209008,
-	0x0c7fb180, 0x058011c7, 0x09004207, 0x07c00148, 0x090821c7,
-	0x07c00187, 0x0aa140c8, 0x080c2800, 0x0aa0c108, 0x0c781900,
-	0x00000000, 0x0fc011c0, 0x0540e1c7, 0x060c2d07, 0x080c2802,
-	0x064c2807, 0x0a2fc047, 0x058011c7, 0x07800188, 0x09444207,
-	0x07c01388, 0x07800148, 0x0a644108, 0x080c2800, 0x0fc021c0,
-	0x0b61c087, 0x07800109, 0x024091c9, 0x0b620089, 0x04401249,
-	0x0c780180, 0x06800049, 0x020091c9, 0x0b20c809, 0x04401249,
-	0x068007c9, 0x07c00109, 0x0c010540, 0x040001c9, 0x07801fcb,
-	0x0aa1400b, 0x078005c9, 0x0b60c089, 0x0c004880, 0x00000000,
-	0x068fdfca, 0x06feffca, 0x064e0408, 0x02808288, 0x078005ca,
-	0x0ba0c08a, 0x064c0909, 0x098083c8, 0x0ac0424a, 0x0780000a,
-	0x0a60c00a, 0x0400128a, 0x09808388, 0x0b80324a, 0x00000000,
-	0x098081c8, 0x07802007, 0x09605207, 0x07800007, 0x040811c7,
+	0x00000000, 0x00000000, 0x0c780400, 0x04001965, 0x0cc00000,
+	0x00400000, 0x0c780540, 0x064c0007, 0x0c79a880, 0x06800025,
+	0x0cc00000, 0x00400000, 0x0cc00000, 0x00400000, 0x0cc00000,
+	0x00400000, 0x0c7a0080, 0x06800025, 0x0cc00000, 0x00400000,
+	0x06800025, 0x00800000, 0x078017c9, 0x0c7ffec0, 0x06030409,
+	0x0c781240, 0x00000000, 0x078001c9, 0x0aa0c009, 0x0c7905c0,
+	0x00000000, 0x06bfdd89, 0x06030409, 0x00400000, 0x07801509,
+	0x0aa30109, 0x07c0151f, 0x0a2bc047, 0x06800025, 0x0aac80c9,
+	0x0aa14009, 0x0a608049, 0x0c791000, 0x0a608089, 0x0c790200,
+	0x0a240807, 0x0c78bb40, 0x00000000, 0x0683ffc8, 0x0ba20048,
+	0x064c0007, 0x0a2f8047, 0x04401208, 0x064c3a07, 0x090061c7,
+	0x0aae8647, 0x00000000, 0x06800007, 0x0c017800, 0x07c003c7,
+	0x0c793140, 0x0bec9007, 0x078003c7, 0x0a6fc007, 0x07800007,
+	0x07800988, 0x0b81c207, 0x06800007, 0x07c00007, 0x0a61c060,
+	0x06a00008, 0x06e00008, 0x080c24a0, 0x060c2208, 0x0c780240,
+	0x060c2208, 0x0a61c0a0, 0x00000000, 0x080c24c0, 0x080c2200,
+	0x080c2200, 0x080c2200, 0x080c2200, 0x078016c8, 0x04001208,
+	0x078009c9, 0x0b808248, 0x07c016c8, 0x0c0217c0, 0x00000000,
+	0x078003c7, 0x0a6fc007, 0x0c792940, 0x00000000, 0x07800992,
+	0x078009d3, 0x0680000f, 0x06800010, 0x06800007, 0x07c01507,
+	0x064c4707, 0x06810008, 0x0ac04207, 0x068000c7, 0x0c7feb00,
+	0x07c01507, 0x06490607, 0x0aefcc07, 0x00000000, 0x0540838f,
+	0x02c0e40e, 0x0fc081c0, 0x0a62c007, 0x00000000, 0x06900187,
+	0x06090607, 0x0609060e, 0x08090600, 0x08090600, 0x06985147,
+	0x06090607, 0x0c781f80, 0x00000000, 0x0aa28087, 0x0aa600c7,
+	0x00000000, 0x06800087, 0x06090607, 0x0609060e, 0x06881047,
+	0x06090607, 0x0c781100, 0x00000000, 0x06900087, 0x06090607,
+	0x0609060e, 0x0fc101c0, 0x091a1207, 0x095c11c8, 0x06090607,
+	0x0fc101c0, 0x091a1207, 0x095c11c8, 0x06090607, 0x06985047,
+	0x06090607, 0x0c780d40, 0x00000000, 0x06901087, 0x06090607,
+	0x0609060e, 0x0fc101c0, 0x091a1207, 0x095c11c8, 0x06090607,
+	0x0fc101c0, 0x091a1207, 0x095c11c8, 0x06090607, 0x06901207,
+	0x06090607, 0x0fc101c0, 0x091a1207, 0x095c11c8, 0x06090607,
+	0x0fc101c0, 0x091a1207, 0x095c11c8, 0x06090607, 0x06901407,
+	0x06090607, 0x0fc101c0, 0x091a1207, 0x095c11c8, 0x06090607,
+	0x0fc101c0, 0x091a1207, 0x095c11c8, 0x06090607, 0x06901607,
+	0x06090607, 0x0fc101c0, 0x091a1207, 0x095c11c8, 0x06090607,
+	0x0fc101c0, 0x091a1207, 0x095c11c8, 0x06090607, 0x06981047,
+	0x06090607, 0x0fc101c0, 0x091a1207, 0x095c11c8, 0x06090607,
+	0x0fc101c0, 0x091a1207, 0x095c11c8, 0x06090607, 0x080c2540,
+	0x080c0a10, 0x080c2c01, 0x080c2a00, 0x06800007, 0x098077c7,
+	0x060c2d07, 0x098073c7, 0x060c2f07, 0x0680000d, 0x06800009,
+	0x064c2407, 0x0a20c3c7, 0x0c7fff80, 0x00000000, 0x080c25c0,
+	0x06800707, 0x060e0007, 0x06bc000c, 0x06c0000c, 0x064c2507,
+	0x0a2fe007, 0x00000000, 0x0fc102c0, 0x0a80a30b, 0x0918428b,
+	0x06800049, 0x0aa0c3ca, 0x0c7ffe00, 0x060c240b, 0x060c270b,
+	0x0fc102c0, 0x0c7ffd00, 0x060c240b, 0x0aa14009, 0x00000000,
+	0x060c240c, 0x0c7801c0, 0x00000000, 0x060c2409, 0x064c2507,
+	0x0a2fe007, 0x00000000, 0x060c240c, 0x0400134d, 0x0aa0c18d,
+	0x0c7ff700, 0x00000000, 0x040013cf, 0x0a80348f, 0x0c7fda40,
+	0x00000000, 0x04001410, 0x0a8054d0, 0x00000000, 0x0680000f,
+	0x0c7fd8c0, 0x00000000, 0x06490907, 0x0befc047, 0x00000000,
+	0x0c78ff40, 0x00000000, 0x07800347, 0x0aa0c007, 0x0c780880,
+	0x00000000, 0x064c1d07, 0x09227207, 0x0a678008, 0x064c2a08,
+	0x064c3607, 0x091081c7, 0x095101c8, 0x064c3b08, 0x09103248,
+	0x04001209, 0x03807207, 0x0900f207, 0x0a650008, 0x0580f1c7,
+	0x06800048, 0x05407208, 0x03808248, 0x04401208, 0x0a40e207,
+	0x064c1d07, 0x0a60c009, 0x00000000, 0x054081c7, 0x06800009,
+	0x09201207, 0x0a610008, 0x054011c7, 0x0c7fff40, 0x04001249,
+	0x060c0e09, 0x0c01f240, 0x00000000, 0x0aa080a0, 0x0c780f40,
+	0x078003c7, 0x0a6fc007, 0x07801bc8, 0x0a63c008, 0x078004c8,
+	0x0a634348, 0x06800107, 0x07c003c7, 0x08030580, 0x068003c9,
+	0x07c00149, 0x06800007, 0x0c016540, 0x07c01d07, 0x07800007,
+	0x040011c7, 0x0c7fc080, 0x07c00007, 0x0c7905c0, 0x078003c7,
+	0x0a6fc007, 0x078005c7, 0x0ba0c087, 0x06800007, 0x06800047,
+	0x07c01fc7, 0x07800787, 0x0aa180c7, 0x06810007, 0x060e0907,
+	0x060e0a07, 0x0c780440, 0x060e0b07, 0x07800507, 0x0aa0c007,
+	0x068000c8, 0x068003c8, 0x060e1408, 0x064e1507, 0x060e0907,
+	0x04003208, 0x060e1408, 0x064e1507, 0x060e0a07, 0x04003208,
+	0x060e1408, 0x064e1507, 0x060e0b07, 0x0683ffc7, 0x080e1418,
+	0x060e1507, 0x080e141b, 0x060e1507, 0x080e141e, 0x060e1507,
+	0x080e1421, 0x0c01d4c0, 0x060e1507, 0x0c785500, 0x00000000,
+	0x0aa60020, 0x00000000, 0x0fc011c0, 0x0aa58007, 0x080c2803,
+	0x06800347, 0x07c00147, 0x080c24a0, 0x060c2224, 0x060c2224,
+	0x06800007, 0x07c01d07, 0x06800025, 0x064c3c07, 0x091011c7,
+	0x0ae1c225, 0x0aaf8007, 0x064c3c07, 0x091011c7, 0x0aae8007,
+	0x0c7ff0c0, 0x080c2800, 0x0c7fac40, 0x00000000, 0x080c2801,
+	0x064c2807, 0x0a2fc047, 0x064c0008, 0x0a209008, 0x0c7faa80,
+	0x058011c7, 0x09004207, 0x07c00148, 0x090821c7, 0x07c00187,
+	0x0aa140c8, 0x080c2800, 0x0aa0c108, 0x0c781940, 0x00000000,
+	0x0fc011c0, 0x0540e1c7, 0x060c2d07, 0x080c2802, 0x064c2807,
+	0x0a2fc047, 0x058011c7, 0x07800188, 0x09444207, 0x07c01388,
+	0x07800148, 0x0a644108, 0x080c2800, 0x0fc021c0, 0x0b61c087,
+	0x07800109, 0x024091c9, 0x0b620089, 0x04401249, 0x0c780180,
+	0x06800049, 0x020091c9, 0x0b20c809, 0x04401249, 0x068007c9,
+	0x07c00109, 0x0c010800, 0x040001c9, 0x07801fcb, 0x0aa1400b,
+	0x078005c9, 0x0b60c089, 0x0c0048c0, 0x00000000, 0x068fdfca,
+	0x06feffca, 0x064e0408, 0x02808288, 0x078005ca, 0x0ba0c08a,
+	0x064c0909, 0x098083c8, 0x0ac0424a, 0x0780000a, 0x0a60c00a,
+	0x0400128a, 0x09808388, 0x0b80324a, 0x00000000, 0x098081c8,
+	0x07808007, 0x09605207, 0x07800007, 0x06808049, 0x02007247,
 	0x070001c7, 0x096a5207, 0x060e0408, 0x091e1248, 0x07c01fc9,
 	0x07801388, 0x060c2b08, 0x06880008, 0x098083c8, 0x07800507,
 	0x07801989, 0x0a610049, 0x09581207, 0x09808408, 0x098083c8,
 	0x060e0508, 0x06800009, 0x07800bc8, 0x09541248, 0x060c2a09,
 	0x07801c07, 0x0aa1c007, 0x080c2c03, 0x0fc011c0, 0x07c01cc7,
-	0x068000c9, 0x094a1247, 0x060c2c09, 0x0c01b240, 0x00000000,
-	0x080c0080, 0x0c012f80, 0x00000000, 0x080c24a0, 0x080c2200,
+	0x068000c9, 0x094a1247, 0x060c2c09, 0x0c01b500, 0x00000000,
+	0x080c0080, 0x0c013240, 0x00000000, 0x080c24a0, 0x080c2200,
 	0x080c2200, 0x07800007, 0x040011c7, 0x07c00007, 0x07800147,
-	0x0c010580, 0x07c00447, 0x0c7f9000, 0x00000000, 0x0a60c0e0,
+	0x0c010800, 0x07c00447, 0x0c7f88c0, 0x00000000, 0x0a60c0e0,
 	0x06800007, 0x0fc011c0, 0x07c01707, 0x080c2802, 0x064c2807,
 	0x0a2fc047, 0x058011c7, 0x068003c8, 0x024071c8, 0x07800188,
 	0x09444207, 0x07c01388, 0x07800148, 0x0a644048, 0x080c2800,
 	0x0fc021c0, 0x0b61c087, 0x07800109, 0x024091c9, 0x0b620089,
 	0x04401249, 0x0c780180, 0x06800049, 0x020091c9, 0x0b20c809,
-	0x04401249, 0x068007c9, 0x07c00109, 0x0c00ec00, 0x040001c9,
+	0x04401249, 0x068007c9, 0x07c00109, 0x0c00ee80, 0x040001c9,
 	0x07801388, 0x060c2b08, 0x07801c07, 0x0a60c007, 0x0c7806c0,
 	0x06800009, 0x0aa10008, 0x080c2800, 0x0fc011c0, 0x07c01cc7,
 	0x07800148, 0x0aa14088, 0x06800009, 0x0aa0c148, 0x07800489,
@@ -1799,22 +1807,24 @@ const u32 __initconst h263_mc[] = {
 	0x060c2207, 0x064e1507, 0x060c2207, 0x080c2147, 0x078004c7,
 	0x07c00387, 0x07800487, 0x07c00247, 0x07801107, 0x07c01787,
 	0x06800107, 0x07c003c7, 0x08030580, 0x064c2407, 0x0befc3c7,
-	0x00000000, 0x07800147, 0x0aa10147, 0x0c010d40, 0x00000000,
-	0x0c7800c0, 0x0c013f00, 0x00000000, 0x07800007, 0x040011c7,
-	0x0c7f6740, 0x07c00007, 0x07801fcb, 0x0aa1400b, 0x078005c9,
+	0x00000000, 0x07800147, 0x0aa10147, 0x0c011000, 0x00000000,
+	0x0c7800c0, 0x0c0141c0, 0x00000000, 0x07800007, 0x040011c7,
+	0x0c7f6000, 0x07c00007, 0x07801fcb, 0x0aa1400b, 0x078005c9,
 	0x0b60c089, 0x0c000e40, 0x00000000, 0x068fdfca, 0x06feffca,
 	0x064e0408, 0x02808288, 0x078005ca, 0x0ba0c08a, 0x064c0909,
 	0x098083c8, 0x0ac0424a, 0x0780000a, 0x0a60c00a, 0x0400128a,
 	0x09808388, 0x0b80324a, 0x00000000, 0x098081c8, 0x060e0408,
-	0x091e1248, 0x07c01fc9, 0x0c017f40, 0x00000000, 0x064c2407,
+	0x091e1248, 0x07c01fc9, 0x0c018200, 0x00000000, 0x064c2407,
 	0x0befc3c7, 0x078003c7, 0x0a6fc007, 0x00000000, 0x080c2130,
-	0x080c2800, 0x064c2408, 0x0befc3c8, 0x0c010200, 0x00000000,
+	0x080c2800, 0x064c2408, 0x0befc3c8, 0x0c0104c0, 0x00000000,
 	0x07800007, 0x040011c7, 0x07c00007, 0x07801d08, 0x07801d47,
 	0x09421207, 0x07801d87, 0x09441207, 0x07c00308, 0x07800148,
-	0x0aa0c348, 0x07c00448, 0x0c7f5a40, 0x078003c7, 0x0a6fc007,
+	0x0aa0c348, 0x07c00448, 0x0c7f5300, 0x078003c7, 0x0a6fc007,
 	0x00000000, 0x080c24e0, 0x064c2207, 0x064c2208, 0x080c24c0,
-	0x060c2207, 0x0c7f6280, 0x060c2208, 0x0780044b, 0x0aa1034b,
-	0x064e160b, 0x090102cb, 0x0aaf800b, 0x0681000b, 0x060e090b,
+	0x060c2207, 0x0c7f5b40, 0x060c2208, 0x0780044b, 0x0aa3834b,
+	0x00000000, 0x069fffc9, 0x04401249, 0x0aa1c009, 0x00000000,
+	0x064e160b, 0x090102cb, 0x0aaec00b, 0x0c780140, 0x00000000,
+	0x0809d501, 0x0c7fffc0, 0x00000000, 0x0681000b, 0x060e090b,
 	0x060e0a0b, 0x0cc00000, 0x060e0b0b, 0x064e0009, 0x064e0e0b,
 	0x064e0c0c, 0x083f0040, 0x083f0000, 0x0680020d, 0x0d00000d,
 	0x00000000, 0x060e0009, 0x060e0e0b, 0x0cc00000, 0x060e0c0c,
@@ -1837,7 +1847,7 @@ const u32 __initconst h263_mc[] = {
 	0x0609c507, 0x0fc011c0, 0x0aa30007, 0x00000000, 0x0fc021c0,
 	0x07c018c7, 0x0fc021c0, 0x0a21c047, 0x00000000, 0x0fc101c0,
 	0x0fc101c0, 0x0fc101c0, 0x0fc0f1c0, 0x0fc101c0, 0x0fc021c0,
-	0x0aa0c007, 0x0c7f4100, 0x00000000, 0x0fc011c0, 0x0fc101c0,
+	0x0aa0c007, 0x0c7f3740, 0x00000000, 0x0fc011c0, 0x0fc101c0,
 	0x07c01907, 0x0649c308, 0x09410207, 0x0609c308, 0x0b220087,
 	0x06800048, 0x06800008, 0x06800049, 0x0b004247, 0x05401249,
 	0x0c7fff80, 0x04001208, 0x07c01408, 0x0fc021c0, 0x0a21c047,
@@ -1865,7 +1875,7 @@ const u32 __initconst h263_mc[] = {
 	0x060e030a, 0x04c08208, 0x060e0008, 0x07801807, 0x0aa18047,
 	0x00000000, 0x0fc011c0, 0x0540b1c7, 0x09807007, 0x060c0107,
 	0x0fc011c0, 0x0aa60007, 0x0fc011c0, 0x07c00347, 0x0aa0c047,
-	0x0c014140, 0x00000000, 0x0fc011c0, 0x0a20c047, 0x00000000,
+	0x0c014180, 0x00000000, 0x0fc011c0, 0x0a20c047, 0x00000000,
 	0x0fc011c0, 0x07801807, 0x06800008, 0x0aa18047, 0x06800007,
 	0x0fc011c0, 0x0a624007, 0x0fc01200, 0x0a61c008, 0x07c01a07,
 	0x07c01a48, 0x0fc011c0, 0x046011c7, 0x0c57e900, 0x0c784400,
@@ -1879,10 +1889,10 @@ const u32 __initconst h263_mc[] = {
 	0x058044d3, 0x07c009d3, 0x06800007, 0x060c0307, 0x0fc08800,
 	0x0fc081c0, 0x07c01b07, 0x06800047, 0x060c0a07, 0x06820207,
 	0x060e0407, 0x06800025, 0x06490908, 0x0ae10225, 0x00000000,
-	0x0bef4048, 0x0c780080, 0x0c7f0c00, 0x0683ffc7, 0x0649bb08,
+	0x0bef4048, 0x0c780080, 0x0c7f0240, 0x0683ffc7, 0x0649bb08,
 	0x0900c208, 0x0aa10008, 0x0aa0c007, 0x0c7fff00, 0x044011c7,
 	0x06490b07, 0x09807007, 0x06090b07, 0x06090b07, 0x09c07007,
-	0x06090b07, 0x0649c909, 0x0aa10009, 0x06800087, 0x0c7f0100,
+	0x06090b07, 0x0649c909, 0x0aa10009, 0x06800087, 0x0c7ef740,
 	0x07c01507, 0x07801487, 0x0a608007, 0x0c780bc0, 0x044011c7,
 	0x040002c7, 0x07801589, 0x0b20c1c9, 0x00000000, 0x0c780a40,
 	0x07800fc8, 0x0609ca08, 0x07c00fdf, 0x0680420a, 0x02007289,
@@ -1902,7 +1912,7 @@ const u32 __initconst h263_mc[] = {
 	0x06800108, 0x078048ca, 0x07804908, 0x09610288, 0x0a240807,
 	0x06800148, 0x0780494a, 0x07804988, 0x09610288, 0x0a22d007,
 	0x06800188, 0x078049ca, 0x07804a08, 0x09610288, 0x0a21a007,
-	0x068001c8, 0x0809cd11, 0x06800047, 0x0c7ee840, 0x07c01507,
+	0x068001c8, 0x0809cd11, 0x06800047, 0x0c7ede80, 0x07c01507,
 	0x0809cd00, 0x07801607, 0x090041c7, 0x0a8041c8, 0x07801607,
 	0x090841c7, 0x0a4051c8, 0x06800047, 0x03407207, 0x0c7ff1c0,
 	0x02c091c9, 0x07800b47, 0x0680400f, 0x020093c8, 0x07400247,
@@ -1922,17 +1932,17 @@ const u32 __initconst h263_mc[] = {
 	0x054103cf, 0x07801c47, 0x0a614047, 0x00000000, 0x05810208,
 	0x0c7800c0, 0x00000000, 0x058103cf, 0x02c083c8, 0x06098108,
 	0x06499108, 0x05410208, 0x058103c8, 0x02c083c8, 0x06098208,
-	0x080980f4, 0x07801b07, 0x06800048, 0x09421207, 0x0c7ee180,
+	0x080980f4, 0x07801b07, 0x06800048, 0x09421207, 0x0c7ed7c0,
 	0x06090708, 0x06800025, 0x0ae20225, 0x064c0007, 0x0a2f8047,
 	0x00000000, 0x064c3a07, 0x090061c7, 0x0aae8647, 0x0c7800c0,
-	0x0c7ed300, 0x00000000, 0x080c2800, 0x080c0002, 0x0c7ecb40,
+	0x0c7ec940, 0x00000000, 0x080c2800, 0x080c0002, 0x0c7ec180,
 	0x00000000, 0x0649c007, 0x07c04647, 0x058101c7, 0x07c04687,
 	0x0649c107, 0x07c046c7, 0x058101c7, 0x07c04707, 0x0649c207,
 	0x07c04747, 0x058101c7, 0x07c04787, 0x0649c307, 0x07c047c7,
 	0x058101c7, 0x07c04807, 0x0649d007, 0x07c04847, 0x058101c7,
 	0x07c04887, 0x0649d107, 0x07c048c7, 0x058101c7, 0x07c04907,
 	0x0649d207, 0x07c04947, 0x058101c7, 0x07c04987, 0x0649d307,
-	0x07c049c7, 0x058101c7, 0x07c04a07, 0x0c0042c0, 0x06800025,
+	0x07c049c7, 0x058101c7, 0x07c04a07, 0x0c004300, 0x06800025,
 	0x08002501, 0x08002605, 0x08002708, 0x08002815, 0x08002c14,
 	0x06804002, 0x060c2902, 0x06800802, 0x06804043, 0x0d000002,
 	0x060e0203, 0x06800802, 0x06804043, 0x0d000002, 0x060e0303,
@@ -1950,8 +1960,8 @@ const u32 __initconst h263_mc[] = {
 	0x060c2207, 0x064e1507, 0x060c2207, 0x064e1507, 0x060c2207,
 	0x080c2147, 0x064c2407, 0x0befc3c7, 0x078004c7, 0x07c00387,
 	0x07800487, 0x07c00247, 0x07801107, 0x07c01787, 0x06800107,
-	0x07c003c7, 0x0c008380, 0x00000000, 0x08030580, 0x07800007,
-	0x040011c7, 0x07c00007, 0x0c7eb5c0, 0x00000000, 0x0fc01200,
+	0x07c003c7, 0x0c0083c0, 0x00000000, 0x08030580, 0x07800007,
+	0x040011c7, 0x07c00007, 0x0c7eac00, 0x00000000, 0x0fc01200,
 	0x0fc011c0, 0x0aa28047, 0x06800147, 0x0fc011c0, 0x0aa1c047,
 	0x06800187, 0x0fc011c0, 0x0aa10047, 0x068001c7, 0x0fc011c0,
 	0x06800207, 0x07c00147, 0x0a60c008, 0x06800007, 0x0fc061c0,
@@ -1959,7 +1969,7 @@ const u32 __initconst h263_mc[] = {
 	0x00000000, 0x0fc011c0, 0x0aa38007, 0x07800108, 0x0fc011c0,
 	0x0aa14007, 0x0b21c748, 0x04002208, 0x0c780140, 0x068007c8,
 	0x0b60c0c8, 0x04402208, 0x06800048, 0x07c00108, 0x0c0005c0,
-	0x040001c8, 0x0c7f19c0, 0x00000000, 0x06a00007, 0x06e00007,
+	0x040001c8, 0x0c7f1740, 0x00000000, 0x06a00007, 0x06e00007,
 	0x080c24a0, 0x060c2207, 0x060c2207, 0x060c2207, 0x060c2207,
 	0x060c2207, 0x0cc00000, 0x060c2207, 0x07801988, 0x094c11c8,
 	0x0c07fd00, 0x060e0407, 0x06800007, 0x07c01cc7, 0x07c00907,
@@ -1978,164 +1988,164 @@ const u32 __initconst h263_mc[] = {
 	0x06800047, 0x06800087, 0x05c0438e, 0x0540138e, 0x0200e1ce,
 	0x0ae1000f, 0x06bfffcd, 0x0300e34e, 0x0400138e, 0x0cc00000,
 	0x040003ce, 0x07800007, 0x0ae10007, 0x07800109, 0x07800988,
-	0x02007207, 0x044011c7, 0x040811c7, 0x074001c9, 0x0cc00000,
-	0x07c02009, 0x0681f409, 0x04401249, 0x0aefc009, 0x00000000,
-	0x083f0040, 0x083f0000, 0x08090b65, 0x00000000, 0x08090b60,
-	0x06498e07, 0x09807007, 0x068007c9, 0x097051c9, 0x06098e07,
-	0x0681f409, 0x04601249, 0x0c4fffc0, 0x00000000, 0x06800009,
-	0x097051c9, 0x09c07007, 0x06098e07, 0x064c0007, 0x09c07187,
-	0x09807207, 0x060c0007, 0x064c0807, 0x09807347, 0x060c0807,
-	0x083f0040, 0x083f0000, 0x08090b65, 0x0cc00000, 0x08090b60,
-	0x0680001f, 0x07c0149f, 0x07c014df, 0x07c0151f, 0x064c091f,
-	0x07c0175f, 0x07c0005f, 0x06800020, 0x06803fc2, 0x07c01542,
-	0x07c01582, 0x07c015c2, 0x07c01602, 0x060c091f, 0x080c0101,
-	0x06840442, 0x060c2e02, 0x064c4027, 0x064c4226, 0x024269e6,
-	0x040089a6, 0x07c006e6, 0x058109a6, 0x07c00726, 0x0649cf31,
-	0x0809c500, 0x0649c707, 0x0aa6c007, 0x09010207, 0x092101c7,
-	0x0401f287, 0x0580528a, 0x0403e247, 0x05806249, 0x09610289,
-	0x0649c709, 0x09610247, 0x0609c709, 0x0400f1c7, 0x058041c7,
-	0x060c0907, 0x07c00987, 0x04401247, 0x07c00609, 0x05404287,
-	0x0649c707, 0x094101c8, 0x0609c707, 0x0400f208, 0x05804208,
-	0x07c009c8, 0x05404208, 0x0961020a, 0x06090808, 0x0809c300,
-	0x0809cb00, 0x0cc00000, 0x00000000, 0x0649c803, 0x0aa14003,
-	0x078014c2, 0x028020c2, 0x07c014c2, 0x0809c800, 0x07801502,
-	0x0aa0c002, 0x06800102, 0x06030502, 0x064c0002, 0x0be14042,
-	0x0ba1d025, 0x06800102, 0x07c01502, 0x08030504, 0x06800025,
-	0x0cc00000, 0x00000000, 0x078001c2, 0x0aa1c002, 0x078016c2,
-	0x078009c3, 0x0a4040c2, 0x00000000, 0x06800102, 0x06030502,
-	0x0cc00000, 0x00000000, 0x0fc02240, 0x0aa4c009, 0x0680000a,
-	0x0b6180c9, 0x0680010a, 0x0fc01280, 0x09422289, 0x0c780140,
-	0x0440128a, 0x0fc01240, 0x0a6fc009, 0x0400128a, 0x06800049,
-	0x03409289, 0x05801249, 0x0f80028a, 0x0b40424a, 0x05401249,
-	0x04401249, 0x0240a24a, 0x0740020a, 0x0cc00000, 0x0fc01240,
-	0x064c441a, 0x0912169a, 0x0aaf801a, 0x0c7e6340, 0x00000000,
-	0x06490628, 0x0aefcc28, 0x00000000, 0x07800028, 0x078016e9,
-	0x09508a68, 0x068000a8, 0x06c00028, 0x06090628, 0x06090629,
-	0x06881068, 0x06090628, 0x0cc00000, 0x00000000, 0x06490628,
-	0x0aefcc28, 0x06c00028, 0x069001a8, 0x069fffea, 0x06090628,
-	0x06090629, 0x05401a23, 0x06090628, 0x09210a23, 0x05401a28,
-	0x02828aa8, 0x06090628, 0x06985168, 0x0c783280, 0x06090628,
-	0x078003e8, 0x0a6fc028, 0x07800028, 0x078016e9, 0x06800030,
-	0x09508a68, 0x0780016b, 0x07801d2a, 0x04601aaa, 0x0c501a40,
-	0x0aa4802b, 0x0690002a, 0x0aa4006b, 0x0aa8c36b, 0x0aa883eb,
-	0x0aa3422b, 0x00000000, 0x06a0002a, 0x0aa281eb, 0x06c0002a,
-	0x06b0002a, 0x0aa1c1ab, 0x06c0002a, 0x04602aeb, 0x0c500980,
-	0x0690002a, 0x0c7e5c40, 0x00000000, 0x06490628, 0x0aefcc28,
-	0x068000a8, 0x02c28aa8, 0x09441a30, 0x06090628, 0x06090629,
-	0x069fffeb, 0x06900028, 0x0a00ca2a, 0x080c2400, 0x080e1424,
-	0x064c2228, 0x060e1528, 0x060e1528, 0x060e1528, 0x060e1528,
-	0x09210a68, 0x06090628, 0x02828ae9, 0x06090628, 0x06a00028,
-	0x0a007a2a, 0x080c2440, 0x064c2228, 0x09210a68, 0x06090628,
-	0x02828ae9, 0x06090628, 0x0688d068, 0x02c28aa8, 0x09441a30,
-	0x0c782300, 0x06090628, 0x0c000100, 0x09441ab0, 0x0c782200,
-	0x00000000, 0x0680002c, 0x080e1424, 0x069fffeb, 0x06490628,
-	0x0aefcc28, 0x05404a2c, 0x060c2428, 0x068010a8, 0x02c28aa8,
-	0x09462a2c, 0x06090628, 0x06090629, 0x064c2228, 0x060e1528,
-	0x09210b68, 0x06090628, 0x02828aed, 0x06090628, 0x06a00028,
-	0x0a009a2a, 0x05404a2c, 0x098281a8, 0x060c2428, 0x064c2228,
-	0x09210b68, 0x06090628, 0x02828aed, 0x06090628, 0x0ba9c0ec,
-	0x04001b2c, 0x06881068, 0x02c28aa8, 0x06090628, 0x080c2480,
-	0x064c2228, 0x09210b68, 0x06090628, 0x02828aed, 0x06090628,
-	0x06a00028, 0x0a006a2a, 0x064c2228, 0x09210b68, 0x06090628,
-	0x02828aed, 0x06090628, 0x0cc00000, 0x00000000, 0x0aa241eb,
-	0x06a0002a, 0x0aa1c1ab, 0x06b0002a, 0x0aa1416b, 0x0aa1026b,
-	0x06800070, 0x0690002a, 0x06800030, 0x06490628, 0x0aefcc28,
-	0x06c0002a, 0x068408a8, 0x02c28aa8, 0x09441a30, 0x06090628,
-	0x06090629, 0x069fffec, 0x06900028, 0x0a00ba2a, 0x080c2400,
-	0x064c222e, 0x0609062e, 0x09210a2e, 0x09c28068, 0x02828b28,
-	0x09828428, 0x07801d6d, 0x095e1a2d, 0x06090628, 0x06a00028,
-	0x0a00ba2a, 0x080c2440, 0x064c2228, 0x06090628, 0x09210a28,
-	0x09c28068, 0x02828b28, 0x09828428, 0x07801ded, 0x095e1a2d,
-	0x06090628, 0x068c5828, 0x02c28aa8, 0x09441a30, 0x06090628,
-	0x06860828, 0x02c28aa8, 0x09441a30, 0x06090628, 0x06900028,
-	0x0a00ba2a, 0x080c2410, 0x064c222f, 0x0609062f, 0x09210a2f,
-	0x09c28068, 0x02828b28, 0x09828428, 0x07801dad, 0x095e1a2d,
-	0x06090628, 0x06a00028, 0x0a00ba2a, 0x080c2450, 0x064c2228,
-	0x06090628, 0x09210a28, 0x09c28068, 0x02828b28, 0x09828428,
-	0x07801e2d, 0x095e1a2d, 0x06090628, 0x068ed868, 0x02c28aa8,
-	0x09441a30, 0x06090628, 0x080c24a0, 0x080e1424, 0x064c2228,
-	0x060e152e, 0x060e152f, 0x060e1528, 0x0c780080, 0x060e1528,
-	0x0cc00000, 0x00000000, 0x07800028, 0x078016e9, 0x06800030,
-	0x09508a68, 0x0780016b, 0x0780026a, 0x04601aaa, 0x0c500b80,
-	0x0aa1416b, 0x00000000, 0x06800070, 0x0a61826b, 0x00000000,
-	0x078003a8, 0x04602a28, 0x0c500840, 0x0c7800c0, 0x0c780000,
-	0x00000000, 0x06490628, 0x0aefcc28, 0x06b000a8, 0x09441a30,
-	0x06090628, 0x06090629, 0x069fffeb, 0x06900028, 0x080c2400,
+	0x02007207, 0x044011c7, 0x06808048, 0x02007207, 0x074001c9,
+	0x0cc00000, 0x07c08009, 0x0681f409, 0x04401249, 0x0aefc009,
+	0x00000000, 0x083f0040, 0x083f0000, 0x08090b65, 0x00000000,
+	0x08090b60, 0x06498e07, 0x09807007, 0x068007c9, 0x097051c9,
+	0x06098e07, 0x0681f409, 0x04601249, 0x0c4fffc0, 0x00000000,
+	0x06800009, 0x097051c9, 0x09c07007, 0x06098e07, 0x064c0007,
+	0x09c07187, 0x09807207, 0x060c0007, 0x064c0807, 0x09807347,
+	0x060c0807, 0x083f0040, 0x083f0000, 0x08090b65, 0x0cc00000,
+	0x08090b60, 0x0680001f, 0x07c0149f, 0x07c014df, 0x07c0151f,
+	0x064c091f, 0x07c0175f, 0x07c0005f, 0x06800020, 0x06803fc2,
+	0x07c01542, 0x07c01582, 0x07c015c2, 0x07c01602, 0x060c091f,
+	0x080c0101, 0x06840442, 0x060c2e02, 0x064c4027, 0x064c4226,
+	0x024269e6, 0x040089a6, 0x07c006e6, 0x058109a6, 0x07c00726,
+	0x0649cf31, 0x0809c500, 0x0649c707, 0x0aa6c007, 0x09010207,
+	0x092101c7, 0x0401f287, 0x0580528a, 0x0403e247, 0x05806249,
+	0x09610289, 0x0649c709, 0x09610247, 0x0609c709, 0x0400f1c7,
+	0x058041c7, 0x060c0907, 0x07c00987, 0x04401247, 0x07c00609,
+	0x05404287, 0x0649c707, 0x094101c8, 0x0609c707, 0x0400f208,
+	0x05804208, 0x07c009c8, 0x05404208, 0x0961020a, 0x06090808,
+	0x0809c300, 0x0809cb00, 0x0cc00000, 0x00000000, 0x0649c803,
+	0x0aa14003, 0x078014c2, 0x028020c2, 0x07c014c2, 0x0809c800,
+	0x07801502, 0x0aa0c002, 0x06800102, 0x06030502, 0x064c0002,
+	0x0be14042, 0x0ba1d025, 0x06800102, 0x07c01502, 0x08030504,
+	0x06800025, 0x0cc00000, 0x00000000, 0x078001c2, 0x0aa1c002,
+	0x078016c2, 0x078009c3, 0x0a4040c2, 0x00000000, 0x06800102,
+	0x06030502, 0x0cc00000, 0x00000000, 0x0fc02240, 0x0aa4c009,
+	0x0680000a, 0x0b6180c9, 0x0680010a, 0x0fc01280, 0x09422289,
+	0x0c780140, 0x0440128a, 0x0fc01240, 0x0a6fc009, 0x0400128a,
+	0x06800049, 0x03409289, 0x05801249, 0x0f80028a, 0x0b40424a,
+	0x05401249, 0x04401249, 0x0240a24a, 0x0740020a, 0x0cc00000,
+	0x0fc01240, 0x064c441a, 0x0912169a, 0x0aaf801a, 0x0c7e5940,
+	0x00000000, 0x06490628, 0x0aefcc28, 0x00000000, 0x07800028,
+	0x078016e9, 0x09508a68, 0x068000a8, 0x06c00028, 0x06090628,
+	0x06090629, 0x06881068, 0x06090628, 0x0cc00000, 0x00000000,
+	0x06490628, 0x0aefcc28, 0x06c00028, 0x069001a8, 0x069fffea,
+	0x06090628, 0x06090629, 0x05401a23, 0x06090628, 0x09210a23,
+	0x05401a28, 0x02828aa8, 0x06090628, 0x06985168, 0x0c783280,
+	0x06090628, 0x078003e8, 0x0a6fc028, 0x07800028, 0x078016e9,
+	0x06800030, 0x09508a68, 0x0780016b, 0x07801d2a, 0x04601aaa,
+	0x0c501a40, 0x0aa4802b, 0x0690002a, 0x0aa4006b, 0x0aa8c36b,
+	0x0aa883eb, 0x0aa3422b, 0x00000000, 0x06a0002a, 0x0aa281eb,
+	0x06c0002a, 0x06b0002a, 0x0aa1c1ab, 0x06c0002a, 0x04602aeb,
+	0x0c500980, 0x0690002a, 0x0c7e5240, 0x00000000, 0x06490628,
+	0x0aefcc28, 0x068000a8, 0x02c28aa8, 0x09441a30, 0x06090628,
+	0x06090629, 0x069fffeb, 0x06900028, 0x0a00ca2a, 0x080c2400,
 	0x080e1424, 0x064c2228, 0x060e1528, 0x060e1528, 0x060e1528,
 	0x060e1528, 0x09210a68, 0x06090628, 0x02828ae9, 0x06090628,
-	0x080c2440, 0x064c2228, 0x09210a68, 0x06090628, 0x02828ae9,
-	0x06090628, 0x06b8d068, 0x09441a30, 0x0c7812c0, 0x06090628,
-	0x06b0002a, 0x0c07d1c0, 0x09441ab0, 0x0c7ff2c0, 0x00000000,
-	0x0aa1416b, 0x0aa1026b, 0x06800070, 0x0c7ff640, 0x00000000,
-	0x06490628, 0x0aefcc28, 0x06b408a8, 0x09441a30, 0x06090628,
-	0x06090629, 0x069fffec, 0x06900028, 0x080c2400, 0x064c222e,
-	0x0609062e, 0x09210a2e, 0x09c28068, 0x02828b28, 0x09828428,
-	0x078017ad, 0x095e1a2d, 0x06090628, 0x080c2440, 0x064c2228,
-	0x06090628, 0x09210a28, 0x09c28068, 0x02828b28, 0x09828428,
-	0x06090628, 0x06bc5828, 0x09441a30, 0x06090628, 0x06b60828,
-	0x09441a30, 0x06090628, 0x06900028, 0x080c2410, 0x064c222f,
-	0x0609062f, 0x09210a2f, 0x09c28068, 0x02828b28, 0x09828428,
-	0x078017ad, 0x05801b6d, 0x095e1a2d, 0x06090628, 0x080c2450,
+	0x06a00028, 0x0a007a2a, 0x080c2440, 0x064c2228, 0x09210a68,
+	0x06090628, 0x02828ae9, 0x06090628, 0x0688d068, 0x02c28aa8,
+	0x09441a30, 0x0c782300, 0x06090628, 0x0c000100, 0x09441ab0,
+	0x0c782200, 0x00000000, 0x0680002c, 0x080e1424, 0x069fffeb,
+	0x06490628, 0x0aefcc28, 0x05404a2c, 0x060c2428, 0x068010a8,
+	0x02c28aa8, 0x09462a2c, 0x06090628, 0x06090629, 0x064c2228,
+	0x060e1528, 0x09210b68, 0x06090628, 0x02828aed, 0x06090628,
+	0x06a00028, 0x0a009a2a, 0x05404a2c, 0x098281a8, 0x060c2428,
+	0x064c2228, 0x09210b68, 0x06090628, 0x02828aed, 0x06090628,
+	0x0ba9c0ec, 0x04001b2c, 0x06881068, 0x02c28aa8, 0x06090628,
+	0x080c2480, 0x064c2228, 0x09210b68, 0x06090628, 0x02828aed,
+	0x06090628, 0x06a00028, 0x0a006a2a, 0x064c2228, 0x09210b68,
+	0x06090628, 0x02828aed, 0x06090628, 0x0cc00000, 0x00000000,
+	0x0aa241eb, 0x06a0002a, 0x0aa1c1ab, 0x06b0002a, 0x0aa1416b,
+	0x0aa1026b, 0x06800070, 0x0690002a, 0x06800030, 0x06490628,
+	0x0aefcc28, 0x06c0002a, 0x068408a8, 0x02c28aa8, 0x09441a30,
+	0x06090628, 0x06090629, 0x069fffec, 0x06900028, 0x0a00ba2a,
+	0x080c2400, 0x064c222e, 0x0609062e, 0x09210a2e, 0x09c28068,
+	0x02828b28, 0x09828428, 0x07801d6d, 0x095e1a2d, 0x06090628,
+	0x06a00028, 0x0a00ba2a, 0x080c2440, 0x064c2228, 0x06090628,
+	0x09210a28, 0x09c28068, 0x02828b28, 0x09828428, 0x07801ded,
+	0x095e1a2d, 0x06090628, 0x068c5828, 0x02c28aa8, 0x09441a30,
+	0x06090628, 0x06860828, 0x02c28aa8, 0x09441a30, 0x06090628,
+	0x06900028, 0x0a00ba2a, 0x080c2410, 0x064c222f, 0x0609062f,
+	0x09210a2f, 0x09c28068, 0x02828b28, 0x09828428, 0x07801dad,
+	0x095e1a2d, 0x06090628, 0x06a00028, 0x0a00ba2a, 0x080c2450,
 	0x064c2228, 0x06090628, 0x09210a28, 0x09c28068, 0x02828b28,
-	0x09828428, 0x098283e8, 0x06090628, 0x06bed868, 0x09441a30,
-	0x06090628, 0x080c24a0, 0x080e1424, 0x064c2228, 0x060e152e,
-	0x060e152f, 0x060e1528, 0x060e1528, 0x0cc00000, 0x00000000,
-	0x064e1215, 0x091e1555, 0x0a208055, 0x0c782280, 0x0649d915,
-	0x0900c555, 0x0a6f8015, 0x00000000, 0x078003d5, 0x0aa08055,
-	0x0c780940, 0x07800596, 0x0aa1c016, 0x04401596, 0x07c00596,
-	0x078005d6, 0x04401596, 0x0c7814c0, 0x07c005d6, 0x07800916,
-	0x07800295, 0x05408555, 0x02015595, 0x04003596, 0x07c00916,
-	0x05404595, 0x02016c56, 0x060e1316, 0x07800517, 0x0aa0c017,
-	0x06a16016, 0x06a16196, 0x07c00416, 0x069fffd7, 0x044015d7,
-	0x0aa1c017, 0x00000000, 0x064e1615, 0x09010555, 0x0aaec015,
-	0x04401555, 0x060e1615, 0x06c00016, 0x060e1216, 0x06800095,
-	0x0c781800, 0x07c003d5, 0x0a660095, 0x078005d6, 0x0aa18016,
-	0x04401596, 0x0b210056, 0x07c005d6, 0x0c780bc0, 0x00000000,
-	0x07800956, 0x07800295, 0x05408555, 0x02015595, 0x04003596,
-	0x07c00956, 0x05404595, 0x02016c56, 0x060e1316, 0x07800415,
-	0x09c151d5, 0x06c00015, 0x060e1215, 0x068000d5, 0x0c781200,
-	0x07c003d5, 0x0aa080d5, 0x0c780700, 0x07800516, 0x0aa0c016,
-	0x06800017, 0x06800317, 0x060e1417, 0x07800795, 0x07c00755,
-	0x0683ffd5, 0x064e1516, 0x0900c5d6, 0x0a40b5d5, 0x091845d6,
-	0x07c00797, 0x064e1516, 0x064e1516, 0x064e1516, 0x080c24e0,
-	0x060c2216, 0x064e1516, 0x0c780200, 0x060c2216, 0x068000d6,
-	0x07c00796, 0x06800016, 0x080c24e0, 0x060c2216, 0x060c2216,
-	0x0aa080a0, 0x0c780980, 0x078003d5, 0x0a644115, 0x07800956,
-	0x068ac015, 0x05408555, 0x02015595, 0x04003596, 0x07c00956,
-	0x05404595, 0x02016c56, 0x060e1316, 0x06a16015, 0x09c151d5,
-	0x06c00015, 0x060e1215, 0x06800195, 0x0c7805c0, 0x07c003d5,
-	0x0aa0c195, 0x0c780480, 0x00000000, 0x064e1418, 0x080e1400,
-	0x064e1516, 0x0683ffd5, 0x0900c5d6, 0x09203656, 0x0a8045d5,
-	0x091845d6, 0x068000d7, 0x06800019, 0x07c004d7, 0x090015d9,
-	0x07c00497, 0x090225d9, 0x07c01117, 0x060e1418, 0x06800015,
-	0x07c003d5, 0x0cc00000, 0x00400000, 0x06800047, 0x07c003c7,
-	0x07800507, 0x050011c7, 0x07c00507, 0x064e1608, 0x09010208,
-	0x04001208, 0x060e1608, 0x0aa0c007, 0x06800008, 0x06800308,
-	0x060e1408, 0x06b7ffc7, 0x06c00007, 0x060e1507, 0x060e1524,
-	0x060e1524, 0x060e1524, 0x060e1524, 0x0cc00000, 0x08030580,
-	0x078003c7, 0x0a6fc007, 0x07800447, 0x0aa0c0c7, 0x0aa98347,
-	0x0a638107, 0x07800507, 0x050011c7, 0x07c00507, 0x06800047,
-	0x07c003c7, 0x080c24e0, 0x064c2207, 0x064c2208, 0x080c24c0,
-	0x060c2207, 0x060c2208, 0x0cc00000, 0x08030580, 0x06800047,
-	0x07c003c7, 0x07800507, 0x050011c7, 0x07c00507, 0x080e1424,
-	0x064e1509, 0x064e150a, 0x064e150b, 0x064e150c, 0x0aa0c007,
-	0x06800008, 0x06800308, 0x060e1408, 0x0683ffc7, 0x07800448,
-	0x095841c8, 0x07800308, 0x096031c8, 0x060e1507, 0x060e1509,
-	0x060e150a, 0x060e150b, 0x060e150c, 0x0cc00000, 0x08030580,
-	0x07800987, 0x078009c8, 0x06800009, 0x0d000008, 0x020091c9,
-	0x04401249, 0x06800047, 0x0ba10089, 0x05801249, 0x0c7fff80,
-	0x040011c7, 0x0cc00000, 0x07c00687, 0x06800208, 0x064c3b07,
-	0x091031c7, 0x024071c8, 0x0f8001c7, 0x0fc0f1c0, 0x064c0e07,
-	0x040011c7, 0x0f8001c7, 0x07800687, 0x0f8001c7, 0x0fc051c0,
-	0x0c073380, 0x07c00107, 0x0fc011c0, 0x0aa0c007, 0x0c000640,
-	0x00000000, 0x078002c7, 0x07801988, 0x094c11c8, 0x0c072c80,
-	0x060e0407, 0x06800007, 0x07c01cc7, 0x078005c7, 0x0b210087,
-	0x07800988, 0x04002208, 0x024081c8, 0x07800947, 0x04401208,
-	0x02007207, 0x05401208, 0x02007207, 0x07c00947, 0x07800987,
-	0x040011c7, 0x07c005c7, 0x0cc00000, 0x00000000, 0x0fc011c0,
-	0x0a600007, 0x0fc011c0, 0x07801408, 0x0f8001c8, 0x0fc011c0,
-	0x0fc021c0, 0x0fc03200, 0x0aa10007, 0x0aa0c047, 0x0fc03200,
-	0x0fc03200, 0x0cc00000, 0x00000000
+	0x09828428, 0x07801e2d, 0x095e1a2d, 0x06090628, 0x068ed868,
+	0x02c28aa8, 0x09441a30, 0x06090628, 0x080c24a0, 0x080e1424,
+	0x064c2228, 0x060e152e, 0x060e152f, 0x060e1528, 0x0c780080,
+	0x060e1528, 0x0cc00000, 0x00000000, 0x07800028, 0x078016e9,
+	0x06800030, 0x09508a68, 0x0780016b, 0x0780026a, 0x04601aaa,
+	0x0c500b80, 0x0aa1416b, 0x00000000, 0x06800070, 0x0a61826b,
+	0x00000000, 0x078003a8, 0x04602a28, 0x0c500840, 0x0c7800c0,
+	0x0c780000, 0x00000000, 0x06490628, 0x0aefcc28, 0x06b000a8,
+	0x09441a30, 0x06090628, 0x06090629, 0x069fffeb, 0x06900028,
+	0x080c2400, 0x080e1424, 0x064c2228, 0x060e1528, 0x060e1528,
+	0x060e1528, 0x060e1528, 0x09210a68, 0x06090628, 0x02828ae9,
+	0x06090628, 0x080c2440, 0x064c2228, 0x09210a68, 0x06090628,
+	0x02828ae9, 0x06090628, 0x06b8d068, 0x09441a30, 0x0c7812c0,
+	0x06090628, 0x06b0002a, 0x0c07d1c0, 0x09441ab0, 0x0c7ff2c0,
+	0x00000000, 0x0aa1416b, 0x0aa1026b, 0x06800070, 0x0c7ff640,
+	0x00000000, 0x06490628, 0x0aefcc28, 0x06b408a8, 0x09441a30,
+	0x06090628, 0x06090629, 0x069fffec, 0x06900028, 0x080c2400,
+	0x064c222e, 0x0609062e, 0x09210a2e, 0x09c28068, 0x02828b28,
+	0x09828428, 0x078017ad, 0x095e1a2d, 0x06090628, 0x080c2440,
+	0x064c2228, 0x06090628, 0x09210a28, 0x09c28068, 0x02828b28,
+	0x09828428, 0x06090628, 0x06bc5828, 0x09441a30, 0x06090628,
+	0x06b60828, 0x09441a30, 0x06090628, 0x06900028, 0x080c2410,
+	0x064c222f, 0x0609062f, 0x09210a2f, 0x09c28068, 0x02828b28,
+	0x09828428, 0x078017ad, 0x05801b6d, 0x095e1a2d, 0x06090628,
+	0x080c2450, 0x064c2228, 0x06090628, 0x09210a28, 0x09c28068,
+	0x02828b28, 0x09828428, 0x098283e8, 0x06090628, 0x06bed868,
+	0x09441a30, 0x06090628, 0x080c24a0, 0x080e1424, 0x064c2228,
+	0x060e152e, 0x060e152f, 0x060e1528, 0x060e1528, 0x0cc00000,
+	0x00000000, 0x064e1215, 0x091e1555, 0x0a208055, 0x0c782280,
+	0x0649d915, 0x0900c555, 0x0a6f8015, 0x00000000, 0x078003d5,
+	0x0aa08055, 0x0c780940, 0x07800596, 0x0aa1c016, 0x04401596,
+	0x07c00596, 0x078005d6, 0x04401596, 0x0c7814c0, 0x07c005d6,
+	0x07800916, 0x07800295, 0x05408555, 0x02015595, 0x04003596,
+	0x07c00916, 0x05404595, 0x02016c56, 0x060e1316, 0x07800517,
+	0x0aa0c017, 0x06a16016, 0x06a16196, 0x07c00416, 0x069fffd7,
+	0x044015d7, 0x0aa1c017, 0x00000000, 0x064e1615, 0x09010555,
+	0x0aaec015, 0x04401555, 0x060e1615, 0x06c00016, 0x060e1216,
+	0x06800095, 0x0c781800, 0x07c003d5, 0x0a660095, 0x078005d6,
+	0x0aa18016, 0x04401596, 0x0b210056, 0x07c005d6, 0x0c780bc0,
+	0x00000000, 0x07800956, 0x07800295, 0x05408555, 0x02015595,
+	0x04003596, 0x07c00956, 0x05404595, 0x02016c56, 0x060e1316,
+	0x07800415, 0x09c151d5, 0x06c00015, 0x060e1215, 0x068000d5,
+	0x0c781200, 0x07c003d5, 0x0aa080d5, 0x0c780700, 0x07800516,
+	0x0aa0c016, 0x06800017, 0x06800317, 0x060e1417, 0x07800795,
+	0x07c00755, 0x0683ffd5, 0x064e1516, 0x0900c5d6, 0x0a40b5d5,
+	0x091845d6, 0x07c00797, 0x064e1516, 0x064e1516, 0x064e1516,
+	0x080c24e0, 0x060c2216, 0x064e1516, 0x0c780200, 0x060c2216,
+	0x068000d6, 0x07c00796, 0x06800016, 0x080c24e0, 0x060c2216,
+	0x060c2216, 0x0aa080a0, 0x0c780980, 0x078003d5, 0x0a644115,
+	0x07800956, 0x068ac015, 0x05408555, 0x02015595, 0x04003596,
+	0x07c00956, 0x05404595, 0x02016c56, 0x060e1316, 0x06a16015,
+	0x09c151d5, 0x06c00015, 0x060e1215, 0x06800195, 0x0c7805c0,
+	0x07c003d5, 0x0aa0c195, 0x0c780480, 0x00000000, 0x064e1418,
+	0x080e1400, 0x064e1516, 0x0683ffd5, 0x0900c5d6, 0x09203656,
+	0x0a8045d5, 0x091845d6, 0x068000d7, 0x06800019, 0x07c004d7,
+	0x090015d9, 0x07c00497, 0x090225d9, 0x07c01117, 0x060e1418,
+	0x06800015, 0x07c003d5, 0x0cc00000, 0x00400000, 0x06800047,
+	0x07c003c7, 0x07800507, 0x050011c7, 0x07c00507, 0x064e1608,
+	0x09010208, 0x04001208, 0x060e1608, 0x0aa0c007, 0x06800008,
+	0x06800308, 0x060e1408, 0x06b7ffc7, 0x06c00007, 0x060e1507,
+	0x060e1524, 0x060e1524, 0x060e1524, 0x060e1524, 0x0cc00000,
+	0x08030580, 0x078003c7, 0x0a6fc007, 0x07800447, 0x0aa0c0c7,
+	0x0aa98347, 0x0a638107, 0x07800507, 0x050011c7, 0x07c00507,
+	0x06800047, 0x07c003c7, 0x080c24e0, 0x064c2207, 0x064c2208,
+	0x080c24c0, 0x060c2207, 0x060c2208, 0x0cc00000, 0x08030580,
+	0x06800047, 0x07c003c7, 0x07800507, 0x050011c7, 0x07c00507,
+	0x080e1424, 0x064e1509, 0x064e150a, 0x064e150b, 0x064e150c,
+	0x0aa0c007, 0x06800008, 0x06800308, 0x060e1408, 0x0683ffc7,
+	0x07800448, 0x095841c8, 0x07800308, 0x096031c8, 0x060e1507,
+	0x060e1509, 0x060e150a, 0x060e150b, 0x060e150c, 0x0cc00000,
+	0x08030580, 0x07800987, 0x078009c8, 0x06800009, 0x0d000008,
+	0x020091c9, 0x04401249, 0x06800047, 0x0ba10089, 0x05801249,
+	0x0c7fff80, 0x040011c7, 0x0cc00000, 0x07c00687, 0x06800208,
+	0x064c3b07, 0x091031c7, 0x024071c8, 0x0f8001c7, 0x0fc0f1c0,
+	0x064c0e07, 0x040011c7, 0x0f8001c7, 0x07800687, 0x0f8001c7,
+	0x0fc051c0, 0x0c073340, 0x07c00107, 0x0fc011c0, 0x0aa0c007,
+	0x0c000640, 0x00000000, 0x078002c7, 0x07801988, 0x094c11c8,
+	0x0c072c40, 0x060e0407, 0x06800007, 0x07c01cc7, 0x078005c7,
+	0x0b210087, 0x07800988, 0x04002208, 0x024081c8, 0x07800947,
+	0x04401208, 0x02007207, 0x05401208, 0x02007207, 0x07c00947,
+	0x07800987, 0x040011c7, 0x07c005c7, 0x0cc00000, 0x00000000,
+	0x0fc011c0, 0x0a600007, 0x0fc011c0, 0x07801408, 0x0f8001c8,
+	0x0fc011c0, 0x0fc021c0, 0x0fc03200, 0x0aa10007, 0x0aa0c047,
+	0x0fc03200, 0x0fc03200, 0x0cc00000, 0x00000000
 };
 
 
diff --git a/drivers/amlogic/amports/arch/ucode/vc1/vc1_vc1_linux.h b/drivers/amlogic/amports/arch/ucode/vc1/vc1_vc1_linux.h
index 03aec64..e662a5f 100644
--- a/drivers/amlogic/amports/arch/ucode/vc1/vc1_vc1_linux.h
+++ b/drivers/amlogic/amports/arch/ucode/vc1/vc1_vc1_linux.h
@@ -15,947 +15,664 @@
  *
 */
 
-const unsigned MicroCode[] __initconst = {
-	0x06810001, 0x06800000, 0x0d000001, 0x07400040, 0x0c014600, 0x06800024,
-	0x00000000, 0x00000000, 0x080c0002, 0x080c1e01, 0x06bfde80, 0x07c017c0,
-	0x06030400,
-	0x00400000, 0x0c0154c0, 0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x00000000,
-	0x0c7ffe80, 0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x00000000, 0x00000000,
-	0x00000000, 0x00000000, 0x0cc00000, 0x00400000,
-	0x0cc00000, 0x00400000,
-	0x0c780580, 0x064c0007, 0x0c795640, 0x06800024, 0x0cc00000,
-	0x00400000,
-	0x0cc00000, 0x00400000, 0x0cc00000, 0x00400000, 0x0c79e380, 0x00000000,
-	0x0cc00000, 0x00400000, 0x04001924, 0x0c7fff40, 0x0609c724, 0x06800024,
-	0x00800000,
+static const u32 MicroCode[] __initconst = {
+	0x06810001, 0x06800000, 0x0d000001, 0x07400040, 0x0c014600,
+	0x06800024, 0x00000000, 0x00000000, 0x080c0002, 0x080c1e01,
+	0x06bfde80, 0x07c017c0, 0x06030400, 0x00400000, 0x0c0154c0,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x0c7ffe80, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x0cc00000, 0x00400000, 0x0cc00000,
+	0x00400000, 0x0c780580, 0x064c0007, 0x0c795640, 0x06800024,
+	0x0cc00000, 0x00400000, 0x0cc00000, 0x00400000, 0x0cc00000,
+	0x00400000, 0x0c79e380, 0x00000000, 0x0cc00000, 0x00400000,
+	0x04001924, 0x0c7fff40, 0x0609c724, 0x06800024, 0x00800000,
 	0x078017c9, 0x0c7ffe00, 0x06030409, 0x06bfdd89, 0x06030409,
-	0x00400000, 0x0a2e0047,
-	0x07801509, 0x0aa14009, 0x0a608049, 0x0c78fb80,
-	0x0a608089, 0x0c78ecc0, 0x0a220807,
-	0x0c787d40, 0x00000000, 0x06800007,
-	0x0c0067c0, 0x07c003c7, 0x0c793100, 0x00000000,
-	0x0bee9007, 0x078003c7,
-	0x0a6fc007, 0x06800008, 0x07800007, 0x0a644007, 0x07c00208,
-	0x064c2907,
-	0x091c11c7, 0x0a634047, 0x07800347, 0x0a22d007, 0x0aa20020, 0x0aa0c0a0,
-	0x07802987, 0x0a60c0c8, 0x078000c7, 0x0a614007, 0x07800107, 0x0a60c007,
-	0x0c792b80,
-	0x00000000, 0x0cb8002d, 0x00000000, 0x07800087, 0x060c2307,
-	0x06800007, 0x07c00147,
-	0x04c001c7, 0x060c2107, 0x068fdfca, 0x064e0408,
-	0x02808288, 0x02c08948, 0x060e0408,
-	0x060c0726, 0x06800008, 0x07800507,
-	0x09582207, 0x098083c8, 0x06c00308, 0x060e0508,
-	0x080c25a0, 0x080c2601,
+	0x00400000, 0x0a2e0047, 0x07801509, 0x0aa14009, 0x0a608049,
+	0x0c78fb80, 0x0a608089, 0x0c78ecc0, 0x0a220807, 0x0c787d40,
+	0x00000000, 0x06800007, 0x0c0067c0, 0x07c003c7, 0x0c793100,
+	0x00000000, 0x0bee9007, 0x078003c7, 0x0a6fc007, 0x06800008,
+	0x07800007, 0x0a644007, 0x07c00208, 0x064c2907, 0x091c11c7,
+	0x0a634047, 0x07800347, 0x0a22d007, 0x0aa20020, 0x0aa0c0a0,
+	0x07802987, 0x0a60c0c8, 0x078000c7, 0x0a614007, 0x07800107,
+	0x0a60c007, 0x0c792b80, 0x00000000, 0x0cb8002d, 0x00000000,
+	0x07800087, 0x060c2307, 0x06800007, 0x07c00147, 0x04c001c7,
+	0x060c2107, 0x068fdfca, 0x064e0408, 0x02808288, 0x02c08948,
+	0x060e0408, 0x060c0726, 0x06800008, 0x07800507, 0x09582207,
+	0x098083c8, 0x06c00308, 0x060e0508, 0x080c25a0, 0x080c2601,
 	0x078020c8, 0x0a6100c8, 0x080c2602, 0x080c2603, 0x080c2604,
-	0x0c01cd00,
-	0x080c260e, 0x0c01c440, 0x00000000, 0x0683ffc8, 0x064c2307, 0x093041c7,
-	0x0aa0c007, 0x0b6f4048, 0x04401208, 0x07800007, 0x040011c7, 0x07c00007,
-	0x09c253a5,
-	0x07800988, 0x0b405207, 0x040011c7, 0x0b824207, 0x0c7808c0,
-	0x098251e5, 0x06800007,
-	0x07c00007, 0x098253a5, 0x09c253e5, 0x09c251e5,
-	0x078016c8, 0x04001208, 0x078009c9,
-	0x0b410248, 0x07c016c8, 0x0be5c7c8,
-	0x078000c7, 0x0aa0c007, 0x0c020d40, 0x0680000a,
-	0x07800107, 0x0aa0c007,
-	0x0c020c40, 0x0680004a, 0x07800bc7, 0x0aa34007, 0x0c020b40,
-	0x0680008a,
-	0x0c780280, 0x078003c7, 0x0a6fc007, 0x00000000, 0x06430507, 0x0a2f0107,
-	0x06a00008, 0x060c3d08, 0x0c791780, 0x00000000, 0x07800007, 0x09508987,
-	0x078016c9,
-	0x09408989, 0x0680000b, 0x0481f249, 0x05403249, 0x07800007,
-	0x0480f207, 0x068003ca,
-	0x0240a20a, 0x058041c7, 0x020091c9, 0x06804007,
-	0x020091c9, 0x078000c7, 0x0a60c007,
-	0x07000247, 0x06800007, 0x03807287,
-	0x095a12c7, 0x06804007, 0x020091c9, 0x07800107,
-	0x0a60c007, 0x07000247,
-	0x06800007, 0x03807287, 0x095c12c7, 0x06804007, 0x020091c9,
-	0x07800bc7,
-	0x0a60c007, 0x07000247, 0x06800007, 0x03807287, 0x095e12c7, 0x0c7fd780,
-	0x07c0008b, 0x07800087, 0x060c2307, 0x068fdfca, 0x064e0408, 0x02808288,
-	0x02c08948,
-	0x060e0408, 0x060c0726, 0x060c0227, 0x060c032e, 0x06800008,
-	0x07800507, 0x09582207,
-	0x098083c8, 0x06c00308, 0x060e0508, 0x080c2540,
-	0x080c2606, 0x064c2307, 0x093041c7,
-	0x0a6f8007, 0x00000000, 0x064c2307,
-	0x0be08107, 0x0c7808c0, 0x07800208, 0x0aa7c048,
-	0x068000c8, 0x07c00148,
-	0x04c00208, 0x0be64207, 0x060c2108, 0x07800248, 0x0aa20008,
-	0x00000000,
-	0x080c2590, 0x080c2607, 0x080c2601, 0x080c2604, 0x0c780180, 0x080c2602,
-	0x080c2500, 0x080c2607, 0x080c2604, 0x080c2602, 0x07802c08, 0x04c28208,
-	0x09808208,
+	0x0c01cd00, 0x080c260e, 0x0c01c440, 0x00000000, 0x0683ffc8,
+	0x064c2307, 0x093041c7, 0x0aa0c007, 0x0b6f4048, 0x04401208,
+	0x07800007, 0x040011c7, 0x07c00007, 0x09c253a5, 0x07800988,
+	0x0b405207, 0x040011c7, 0x0b824207, 0x0c7808c0, 0x098251e5,
+	0x06800007, 0x07c00007, 0x098253a5, 0x09c253e5, 0x09c251e5,
+	0x078016c8, 0x04001208, 0x078009c9, 0x0b410248, 0x07c016c8,
+	0x0be5c7c8, 0x078000c7, 0x0aa0c007, 0x0c020d40, 0x0680000a,
+	0x07800107, 0x0aa0c007, 0x0c020c40, 0x0680004a, 0x07800bc7,
+	0x0aa34007, 0x0c020b40, 0x0680008a, 0x0c780280, 0x078003c7,
+	0x0a6fc007, 0x00000000, 0x06430507, 0x0a2f0107, 0x06a00008,
+	0x060c3d08, 0x0c791780, 0x00000000, 0x07800007, 0x09508987,
+	0x078016c9, 0x09408989, 0x0680000b, 0x0481f249, 0x05403249,
+	0x07800007, 0x0480f207, 0x068003ca, 0x0240a20a, 0x058041c7,
+	0x020091c9, 0x06804007, 0x020091c9, 0x078000c7, 0x0a60c007,
+	0x07000247, 0x06800007, 0x03807287, 0x095a12c7, 0x06804007,
+	0x020091c9, 0x07800107, 0x0a60c007, 0x07000247, 0x06800007,
+	0x03807287, 0x095c12c7, 0x06804007, 0x020091c9, 0x07800bc7,
+	0x0a60c007, 0x07000247, 0x06800007, 0x03807287, 0x095e12c7,
+	0x0c7fd780, 0x07c0008b, 0x07800087, 0x060c2307, 0x068fdfca,
+	0x064e0408, 0x02808288, 0x02c08948, 0x060e0408, 0x060c0726,
+	0x060c0227, 0x060c032e, 0x06800008, 0x07800507, 0x09582207,
+	0x098083c8, 0x06c00308, 0x060e0508, 0x080c2540, 0x080c2606,
+	0x064c2307, 0x093041c7, 0x0a6f8007, 0x00000000, 0x064c2307,
+	0x0be08107, 0x0c7808c0, 0x07800208, 0x0aa7c048, 0x068000c8,
+	0x07c00148, 0x04c00208, 0x0be64207, 0x060c2108, 0x07800248,
+	0x0aa20008, 0x00000000, 0x080c2590, 0x080c2607, 0x080c2601,
+	0x080c2604, 0x0c780180, 0x080c2602, 0x080c2500, 0x080c2607,
+	0x080c2604, 0x080c2602, 0x07802c08, 0x04c28208, 0x09808208,
 	0x060c2108, 0x0c01a9c0, 0x080c260e, 0x0c01a100, 0x00000000,
-	0x0c7fdd00, 0x00000000,
-	0x0c7ffd80, 0x080c2560, 0x0c78ff00, 0x00000000,
-	0x06800048, 0x07c00148, 0x04c00208,
-	0x0be68207, 0x07800207, 0x0aae4047,
-	0x060c2108, 0x080c2560, 0x0683ffc9, 0x064c2307,
-	0x09304207, 0x0aa10008,
-	0x091421c7, 0x0b6f0049, 0x04401249, 0x0be1c087, 0x06800008,
-	0x060c2b08,
-	0x0a280047, 0x080c2604, 0x0c7ff780, 0x080c2602, 0x07800248, 0x0a628008,
-	0x00000000, 0x080c2510, 0x080c2601, 0x0c7ff5c0, 0x080c2604, 0x060c2108,
-	0x080c2b00,
-	0x0c7ff4c0, 0x080c2560, 0x0a2e0047, 0x00000000, 0x080c2530,
-	0x080c2602, 0x0c7ff340,
-	0x080c2601, 0x07800087, 0x060c2307, 0x068fdfca,
-	0x064e0408, 0x02808288, 0x02c08948,
-	0x060e0408, 0x060c0726, 0x060c0227,
-	0x060c032e, 0x06800008, 0x07800507, 0x09582207,
-	0x098083c8, 0x06c00308,
+	0x0c7fdd00, 0x00000000, 0x0c7ffd80, 0x080c2560, 0x0c78ff00,
+	0x00000000, 0x06800048, 0x07c00148, 0x04c00208, 0x0be68207,
+	0x07800207, 0x0aae4047, 0x060c2108, 0x080c2560, 0x0683ffc9,
+	0x064c2307, 0x09304207, 0x0aa10008, 0x091421c7, 0x0b6f0049,
+	0x04401249, 0x0be1c087, 0x06800008, 0x060c2b08, 0x0a280047,
+	0x080c2604, 0x0c7ff780, 0x080c2602, 0x07800248, 0x0a628008,
+	0x00000000, 0x080c2510, 0x080c2601, 0x0c7ff5c0, 0x080c2604,
+	0x060c2108, 0x080c2b00, 0x0c7ff4c0, 0x080c2560, 0x0a2e0047,
+	0x00000000, 0x080c2530, 0x080c2602, 0x0c7ff340, 0x080c2601,
+	0x07800087, 0x060c2307, 0x068fdfca, 0x064e0408, 0x02808288,
+	0x02c08948, 0x060e0408, 0x060c0726, 0x060c0227, 0x060c032e,
+	0x06800008, 0x07800507, 0x09582207, 0x098083c8, 0x06c00308,
 	0x060e0508, 0x080c2550, 0x080c2605, 0x064c2307, 0x09304207,
-	0x0a6f8008,
-	0x0a230207, 0x06800048, 0x07c00148, 0x04c00208, 0x060c2108, 0x0aa0c0a0,
-	0x0c7fec00, 0x080c2560, 0x080c2570, 0x080c260c, 0x0c7feb00, 0x080c2607,
-	0x091421c7,
-	0x0a220047, 0x00000000, 0x080c25a0, 0x080c2607, 0x080c2601,
-	0x080c2602, 0x0c7fe8c0,
-	0x080c2604, 0x0a6180a0, 0x00000000, 0x080c2570,
-	0x080c260c, 0x0c7800c0, 0x080c2601,
-	0x080c2500, 0x080c260a, 0x080c2607,
-	0x080c2604, 0x0c7fe5c0, 0x080c2602, 0x07800087,
-	0x060c2307, 0x068fdfca,
-	0x064e0408, 0x02808288, 0x02c08948, 0x060e0408, 0x060c0726,
-	0x060c0227,
-	0x060c032e, 0x06800008, 0x07800507, 0x09582207, 0x098083c8, 0x06c00308,
-	0x060e0508, 0x080c2570, 0x080c2606, 0x064c2307, 0x093041c7, 0x0a6f8007,
-	0x00000000,
-	0x064c2307, 0x09181207, 0x0aa6c008, 0x06800048, 0x07c00148,
-	0x04c00208, 0x0be20207,
-	0x07800207, 0x0aa4c047, 0x060c2108, 0x080c2500,
-	0x080c2607, 0x0c780140, 0x080c2604,
-	0x060c2108, 0x080c2b00, 0x080c2560,
-	0x07802c08, 0x04c28208, 0x09808208, 0x060c2108,
-	0x0c018540, 0x080c260e,
-	0x0c017c80, 0x00000000, 0x0c7fb880, 0x00000000, 0x0c78db00,
-	0x00000000,
-	0x07800208, 0x0aaf4048, 0x06800048, 0x07c00148, 0x04c00208, 0x0be20207,
-	0x060c2108, 0x080c2560, 0x080c2609, 0x080c2602, 0x080c2601, 0x0c7ffa40,
-	0x080c2604,
-	0x080c2b00, 0x0c7ff980, 0x080c2560, 0x07800087, 0x060c2307,
-	0x068fdfca, 0x064e0408,
-	0x02808288, 0x02c08948, 0x060e0408, 0x060c0726,
-	0x060c0227, 0x060c032e, 0x06800008,
-	0x07800507, 0x09582207, 0x098083c8,
-	0x06c00308, 0x060e0508, 0x080c2540, 0x080c2606,
-	0x064c2307, 0x093041c7,
-	0x0a6f8007, 0x00000000, 0x064c2307, 0x0a228107, 0x091421c7,
-	0x068000c8,
-	0x07c00148, 0x04c00208, 0x080c2570, 0x0c7fcb00, 0x080c260a, 0x0c78cec0,
-	0x00000000, 0x07800208, 0x0aaf4048, 0x06800048, 0x07c00148, 0x04c00208,
-	0x0be20047,
+	0x0a6f8008, 0x0a230207, 0x06800048, 0x07c00148, 0x04c00208,
+	0x060c2108, 0x0aa0c0a0, 0x0c7fec00, 0x080c2560, 0x080c2570,
+	0x080c260c, 0x0c7feb00, 0x080c2607, 0x091421c7, 0x0a220047,
+	0x00000000, 0x080c25a0, 0x080c2607, 0x080c2601, 0x080c2602,
+	0x0c7fe8c0, 0x080c2604, 0x0a6180a0, 0x00000000, 0x080c2570,
+	0x080c260c, 0x0c7800c0, 0x080c2601, 0x080c2500, 0x080c260a,
+	0x080c2607, 0x080c2604, 0x0c7fe5c0, 0x080c2602, 0x07800087,
+	0x060c2307, 0x068fdfca, 0x064e0408, 0x02808288, 0x02c08948,
+	0x060e0408, 0x060c0726, 0x060c0227, 0x060c032e, 0x06800008,
+	0x07800507, 0x09582207, 0x098083c8, 0x06c00308, 0x060e0508,
+	0x080c2570, 0x080c2606, 0x064c2307, 0x093041c7, 0x0a6f8007,
+	0x00000000, 0x064c2307, 0x09181207, 0x0aa6c008, 0x06800048,
+	0x07c00148, 0x04c00208, 0x0be20207, 0x07800207, 0x0aa4c047,
+	0x060c2108, 0x080c2500, 0x080c2607, 0x0c780140, 0x080c2604,
+	0x060c2108, 0x080c2b00, 0x080c2560, 0x07802c08, 0x04c28208,
+	0x09808208, 0x060c2108, 0x0c018540, 0x080c260e, 0x0c017c80,
+	0x00000000, 0x0c7fb880, 0x00000000, 0x0c78db00, 0x00000000,
+	0x07800208, 0x0aaf4048, 0x06800048, 0x07c00148, 0x04c00208,
+	0x0be20207, 0x060c2108, 0x080c2560, 0x080c2609, 0x080c2602,
+	0x080c2601, 0x0c7ffa40, 0x080c2604, 0x080c2b00, 0x0c7ff980,
+	0x080c2560, 0x07800087, 0x060c2307, 0x068fdfca, 0x064e0408,
+	0x02808288, 0x02c08948, 0x060e0408, 0x060c0726, 0x060c0227,
+	0x060c032e, 0x06800008, 0x07800507, 0x09582207, 0x098083c8,
+	0x06c00308, 0x060e0508, 0x080c2540, 0x080c2606, 0x064c2307,
+	0x093041c7, 0x0a6f8007, 0x00000000, 0x064c2307, 0x0a228107,
+	0x091421c7, 0x068000c8, 0x07c00148, 0x04c00208, 0x080c2570,
+	0x0c7fcb00, 0x080c260a, 0x0c78cec0, 0x00000000, 0x07800208,
+	0x0aaf4048, 0x06800048, 0x07c00148, 0x04c00208, 0x0be20047,
 	0x060c2108, 0x080c2570, 0x080c2607, 0x080c2602, 0x080c2601,
-	0x0c7fee00, 0x080c2604,
-	0x080c2530, 0x080c2607, 0x080c2602, 0x0c7fc840,
-	0x080c2601, 0x0649c607, 0x040011c7,
-	0x0609c607, 0x0c000a40, 0x00000000,
-	0x064c0809, 0x064c090b, 0x0680040a, 0x063f000a,
-	0x0680000a, 0x063f000a,
-	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x060c0809,
-	0x060c090b,
-	0x0c000900, 0x00000000, 0x060c1a1f, 0x080c1e01, 0x06800009, 0x060c0c09,
-	0x06c04049, 0x060c0d09, 0x080e1600, 0x0cc00000, 0x00000000, 0x064e1209,
-	0x091e1249,
-	0x0bef8049, 0x00000000, 0x064e0009, 0x064e0e0b, 0x064e0c0c,
-	0x083f0040, 0x083f0000,
-	0x0680020d, 0x0d00000d, 0x00000000, 0x060e0009,
-	0x060e0e0b, 0x0cc00000, 0x060e0c0c,
-	0x0683ffc9, 0x0aa18009, 0x0649470a,
-	0x0910828a, 0x07800008, 0x0a4fc20a, 0x04401249,
-	0x0cc00000, 0x00000000,
+	0x0c7fee00, 0x080c2604, 0x080c2530, 0x080c2607, 0x080c2602,
+	0x0c7fc840, 0x080c2601, 0x0649c607, 0x040011c7, 0x0609c607,
+	0x0c000a40, 0x00000000, 0x064c0809, 0x064c090b, 0x0680040a,
+	0x063f000a, 0x0680000a, 0x063f000a, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x060c0809, 0x060c090b, 0x0c000900,
+	0x00000000, 0x060c1a1f, 0x080c1e01, 0x06800009, 0x060c0c09,
+	0x06c04049, 0x060c0d09, 0x080e1600, 0x0cc00000, 0x00000000,
+	0x064e1209, 0x091e1249, 0x0bef8049, 0x00000000, 0x064e0009,
+	0x064e0e0b, 0x064e0c0c, 0x083f0040, 0x083f0000, 0x0680020d,
+	0x0d00000d, 0x00000000, 0x060e0009, 0x060e0e0b, 0x0cc00000,
+	0x060e0c0c, 0x0683ffc9, 0x0aa18009, 0x0649470a, 0x0910828a,
+	0x07800008, 0x0a4fc20a, 0x04401249, 0x0cc00000, 0x00000000,
 	0x0c07f9c0, 0x00000000, 0x06490b09, 0x09809009, 0x09809089,
-	0x06090b09,
-	0x09c09009, 0x09c09089, 0x06090b09, 0x08095003, 0x08095000, 0x0683ffc9,
-	0x06498f0a, 0x0aa0c009, 0x0a6f800a, 0x04401249, 0x064c3d0a, 0x0580a28a,
-	0x0bef80ca,
-	0x00000000, 0x06498e0a, 0x0980a00a, 0x068007c9, 0x09705289,
-	0x06098e0a, 0x06800009,
-	0x09705289, 0x09c0a00a, 0x0cc00000, 0x06098e0a,
-	0x0a245007, 0x00000000, 0x0c07f5c0,
-	0x00000000, 0x064c000a, 0x09c0a18a,
-	0x0980a20a, 0x0980a00a, 0x060c000a, 0x064c080a,
-	0x0980a34a, 0x060c080a,
-	0x0c07f580, 0x00000000, 0x080e1600, 0x0680000a, 0x07c003ca,
-	0x07800647,
-	0x0aa20007, 0x00000000, 0x0fc08280, 0x06801007, 0x07c00347, 0x06809409,
-	0x0c781580, 0x060c0809, 0x064c1a07, 0x0b210007, 0x06800008, 0x0c78adc0,
-	0x00000000,
-	0x0fc08280, 0x0fc081c0, 0x07c00347, 0x020081c8, 0x0a20d007,
-	0x06800409, 0x06809409,
-	0x060c0809, 0x0fc081c0, 0x020081c8, 0x05410247,
-	0x0fc081c0, 0x0a646207, 0x020081c8,
-	0x0fc081c0, 0x020081c8, 0x09508247,
-	0x0fc081c0, 0x020081c8, 0x09408247, 0x07c02e09,
-	0x058101c9, 0x07c02f07,
-	0x04010249, 0x05403249, 0x060c1a09, 0x0fc081c0, 0x0aa1a207,
-	0x020081c8,
-	0x07802007, 0x060c0807, 0x0c78a580, 0x060c1a1f, 0x0fc081c0, 0x020081c8,
-	0x05408247, 0x0fc081c0, 0x020081c8, 0x09408247, 0x07c02049, 0x0fc081c0,
-	0x0a6d2207,
-	0x020081c8, 0x0fc081c0, 0x020081c8, 0x05408247, 0x0fc081c0,
-	0x020081c8, 0x09408247,
-	0x07c02089, 0x0fc081c0, 0x0a6aa207, 0x020081c8,
-	0x0fc081c0, 0x05408247, 0x0fc081c0,
-	0x09408247, 0x0a4e4209, 0x0fc081c0,
-	0x0a68a207, 0x0fc081c0, 0x05408247, 0x0fc081c0,
-	0x09408247, 0x0a4dd209,
-	0x0fc081c0, 0x0aa36207, 0x0c7ff680, 0x06800047, 0x07c01407,
-	0x07802507,
-	0x0aa0c047, 0x06800087, 0x06800047, 0x07c024c7, 0x06800047, 0x0c783000,
-	0x07c004c7, 0x0c782480, 0x0aa4c3ca, 0x0aaf838a, 0x0aacc30a, 0x0a61034a,
-	0x06800007,
+	0x06090b09, 0x09c09009, 0x09c09089, 0x06090b09, 0x08095003,
+	0x08095000, 0x0683ffc9, 0x06498f0a, 0x0aa0c009, 0x0a6f800a,
+	0x04401249, 0x064c3d0a, 0x0580a28a, 0x0bef80ca, 0x00000000,
+	0x06498e0a, 0x0980a00a, 0x068007c9, 0x09705289, 0x06098e0a,
+	0x06800009, 0x09705289, 0x09c0a00a, 0x0cc00000, 0x06098e0a,
+	0x0a245007, 0x00000000, 0x0c07f5c0, 0x00000000, 0x064c000a,
+	0x09c0a18a, 0x0980a20a, 0x0980a00a, 0x060c000a, 0x064c080a,
+	0x0980a34a, 0x060c080a, 0x0c07f580, 0x00000000, 0x080e1600,
+	0x0680000a, 0x07c003ca, 0x07800647, 0x0aa20007, 0x00000000,
+	0x0fc08280, 0x06801007, 0x07c00347, 0x06809409, 0x0c781580,
+	0x060c0809, 0x064c1a07, 0x0b210007, 0x06800008, 0x0c78adc0,
+	0x00000000, 0x0fc08280, 0x0fc081c0, 0x07c00347, 0x020081c8,
+	0x0a20d007, 0x06800409, 0x06809409, 0x060c0809, 0x0fc081c0,
+	0x020081c8, 0x05410247, 0x0fc081c0, 0x0a646207, 0x020081c8,
+	0x0fc081c0, 0x020081c8, 0x09508247, 0x0fc081c0, 0x020081c8,
+	0x09408247, 0x07c02e09, 0x058101c9, 0x07c02f07, 0x04010249,
+	0x05403249, 0x060c1a09, 0x0fc081c0, 0x0aa1a207, 0x020081c8,
+	0x07802007, 0x060c0807, 0x0c78a580, 0x060c1a1f, 0x0fc081c0,
+	0x020081c8, 0x05408247, 0x0fc081c0, 0x020081c8, 0x09408247,
+	0x07c02049, 0x0fc081c0, 0x0a6d2207, 0x020081c8, 0x0fc081c0,
+	0x020081c8, 0x05408247, 0x0fc081c0, 0x020081c8, 0x09408247,
+	0x07c02089, 0x0fc081c0, 0x0a6aa207, 0x020081c8, 0x0fc081c0,
+	0x05408247, 0x0fc081c0, 0x09408247, 0x0a4e4209, 0x0fc081c0,
+	0x0a68a207, 0x0fc081c0, 0x05408247, 0x0fc081c0, 0x09408247,
+	0x0a4dd209, 0x0fc081c0, 0x0aa36207, 0x0c7ff680, 0x06800047,
+	0x07c01407, 0x07802507, 0x0aa0c047, 0x06800087, 0x06800047,
+	0x07c024c7, 0x06800047, 0x0c783000, 0x07c004c7, 0x0c782480,
+	0x0aa4c3ca, 0x0aaf838a, 0x0aacc30a, 0x0a61034a, 0x06800007,
 	0x0c782e00, 0x07c004c7, 0x0a6082ca, 0x0c788d00, 0x0a62040a,
-	0x00000000, 0x0fc101c0,
-	0x07c02107, 0x07c02187, 0x0fc101c0, 0x0c780100,
-	0x07c021c7, 0x0c789540, 0x00000000,
-	0x06800047, 0x07c00447, 0x06800007,
-	0x07c00247, 0x0fc02280, 0x07c020ca, 0x054011ca,
-	0x04c011c7, 0x060c1e07,
-	0x0aa140ca, 0x00000000, 0x0fc021c0, 0x0c780100, 0x00000000,
-	0x0fc031c0,
-	0x0fc021c0, 0x0fc031c0, 0x0fc051c0, 0x0aa0c0ca, 0x0c781380, 0x00000000,
-	0x0fc011c0, 0x07c02487, 0x0fc0c1c0, 0x040011c7, 0x054011c7, 0x07c02107,
-	0x07c02187,
-	0x0fc0c1c0, 0x040011c7, 0x054011c7, 0x07c02147, 0x07c021c7,
-	0x0fc011c0, 0x07c02207,
-	0x0fc011c0, 0x07c02247, 0x0fc011c0, 0x07c02287,
-	0x0fc011c0, 0x07c022c7, 0x0fc011c0,
-	0x0fc011c0, 0x07c02307, 0x0fc011c0,
-	0x0a610007, 0x0680000a, 0x0c780a80, 0x0609c00a,
-	0x0fc0e1c0, 0x040011c7,
+	0x00000000, 0x0fc101c0, 0x07c02107, 0x07c02187, 0x0fc101c0,
+	0x0c780100, 0x07c021c7, 0x0c789540, 0x00000000, 0x06800047,
+	0x07c00447, 0x06800007, 0x07c00247, 0x0fc02280, 0x07c020ca,
+	0x054011ca, 0x04c011c7, 0x060c1e07, 0x0aa140ca, 0x00000000,
+	0x0fc021c0, 0x0c780100, 0x00000000, 0x0fc031c0, 0x0fc021c0,
+	0x0fc031c0, 0x0fc051c0, 0x0aa0c0ca, 0x0c781380, 0x00000000,
+	0x0fc011c0, 0x07c02487, 0x0fc0c1c0, 0x040011c7, 0x054011c7,
+	0x07c02107, 0x07c02187, 0x0fc0c1c0, 0x040011c7, 0x054011c7,
+	0x07c02147, 0x07c021c7, 0x0fc011c0, 0x07c02207, 0x0fc011c0,
+	0x07c02247, 0x0fc011c0, 0x07c02287, 0x0fc011c0, 0x07c022c7,
+	0x0fc011c0, 0x0fc011c0, 0x07c02307, 0x0fc011c0, 0x0a610007,
+	0x0680000a, 0x0c780a80, 0x0609c00a, 0x0fc0e1c0, 0x040011c7,
 	0x0fc0e1c0, 0x040011c7, 0x0fc011c0, 0x0aa2c007, 0x00000000,
-	0x0fc041c0,
-	0x0a6203c7, 0x04000287, 0x0fc081c0, 0x040011c7, 0x05408287, 0x0fc081c0,
-	0x040011c7, 0x02c0a1ca, 0x0609c00a, 0x0fc011c0, 0x0a610007, 0x06800009,
-	0x0c780380,
-	0x0680000a, 0x0fc011c0, 0x0aa18007, 0x00000000, 0x0fc101c0,
-	0x04001247, 0x0c7801c0,
-	0x0680080a, 0x0fc081c0, 0x0fc041c0, 0x0aa0c047,
-	0x0680fa0a, 0x0680fa4a, 0x0fc011c0,
-	0x0aa14007, 0x00000000, 0x0fc081c0,
-	0x0fc081c0, 0x0fc081c0, 0x0fc011c0, 0x0a60c007,
-	0x0c7800c0, 0x06800008,
-	0x0fc05200, 0x07c02348, 0x0c787d00, 0x00000000, 0x0fc011c0,
-	0x07c00047,
-	0x0fc011c0, 0x0fc011c0, 0x07c02d07, 0x0fc011c0, 0x0fc011c0, 0x07c02c47,
-	0x0fc011c0, 0x07c02907, 0x0fc021c0, 0x07c023c7, 0x0fc011c0, 0x07c02b87,
-	0x0fc011c0,
-	0x0fc011c0, 0x07c02447, 0x0fc011c0, 0x07c02d47, 0x0fc011c0,
-	0x07c02d87, 0x0fc031c0,
-	0x07c02dc7, 0x0fc021c0, 0x07c02407, 0x0fc011c0,
-	0x07c022c7, 0x0c7875c0, 0x0fc011c0,
-	0x0fc011c0, 0x0fc011c0, 0x0fc011c0,
-	0x07c02387, 0x0fc011c0, 0x07c00447, 0x0fc011c0,
-	0x07c00047, 0x0fc011c0,
-	0x07c02c47, 0x0fc011c0, 0x07c02907, 0x0fc021c0, 0x07c023c7,
-	0x0fc011c0,
-	0x07c02b87, 0x0fc011c0, 0x07c02447, 0x0fc021c0, 0x07c02407, 0x07802348,
-	0x0aa14008, 0x00000000, 0x0fc081c0, 0x0aefc048, 0x04401208, 0x0fc011c0,
-	0x0aa28007,
-	0x00000000, 0x0fc0c1c0, 0x040011c7, 0x054011c7, 0x07c02187,
-	0x0fc0c1c0, 0x040011c7,
-	0x054011c7, 0x07c021c7, 0x07802907, 0x0aa0c007,
-	0x06800007, 0x0fc011c0, 0x07c00a07,
-	0x0c786ac0, 0x00000000, 0x06800048,
-	0x07c01408, 0x064c510a, 0x064c4607, 0x078007c8,
-	0x05410208, 0x07800789,
-	0x02008248, 0x0580a208, 0x0e000288, 0x00000000, 0x00000000,
-	0x00000000,
-	0x0f000200, 0x0f010280, 0x0970820a, 0x0540a208, 0x020081c8, 0x064c430a,
-	0x02408288, 0x064c400a, 0x02408288, 0x07c00808, 0x05810208, 0x07c00848,
-	0x07801347,
+	0x0fc041c0, 0x0a6203c7, 0x04000287, 0x0fc081c0, 0x040011c7,
+	0x05408287, 0x0fc081c0, 0x040011c7, 0x02c0a1ca, 0x0609c00a,
+	0x0fc011c0, 0x0a610007, 0x06800009, 0x0c780380, 0x0680000a,
+	0x0fc011c0, 0x0aa18007, 0x00000000, 0x0fc101c0, 0x04001247,
+	0x0c7801c0, 0x0680080a, 0x0fc081c0, 0x0fc041c0, 0x0aa0c047,
+	0x0680fa0a, 0x0680fa4a, 0x0fc011c0, 0x0aa14007, 0x00000000,
+	0x0fc081c0, 0x0fc081c0, 0x0fc081c0, 0x0fc011c0, 0x0a60c007,
+	0x0c7800c0, 0x06800008, 0x0fc05200, 0x07c02348, 0x0c787d00,
+	0x00000000, 0x0fc011c0, 0x07c00047, 0x0fc011c0, 0x0fc011c0,
+	0x07c02d07, 0x0fc011c0, 0x0fc011c0, 0x07c02c47, 0x0fc011c0,
+	0x07c02907, 0x0fc021c0, 0x07c023c7, 0x0fc011c0, 0x07c02b87,
+	0x0fc011c0, 0x0fc011c0, 0x07c02447, 0x0fc011c0, 0x07c02d47,
+	0x0fc011c0, 0x07c02d87, 0x0fc031c0, 0x07c02dc7, 0x0fc021c0,
+	0x07c02407, 0x0fc011c0, 0x07c022c7, 0x0c7875c0, 0x0fc011c0,
+	0x0fc011c0, 0x0fc011c0, 0x0fc011c0, 0x07c02387, 0x0fc011c0,
+	0x07c00447, 0x0fc011c0, 0x07c00047, 0x0fc011c0, 0x07c02c47,
+	0x0fc011c0, 0x07c02907, 0x0fc021c0, 0x07c023c7, 0x0fc011c0,
+	0x07c02b87, 0x0fc011c0, 0x07c02447, 0x0fc021c0, 0x07c02407,
+	0x07802348, 0x0aa14008, 0x00000000, 0x0fc081c0, 0x0aefc048,
+	0x04401208, 0x0fc011c0, 0x0aa28007, 0x00000000, 0x0fc0c1c0,
+	0x040011c7, 0x054011c7, 0x07c02187, 0x0fc0c1c0, 0x040011c7,
+	0x054011c7, 0x07c021c7, 0x07802907, 0x0aa0c007, 0x06800007,
+	0x0fc011c0, 0x07c00a07, 0x0c786ac0, 0x00000000, 0x06800048,
+	0x07c01408, 0x064c510a, 0x064c4607, 0x078007c8, 0x05410208,
+	0x07800789, 0x02008248, 0x0580a208, 0x0e000288, 0x00000000,
+	0x00000000, 0x00000000, 0x0f000200, 0x0f010280, 0x0970820a,
+	0x0540a208, 0x020081c8, 0x064c430a, 0x02408288, 0x064c400a,
+	0x02408288, 0x07c00808, 0x05810208, 0x07c00848, 0x07801347,
 	0x040011c7, 0x07c01347, 0x06bff127, 0x06fff127, 0x06800026,
-	0x07c00026, 0x07c016e6,
-	0x098253a6, 0x098253e5, 0x09c251e5, 0x07802187,
-	0x0a608007, 0x0c7860c0, 0x0400f1c7,
-	0x058041c7, 0x05404b87, 0x04401bae,
-	0x05402bae, 0x060c0907, 0x07c00987, 0x04401247,
-	0x07c00609, 0x09708989,
-	0x05404287, 0x078021c8, 0x0a608008, 0x0c785d40, 0x0400f208,
-	0x05804208,
-	0x05404248, 0x04401249, 0x05402249, 0x09610b89, 0x07c009c8, 0x04401248,
-	0x09608989, 0x04000248, 0x09610247, 0x06095209, 0x05404208, 0x078020c7,
-	0x0a6100c7,
-	0x00000000, 0x0780218a, 0x078021c8, 0x0961020a, 0x06090808,
-	0x06800007, 0x07c00507,
-	0x06800047, 0x07c00587, 0x07800607, 0x040011c7,
-	0x07c005c7, 0x078020c7, 0x0aa080c7,
-	0x0c784680, 0x078004c7, 0x0a624007,
-	0x078003a0, 0x0c020280, 0x00000000, 0x0c01f580,
-	0x00000000, 0x0aa14008,
+	0x07c00026, 0x07c016e6, 0x098253a6, 0x098253e5, 0x09c251e5,
+	0x07802187, 0x0a608007, 0x0c7860c0, 0x0400f1c7, 0x058041c7,
+	0x05404b87, 0x04401bae, 0x05402bae, 0x060c0907, 0x07c00987,
+	0x04401247, 0x07c00609, 0x09708989, 0x05404287, 0x078021c8,
+	0x0a608008, 0x0c785d40, 0x0400f208, 0x05804208, 0x05404248,
+	0x04401249, 0x05402249, 0x09610b89, 0x07c009c8, 0x04401248,
+	0x09608989, 0x04000248, 0x09610247, 0x06095209, 0x05404208,
+	0x078020c7, 0x0a6100c7, 0x00000000, 0x0780218a, 0x078021c8,
+	0x0961020a, 0x06090808, 0x06800007, 0x07c00507, 0x06800047,
+	0x07c00587, 0x07800607, 0x040011c7, 0x07c005c7, 0x078020c7,
+	0x0aa080c7, 0x0c784680, 0x078004c7, 0x0a624007, 0x078003a0,
+	0x0c020280, 0x00000000, 0x0c01f580, 0x00000000, 0x0aa14008,
 	0x0c785380, 0x00000000, 0x0c020480, 0x00000000, 0x078024c8,
-	0x05406208,
-	0x07800247, 0x09482207, 0x09403220, 0x060c0408, 0x0687c008, 0x07c00288,
-	0x0c005840, 0x07c013e0, 0x0c014e00, 0x06800008, 0x06a00008, 0x07802c87,
-	0x09610207,
-	0x060c3d08, 0x064c3d08, 0x09161208, 0x0a6f8008, 0x078002c8,
-	0x0aa14008, 0x06bfffc8,
-	0x060c3908, 0x0c780480, 0x060c3808, 0x06800008,
-	0x06c07e08, 0x078004c9, 0x0aa10009,
-	0x06a00009, 0x06c00009, 0x02008248,
-	0x0aa180a0, 0x020088c8, 0x060c3808, 0x06bfffc8,
-	0x0c780140, 0x060c3908,
-	0x060c3908, 0x06bfffc8, 0x060c3808, 0x0c0065c0, 0x00000000,
-	0x0c020a40,
-	0x00000000, 0x080e1600, 0x078004c7, 0x0aa0c007, 0x0c782840, 0x00000000,
-	0x0649c909, 0x0aa10009, 0x06800087, 0x0c7f0f00, 0x07c01507, 0x07801487,
-	0x0a608007,
-	0x0c780c80, 0x044011c7, 0x0aa0c087, 0x07801549, 0x078015c9,
-	0x0b20c0c9, 0x00000000,
-	0x0c780ac0, 0x0649c808, 0x0aa14008, 0x078014c7,
-	0x02807207, 0x07c014c7, 0x0809c800,
-	0x040301c9, 0x070001c7, 0x054101c7,
-	0x04034209, 0x07000208, 0x094101c8, 0x0609cb07,
-	0x040441c9, 0x070001c7,
-	0x054101c7, 0x04040209, 0x07000208, 0x094101c8, 0x0609cc07,
-	0x040621c9,
-	0x070001c7, 0x0609d307, 0x040661c9, 0x070001c7, 0x0609d407, 0x040381c9,
-	0x070001c7, 0x07800fc8, 0x020081c8, 0x0609ca08, 0x07c00fdf, 0x04029209,
-	0x04001249,
-	0x07000208, 0x09464248, 0x07801808, 0x094e1248, 0x0609c909,
-	0x08007401, 0x06800009,
-	0x07c01489, 0x06800009, 0x07c01509, 0x078014c7,
-	0x02c07247, 0x04000294, 0x0a238047,
-	0x06800008, 0x0400029b, 0x0a22c087,
-	0x06800048, 0x0400029c, 0x0a220107, 0x06800088,
-	0x0400029d, 0x0a214207,
-	0x068000c8, 0x06800047, 0x0c7efd40, 0x07c01507, 0x07801607,
-	0x090041c7,
-	0x0a8071c8, 0x078002c7, 0x0aa08047, 0x0a6200a0, 0x07801607, 0x090841c7,
-	0x0a4051c8, 0x06800047, 0x03407207, 0x0c7ff900, 0x02c091c9, 0x07800807,
-	0x04040248,
+	0x05406208, 0x07800247, 0x09482207, 0x09403220, 0x060c0408,
+	0x0687c008, 0x07c00288, 0x0c005840, 0x07c013e0, 0x0c014e00,
+	0x06800008, 0x06a00008, 0x07802c87, 0x09610207, 0x060c3d08,
+	0x064c3d08, 0x09161208, 0x0a6f8008, 0x078002c8, 0x0aa14008,
+	0x06bfffc8, 0x060c3908, 0x0c780480, 0x060c3808, 0x06800008,
+	0x06c07e08, 0x078004c9, 0x0aa10009, 0x06a00009, 0x06c00009,
+	0x02008248, 0x0aa180a0, 0x020088c8, 0x060c3808, 0x06bfffc8,
+	0x0c780140, 0x060c3908, 0x060c3908, 0x06bfffc8, 0x060c3808,
+	0x0c0065c0, 0x00000000, 0x0c020a40, 0x00000000, 0x080e1600,
+	0x078004c7, 0x0aa0c007, 0x0c782840, 0x00000000, 0x0649c909,
+	0x0aa10009, 0x06800087, 0x0c7f0f00, 0x07c01507, 0x07801487,
+	0x0a608007, 0x0c780c80, 0x044011c7, 0x0aa0c087, 0x07801549,
+	0x078015c9, 0x0b20c0c9, 0x00000000, 0x0c780ac0, 0x0649c808,
+	0x0aa14008, 0x078014c7, 0x02807207, 0x07c014c7, 0x0809c800,
+	0x040301c9, 0x070001c7, 0x054101c7, 0x04034209, 0x07000208,
+	0x094101c8, 0x0609cb07, 0x040441c9, 0x070001c7, 0x054101c7,
+	0x04040209, 0x07000208, 0x094101c8, 0x0609cc07, 0x040621c9,
+	0x070001c7, 0x0609d307, 0x040661c9, 0x070001c7, 0x0609d407,
+	0x040381c9, 0x070001c7, 0x07800fc8, 0x020081c8, 0x0609ca08,
+	0x07c00fdf, 0x04029209, 0x04001249, 0x07000208, 0x09464248,
+	0x07802248, 0x094e1248, 0x0609c909, 0x08007401, 0x06800009,
+	0x07c01489, 0x06800009, 0x07c01509, 0x078014c7, 0x02c07247,
+	0x04000294, 0x0a238047, 0x06800008, 0x0400029b, 0x0a22c087,
+	0x06800048, 0x0400029c, 0x0a220107, 0x06800088, 0x0400029d,
+	0x0a214207, 0x068000c8, 0x06800047, 0x0c7efd40, 0x07c01507,
+	0x07801607, 0x090041c7, 0x0a8071c8, 0x078002c7, 0x0aa08047,
+	0x0a6200a0, 0x07801607, 0x090841c7, 0x0a4051c8, 0x06800047,
+	0x03407207, 0x0c7ff900, 0x02c091c9, 0x07800807, 0x04040248,
 	0x07400247, 0x07800847, 0x04004249, 0x07400247, 0x07802187,
-	0x04062248, 0x07400247,
-	0x078021c7, 0x04066248, 0x07400247, 0x07801847,
-	0x054031c7, 0x02c07807, 0x04029248,
-	0x07400247, 0x040301c8, 0x07800f49,
-	0x074001c9, 0x040341c8, 0x07800f09, 0x0a60c060,
-	0x074001c9, 0x04000848,
-	0x0a6200a0, 0x040381c8, 0x074001df, 0x07000889, 0x0aa1c009,
-	0x04401249,
-	0x0c780140, 0x07400889, 0x07800f89, 0x074001c9, 0x04000887, 0x07c00f9f,
-	0x06800047, 0x03407207, 0x078014c9, 0x02c091c9, 0x07c014c9, 0x06800687,
-	0x02007207,
-	0x07802e49, 0x074001c9, 0x0609b20a, 0x0609b00a, 0x0609b10a,
-	0x078002c9, 0x0aa0c049,
-	0x068000c9, 0x04001260, 0x07c01489, 0x078002c9,
-	0x0aa38049, 0x0a6080a0, 0x0c780300,
-	0x07801587, 0x07c015c7, 0x07c01588,
-	0x04000aec, 0x07801609, 0x05404249, 0x09404248,
-	0x07c01609, 0x04000b0a,
+	0x04062248, 0x07400247, 0x078021c7, 0x04066248, 0x07400247,
+	0x07801847, 0x054031c7, 0x02c07807, 0x04029248, 0x07400247,
+	0x040301c8, 0x07800f49, 0x074001c9, 0x040341c8, 0x07800f09,
+	0x0a60c060, 0x074001c9, 0x04000848, 0x0a6200a0, 0x040381c8,
+	0x074001df, 0x07000889, 0x0aa1c009, 0x04401249, 0x0c780140,
+	0x07400889, 0x07800f89, 0x074001c9, 0x04000887, 0x07c00f9f,
+	0x06800047, 0x03407207, 0x078014c9, 0x02c091c9, 0x07c014c9,
+	0x06800687, 0x02007207, 0x07802e49, 0x074001c9, 0x0609b20a,
+	0x0609b00a, 0x0609b10a, 0x078002c9, 0x0aa0c049, 0x068000c9,
+	0x04001260, 0x07c01489, 0x078002c9, 0x0aa38049, 0x0a6080a0,
+	0x0c780300, 0x07801587, 0x07c015c7, 0x07c01588, 0x04000aec,
+	0x07801609, 0x05404249, 0x09404248, 0x07c01609, 0x04000b0a,
 	0x0c7800c0, 0x00000000, 0x07c01548, 0x078020c8, 0x0aa1c0c8,
-	0x0aa180a0,
-	0x0aa10020, 0x06800047, 0x07800307, 0x044011c7, 0x07c00307, 0x07800187,
-	0x0b624087, 0x06800048, 0x0aa240a0, 0x0aa08020, 0x0aa1c007, 0x078004c9,
-	0x0a60c009,
-	0x040011c7, 0x07c00187, 0x0c780180, 0x07c001c8, 0x06800008,
-	0x07c001c8, 0x0c7818c0,
-	0x00000000, 0x0680192d, 0x0aa34020, 0x0aa180a0,
-	0x07800247, 0x0a628047, 0x0680366d,
-	0x0c780200, 0x06804eed, 0x07800247,
-	0x0aa14007, 0x06805c6d, 0x0aa0c087, 0x06806d2d,
-	0x06804eed, 0x064c1e07,
-	0x04c181c7, 0x060c1e07, 0x0c003340, 0x00000000, 0x0c01d8c0,
-	0x00000000,
-	0x064c1e08, 0x07800247, 0x0a618087, 0x09c08408, 0x07800547, 0x0a60c007,
-	0x00000000, 0x09808408, 0x060c1e08, 0x0c01dd40, 0x00000000, 0x0c01f880,
-	0x00000000,
-	0x0cb8002d, 0x00000000, 0x07800347, 0x0be19007, 0x07802e07,
-	0x07802f08, 0x096101c8,
-	0x0ae08047, 0x0c780dc0, 0x078022c7, 0x0aa0c007,
-	0x00000000, 0x0fc011c0, 0x0fc021c0,
-	0x07802d87, 0x0aa0c007, 0x06800208,
-	0x0fc011c0, 0x07c02e47, 0x0c7fb6c0, 0x00000000,
-	0x06800007, 0x07c01407,
-	0x078001c7, 0x0a60c007, 0x0c780980, 0x00000000, 0x0fc091c0,
-	0x078024c8,
-	0x0a60c088, 0x078009c8, 0x02407207, 0x078016c8, 0x0a802207, 0x07c016c7,
-	0x0fc011c0, 0x0aa50007, 0x0c01b440, 0x00000000, 0x078004c7, 0x0aa18007,
-	0x07802507,
-	0x0aa0c047, 0x06800087, 0x06800047, 0x07c024c7, 0x0c01a580,
-	0x00000000, 0x078004c7,
-	0x0aa0c007, 0x00000000, 0x078003a0, 0x0aa08008,
-	0x0c780280, 0x0c010040, 0x06800048,
-	0x098253a5, 0x098253e5, 0x09c251e5,
-	0x0c7fec40, 0x00000000, 0x0c7ece80, 0x00000000,
-	0x0683ffc9, 0x04401249,
-	0x0aaf0009, 0x064c0007, 0x0a2f4047, 0x00000000, 0x064c3a07,
-	0x090061c7,
-	0x0aae4647, 0x00000000, 0x080c2800, 0x080c0002, 0x0c7ec6c0, 0x00000000,
-	0x06b21000, 0x07c01440, 0x0649c014, 0x0649c11b, 0x0649c21c, 0x0649c31d,
-	0x0680402b,
+	0x0aa180a0, 0x0aa10020, 0x06800047, 0x07800307, 0x044011c7,
+	0x07c00307, 0x07800187, 0x0b624087, 0x06800048, 0x0aa240a0,
+	0x0aa08020, 0x0aa1c007, 0x078004c9, 0x0a60c009, 0x040011c7,
+	0x07c00187, 0x0c780180, 0x07c001c8, 0x06800008, 0x07c001c8,
+	0x0c7818c0, 0x00000000, 0x0680192d, 0x0aa34020, 0x0aa180a0,
+	0x07800247, 0x0a628047, 0x0680366d, 0x0c780200, 0x06804eed,
+	0x07800247, 0x0aa14007, 0x06805c6d, 0x0aa0c087, 0x06806d2d,
+	0x06804eed, 0x064c1e07, 0x04c181c7, 0x060c1e07, 0x0c003340,
+	0x00000000, 0x0c01d8c0, 0x00000000, 0x064c1e08, 0x07800247,
+	0x0a618087, 0x09c08408, 0x07800547, 0x0a60c007, 0x00000000,
+	0x09808408, 0x060c1e08, 0x0c01dd40, 0x00000000, 0x0c01f880,
+	0x00000000, 0x0cb8002d, 0x00000000, 0x07800347, 0x0be19007,
+	0x07802e07, 0x07802f08, 0x096101c8, 0x0ae08047, 0x0c780dc0,
+	0x078022c7, 0x0aa0c007, 0x00000000, 0x0fc011c0, 0x0fc021c0,
+	0x07802d87, 0x0aa0c007, 0x06800208, 0x0fc011c0, 0x07c02e47,
+	0x0c7fb6c0, 0x00000000, 0x06800007, 0x07c01407, 0x078001c7,
+	0x0a60c007, 0x0c780980, 0x00000000, 0x0fc091c0, 0x078024c8,
+	0x0a60c088, 0x078009c8, 0x02407207, 0x078016c8, 0x0a802207,
+	0x07c016c7, 0x0fc011c0, 0x0aa50007, 0x0c01b440, 0x00000000,
+	0x078004c7, 0x0aa18007, 0x07802507, 0x0aa0c047, 0x06800087,
+	0x06800047, 0x07c024c7, 0x0c01a580, 0x00000000, 0x078004c7,
+	0x0aa0c007, 0x00000000, 0x078003a0, 0x0aa08008, 0x0c780280,
+	0x0c010040, 0x06800048, 0x098253a5, 0x098253e5, 0x09c251e5,
+	0x0c7fec40, 0x00000000, 0x0c7ece80, 0x00000000, 0x0683ffc9,
+	0x04401249, 0x0aaf0009, 0x064c0007, 0x0a2f4047, 0x00000000,
+	0x064c3a07, 0x090061c7, 0x0aae4647, 0x00000000, 0x080c2800,
+	0x080c0002, 0x0c7ec6c0, 0x00000000, 0x06b21000, 0x07c01440,
+	0x0649c014, 0x0649c11b, 0x0649c21c, 0x0649c31d, 0x0680402b,
 	0x0681412c, 0x0c000440, 0x00000000, 0x08002501, 0x08002605,
-	0x08002708, 0x08002815,
-	0x08002c14, 0x0cc00000, 0x00000000, 0x06800007,
-	0x07c000c7, 0x07c00107, 0x07c00bc7,
-	0x07c00207, 0x07c00907, 0x0cc00000,
-	0x07c00947, 0x0649c402, 0x07c00642, 0x0649cf23,
-	0x064c4002, 0x064c4203,
-	0x02403083, 0x040080c3, 0x07c00783, 0x058100c3, 0x07c007c3,
-	0x064c091f,
-	0x06bfff82, 0x063f0102, 0x06803002, 0x063f0002, 0x06800002, 0x063f0002,
-	0x06bfffc2, 0x063f0102, 0x06800020, 0x07c001a0, 0x07c001e0, 0x068000c2,
-	0x07c024c2,
-	0x06803fc2, 0x07c01542, 0x07c01582, 0x07c015c2, 0x07c01602,
-	0x060c091f, 0x0680001f,
-	0x07c0149f, 0x07c014df, 0x07c0151f, 0x06800402,
-	0x07c02002, 0x060c1a1f, 0x080c1e01,
-	0x06800002, 0x060c0c02, 0x06c04042,
-	0x060c0d02, 0x0cc00000, 0x00000000, 0x0649c803,
-	0x0aa30003, 0x00000000,
+	0x08002708, 0x08002815, 0x08002c14, 0x0cc00000, 0x00000000,
+	0x06800007, 0x07c000c7, 0x07c00107, 0x07c00bc7, 0x07c00207,
+	0x07c00907, 0x0cc00000, 0x07c00947, 0x0649c402, 0x07c00642,
+	0x0649cf23, 0x064c4002, 0x064c4203, 0x02403083, 0x040080c3,
+	0x07c00783, 0x058100c3, 0x07c007c3, 0x064c091f, 0x06bfff82,
+	0x063f0102, 0x06803002, 0x063f0002, 0x06800002, 0x063f0002,
+	0x06bfffc2, 0x063f0102, 0x06800020, 0x07c001a0, 0x07c001e0,
+	0x068000c2, 0x07c024c2, 0x06803fc2, 0x07c01542, 0x07c01582,
+	0x07c015c2, 0x07c01602, 0x060c091f, 0x0680001f, 0x07c0149f,
+	0x07c014df, 0x07c0151f, 0x06800402, 0x07c02002, 0x060c1a1f,
+	0x080c1e01, 0x06800002, 0x060c0c02, 0x06c04042, 0x060c0d02,
+	0x0cc00000, 0x00000000, 0x0649c803, 0x0aa30003, 0x00000000,
 	0x00800000, 0x0649c803, 0x0a60c003, 0x0c7801c0, 0x00400000,
-	0x078014c2,
-	0x028020c2, 0x07c014c2, 0x0809c800, 0x00400000, 0x07801502, 0x0aa0c002,
-	0x06800102, 0x06030502, 0x0b60c224, 0x0cc00000, 0x00000000, 0x00800000,
-	0x00000000,
-	0x06800007, 0x0c071bc0, 0x07c003c7, 0x080c2800, 0x080c0002,
-	0x06800024, 0x0cc00000,
-	0x00400000, 0x064c441a, 0x0912169a, 0x0aaf801a,
-	0x0c7eab80, 0x00000000, 0x0683ffe9,
-	0x04401a69, 0x0aa0c029, 0x0649092a,
-	0x0bef406a, 0x0cc00000, 0x00000000, 0x0c07fe40,
-	0x00000000, 0x06800168,
-	0x0649072a, 0x09503aa8, 0x07800328, 0x09421aa8, 0x07800268,
-	0x0aa0c0a8,
-	0x0982a0ea, 0x09c2a0ea, 0x078029a8, 0x0a60c028, 0x06d1412a, 0x0982a7ea,
-	0x0609072a, 0x06490b2a, 0x0982a02a, 0x06090b2a, 0x09c2a02a, 0x0982a52a,
-	0x0982a56a,
-	0x0982a5aa, 0x078020e8, 0x0aa0c0e8, 0x06800029, 0x06800069,
-	0x095c1aa9, 0x07800268,
-	0x0a63c0a8, 0x068006a8, 0x078015e9, 0x06800029,
-	0x02029a68, 0x07000a68, 0x09541aa8,
-	0x068006a8, 0x078015a9, 0x06800029,
-	0x02029a68, 0x07000a68, 0x09561aa8, 0x0c780340,
-	0x0982a4ea, 0x068006a8,
-	0x078015e9, 0x02029a68, 0x07000a68, 0x09541aa8, 0x068006a8,
-	0x078015a9,
-	0x02029a68, 0x07000a68, 0x09561aa8, 0x09c2a4ea, 0x06090b2a, 0x07801428,
-	0x0aa0c068, 0x0c784680, 0x00000000, 0x0680000d, 0x078029ce, 0x078002e8,
-	0x0aa1c068,
-	0x0a618020, 0x00000000, 0x0680000e, 0x07c029ce, 0x0c780440,
-	0x00000000, 0x0780144a,
-	0x0aa2c060, 0x09082a4a, 0x09102a4a, 0x078004e8,
-	0x0aa10068, 0x00000000, 0x09182a0a,
-	0x02c29a29, 0x0908134a, 0x090a1a8a,
-	0x02c0da8d, 0x0aa0c029, 0x00000000, 0x0680004e,
-	0x06490b2a, 0x09501a8e,
-	0x09521a8d, 0x06090b2a, 0x0a61000e, 0x0a60c00d, 0x0c783a80,
-	0x00000000,
-	0x06800007, 0x06804008, 0x0680c009, 0x0680000a, 0x0c003d40, 0x00000000,
-	0x0780144f, 0x0aa140a0, 0x078002c7, 0x0aa0c047, 0x0c781240, 0x00000000,
-	0x06490b07,
+	0x078014c2, 0x028020c2, 0x07c014c2, 0x0809c800, 0x00400000,
+	0x07801502, 0x0aa0c002, 0x06800102, 0x06030502, 0x0b60c224,
+	0x0cc00000, 0x00000000, 0x00800000, 0x00000000, 0x06800007,
+	0x0c071bc0, 0x07c003c7, 0x080c2800, 0x080c0002, 0x06800024,
+	0x0cc00000, 0x00400000, 0x064c441a, 0x0912169a, 0x0aaf801a,
+	0x0c7eab80, 0x00000000, 0x0683ffe9, 0x04401a69, 0x0aa0c029,
+	0x0649092a, 0x0bef406a, 0x0cc00000, 0x00000000, 0x0c07fe40,
+	0x00000000, 0x06800168, 0x0649072a, 0x09503aa8, 0x07800328,
+	0x09421aa8, 0x07800268, 0x0aa0c0a8, 0x0982a0ea, 0x09c2a0ea,
+	0x078029a8, 0x0a60c028, 0x06d1412a, 0x0982a7ea, 0x0609072a,
+	0x06490b2a, 0x0982a02a, 0x06090b2a, 0x09c2a02a, 0x0982a52a,
+	0x0982a56a, 0x0982a5aa, 0x078020e8, 0x0aa0c0e8, 0x06800029,
+	0x06800069, 0x095c1aa9, 0x07800268, 0x0a63c0a8, 0x068006a8,
+	0x078015e9, 0x06800029, 0x02029a68, 0x07000a68, 0x09541aa8,
+	0x068006a8, 0x078015a9, 0x06800029, 0x02029a68, 0x07000a68,
+	0x09561aa8, 0x0c780340, 0x0982a4ea, 0x068006a8, 0x078015e9,
+	0x02029a68, 0x07000a68, 0x09541aa8, 0x068006a8, 0x078015a9,
+	0x02029a68, 0x07000a68, 0x09561aa8, 0x09c2a4ea, 0x06090b2a,
+	0x07801428, 0x0aa0c068, 0x0c784680, 0x00000000, 0x0680000d,
+	0x078029ce, 0x078002e8, 0x0aa1c068, 0x0a618020, 0x00000000,
+	0x0680000e, 0x07c029ce, 0x0c780440, 0x00000000, 0x0780144a,
+	0x0aa2c060, 0x09082a4a, 0x09102a4a, 0x078004e8, 0x0aa10068,
+	0x00000000, 0x09182a0a, 0x02c29a29, 0x0908134a, 0x090a1a8a,
+	0x02c0da8d, 0x0aa0c029, 0x00000000, 0x0680004e, 0x06490b2a,
+	0x09501a8e, 0x09521a8d, 0x06090b2a, 0x0a61000e, 0x0a60c00d,
+	0x0c783a80, 0x00000000, 0x06800007, 0x06804008, 0x0680c009,
+	0x0680000a, 0x0c003d40, 0x00000000, 0x0780144f, 0x0aa140a0,
+	0x078002c7, 0x0aa0c047, 0x0c781240, 0x00000000, 0x06490b07,
 	0x058081c7, 0x0be0c047, 0x0c780ac0, 0x00000000, 0x0910234f,
-	0x0aa2400d, 0x091421cf,
-	0x040031c7, 0x054081c7, 0x0540820d, 0x06804009,
-	0x0680004a, 0x0c003800, 0x00000000,
-	0x078004c7, 0x0aa30047, 0x0918220f,
-	0x0aa28008, 0x091c21cf, 0x02c0d20d, 0x040031c7,
-	0x054081c7, 0x05408208,
-	0x06804009, 0x0680004a, 0x0c0034c0, 0x00000000, 0x0be1404d,
-	0x00000000,
-	0x06804007, 0x0c005c80, 0x00000000, 0x0be1408d, 0x00000000, 0x06808007,
-	0x0c005b40, 0x00000000, 0x06804007, 0x06800008, 0x0c005580, 0x00000000,
-	0x06808007,
-	0x06800048, 0x0c005480, 0x00000000, 0x06490b07, 0x058091c7,
-	0x0be0c047, 0x0c782940,
-	0x00000000, 0x0908234f, 0x0aa4400d, 0x090c21cf,
-	0x040031c7, 0x054081c7, 0x0540820d,
-	0x06804009, 0x0680004a, 0x0c002c80,
-	0x00000000, 0x054081cd, 0x06800088, 0x0c004fc0,
-	0x00000000, 0x06490b07,
+	0x0aa2400d, 0x091421cf, 0x040031c7, 0x054081c7, 0x0540820d,
+	0x06804009, 0x0680004a, 0x0c003800, 0x00000000, 0x078004c7,
+	0x0aa30047, 0x0918220f, 0x0aa28008, 0x091c21cf, 0x02c0d20d,
+	0x040031c7, 0x054081c7, 0x05408208, 0x06804009, 0x0680004a,
+	0x0c0034c0, 0x00000000, 0x0be1404d, 0x00000000, 0x06804007,
+	0x0c005c80, 0x00000000, 0x0be1408d, 0x00000000, 0x06808007,
+	0x0c005b40, 0x00000000, 0x06804007, 0x06800008, 0x0c005580,
+	0x00000000, 0x06808007, 0x06800048, 0x0c005480, 0x00000000,
+	0x06490b07, 0x058091c7, 0x0be0c047, 0x0c782940, 0x00000000,
+	0x0908234f, 0x0aa4400d, 0x090c21cf, 0x040031c7, 0x054081c7,
+	0x0540820d, 0x06804009, 0x0680004a, 0x0c002c80, 0x00000000,
+	0x054081cd, 0x06800088, 0x0c004fc0, 0x00000000, 0x06490b07,
 	0x0902120d, 0x096e11c8, 0x06090b07, 0x0c782440, 0x00000000,
-	0x0908220f,
-	0x0aa24008, 0x090c21cf, 0x040031c7, 0x054081c7, 0x05408208, 0x06804009,
-	0x0680004a, 0x0c002780, 0x00000000, 0x090823cf, 0x0aa0c04f, 0x06808007,
-	0x06804007,
-	0x0c004f00, 0x00000000, 0x0be100cf, 0x06808007, 0x0c004e00,
-	0x00000000, 0x078029c7,
-	0x0a608007, 0x0c781340, 0x07802a07, 0x07802a48,
-	0x0680070c, 0x0c0026c0, 0x00000000,
-	0x07800247, 0x0aa0c087, 0x0c780ac0,
-	0x00000000, 0x06800048, 0x07800b87, 0x0a610087,
-	0x06804010, 0x06808010,
-	0x06800088, 0x0a80320f, 0x06800051, 0x06800011, 0x040001d0,
-	0x0680c008,
-	0x04000251, 0x0c003980, 0x00000000, 0x040801d0, 0x0680e008, 0x04000251,
-	0x0c003840, 0x00000000, 0x07800b87, 0x0a64c007, 0x07801207, 0x07801248,
-	0x0680070c,
-	0x0c001f40, 0x00000000, 0x0aa0c08f, 0x06800051, 0x06800011,
-	0x06808007, 0x0680c008,
-	0x04000251, 0x0c003480, 0x00000000, 0x0680a007,
-	0x0680e008, 0x04000251, 0x0c003340,
-	0x00000000, 0x0c780700, 0x00000000,
-	0x0aa0c04f, 0x06800051, 0x06800011, 0x06804007,
-	0x0680c008, 0x04000251,
-	0x0c0030c0, 0x00000000, 0x06806007, 0x0680e008, 0x04000251,
-	0x0c002f80,
-	0x00000000, 0x0aa0c08f, 0x06800051, 0x06800011, 0x06808007, 0x0680c008,
-	0x04000251, 0x0c002d80, 0x00000000, 0x0680a007, 0x0680e008, 0x04000251,
-	0x0c002c40,
-	0x00000000, 0x06804007, 0x06800008, 0x0c003480, 0x00000000,
-	0x06808007, 0x06800048,
-	0x0c003380, 0x00000000, 0x07800247, 0x0aa20007,
-	0x0aa1c047, 0x078024c7, 0x0aa24047,
-	0x0680004c, 0x0680008c, 0x0c780180,
-	0x00000000, 0x07802507, 0x0aa0c047, 0x0680004c,
-	0x0680008c, 0x0780144f,
-	0x094823cc, 0x07c0144f, 0x090c21cf, 0x040031c7, 0x054081c7,
-	0x0540820c,
-	0x06804009, 0x0680000a, 0x0c000940, 0x00000000, 0x090421cf, 0x040031c7,
-	0x054081c7, 0x068000c8, 0x02408308, 0x094023c8, 0x07c0144f, 0x05408208,
-	0x06804009,
+	0x0908220f, 0x0aa24008, 0x090c21cf, 0x040031c7, 0x054081c7,
+	0x05408208, 0x06804009, 0x0680004a, 0x0c002780, 0x00000000,
+	0x090823cf, 0x0aa0c04f, 0x06808007, 0x06804007, 0x0c004f00,
+	0x00000000, 0x0be100cf, 0x06808007, 0x0c004e00, 0x00000000,
+	0x078029c7, 0x0a608007, 0x0c781340, 0x07802a07, 0x07802a48,
+	0x0680070c, 0x0c0026c0, 0x00000000, 0x07800247, 0x0aa0c087,
+	0x0c780ac0, 0x00000000, 0x06800048, 0x07800b87, 0x0a610087,
+	0x06804010, 0x06808010, 0x06800088, 0x0a80320f, 0x06800051,
+	0x06800011, 0x040001d0, 0x0680c008, 0x04000251, 0x0c003980,
+	0x00000000, 0x040801d0, 0x0680e008, 0x04000251, 0x0c003840,
+	0x00000000, 0x07800b87, 0x0a64c007, 0x07801207, 0x07801248,
+	0x0680070c, 0x0c001f40, 0x00000000, 0x0aa0c08f, 0x06800051,
+	0x06800011, 0x06808007, 0x0680c008, 0x04000251, 0x0c003480,
+	0x00000000, 0x0680a007, 0x0680e008, 0x04000251, 0x0c003340,
+	0x00000000, 0x0c780700, 0x00000000, 0x0aa0c04f, 0x06800051,
+	0x06800011, 0x06804007, 0x0680c008, 0x04000251, 0x0c0030c0,
+	0x00000000, 0x06806007, 0x0680e008, 0x04000251, 0x0c002f80,
+	0x00000000, 0x0aa0c08f, 0x06800051, 0x06800011, 0x06808007,
+	0x0680c008, 0x04000251, 0x0c002d80, 0x00000000, 0x0680a007,
+	0x0680e008, 0x04000251, 0x0c002c40, 0x00000000, 0x06804007,
+	0x06800008, 0x0c003480, 0x00000000, 0x06808007, 0x06800048,
+	0x0c003380, 0x00000000, 0x07800247, 0x0aa20007, 0x0aa1c047,
+	0x078024c7, 0x0aa24047, 0x0680004c, 0x0680008c, 0x0c780180,
+	0x00000000, 0x07802507, 0x0aa0c047, 0x0680004c, 0x0680008c,
+	0x0780144f, 0x094823cc, 0x07c0144f, 0x090c21cf, 0x040031c7,
+	0x054081c7, 0x0540820c, 0x06804009, 0x0680000a, 0x0c000940,
+	0x00000000, 0x090421cf, 0x040031c7, 0x054081c7, 0x068000c8,
+	0x02408308, 0x094023c8, 0x07c0144f, 0x05408208, 0x06804009,
 	0x0680000a, 0x0c000640, 0x00000000, 0x06800007, 0x06804008,
-	0x0680c009, 0x0680004a,
-	0x0c0004c0, 0x00000000, 0x0aa3c0a0, 0x078002c7,
-	0x0aa34047, 0x07800247, 0x0aa0c087,
-	0x06800048, 0x06800088, 0x07801447,
-	0x091c2247, 0x054041c7, 0x094421c9, 0x04401208,
-	0x0a6f0008, 0x00000000,
-	0x07c01447, 0x0cc00000, 0x00000000, 0x06035209, 0x06ac0009,
-	0x06c07e49,
-	0x020098c9, 0x054011c7, 0x02007247, 0x06035107, 0x098083c8, 0x095c120a,
-	0x06035008, 0x06435007, 0x0580f1c7, 0x0bef8047, 0x0cc00000, 0x00000000,
-	0x0906238c,
-	0x0540838e, 0x0a628007, 0x00000000, 0x06bff007, 0x05407248,
-	0x068ff00a, 0x0240924a,
-	0x0b2207c8, 0x06880008, 0x0c780180, 0x02009209,
-	0x0b20c7c8, 0x040201c7, 0x04440208,
-	0x05406248, 0x0684c008, 0x090212cc,
-	0x094e120b, 0x06094008, 0x0680000b, 0x06800008,
-	0x0e000207, 0x00000000,
+	0x0680c009, 0x0680004a, 0x0c0004c0, 0x00000000, 0x0aa3c0a0,
+	0x078002c7, 0x0aa34047, 0x07800247, 0x0aa0c087, 0x06800048,
+	0x06800088, 0x07801447, 0x091c2247, 0x054041c7, 0x094421c9,
+	0x04401208, 0x0a6f0008, 0x00000000, 0x07c01447, 0x0cc00000,
+	0x00000000, 0x06035209, 0x06ac0009, 0x06c07e49, 0x020098c9,
+	0x054011c7, 0x02007247, 0x06035107, 0x098083c8, 0x095c120a,
+	0x06035008, 0x06435007, 0x0580f1c7, 0x0bef8047, 0x0cc00000,
+	0x00000000, 0x0906238c, 0x0540838e, 0x0a628007, 0x00000000,
+	0x06bff007, 0x05407248, 0x068ff00a, 0x0240924a, 0x0b2207c8,
+	0x06880008, 0x0c780180, 0x02009209, 0x0b20c7c8, 0x040201c7,
+	0x04440208, 0x05406248, 0x0684c008, 0x090212cc, 0x094e120b,
+	0x06094008, 0x0680000b, 0x06800008, 0x0e000207, 0x00000000,
 	0x00000000, 0x0f000280, 0x0402028a, 0x0200a24a, 0x05c0628a,
-	0x0b213fca,
-	0x00000000, 0x0c780140, 0x06803fca, 0x0b60c00a, 0x00000000, 0x0680000a,
-	0x054082cb, 0x0200b28b, 0x04001208, 0x0be300c8, 0x00000000, 0x0a20c04c,
-	0x00000000,
-	0x0609410b, 0x0a21c10c, 0x0921034b, 0x0740038d, 0x0400138e,
-	0x0901034b, 0x0740038d,
-	0x0400138e, 0x0b28ffc8, 0x00000000, 0x0684d008,
-	0x090212cc, 0x094e120b, 0x06094008,
-	0x0680000b, 0x06800008, 0x04480248,
-	0x0e000247, 0x00000000, 0x00000000, 0x0f000280,
-	0x06880809, 0x0200a24a,
-	0x05c0628a, 0x0b213fca, 0x00000000, 0x0c780140, 0x06803fca,
-	0x0b60c00a,
-	0x00000000, 0x0680000a, 0x054082cb, 0x0200b28b, 0x04001208, 0x0be300c8,
-	0x00000000, 0x0a20c04c, 0x00000000, 0x0609410b, 0x0a21c10c, 0x0921034b,
-	0x0740038d,
-	0x0400138e, 0x0901034b, 0x0740038d, 0x0400138e, 0x0b28bfc8,
-	0x00000000, 0x0cc00000,
-	0x08094000, 0x0680000a, 0x0aa0c049, 0x0c780440,
-	0x00000000, 0x070001c9, 0x091082c9,
-	0x0c000540, 0x00000000, 0x0950824c,
-	0x090082c9, 0x0c000440, 0x00000000, 0x0940824c,
-	0x074001c9, 0x0400128a,
-	0x0bad600a, 0x040011c7, 0x0c780200, 0x00000000, 0x07000209,
-	0x074001c9,
-	0x0400128a, 0x040011c7, 0x0baf200a, 0x04001208, 0x0cc00000, 0x00000000,
-	0x0580130b, 0x0200d308, 0x0700034c, 0x040012cb, 0x090012cb, 0x054032cb,
-	0x0380c2cc,
-	0x048ff30c, 0x0cc00000, 0x00000000, 0x0684c00a, 0x0a20c088,
-	0x06800049, 0x06800089,
-	0x09584289, 0x04801208, 0x094e1288, 0x0609400a,
-	0x0680000a, 0x070001c9, 0x040011c7,
-	0x070001cb, 0x096102c9, 0x0609410b,
-	0x0400128a, 0x0baea00a, 0x040011c7, 0x0cc00000,
-	0x08094000, 0x0680000a,
-	0x0487f24a, 0x05401249, 0x04001209, 0x09508209, 0x074001c8,
-	0x0400128a,
-	0x0b2ebfca, 0x040011c7, 0x0cc00000, 0x00000000, 0x0cc00000, 0x00000000,
-	0x06490628, 0x0aef4c28, 0x00000000, 0x064c2328, 0x0a240228, 0x069001a8,
-	0x069fffea,
+	0x0b213fca, 0x00000000, 0x0c780140, 0x06803fca, 0x0b60c00a,
+	0x00000000, 0x0680000a, 0x054082cb, 0x0200b28b, 0x04001208,
+	0x0be300c8, 0x00000000, 0x0a20c04c, 0x00000000, 0x0609410b,
+	0x0a21c10c, 0x0921034b, 0x0740038d, 0x0400138e, 0x0901034b,
+	0x0740038d, 0x0400138e, 0x0b28ffc8, 0x00000000, 0x0684d008,
+	0x090212cc, 0x094e120b, 0x06094008, 0x0680000b, 0x06800008,
+	0x04480248, 0x0e000247, 0x00000000, 0x00000000, 0x0f000280,
+	0x06880809, 0x0200a24a, 0x05c0628a, 0x0b213fca, 0x00000000,
+	0x0c780140, 0x06803fca, 0x0b60c00a, 0x00000000, 0x0680000a,
+	0x054082cb, 0x0200b28b, 0x04001208, 0x0be300c8, 0x00000000,
+	0x0a20c04c, 0x00000000, 0x0609410b, 0x0a21c10c, 0x0921034b,
+	0x0740038d, 0x0400138e, 0x0901034b, 0x0740038d, 0x0400138e,
+	0x0b28bfc8, 0x00000000, 0x0cc00000, 0x08094000, 0x0680000a,
+	0x0aa0c049, 0x0c780440, 0x00000000, 0x070001c9, 0x091082c9,
+	0x0c000540, 0x00000000, 0x0950824c, 0x090082c9, 0x0c000440,
+	0x00000000, 0x0940824c, 0x074001c9, 0x0400128a, 0x0bad600a,
+	0x040011c7, 0x0c780200, 0x00000000, 0x07000209, 0x074001c9,
+	0x0400128a, 0x040011c7, 0x0baf200a, 0x04001208, 0x0cc00000,
+	0x00000000, 0x0580130b, 0x0200d308, 0x0700034c, 0x040012cb,
+	0x090012cb, 0x054032cb, 0x0380c2cc, 0x048ff30c, 0x0cc00000,
+	0x00000000, 0x0684c00a, 0x0a20c088, 0x06800049, 0x06800089,
+	0x09584289, 0x04801208, 0x094e1288, 0x0609400a, 0x0680000a,
+	0x070001c9, 0x040011c7, 0x070001cb, 0x096102c9, 0x0609410b,
+	0x0400128a, 0x0baea00a, 0x040011c7, 0x0cc00000, 0x08094000,
+	0x0680000a, 0x0487f24a, 0x05401249, 0x04001209, 0x09508209,
+	0x074001c8, 0x0400128a, 0x0b2ebfca, 0x040011c7, 0x0cc00000,
+	0x00000000, 0x0cc00000, 0x00000000, 0x06490628, 0x0aef4c28,
+	0x00000000, 0x064c2328, 0x0a240228, 0x069001a8, 0x069fffea,
 	0x06090628, 0x07800028, 0x078016e9, 0x09508a68, 0x06090629,
-	0x06800028, 0x06090628,
-	0x05401a28, 0x02828aa8, 0x06090628, 0x06985168,
-	0x0cc00000, 0x06090628, 0x07800028,
-	0x078016e9, 0x09508a68, 0x068000a8,
-	0x06c00028, 0x06090628, 0x06090629, 0x06881068,
-	0x06090628, 0x0cc00000,
-	0x00000000, 0x078003c7, 0x0a6fc007, 0x07800507, 0x0b20c047,
-	0x040011c7,
-	0x06800007, 0x07c00507, 0x06800047, 0x07c003c7, 0x0cc00000, 0x08030580,
-	0x064e1215, 0x091e1555, 0x0a208055, 0x0c781280, 0x078003d5, 0x0aa08055,
-	0x0c780b40,
-	0x07800596, 0x0aa2c016, 0x04401596, 0x07c00596, 0x078005d6,
-	0x04401596, 0x064c2315,
-	0x0a20c215, 0x00000000, 0x080e1601, 0x0c780e80,
-	0x07c005d6, 0x07800916, 0x07800295,
-	0x05408555, 0x02015595, 0x04004596,
-	0x07c00916, 0x05404595, 0x020168d6, 0x060e1316,
-	0x07800517, 0x0aa14017,
+	0x06800028, 0x06090628, 0x05401a28, 0x02828aa8, 0x06090628,
+	0x06985168, 0x0cc00000, 0x06090628, 0x07800028, 0x078016e9,
+	0x09508a68, 0x068000a8, 0x06c00028, 0x06090628, 0x06090629,
+	0x06881068, 0x06090628, 0x0cc00000, 0x00000000, 0x078003c7,
+	0x0a6fc007, 0x07800507, 0x0b20c047, 0x040011c7, 0x06800007,
+	0x07c00507, 0x06800047, 0x07c003c7, 0x0cc00000, 0x08030580,
+	0x064e1215, 0x091e1555, 0x0a208055, 0x0c781280, 0x078003d5,
+	0x0aa08055, 0x0c780b40, 0x07800596, 0x0aa2c016, 0x04401596,
+	0x07c00596, 0x078005d6, 0x04401596, 0x064c2315, 0x0a20c215,
+	0x00000000, 0x080e1601, 0x0c780e80, 0x07c005d6, 0x07800916,
+	0x07800295, 0x05408555, 0x02015595, 0x04004596, 0x07c00916,
+	0x05404595, 0x020168d6, 0x060e1316, 0x07800517, 0x0aa14017,
 	0x06a1a196, 0x0aa0c057, 0x06a1a496, 0x06a1a016, 0x07c00416,
-	0x0683ffd7,
-	0x044015d7, 0x0b214017, 0x064e1615, 0x09010555, 0x0aaf0015, 0x00000000,
-	0x064c2315, 0x0be0c215, 0x00000000, 0x080e1600, 0x06c00016, 0x060e1216,
-	0x06800095,
-	0x0c780700, 0x07c003d5, 0x0a660095, 0x078005d6, 0x0aa18016,
-	0x04401596, 0x0b210056,
-	0x07c005d6, 0x0c780480, 0x00000000, 0x07800956,
-	0x07800295, 0x05408555, 0x02015595,
-	0x04004596, 0x07c00956, 0x05404595,
-	0x020168d6, 0x060e1316, 0x07800415, 0x09c151d5,
-	0x06c00015, 0x060e1215,
-	0x068000d5, 0x0c780100, 0x07c003d5, 0x06800015, 0x07c003d5,
-	0x0cc00000,
-	0x00400000, 0x0fc011c0, 0x05403207, 0x0fc011c0, 0x0a62c007, 0x0fc011c0,
-	0x0a634007, 0x0fc011c0, 0x0a63c007, 0x06800107, 0x0fc011c0, 0x0a630007,
-	0x06800147,
-	0x0c780280, 0x06800187, 0x0aa20007, 0x06800007, 0x0c780180,
-	0x06800047, 0x0aa10007,
-	0x06800087, 0x0c780080, 0x068000c7, 0x0a610187,
-	0x09403207, 0x0cc00000, 0x00000000,
-	0x0c0757c0, 0x00000000, 0x0c00fc40,
-	0x00000000, 0x0aa08007, 0x0a62c107, 0x06800149,
-	0x07800987, 0x09708247,
-	0x078009c7, 0x09608247, 0x060e1809, 0x064e1807, 0x0befc047,
-	0x0c781800,
-	0x00000000, 0x0aa0c047, 0x0aa08147, 0x0c781280, 0x0780098b, 0x0ba0c0cb,
-	0x0c7fffc0, 0x044032cb, 0x078009c9, 0x0ba0c0c9, 0x0c7fffc0, 0x04403249,
-	0x0a614009,
-	0x068001c9, 0x0aa0c00b, 0x0c780a80, 0x06800249, 0x07800987,
-	0x09708247, 0x078009c7,
-	0x09608247, 0x095c224b, 0x09581247, 0x060e1809,
-	0x064e1809, 0x0befc049, 0x0aa4c00b,
-	0x068000c9, 0x078009c7, 0x09608247,
-	0x06800047, 0x09708247, 0x060e1809, 0x064e1809,
-	0x0befc049, 0x0aa2804b,
-	0x068000c9, 0x078009c7, 0x09608247, 0x06800047, 0x09708247,
-	0x09809389,
-	0x060e1809, 0x064e1809, 0x0befc049, 0x078009c7, 0x0a228047, 0x06800049,
-	0x06800047, 0x09608247, 0x07800987, 0x09708247, 0x095c224b, 0x060e1809,
-	0x064e1809,
+	0x0683ffd7, 0x044015d7, 0x0b214017, 0x064e1615, 0x09010555,
+	0x0aaf0015, 0x00000000, 0x064c2315, 0x0be0c215, 0x00000000,
+	0x080e1600, 0x06c00016, 0x060e1216, 0x06800095, 0x0c780700,
+	0x07c003d5, 0x0a660095, 0x078005d6, 0x0aa18016, 0x04401596,
+	0x0b210056, 0x07c005d6, 0x0c780480, 0x00000000, 0x07800956,
+	0x07800295, 0x05408555, 0x02015595, 0x04004596, 0x07c00956,
+	0x05404595, 0x020168d6, 0x060e1316, 0x07800415, 0x09c151d5,
+	0x06c00015, 0x060e1215, 0x068000d5, 0x0c780100, 0x07c003d5,
+	0x06800015, 0x07c003d5, 0x0cc00000, 0x00400000, 0x0fc011c0,
+	0x05403207, 0x0fc011c0, 0x0a62c007, 0x0fc011c0, 0x0a634007,
+	0x0fc011c0, 0x0a63c007, 0x06800107, 0x0fc011c0, 0x0a630007,
+	0x06800147, 0x0c780280, 0x06800187, 0x0aa20007, 0x06800007,
+	0x0c780180, 0x06800047, 0x0aa10007, 0x06800087, 0x0c780080,
+	0x068000c7, 0x0a610187, 0x09403207, 0x0cc00000, 0x00000000,
+	0x0c0757c0, 0x00000000, 0x0c00fc40, 0x00000000, 0x0aa08007,
+	0x0a62c107, 0x06800149, 0x07800987, 0x09708247, 0x078009c7,
+	0x09608247, 0x060e1809, 0x064e1807, 0x0befc047, 0x0c781800,
+	0x00000000, 0x0aa0c047, 0x0aa08147, 0x0c781280, 0x0780098b,
+	0x0ba0c0cb, 0x0c7fffc0, 0x044032cb, 0x078009c9, 0x0ba0c0c9,
+	0x0c7fffc0, 0x04403249, 0x0a614009, 0x068001c9, 0x0aa0c00b,
+	0x0c780a80, 0x06800249, 0x07800987, 0x09708247, 0x078009c7,
+	0x09608247, 0x095c224b, 0x09581247, 0x060e1809, 0x064e1809,
+	0x0befc049, 0x0aa4c00b, 0x068000c9, 0x078009c7, 0x09608247,
+	0x06800047, 0x09708247, 0x060e1809, 0x064e1809, 0x0befc049,
+	0x0aa2804b, 0x068000c9, 0x078009c7, 0x09608247, 0x06800047,
+	0x09708247, 0x09809389, 0x060e1809, 0x064e1809, 0x0befc049,
+	0x078009c7, 0x0a228047, 0x06800049, 0x06800047, 0x09608247,
+	0x07800987, 0x09708247, 0x095c224b, 0x060e1809, 0x064e1809,
 	0x0befc049, 0x0c7809c0, 0x078009c7, 0x09608247, 0x07800987,
-	0x09708247, 0x095c1247,
-	0x060e1809, 0x064e1809, 0x0befc049, 0x0be08047,
-	0x0c780740, 0x068000c9, 0x078009c7,
-	0x09608247, 0x06800047, 0x09708247,
-	0x060e1809, 0x064e1809, 0x0befc049, 0x0c780500,
-	0x00000000, 0x0a6280c7,
-	0x068000c9, 0x07800987, 0x09708247, 0x078009c7, 0x09608247,
-	0x060e1809,
-	0x064e1809, 0x0befc049, 0x0c780240, 0x06800049, 0x07800987, 0x09708247,
-	0x078009c7, 0x09608247, 0x060e1809, 0x064e1809, 0x0befc049, 0x06800007,
-	0x06c07e47,
-	0x0aa2400a, 0x020078c7, 0x06840007, 0x06c07e47, 0x0aa1404a,
-	0x020078c7, 0x06880007,
-	0x06c07e47, 0x020078c7, 0x060e1307, 0x068003c9,
-	0x07800987, 0x09708247, 0x078009c7,
-	0x09608247, 0x060e1809, 0x064e1807,
-	0x0befc047, 0x00000000, 0x0649d907, 0x0900c1c7,
-	0x0a6f8007, 0x06b04009,
+	0x09708247, 0x095c1247, 0x060e1809, 0x064e1809, 0x0befc049,
+	0x0be08047, 0x0c780740, 0x068000c9, 0x078009c7, 0x09608247,
+	0x06800047, 0x09708247, 0x060e1809, 0x064e1809, 0x0befc049,
+	0x0c780500, 0x00000000, 0x0a6280c7, 0x068000c9, 0x07800987,
+	0x09708247, 0x078009c7, 0x09608247, 0x060e1809, 0x064e1809,
+	0x0befc049, 0x0c780240, 0x06800049, 0x07800987, 0x09708247,
+	0x078009c7, 0x09608247, 0x060e1809, 0x064e1809, 0x0befc049,
+	0x06800007, 0x06c07e47, 0x0aa2400a, 0x020078c7, 0x06840007,
+	0x06c07e47, 0x0aa1404a, 0x020078c7, 0x06880007, 0x06c07e47,
+	0x020078c7, 0x060e1307, 0x068003c9, 0x07800987, 0x09708247,
+	0x078009c7, 0x09608247, 0x060e1809, 0x064e1807, 0x0befc047,
+	0x00000000, 0x0649d907, 0x0900c1c7, 0x0a6f8007, 0x06b04009,
 	0x06800007, 0x06c07e47, 0x0aa2c00a, 0x020078c7, 0x06840007,
-	0x06c07e47,
-	0x020078c7, 0x0aa1804a, 0x06b08009, 0x06880007, 0x06c07e47, 0x020078c7,
-	0x06b0c009, 0x06035107, 0x06804007, 0x06035207, 0x06035009, 0x06435007,
-	0x0580f1c7,
-	0x0bef8047, 0x0900b249, 0x07000247, 0x091e11c7, 0x07800089,
-	0x0aa1c00a, 0x0680004b,
-	0x0aa2004a, 0x00000000, 0x07c00bcb, 0x0c7801c0,
-	0x095e1247, 0x07c000cb, 0x0c780100,
-	0x095a1247, 0x07c0010b, 0x095c1247,
-	0x07c00089, 0x0cc00000, 0x00000000, 0x06b04009,
-	0x06800007, 0x06c07e47,
-	0x0aa3000a, 0x020078c7, 0x06840007, 0x06c07e47, 0x020078c7,
-	0x0aa1c04a,
-	0x06b08009, 0x06880007, 0x06c07e47, 0x020078c7, 0x0aa0804a, 0x06b0c009,
-	0x05404288, 0x02007287, 0x06035107, 0x06804007, 0x06035207, 0x06035009,
-	0x06435007,
-	0x0580f1c7, 0x0bef8047, 0x0cc00000, 0x00000000, 0x07802407,
-	0x0a628007, 0x078025c7,
-	0x0b220207, 0x0b21c707, 0x044031c7, 0x0b214687,
-	0x040011c7, 0x0b20c707, 0x040011c7,
-	0x040011c7, 0x07c02647, 0x07802407,
-	0x0aa28047, 0x0aa20087, 0x06800048, 0x0aa180c7,
-	0x06800008, 0x078025c7,
-	0x0b20c207, 0x06800008, 0x06800048, 0x07c02688, 0x0cc00000,
-	0x00000000,
-	0x078020c7, 0x0aa080c7, 0x0c780dc0, 0x0a610008, 0x078004c7, 0x0aa08007,
-	0x0c7819c0, 0x07802287, 0x0aa0c007, 0x07802248, 0x0fc081c0, 0x0aa28008,
-	0x07802307,
-	0x0a620007, 0x07802207, 0x0a630007, 0x06800047, 0x07c02507,
-	0x06800007, 0x0c780500,
-	0x07c02547, 0x07802207, 0x0aa0c007, 0x06800007,
-	0x0fc021c0, 0x0c780380, 0x07c02587,
-	0x0fc011c0, 0x07c02507, 0x0aa20047,
-	0x07800247, 0x0a618087, 0x06800087, 0x07c024c7,
-	0x064c0408, 0x094c2207,
-	0x060c0408, 0x0fc011c0, 0x07c02547, 0x07802387, 0x0aa18007,
-	0x00000000,
-	0x0fc011c0, 0x0aa0c007, 0x0c780000, 0x00000000, 0x0fc011c0, 0x07c00307,
-	0x07802247, 0x0aa0c007, 0x078022c7, 0x0fc01200, 0x07800248, 0x0a610008,
-	0x0aa0c007,
+	0x06c07e47, 0x020078c7, 0x0aa1804a, 0x06b08009, 0x06880007,
+	0x06c07e47, 0x020078c7, 0x06b0c009, 0x06035107, 0x06804007,
+	0x06035207, 0x06035009, 0x06435007, 0x0580f1c7, 0x0bef8047,
+	0x0900b249, 0x07000247, 0x091e11c7, 0x07800089, 0x0aa1c00a,
+	0x0680004b, 0x0aa2004a, 0x00000000, 0x07c00bcb, 0x0c7801c0,
+	0x095e1247, 0x07c000cb, 0x0c780100, 0x095a1247, 0x07c0010b,
+	0x095c1247, 0x07c00089, 0x0cc00000, 0x00000000, 0x06b04009,
+	0x06800007, 0x06c07e47, 0x0aa3000a, 0x020078c7, 0x06840007,
+	0x06c07e47, 0x020078c7, 0x0aa1c04a, 0x06b08009, 0x06880007,
+	0x06c07e47, 0x020078c7, 0x0aa0804a, 0x06b0c009, 0x05404288,
+	0x02007287, 0x06035107, 0x06804007, 0x06035207, 0x06035009,
+	0x06435007, 0x0580f1c7, 0x0bef8047, 0x0cc00000, 0x00000000,
+	0x07802407, 0x0a628007, 0x078025c7, 0x0b220207, 0x0b21c707,
+	0x044031c7, 0x0b214687, 0x040011c7, 0x0b20c707, 0x040011c7,
+	0x040011c7, 0x07c02647, 0x07802407, 0x0aa28047, 0x0aa20087,
+	0x06800048, 0x0aa180c7, 0x06800008, 0x078025c7, 0x0b20c207,
+	0x06800008, 0x06800048, 0x07c02688, 0x0cc00000, 0x00000000,
+	0x078020c7, 0x0aa080c7, 0x0c780dc0, 0x0a610008, 0x078004c7,
+	0x0aa08007, 0x0c7819c0, 0x07802287, 0x0aa0c007, 0x07802248,
+	0x0fc081c0, 0x0aa28008, 0x07802307, 0x0a620007, 0x07802207,
+	0x0a630007, 0x06800047, 0x07c02507, 0x06800007, 0x0c780500,
+	0x07c02547, 0x07802207, 0x0aa0c007, 0x06800007, 0x0fc021c0,
+	0x0c780380, 0x07c02587, 0x0fc011c0, 0x07c02507, 0x0aa20047,
+	0x07800247, 0x0a618087, 0x06800087, 0x07c024c7, 0x064c0408,
+	0x094c2207, 0x060c0408, 0x0fc011c0, 0x07c02547, 0x07802387,
+	0x0aa18007, 0x00000000, 0x0fc011c0, 0x0aa0c007, 0x0c780000,
+	0x00000000, 0x0fc011c0, 0x07c00307, 0x07802247, 0x0aa0c007,
+	0x078022c7, 0x0fc01200, 0x07800248, 0x0a610008, 0x0aa0c007,
 	0x00000000, 0x0fc011c0, 0x0aa440a0, 0x07800247, 0x0a634087,
-	0x07800447, 0x0aa28007,
-	0x06800008, 0x0fc02200, 0x0ba1c0c8, 0x00000000,
-	0x0fc011c0, 0x0aa10007, 0x0b60c408,
-	0x0c7fff40, 0x04001208, 0x07c00488,
-	0x0c780800, 0x00000000, 0x07800247, 0x0a60c047,
-	0x0c780840, 0x00000000,
-	0x080c2803, 0x064c2807, 0x0a2fc047, 0x05801207, 0x07c02c88,
-	0x080c2800,
-	0x06800007, 0x0960f1c8, 0x060c3d07, 0x078020c7, 0x0aa540c7, 0x091831c8,
-	0x0a638087, 0x091041c8, 0x0a630007, 0x06800048, 0x07c002c8, 0x0fc071c0,
-	0x06800020,
-	0x078024c8, 0x07800247, 0x09482207, 0x05406208, 0x09403220,
-	0x0c7801c0, 0x060c0408,
-	0x078020c7, 0x0aa100c7, 0x0a60c020, 0x00000000,
-	0x0fc071c0, 0x0fc051c0, 0x07c025c7,
-	0x0ae0c207, 0x06800007, 0x0fc011c0,
-	0x07c02607, 0x07802407, 0x0a614047, 0x00000000,
-	0x0fc011c0, 0x040021c7,
+	0x07800447, 0x0aa28007, 0x06800008, 0x0fc02200, 0x0ba1c0c8,
+	0x00000000, 0x0fc011c0, 0x0aa10007, 0x0b60c408, 0x0c7fff40,
+	0x04001208, 0x07c00488, 0x0c780800, 0x00000000, 0x07800247,
+	0x0a60c047, 0x0c780840, 0x00000000, 0x080c2803, 0x064c2807,
+	0x0a2fc047, 0x05801207, 0x07c02c88, 0x080c2800, 0x06800007,
+	0x0960f1c8, 0x060c3d07, 0x078020c7, 0x0aa540c7, 0x091831c8,
+	0x0a638087, 0x091041c8, 0x0a630007, 0x06800048, 0x07c002c8,
+	0x0fc071c0, 0x06800020, 0x078024c8, 0x07800247, 0x09482207,
+	0x05406208, 0x09403220, 0x0c7801c0, 0x060c0408, 0x078020c7,
+	0x0aa100c7, 0x0a60c020, 0x00000000, 0x0fc071c0, 0x0fc051c0,
+	0x07c025c7, 0x0ae0c207, 0x06800007, 0x0fc011c0, 0x07c02607,
+	0x07802407, 0x0a614047, 0x00000000, 0x0fc011c0, 0x040021c7,
 	0x07c02687, 0x0c07db80, 0x00000000, 0x078020c7, 0x0a6080c7,
-	0x0c780840,
-	0x07802907, 0x0aa28007, 0x06800008, 0x0fc011c0, 0x0aa1c007, 0x06800008,
-	0x0fc011c0, 0x0aa10007, 0x06800048, 0x0fc011c0, 0x04002207, 0x07c02948,
-	0x0aa200a0,
-	0x06800008, 0x078002c7, 0x0aa14047, 0x07802d07, 0x0aa0c007,
-	0x00000000, 0x0fc02200,
-	0x07c02e88, 0x0aa28060, 0x0aa240a0, 0x06800188,
-	0x07c026c8, 0x07802648, 0x0ba0c248,
-	0x06800007, 0x07802447, 0x0c786200,
-	0x00000000, 0x0c781080, 0x07802487, 0x0aa0c007,
-	0x00000000, 0x0fc021c0,
-	0x0a63c0a0, 0x07800247, 0x0a634047, 0x00000000, 0x080c2803,
-	0x064c2807,
-	0x0a2fc047, 0x05801207, 0x07c02c88, 0x080c2800, 0x06800007, 0x0960f1c8,
-	0x060c3d07, 0x0c7803c0, 0x06800007, 0x07800247, 0x0a630087, 0x06800007,
-	0x0aa10060,
-	0x0a6240a0, 0x0c780200, 0x06800047, 0x0fc011c0, 0x0a618007,
-	0x07c00547, 0x0fc011c0,
-	0x0c7800c0, 0x07c00887, 0x07c00547, 0x0aa0c0a0,
-	0x0aa08060, 0x0c785280, 0x07802907,
-	0x0aa28007, 0x06800008, 0x0fc011c0,
-	0x0aa1c007, 0x06800008, 0x0fc011c0, 0x0aa10007,
-	0x06800048, 0x0fc011c0,
-	0x04002207, 0x07c02948, 0x07800247, 0x0aa3c007, 0x06800008,
-	0x07800a07,
-	0x0aa30007, 0x06800008, 0x0fc011c0, 0x0aa24007, 0x06800008, 0x0fc011c0,
-	0x0aa18007, 0x06800088, 0x0fc011c0, 0x0aa0c007, 0x06800048, 0x068000c8,
-	0x07c00b48,
-	0x0aa18060, 0x07800247, 0x0aa2c047, 0x06800088, 0x0c784240,
-	0x00000000, 0x07800247,
-	0x0a620047, 0x00000000, 0x0fc011c0, 0x0aa0c007,
-	0x06800088, 0x068000c8, 0x0c780d00,
-	0x0fc01240, 0x06800009, 0x07802647,
-	0x0ae68307, 0x0fc011c0, 0x0a658007, 0x06800088,
-	0x0fc011c0, 0x0a64c007,
-	0x068000c8, 0x0fc011c0, 0x0a640007, 0x06800048, 0x0fc011c0,
-	0x0aa34007,
-	0x06800008, 0x06800049, 0x0fc011c0, 0x0a624007, 0x06800088, 0x0fc011c0,
-	0x0a618007, 0x068000c8, 0x0fc011c0, 0x0aa0c007, 0x06800008, 0x06800048,
-	0x0c780600,
+	0x0c780840, 0x07802907, 0x0aa28007, 0x06800008, 0x0fc011c0,
+	0x0aa1c007, 0x06800008, 0x0fc011c0, 0x0aa10007, 0x06800048,
+	0x0fc011c0, 0x04002207, 0x07c02948, 0x0aa200a0, 0x06800008,
+	0x078002c7, 0x0aa14047, 0x07802d07, 0x0aa0c007, 0x00000000,
+	0x0fc02200, 0x07c02e88, 0x0aa28060, 0x0aa240a0, 0x06800188,
+	0x07c026c8, 0x07802648, 0x0ba0c248, 0x06800007, 0x07802447,
+	0x0c786200, 0x00000000, 0x0c781080, 0x07802487, 0x0aa0c007,
+	0x00000000, 0x0fc021c0, 0x0a63c0a0, 0x07800247, 0x0a634047,
+	0x00000000, 0x080c2803, 0x064c2807, 0x0a2fc047, 0x05801207,
+	0x07c02c88, 0x080c2800, 0x06800007, 0x0960f1c8, 0x060c3d07,
+	0x0c7803c0, 0x06800007, 0x07800247, 0x0a630087, 0x06800007,
+	0x0aa10060, 0x0a6240a0, 0x0c780200, 0x06800047, 0x0fc011c0,
+	0x0a618007, 0x07c00547, 0x0fc011c0, 0x0c7800c0, 0x07c00887,
+	0x07c00547, 0x0aa0c0a0, 0x0aa08060, 0x0c785280, 0x07802907,
+	0x0aa28007, 0x06800008, 0x0fc011c0, 0x0aa1c007, 0x06800008,
+	0x0fc011c0, 0x0aa10007, 0x06800048, 0x0fc011c0, 0x04002207,
+	0x07c02948, 0x07800247, 0x0aa3c007, 0x06800008, 0x07800a07,
+	0x0aa30007, 0x06800008, 0x0fc011c0, 0x0aa24007, 0x06800008,
+	0x0fc011c0, 0x0aa18007, 0x06800088, 0x0fc011c0, 0x0aa0c007,
+	0x06800048, 0x068000c8, 0x07c00b48, 0x0aa18060, 0x07800247,
+	0x0aa2c047, 0x06800088, 0x0c784240, 0x00000000, 0x07800247,
+	0x0a620047, 0x00000000, 0x0fc011c0, 0x0aa0c007, 0x06800088,
+	0x068000c8, 0x0c780d00, 0x0fc01240, 0x06800009, 0x07802647,
+	0x0ae68307, 0x0fc011c0, 0x0a658007, 0x06800088, 0x0fc011c0,
+	0x0a64c007, 0x068000c8, 0x0fc011c0, 0x0a640007, 0x06800048,
+	0x0fc011c0, 0x0aa34007, 0x06800008, 0x06800049, 0x0fc011c0,
+	0x0a624007, 0x06800088, 0x0fc011c0, 0x0a618007, 0x068000c8,
+	0x0fc011c0, 0x0aa0c007, 0x06800008, 0x06800048, 0x0c780600,
 	0x00000000, 0x0a658007, 0x06800008, 0x0fc011c0, 0x0a64c007,
-	0x06800088, 0x0fc011c0,
-	0x0a640007, 0x06800048, 0x0fc011c0, 0x0aa34007,
-	0x068000c8, 0x06800049, 0x0fc011c0,
-	0x0a624007, 0x06800008, 0x0fc011c0,
-	0x0a618007, 0x06800088, 0x0fc011c0, 0x0aa0c007,
-	0x068000c8, 0x06800048,
-	0x07c02988, 0x07c029c9, 0x0aa68009, 0x00000000, 0x07800247,
-	0x0a64c087,
-	0x00000000, 0x0fc011c0, 0x0a610007, 0x06800008, 0x0fc011c0, 0x04001207,
-	0x07c00b88, 0x0fc061c0, 0x07c02a07, 0x0fc061c0, 0x07c02a47, 0x0a62c008,
-	0x00000000,
-	0x0fc061c0, 0x07c01207, 0x0fc061c0, 0x0c780180, 0x07c01247,
-	0x0fc061c0, 0x07c02a07,
-	0x0fc061c0, 0x07c02a47, 0x07800247, 0x0aa14007,
-	0x0a608087, 0x0c780bc0, 0x0aa100a0,
-	0x0c780840, 0x0c781240, 0x00000000,
-	0x0c077040, 0x0680000a, 0x07c02cc8, 0x0c076f80,
-	0x0680004a, 0x07c02ac8,
-	0x0fc021c0, 0x07c02bc7, 0x0fc021c0, 0x07c02b07, 0x0fc031c0,
-	0x07c02b47,
-	0x0fc021c0, 0x07c012c7, 0x07802707, 0x07800b48, 0x096621c8, 0x07802988,
-	0x096221c8, 0x07802c48, 0x096011c8, 0x07802948, 0x094421c8, 0x07802cc8,
-	0x095841c8,
-	0x07802ac8, 0x095041c8, 0x04c101c7, 0x0c780a00, 0x060c2107,
-	0x0c0768c0, 0x0680004a,
-	0x07c02ac8, 0x0fc021c0, 0x07c02bc7, 0x0fc021c0,
-	0x07c02b07, 0x0fc031c0, 0x07c02b47,
-	0x0fc021c0, 0x0c780300, 0x07c012c7,
-	0x0fc031c0, 0x07c02bc7, 0x07800547, 0x0aa0c007,
-	0x06800087, 0x068000c7,
-	0x0f8001c7, 0x07c02b07, 0x0fc031c0, 0x07c02b47, 0x07802707,
-	0x07800b48,
-	0x096621c8, 0x07802c48, 0x096011c8, 0x07802948, 0x094421c8, 0x07802ac8,
-	0x095041c8, 0x07802988, 0x096221c8, 0x04c101c7, 0x060c2107, 0x0aa0c0c8,
-	0x0c780800,
-	0x00000000, 0x0fc021c0, 0x0c780740, 0x07c008c7, 0x0a6100c8,
-	0x068001c8, 0x0c075e00,
-	0x0680000a, 0x07c02a88, 0x0c075d40, 0x0680004a,
-	0x07c02ac8, 0x07802707, 0x07800b48,
-	0x096621c8, 0x07802988, 0x096221c8,
-	0x07802c48, 0x096011c8, 0x07802948, 0x094421c8,
-	0x07802a88, 0x095841c8,
-	0x07802ac8, 0x095041c8, 0x04c101c7, 0x060c2107, 0x0fc021c0,
-	0x07c02b07,
-	0x0fc021c0, 0x07c02b47, 0x0c004d80, 0x00000000, 0x07802b87, 0x0aa18007,
-	0x06800008, 0x0fc011c0, 0x0aa0c007, 0x06800108, 0x0fc02200, 0x07c02c08,
-	0x0fc011c0,
-	0x0aa10007, 0x06800007, 0x0fc011c0, 0x040011c7, 0x07c02787,
-	0x0fc011c0, 0x0c7824c0,
-	0x07c02807, 0x07802647, 0x0ae34307, 0x0fc011c0,
-	0x0a624007, 0x06800088, 0x0fc011c0,
-	0x0a618007, 0x068000c8, 0x0fc011c0,
-	0x0a60c007, 0x06800048, 0x06800008, 0x0c7802c0,
-	0x00000000, 0x0a624007,
+	0x06800088, 0x0fc011c0, 0x0a640007, 0x06800048, 0x0fc011c0,
+	0x0aa34007, 0x068000c8, 0x06800049, 0x0fc011c0, 0x0a624007,
 	0x06800008, 0x0fc011c0, 0x0a618007, 0x06800088, 0x0fc011c0,
-	0x0a60c007,
-	0x06800048, 0x068000c8, 0x07c02988, 0x0c074d00, 0x0680000a, 0x07c02ec8,
-	0x0fc031c0, 0x07c02bc7, 0x07800547, 0x0aa0c007, 0x06800087, 0x068000c7,
-	0x0f8001c7,
+	0x0aa0c007, 0x068000c8, 0x06800048, 0x07c02988, 0x07c029c9,
+	0x0aa68009, 0x00000000, 0x07800247, 0x0a64c087, 0x00000000,
+	0x0fc011c0, 0x0a610007, 0x06800008, 0x0fc011c0, 0x04001207,
+	0x07c00b88, 0x0fc061c0, 0x07c02a07, 0x0fc061c0, 0x07c02a47,
+	0x0a62c008, 0x00000000, 0x0fc061c0, 0x07c01207, 0x0fc061c0,
+	0x0c780180, 0x07c01247, 0x0fc061c0, 0x07c02a07, 0x0fc061c0,
+	0x07c02a47, 0x07800247, 0x0aa14007, 0x0a608087, 0x0c780bc0,
+	0x0aa100a0, 0x0c780840, 0x0c781240, 0x00000000, 0x0c077040,
+	0x0680000a, 0x07c02cc8, 0x0c076f80, 0x0680004a, 0x07c02ac8,
+	0x0fc021c0, 0x07c02bc7, 0x0fc021c0, 0x07c02b07, 0x0fc031c0,
+	0x07c02b47, 0x0fc021c0, 0x07c012c7, 0x07802707, 0x07800b48,
+	0x096621c8, 0x07802988, 0x096221c8, 0x07802c48, 0x096011c8,
+	0x07802948, 0x094421c8, 0x07802cc8, 0x095841c8, 0x07802ac8,
+	0x095041c8, 0x04c101c7, 0x0c780a00, 0x060c2107, 0x0c0768c0,
+	0x0680004a, 0x07c02ac8, 0x0fc021c0, 0x07c02bc7, 0x0fc021c0,
+	0x07c02b07, 0x0fc031c0, 0x07c02b47, 0x0fc021c0, 0x0c780300,
+	0x07c012c7, 0x0fc031c0, 0x07c02bc7, 0x07800547, 0x0aa0c007,
+	0x06800087, 0x068000c7, 0x0f8001c7, 0x07c02b07, 0x0fc031c0,
+	0x07c02b47, 0x07802707, 0x07800b48, 0x096621c8, 0x07802c48,
+	0x096011c8, 0x07802948, 0x094421c8, 0x07802ac8, 0x095041c8,
+	0x07802988, 0x096221c8, 0x04c101c7, 0x060c2107, 0x0aa0c0c8,
+	0x0c780800, 0x00000000, 0x0fc021c0, 0x0c780740, 0x07c008c7,
+	0x0a6100c8, 0x068001c8, 0x0c075e00, 0x0680000a, 0x07c02a88,
+	0x0c075d40, 0x0680004a, 0x07c02ac8, 0x07802707, 0x07800b48,
+	0x096621c8, 0x07802988, 0x096221c8, 0x07802c48, 0x096011c8,
+	0x07802948, 0x094421c8, 0x07802a88, 0x095841c8, 0x07802ac8,
+	0x095041c8, 0x04c101c7, 0x060c2107, 0x0fc021c0, 0x07c02b07,
+	0x0fc021c0, 0x07c02b47, 0x0c004d80, 0x00000000, 0x07802b87,
+	0x0aa18007, 0x06800008, 0x0fc011c0, 0x0aa0c007, 0x06800108,
+	0x0fc02200, 0x07c02c08, 0x0fc011c0, 0x0aa10007, 0x06800007,
+	0x0fc011c0, 0x040011c7, 0x07c02787, 0x0fc011c0, 0x0c7824c0,
+	0x07c02807, 0x07802647, 0x0ae34307, 0x0fc011c0, 0x0a624007,
+	0x06800088, 0x0fc011c0, 0x0a618007, 0x068000c8, 0x0fc011c0,
+	0x0a60c007, 0x06800048, 0x06800008, 0x0c7802c0, 0x00000000,
+	0x0a624007, 0x06800008, 0x0fc011c0, 0x0a618007, 0x06800088,
+	0x0fc011c0, 0x0a60c007, 0x06800048, 0x068000c8, 0x07c02988,
+	0x0c074d00, 0x0680000a, 0x07c02ec8, 0x0fc031c0, 0x07c02bc7,
+	0x07800547, 0x0aa0c007, 0x06800087, 0x068000c7, 0x0f8001c7,
 	0x07c02b07, 0x0fc031c0, 0x07c02b47, 0x07802707, 0x07800b48,
-	0x096621c8, 0x07802c48,
-	0x096011c8, 0x07802948, 0x094421c8, 0x07802ec8,
-	0x095841c8, 0x07802988, 0x096221c8,
-	0x04c101c7, 0x0c7fe6c0, 0x060c2107,
-	0x07800247, 0x0aa0c007, 0x0c7ff2c0, 0x00000000,
-	0x0fc011c0, 0x0aa0c007,
-	0x06800008, 0x06800088, 0x07c02988, 0x0c074400, 0x0680000a,
-	0x07c02cc8,
-	0x0c074340, 0x0680004a, 0x07c02ac8, 0x07802707, 0x07800b48, 0x096621c8,
-	0x07802988, 0x096221c8, 0x07802c48, 0x096011c8, 0x07802948, 0x094421c8,
-	0x07802cc8,
-	0x095841c8, 0x07802ac8, 0x095041c8, 0x04c101c7, 0x0c7fe640,
-	0x060c2107, 0x07800247,
-	0x0a614047, 0x00000000, 0x0c073dc0, 0x0680008a,
-	0x07c01288, 0x0c073d00, 0x0680000a,
-	0x07c026c8, 0x07802647, 0x0ae38207,
-	0x07802447, 0x0aa30007, 0x06800007, 0x0fc011c0,
-	0x0aa24007, 0x06800007,
+	0x096621c8, 0x07802c48, 0x096011c8, 0x07802948, 0x094421c8,
+	0x07802ec8, 0x095841c8, 0x07802988, 0x096221c8, 0x04c101c7,
+	0x0c7fe6c0, 0x060c2107, 0x07800247, 0x0aa0c007, 0x0c7ff2c0,
+	0x00000000, 0x0fc011c0, 0x0aa0c007, 0x06800008, 0x06800088,
+	0x07c02988, 0x0c074400, 0x0680000a, 0x07c02cc8, 0x0c074340,
+	0x0680004a, 0x07c02ac8, 0x07802707, 0x07800b48, 0x096621c8,
+	0x07802988, 0x096221c8, 0x07802c48, 0x096011c8, 0x07802948,
+	0x094421c8, 0x07802cc8, 0x095841c8, 0x07802ac8, 0x095041c8,
+	0x04c101c7, 0x0c7fe640, 0x060c2107, 0x07800247, 0x0a614047,
+	0x00000000, 0x0c073dc0, 0x0680008a, 0x07c01288, 0x0c073d00,
+	0x0680000a, 0x07c026c8, 0x07802647, 0x0ae38207, 0x07802447,
+	0x0aa30007, 0x06800007, 0x0fc011c0, 0x0aa24007, 0x06800007,
 	0x0fc011c0, 0x0aa18007, 0x06800047, 0x0c073980, 0x0680004a,
-	0x07c02748,
-	0x06800087, 0x07c02707, 0x07802448, 0x09422207, 0x07800049, 0x09461209,
-	0x060c3108, 0x07801288, 0x097041c8, 0x078026c8, 0x095841c8, 0x07802748,
-	0x095041c8,
-	0x04c101c7, 0x060c2107, 0x0fc011c0, 0x0aa10007, 0x06800007,
-	0x0fc011c0, 0x040011c7,
-	0x07c02787, 0x0fc011c0, 0x0aa10007, 0x06800007,
-	0x0fc011c0, 0x040011c7, 0x07c027c7,
-	0x0fc011c0, 0x07c02807, 0x078020c7,
-	0x0aa200c7, 0x0c002c80, 0x06800008, 0x07802647,
-	0x07802608, 0x094c11c8,
-	0x0c780100, 0x060c0a07, 0x0c002500, 0x00000000, 0x064c0907,
-	0x07802808,
-	0x095011c8, 0x07802788, 0x095221c8, 0x078027c8, 0x095621c8, 0x07802b48,
-	0x095a31c8, 0x07802b08, 0x096031c8, 0x07802bc8, 0x096631c8, 0x078008c8,
-	0x096c21c8,
-	0x07800548, 0x097011c8, 0x0a6240a0, 0x07800488, 0x07802c89,
-	0x09008249, 0x0e000248,
-	0x00000000, 0x00000000, 0x0f000200, 0x05808208,
-	0x0b20c0c8, 0x00000000, 0x068000c8,
-	0x097221c8, 0x07800489, 0x02408209,
-	0x0b20c108, 0x04401208, 0x068000c8, 0x097621c8,
-	0x078004c8, 0x097a11c8,
-	0x078012c8, 0x097c21c8, 0x060c0907, 0x0a624060, 0x0a6200a0,
-	0x07802448,
-	0x0a618008, 0x078020c8, 0x0aa100c8, 0x0c780000, 0x0c780380, 0x00000000,
-	0x078020c8, 0x0aa200c8, 0x06840007, 0x07802708, 0x0a614008, 0x0aa10060,
-	0x0aa0c0a0,
-	0x00000000, 0x06850007, 0x064e0e08, 0x098081c8, 0x060e0e08,
-	0x064e0808, 0x09610207,
-	0x060e0808, 0x0cc00000, 0x00000000, 0x06800009,
-	0x06800008, 0x078020c7, 0x0aa400c7,
-	0x00000000, 0x0fc011c0, 0x0a628007,
-	0x06800060, 0x07802dc7, 0x0aa1c007, 0x06800020,
-	0x0fc011c0, 0x0aa10007,
-	0x068000a0, 0x0c780080, 0x06800020, 0x07c002c9, 0x0cc00000,
-	0x00000000,
-	0x07800247, 0x0a638087, 0x00000000, 0x0fc031c0, 0x05801287, 0x0aa1c08a,
-	0x068000a0, 0x0aa1404a, 0x06800060, 0x0aa0c00a, 0x06800020, 0x06800049,
-	0x09401287,
+	0x07c02748, 0x06800087, 0x07c02707, 0x07802448, 0x09422207,
+	0x07800049, 0x09461209, 0x060c3108, 0x07801288, 0x097041c8,
+	0x078026c8, 0x095841c8, 0x07802748, 0x095041c8, 0x04c101c7,
+	0x060c2107, 0x0fc011c0, 0x0aa10007, 0x06800007, 0x0fc011c0,
+	0x040011c7, 0x07c02787, 0x0fc011c0, 0x0aa10007, 0x06800007,
+	0x0fc011c0, 0x040011c7, 0x07c027c7, 0x0fc011c0, 0x07c02807,
+	0x078020c7, 0x0aa200c7, 0x0c002c80, 0x06800008, 0x07802647,
+	0x07802608, 0x094c11c8, 0x0c780100, 0x060c0a07, 0x0c002500,
+	0x00000000, 0x064c0907, 0x07802808, 0x095011c8, 0x07802788,
+	0x095221c8, 0x078027c8, 0x095621c8, 0x07802b48, 0x095a31c8,
+	0x07802b08, 0x096031c8, 0x07802bc8, 0x096631c8, 0x078008c8,
+	0x096c21c8, 0x07800548, 0x097011c8, 0x0a6240a0, 0x07800488,
+	0x07802c89, 0x09008249, 0x0e000248, 0x00000000, 0x00000000,
+	0x0f000200, 0x05808208, 0x0b20c0c8, 0x00000000, 0x068000c8,
+	0x097221c8, 0x07800489, 0x02408209, 0x0b20c108, 0x04401208,
+	0x068000c8, 0x097621c8, 0x078004c8, 0x097a11c8, 0x078012c8,
+	0x097c21c8, 0x060c0907, 0x0a624060, 0x0a6200a0, 0x07802448,
+	0x0a618008, 0x078020c8, 0x0aa100c8, 0x0c780000, 0x0c780380,
+	0x00000000, 0x078020c8, 0x0aa200c8, 0x06840007, 0x07802708,
+	0x0a614008, 0x0aa10060, 0x0aa0c0a0, 0x00000000, 0x06850007,
+	0x064e0e08, 0x098081c8, 0x060e0e08, 0x064e0808, 0x09610207,
+	0x060e0808, 0x0cc00000, 0x00000000, 0x06800009, 0x06800008,
+	0x078020c7, 0x0aa400c7, 0x00000000, 0x0fc011c0, 0x0a628007,
+	0x06800060, 0x07802dc7, 0x0aa1c007, 0x06800020, 0x0fc011c0,
+	0x0aa10007, 0x068000a0, 0x0c780080, 0x06800020, 0x07c002c9,
+	0x0cc00000, 0x00000000, 0x07800247, 0x0a638087, 0x00000000,
+	0x0fc031c0, 0x05801287, 0x0aa1c08a, 0x068000a0, 0x0aa1404a,
+	0x06800060, 0x0aa0c00a, 0x06800020, 0x06800049, 0x09401287,
 	0x0c7803c0, 0x07c0038a, 0x0fc011c0, 0x0aa30007, 0x06800060,
-	0x0fc011c0, 0x0aa24007,
-	0x068000a0, 0x0fc011c0, 0x0aa18007, 0x06800020,
-	0x0fc011c0, 0x0aa0c007, 0x06800049,
-	0x06800048, 0x07c002c9, 0x0cc00000,
-	0x00000000, 0x07802247, 0x0aa1c007, 0x06800008,
-	0x0fc011c0, 0x0aa10007,
-	0x06800008, 0x0fc011c0, 0x04001207, 0x07c00248, 0x0aa10088,
-	0x068000c7,
-	0x0cc00000, 0x07c024c7, 0x06800047, 0x07c024c7, 0x07800987, 0x05404287,
-	0x078021c8, 0x05801208, 0x0400f208, 0x05804208, 0x05404248, 0x04401249,
-	0x05402249,
-	0x09610b89, 0x07c009c8, 0x04401248, 0x0cc00000, 0x09608989,
-	0x078023c7, 0x0aa58007,
-	0x06800008, 0x0aa50087, 0x06800048, 0x0fc011c0,
-	0x07c028c7, 0x0aa40007, 0x06800008,
-	0x0fc021c0, 0x0aa34007, 0x06800048,
-	0x0ae1c087, 0x0aa0c047, 0x06800088, 0x06800188,
-	0x0fc021c0, 0x0c780180,
+	0x0fc011c0, 0x0aa24007, 0x068000a0, 0x0fc011c0, 0x0aa18007,
+	0x06800020, 0x0fc011c0, 0x0aa0c007, 0x06800049, 0x06800048,
+	0x07c002c9, 0x0cc00000, 0x00000000, 0x07802247, 0x0aa1c007,
+	0x06800008, 0x0fc011c0, 0x0aa10007, 0x06800008, 0x0fc011c0,
+	0x04001207, 0x07c00248, 0x0aa10088, 0x068000c7, 0x0cc00000,
+	0x07c024c7, 0x06800047, 0x07c024c7, 0x07800987, 0x05404287,
+	0x078021c8, 0x05801208, 0x0400f208, 0x05804208, 0x05404248,
+	0x04401249, 0x05402249, 0x09610b89, 0x07c009c8, 0x04401248,
+	0x0cc00000, 0x09608989, 0x078023c7, 0x0aa58007, 0x06800008,
+	0x0aa50087, 0x06800048, 0x0fc011c0, 0x07c028c7, 0x0aa40007,
+	0x06800008, 0x0fc021c0, 0x0aa34007, 0x06800048, 0x0ae1c087,
+	0x0aa0c047, 0x06800088, 0x06800188, 0x0fc021c0, 0x0c780180,
 	0x020081c8, 0x0fc011c0, 0x0aa0c007, 0x068002c8, 0x06800288,
-	0x07c02888,
-	0x078023c7, 0x0aa34007, 0x06800008, 0x07802887, 0x0aa2c007, 0x0aa282c7,
-	0x00000000, 0x0fc031c0, 0x0aa141c7, 0x07802648, 0x020081c8, 0x0c7800c0,
-	0x04001208,
-	0x0fc05200, 0x07c02848, 0x07802647, 0x07802848, 0x094c51c8,
-	0x07802688, 0x095611c8,
-	0x07802888, 0x095841c8, 0x07802608, 0x096011c8,
-	0x078025c8, 0x0ae0c208, 0x09807447,
-	0x09c07447, 0x0cc00000, 0x060e1707,
-	0x0683ffe9, 0x04401a69, 0x0aa1c029, 0x0649bb28,
-	0x0920ca28, 0x0649532a,
-	0x09001aaa, 0x02028aa8, 0x0a6e4028, 0x0cc00000, 0x00000000,
-	0x0c07fd40,
-	0x00000000, 0x06495028, 0x09828028, 0x09828068, 0x06095028, 0x09c28028,
-	0x09c28068, 0x06095028, 0x068c0028, 0x06c07e68, 0x020288e8, 0x06097d28,
-	0x06980028,
-	0x06d00028, 0x06097e28, 0x06a20928, 0x06c00228, 0x07800269,
-	0x0a61c069, 0x00000000,
-	0x09828028, 0x078009a9, 0x06498e2a, 0x097c1aa9,
-	0x06098e2a, 0x06095128, 0x0cc00000,
-	0x00000000, 0x08098002, 0x078024c7,
-	0x0a6440c7, 0x00000000, 0x0541022b, 0x05810248,
-	0x02c08248, 0x06098108,
-	0x0541022c, 0x05810248, 0x02c08248, 0x06098208, 0x080980f0,
-	0x078024c7,
-	0x0aa640c7, 0x00000000, 0x080980f4, 0x0c780580, 0x00000000, 0x078004c7,
-	0x0aac0007, 0x00000000, 0x0541022b, 0x0649b109, 0x05410249, 0x078024c7,
-	0x0a614047,
-	0x00000000, 0x05810208, 0x0c7800c0, 0x00000000, 0x05810249,
-	0x02c08248, 0x06098108,
-	0x0541022c, 0x05810248, 0x02c08248, 0x06098208,
-	0x080980f4, 0x0649b107, 0x06099207,
-	0x078024c7, 0x0a6100c7, 0x0609902b,
-	0x0c780140, 0x0609912c, 0x0609902b, 0x0c780080,
-	0x0609912c, 0x0aa0c0a0,
-	0x0aa0c060, 0x0cc00000, 0x0c7809c0, 0x078024c7, 0x06985808,
-	0x0aa300c7,
-	0x06d81848, 0x07800548, 0x0a664008, 0x07800888, 0x0aa24008, 0x06901008,
-	0x0aa6c087, 0x06d01008, 0x06880808, 0x0c780600, 0x06c80808, 0x0c780580,
-	0x00000000,
+	0x07c02888, 0x078023c7, 0x0aa34007, 0x06800008, 0x07802887,
+	0x0aa2c007, 0x0aa282c7, 0x00000000, 0x0fc031c0, 0x0aa141c7,
+	0x07802648, 0x020081c8, 0x0c7800c0, 0x04001208, 0x0fc05200,
+	0x07c02848, 0x07802647, 0x07802848, 0x094c51c8, 0x07802688,
+	0x095611c8, 0x07802888, 0x095841c8, 0x07802608, 0x096011c8,
+	0x078025c8, 0x0ae0c208, 0x09807447, 0x09c07447, 0x0cc00000,
+	0x060e1707, 0x0683ffe9, 0x04401a69, 0x0aa1c029, 0x0649bb28,
+	0x0920ca28, 0x0649532a, 0x09001aaa, 0x02028aa8, 0x0a6e4028,
+	0x0cc00000, 0x00000000, 0x0c07fd40, 0x00000000, 0x06495028,
+	0x09828028, 0x09828068, 0x06095028, 0x09c28028, 0x09c28068,
+	0x06095028, 0x068c0028, 0x06c07e68, 0x020288e8, 0x06097d28,
+	0x06980028, 0x06d00028, 0x06097e28, 0x06a20928, 0x06c00228,
+	0x07800269, 0x0a61c069, 0x00000000, 0x09828028, 0x078009a9,
+	0x06498e2a, 0x097c1aa9, 0x06098e2a, 0x06095128, 0x0cc00000,
+	0x00000000, 0x08098002, 0x078024c7, 0x0a6440c7, 0x00000000,
+	0x0541022b, 0x05810248, 0x02c08248, 0x06098108, 0x0541022c,
+	0x05810248, 0x02c08248, 0x06098208, 0x080980f0, 0x078024c7,
+	0x0aa640c7, 0x00000000, 0x080980f4, 0x0c780580, 0x00000000,
+	0x078004c7, 0x0aac0007, 0x00000000, 0x0541022b, 0x0649b109,
+	0x05410249, 0x078024c7, 0x0a614047, 0x00000000, 0x05810208,
+	0x0c7800c0, 0x00000000, 0x05810249, 0x02c08248, 0x06098108,
+	0x0541022c, 0x05810248, 0x02c08248, 0x06098208, 0x080980f4,
+	0x0649b107, 0x06099207, 0x078024c7, 0x0a6100c7, 0x0609902b,
+	0x0c780140, 0x0609912c, 0x0609902b, 0x0c780080, 0x0609912c,
+	0x0aa0c0a0, 0x0aa0c060, 0x0cc00000, 0x0c7809c0, 0x078024c7,
+	0x06985808, 0x0aa300c7, 0x06d81848, 0x07800548, 0x0a664008,
+	0x07800888, 0x0aa24008, 0x06901008, 0x0aa6c087, 0x06d01008,
+	0x06880808, 0x0c780600, 0x06c80808, 0x0c780580, 0x00000000,
 	0x07802508, 0x0aa1c048, 0x06881088, 0x0aa44047, 0x06d08808,
-	0x06885048, 0x0c780380,
-	0x06c81008, 0x06900888, 0x0aa2c087, 0x06c89008,
-	0x06904848, 0x0c780200, 0x06d00808,
-	0x06889008, 0x0aa14087, 0x06d00888,
-	0x06889088, 0x0c780080, 0x06c81008, 0x0cc00000,
-	0x060c0f08, 0x078024c7,
-	0x06985808, 0x0aa400c7, 0x06d81848, 0x07802508, 0x0aa1c048,
-	0x06885048,
-	0x0aa2c047, 0x06c81088, 0x06904848, 0x0c780200, 0x06d00808, 0x06904848,
-	0x0aa14087, 0x06d00888, 0x06885048, 0x0c780080, 0x06c81008, 0x0cc00000,
-	0x060c0f08,
-	0x0680400a, 0x06c0008a, 0x0681410b, 0x06c0018b, 0x0682420c,
-	0x06c0028c, 0x07800247,
-	0x0aa0c007, 0x06800008, 0x06800048, 0x06499207,
-	0x0780130d, 0x0a80a287, 0x09404348,
-	0x0780130d, 0x0a8072c7, 0x09484348,
-	0x0780130d, 0x0a804307, 0x09504348, 0x0780130d,
-	0x09584348, 0x07c0130d,
+	0x06885048, 0x0c780380, 0x06c81008, 0x06900888, 0x0aa2c087,
+	0x06c89008, 0x06904848, 0x0c780200, 0x06d00808, 0x06889008,
+	0x0aa14087, 0x06d00888, 0x06889088, 0x0c780080, 0x06c81008,
+	0x0cc00000, 0x060c0f08, 0x078024c7, 0x06985808, 0x0aa400c7,
+	0x06d81848, 0x07802508, 0x0aa1c048, 0x06885048, 0x0aa2c047,
+	0x06c81088, 0x06904848, 0x0c780200, 0x06d00808, 0x06904848,
+	0x0aa14087, 0x06d00888, 0x06885048, 0x0c780080, 0x06c81008,
+	0x0cc00000, 0x060c0f08, 0x0680400a, 0x06c0008a, 0x0681410b,
+	0x06c0018b, 0x0682420c, 0x06c0028c, 0x07800247, 0x0aa0c007,
+	0x06800008, 0x06800048, 0x06499207, 0x0780130d, 0x0a80a287,
+	0x09404348, 0x0780130d, 0x0a8072c7, 0x09484348, 0x0780130d,
+	0x0a804307, 0x09504348, 0x0780130d, 0x09584348, 0x07c0130d,
 	0x05402208, 0x06499007, 0x0a807287, 0x0900438d, 0x0a8052c7,
-	0x0908438d,
-	0x0a803307, 0x0910438d, 0x0918438d, 0x0940120e, 0x06499107, 0x0a807287,
-	0x0900438d, 0x0a8052c7, 0x0908438d, 0x0a803307, 0x0910438d, 0x0918438d,
-	0x0942120e,
-	0x064c180e, 0x09484388, 0x0cc00000, 0x060c180e
+	0x0908438d, 0x0a803307, 0x0910438d, 0x0918438d, 0x0940120e,
+	0x06499107, 0x0a807287, 0x0900438d, 0x0a8052c7, 0x0908438d,
+	0x0a803307, 0x0910438d, 0x0918438d, 0x0942120e, 0x064c180e,
+	0x09484388, 0x0cc00000, 0x060c180e
 };
-
-
diff --git a/drivers/amlogic/amports/arch/ucode/vp9/Makefile b/drivers/amlogic/amports/arch/ucode/vp9/Makefile
new file mode 100644
index 0000000..c901c43
--- /dev/null
+++ b/drivers/amlogic/amports/arch/ucode/vp9/Makefile
@@ -0,0 +1,2 @@
+
+obj-y				+= vvp9_mc.o
diff --git a/drivers/amlogic/amports/arch/ucode/vp9/vvp9_mc.c b/drivers/amlogic/amports/arch/ucode/vp9/vvp9_mc.c
new file mode 100644
index 0000000..24e6c9c
--- /dev/null
+++ b/drivers/amlogic/amports/arch/ucode/vp9/vvp9_mc.c
@@ -0,0 +1,500 @@
+/*
+ * drivers/amlogic/amports/arch/m8_m8m2/h265/vh265_mc.c
+ *
+ * Copyright (C) 2015 Amlogic, Inc. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+*/
+
+#include "../firmware_def.h"
+
+/* #def SEND_PARAM_WITH_REG */
+#define VERSTR "00000012"
+const u32  vvp9_mc[] __initconst = {
+	0x06814001, 0x06800000, 0x0d000001, 0x07400040, 0x0c000900,
+	0x00000000, 0x06bffe40, 0x07c00000, 0x06030400, 0x00400000,
+	0x0800c0ff, 0x0c0210c0, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x0c7ffd80, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x0c796180, 0x00000000, 0x0c792a00,
+	0x06412108, 0x0c780980, 0x00000000, 0x0cc00000, 0x00400000,
+	0x06800040, 0x09800540, 0x09800580, 0x06014000, 0x0800c000,
+	0x068000c0, 0x07c004c0, 0x06800000, 0x07c00480, 0x06860000,
+	0x06c000c0, 0x06011100, 0x08002515, 0x08002608, 0x0640d000,
+	0x07c013c0, 0x0640d200, 0x07c01380, 0x0640c108, 0x06035108,
+	0x06800408, 0x06035208, 0x06a02008, 0x06035008, 0x06435008,
+	0x0580f208, 0x0bef8048, 0x00000000, 0x06435308, 0x0900c208,
+	0x0a6f8008, 0x00000000, 0x0cc00000, 0x00000000, 0x06bfff88,
+	0x06030408, 0x00400000, 0x0640c008, 0x0680042f, 0x0c021380,
+	0x04000c08, 0x0a6181c8, 0x00000000, 0x0c016740, 0x00000000,
+	0x0c7918c0, 0x0800c0ff, 0x0aa0c048, 0x0c7916c0, 0x00000000,
+	0x06bf0008, 0x06e012c8, 0x06014d08, 0x06410c08, 0x08010e84,
+	0x09382248, 0x0ae18089, 0x0aa20009, 0x0aa1c049, 0x06800089,
+	0x0c780140, 0x06800049, 0x09361208, 0x08010e81, 0x02009209,
+	0x07c00149, 0x07800a48, 0x0aa14008, 0x07800a88, 0x0aa0c008,
+	0x06800048, 0x07c00b48, 0x06410c08, 0x08010e81, 0x093e1248,
+	0x07c02049, 0x0aa2c009, 0x06410c08, 0x08010e83, 0x093a3248,
+	0x07c02089, 0x0c020540, 0x00000000, 0x0c020640, 0x00000000,
+	0x0c790ec0, 0x0800c0ff, 0x06410c08, 0x08010e83, 0x093a1248,
+	0x07c00209, 0x093c1248, 0x07c001c9, 0x093e1248, 0x07c00189,
+	0x06411008, 0x05001249, 0x07c00f89, 0x09421209, 0x06011008,
+	0x06414f08, 0x095e1209, 0x09761209, 0x05001289, 0x0968120a,
+	0x06014f08, 0x0aa0c049, 0x0c78ed80, 0x00000000, 0x06800008,
+	0x0c01e2c0, 0x07c00b48, 0x06410c08, 0x08010e88, 0x08010e90,
+	0x06a0d089, 0x06c01249, 0x09118208, 0x0a803248, 0x0c780000,
+	0x00000000, 0x07800188, 0x0aa28008, 0x07800148, 0x0a620008,
+	0x06800209, 0x07c00249, 0x06800049, 0x07c00289, 0x06800049,
+	0x0c780600, 0x00000000, 0x0ba20088, 0x06800209, 0x06410c08,
+	0x08010e81, 0x093e1208, 0x0aa0c008, 0x06800289, 0x06800309,
+	0x07c00249, 0x06410c08, 0x08010e83, 0x093a3248, 0x07c00289,
+	0x0a60c1c9, 0x0c780000, 0x00000000, 0x06410c08, 0x08010e81,
+	0x07800149, 0x0a20c049, 0x0c780000, 0x00000000, 0x07800188,
+	0x0aa14008, 0x06410c08, 0x08010e88, 0x09308248, 0x07c01009,
+	0x06410c08, 0x08010e90, 0x09210248, 0x04001249, 0x07c002c9,
+	0x06410c08, 0x08010e90, 0x09210208, 0x04001208, 0x07c00308,
+	0x06410c08, 0x08010e81, 0x093e1248, 0x0aa24009, 0x00000000,
+	0x06410c08, 0x08010e90, 0x09210248, 0x04001249, 0x08010e90,
+	0x09010208, 0x04001208, 0x07800208, 0x06800009, 0x0a618008,
+	0x0680004a, 0x06410c08, 0x08010e82, 0x093e1248, 0x093c1288,
+	0x07c00549, 0x07c0058a, 0x06410c08, 0x08010e82, 0x093c2248,
+	0x07c005c9, 0x06410c08, 0x08010e8a, 0x09346248, 0x07c00649,
+	0x092e3248, 0x07c00689, 0x092c1248, 0x07c006c9, 0x0aa14009,
+	0x06410c08, 0x08010e81, 0x093e1248, 0x0a608009, 0x0c7810c0,
+	0x06410c08, 0x08010e81, 0x093e1248, 0x0aa20009, 0x09301288,
+	0x08010e87, 0x0aa1000a, 0x09326248, 0x0680000a, 0x0240924a,
+	0x07c00709, 0x06410c08, 0x08010e81, 0x093e1248, 0x0aa20009,
+	0x09301288, 0x08010e87, 0x0aa1000a, 0x09326248, 0x0680000a,
+	0x0240924a, 0x07c00749, 0x06410c08, 0x08010e81, 0x093e1248,
+	0x0aa20009, 0x09301288, 0x08010e87, 0x0aa1000a, 0x09326248,
+	0x0680000a, 0x0240924a, 0x07c00789, 0x06410c08, 0x08010e81,
+	0x093e1248, 0x0aa20009, 0x09301288, 0x08010e87, 0x0aa1000a,
+	0x09326248, 0x0680000a, 0x0240924a, 0x07c007c9, 0x06410c08,
+	0x08010e81, 0x093e1248, 0x0aa20009, 0x09301288, 0x08010e87,
+	0x0aa1000a, 0x09326248, 0x0680000a, 0x0240924a, 0x07c00809,
+	0x06410c08, 0x08010e81, 0x093e1248, 0x0aa20009, 0x09301288,
+	0x08010e87, 0x0aa1000a, 0x09326248, 0x0680000a, 0x0240924a,
+	0x07c00849, 0x06410c08, 0x08010e88, 0x09308248, 0x07c00889,
+	0x06410c08, 0x08010e81, 0x093e1248, 0x0aa1c009, 0x09341288,
+	0x08010e85, 0x0aa1000a, 0x09364248, 0x0680000a, 0x0240924a,
+	0x07c00989, 0x07800888, 0x02009209, 0x07c008c9, 0x09508248,
+	0x06c00009, 0x06014609, 0x06410c08, 0x08010e81, 0x093e1248,
+	0x0aa1c009, 0x09341288, 0x08010e85, 0x0aa1000a, 0x09364248,
+	0x0680000a, 0x0240924a, 0x07c009c9, 0x07800888, 0x02009209,
+	0x07c00909, 0x06410c08, 0x08010e81, 0x093e1248, 0x0aa1c009,
+	0x09341288, 0x08010e85, 0x0aa1000a, 0x09364248, 0x0680000a,
+	0x0240924a, 0x07c00a09, 0x07800888, 0x02009209, 0x07c00949,
+	0x07800908, 0x09508209, 0x06c00048, 0x06014608, 0x06800089,
+	0x07800888, 0x0a624008, 0x07800988, 0x0a61c008, 0x078009c8,
+	0x0a614008, 0x07800a08, 0x0a60c008, 0x00000000, 0x068000c9,
+	0x06414f08, 0x096a2209, 0x06014f08, 0x06410c08, 0x08010e81,
+	0x093e1248, 0x0aa14009, 0x07c00a49, 0x06800008, 0x0c012100,
+	0x07c00ac8, 0x06414f08, 0x07800a49, 0x096e1209, 0x07800a89,
+	0x09701209, 0x07800ac9, 0x09721209, 0x07800b09, 0x09741209,
+	0x06014f08, 0x0c01bf40, 0x00000000, 0x0c01c040, 0x00000000,
+	0x0640c008, 0x0a610188, 0x00000000, 0x0c78c800, 0x0800c0ff,
+	0x0c01a780, 0x00000000, 0x06800048, 0x07800409, 0x0680100a,
+	0x0340b20a, 0x0ac0324b, 0x0c7fff80, 0x04001208, 0x04401208,
+	0x07c00048, 0x06800048, 0x07800409, 0x0380b209, 0x0ba0c10b,
+	0x0c7fff80, 0x04001208, 0x04401208, 0x07c00088, 0x0780004a,
+	0x07800089, 0x0b40724a, 0x06410c08, 0x08010e81, 0x093e1208,
+	0x0aa0c008, 0x0c7ffec0, 0x0400128a, 0x07c00bca, 0x06800048,
+	0x03408288, 0x04401208, 0x07c00c48, 0x06410c08, 0x08010e81,
+	0x093e1288, 0x0aa1400a, 0x06410c08, 0x08010e81, 0x093e1248,
+	0x0200a24a, 0x07c00c0a, 0x06800048, 0x03408288, 0x04401208,
+	0x07c00c88, 0x06410c08, 0x08010e90, 0x09210248, 0x06812008,
+	0x06010e08, 0x08010e00, 0x05403249, 0x098097c9, 0x09809749,
+	0x06013a09, 0x07800188, 0x0aa14008, 0x07800208, 0x0a60c008,
+	0x07800fc8, 0x0a60c0c8, 0x06800008, 0x07c00608, 0x07800fc8,
+	0x0aa18088, 0x06800009, 0x07800609, 0x078005c8, 0x03809209,
+	0x04801249, 0x0641100a, 0x0a610009, 0x0980a3ca, 0x0c7809c0,
+	0x00000000, 0x0601100a, 0x06414d09, 0x093e1249, 0x0a6f8009,
+	0x00000000, 0x0640c308, 0x09108208, 0x0aafbf48, 0x00000000,
+	0x06410108, 0x09808348, 0x06010108, 0x06410108, 0x09021208,
+	0x0a6f8008, 0x00000000, 0x06af0008, 0x06ec09c8, 0x06014d08,
+	0x0640c908, 0x078005c9, 0x0540c249, 0x02008248, 0x06013408,
+	0x08013501, 0x06413508, 0x090e1248, 0x0a6f8009, 0x09308248,
+	0x0a6f0009, 0x00000000, 0x08013500, 0x08014d00, 0x06410108,
+	0x09c08348, 0x0c780b80, 0x06010108, 0x06807fc8, 0x09449288,
+	0x0601100a, 0x06800049, 0x078005c8, 0x03409209, 0x07800608,
+	0x02c08248, 0x07c00608, 0x06411009, 0x0904a249, 0x0a6f8009,
+	0x00000000, 0x06414d09, 0x093e1249, 0x0a6f8009, 0x00000000,
+	0x06410108, 0x09808348, 0x06010108, 0x06410108, 0x09021208,
+	0x0a6f8008, 0x00000000, 0x06af0008, 0x06ec05c8, 0x06014d08,
+	0x0640c908, 0x078005c9, 0x0540c249, 0x02008248, 0x06013408,
+	0x08013503, 0x06413508, 0x090e1248, 0x0a6f8009, 0x09308248,
+	0x0a6f0009, 0x00000000, 0x08013500, 0x08014d00, 0x06410108,
+	0x09c08348, 0x06010108, 0x06411009, 0x091e1249, 0x0a6f8009,
+	0x00000000, 0x06a00208, 0x06014108, 0x06414108, 0x09061248,
+	0x0a6f8009, 0x09201248, 0x0aa08009, 0x0c780000, 0x078008c8,
+	0x0a624008, 0x07800888, 0x0a61c008, 0x07800908, 0x0a614008,
+	0x07800948, 0x0a60c008, 0x0c780400, 0x0680000a, 0x06a00608,
+	0x06014108, 0x06414108, 0x09061248, 0x0a6f8009, 0x09202288,
+	0x0a6200ca, 0x06a00208, 0x06014108, 0x06414108, 0x09061248,
+	0x0a6f8009, 0x09201248, 0x0200a24a, 0x07c00f4a, 0x06414f08,
+	0x0958320a, 0x06014f08, 0x0a62010a, 0x06bf0248, 0x06c002c8,
+	0x06014108, 0x06414108, 0x09061248, 0x0a6f8009, 0x00000000,
+	0x0680000a, 0x06a00208, 0x06014108, 0x06414108, 0x09061248,
+	0x0a6f8009, 0x09201248, 0x0aa24009, 0x06bf0648, 0x06c062c8,
+	0x097c220a, 0x06014108, 0x06414108, 0x09061248, 0x0a6d4009,
+	0x00000000, 0x07800f48, 0x0b40420a, 0x0babc0ca, 0x0400128a,
+	0x00000000, 0x06bf0a48, 0x06c00088, 0x06014108, 0x06414108,
+	0x09061248, 0x0a6f8009, 0x00000000, 0x07800f88, 0x0aa08008,
+	0x0c781ac0, 0x06bf0e48, 0x06c00508, 0x06014108, 0x06414108,
+	0x09061248, 0x0a6f8009, 0x00000000, 0x078010c8, 0x0a620108,
+	0x06bf1248, 0x06c001c8, 0x06014108, 0x06414108, 0x09061248,
+	0x0a6f8009, 0x00000000, 0x06bf1648, 0x06c000c8, 0x06014108,
+	0x06414108, 0x09061248, 0x0a6f8009, 0x00000000, 0x06414f0a,
+	0x07801048, 0x09001248, 0x09501289, 0x09081248, 0x094e1289,
+	0x09101248, 0x094c1289, 0x06014f0a, 0x09081288, 0x0a40424a,
+	0x09001288, 0x0a81324a, 0x0680000a, 0x06a00208, 0x06014108,
+	0x06414108, 0x09061248, 0x0a6f8009, 0x09201248, 0x0aa2c009,
+	0x0680000a, 0x06a00208, 0x06014108, 0x06414108, 0x09061248,
+	0x0a6f8009, 0x09201248, 0x0aa0c009, 0x0680004a, 0x0680008a,
+	0x07c0110a, 0x06414f08, 0x0954220a, 0x06014f08, 0x0a62008a,
+	0x06bf1a48, 0x06c00108, 0x06014108, 0x06414108, 0x09061248,
+	0x0a6f8009, 0x00000000, 0x0aa2004a, 0x06bf2248, 0x06c00248,
+	0x06014108, 0x06414108, 0x09061248, 0x0a6f8009, 0x00000000,
+	0x0aa2000a, 0x06bf1e48, 0x06c00108, 0x06014108, 0x06414108,
+	0x09061248, 0x0a6f8009, 0x00000000, 0x06bf2648, 0x06c008c8,
+	0x06014108, 0x06414108, 0x09061248, 0x0a6f8009, 0x00000000,
+	0x06bf2a48, 0x06c00bc8, 0x06014108, 0x06414108, 0x09061248,
+	0x0a6f8009, 0x00000000, 0x06bf2e48, 0x07801089, 0x0a60c009,
+	0x06c01108, 0x06c01008, 0x06014108, 0x06414108, 0x09061248,
+	0x0a6f8009, 0x00000000, 0x06413a08, 0x09013208, 0x0aa0c008,
+	0x00000000, 0x08010e88, 0x06800008, 0x07c00cc8, 0x07c00d08,
+	0x08013a00, 0x08011c00, 0x08011e00, 0x08011d00, 0x08011f00,
+	0x08014700, 0x08014800, 0x08014200, 0x08014300, 0x08014400,
+	0x08014500, 0x07800cc8, 0x07800409, 0x0e000248, 0x068001df,
+	0x00000000, 0x07800bc9, 0x0f000200, 0x03808248, 0x07c00d48,
+	0x07800cc8, 0x04001208, 0x07800409, 0x0e000248, 0x0680000a,
+	0x07c00b8a, 0x07800bc9, 0x0f000200, 0x03808248, 0x07c00dc8,
+	0x07800d49, 0x02408248, 0x07c00e48, 0x07800d08, 0x07800449,
+	0x0e000248, 0x00000000, 0x00000000, 0x07800c09, 0x0f000200,
+	0x03808248, 0x0aa10008, 0x07c00d88, 0x0c00e980, 0x09c1f05f,
+	0x07800d08, 0x04001208, 0x07800449, 0x0e000248, 0x00000000,
+	0x00000000, 0x07800c09, 0x0f000200, 0x03808248, 0x07c00e08,
+	0x07800d89, 0x02408248, 0x07c00e88, 0x07800d48, 0x04001208,
+	0x07800dc9, 0x0b807248, 0x07800d88, 0x04001208, 0x07800e09,
+	0x0b803248, 0x00000000, 0x0981f0df, 0x07800d88, 0x07800409,
+	0x0e000248, 0x07c00f08, 0x07c01348, 0x07800d49, 0x07c00ec9,
+	0x07c01309, 0x0f000200, 0x02008248, 0x07c00508, 0x05404248,
+	0x05403208, 0x02008248, 0x07c01208, 0x07c01248, 0x06800008,
+	0x07c01288, 0x07c012c8, 0x06812008, 0x06010e08, 0x08010e00,
+	0x07800cc8, 0x0a60c008, 0x07800d08, 0x0aa20008, 0x0641390a,
+	0x0aa1800a, 0x00000000, 0x08010e88, 0x00000000, 0x0c7ffec0,
+	0x00000000, 0x07800cc8, 0x07800c49, 0x0b804248, 0x07800d08,
+	0x07800c89, 0x0b40d248, 0x06410c08, 0x08010e90, 0x09210248,
+	0x06410c08, 0x08010e90, 0x09210288, 0x09610289, 0x0601390a,
+	0x0540324a, 0x098097c9, 0x09809789, 0x06013a09, 0x07800e48,
+	0x0aa0c008, 0x07800e88, 0x0a630008, 0x07800cc8, 0x04001208,
+	0x07800c49, 0x0b082248, 0x07c00cc8, 0x06800008, 0x07c00cc8,
+	0x07800d08, 0x04001208, 0x0c7fdf00, 0x07c00d08, 0x07800a48,
+	0x0aa0c008, 0x0c00db40, 0x00000000, 0x06411009, 0x098093c9,
+	0x06011009, 0x06470109, 0x09809209, 0x06070109, 0x06470b08,
+	0x07800249, 0x04408249, 0x09402209, 0x09482209, 0x09502209,
+	0x06070b08, 0x078002c8, 0x07800309, 0x09610209, 0x06020508,
+	0x07800d48, 0x07800d89, 0x09610209, 0x06020708, 0x06060708,
+	0x07800e48, 0x07800e89, 0x09610209, 0x06020808, 0x06060808,
+	0x07800408, 0x04401208, 0x07800449, 0x04401249, 0x09610209,
+	0x06020608, 0x06420109, 0x07800188, 0x0aa0c008, 0x06800388,
+	0x06800308, 0x09403248, 0x078004c8, 0x04003208, 0x09604248,
+	0x07800488, 0x04003208, 0x09684248, 0x06020109, 0x06424c09,
+	0x09809009, 0x09809049, 0x09809089, 0x07801088, 0x05001208,
+	0x09501248, 0x07801048, 0x09001288, 0x095c124a, 0x09081288,
+	0x095a124a, 0x09101288, 0x0958124a, 0x06024c09, 0x06420408,
+	0x093e1208, 0x0a6f8008, 0x00000000, 0x078002c9, 0x0780030a,
+	0x0960f24a, 0x06040209, 0x07800409, 0x0780044a, 0x0960c24a,
+	0x06040309, 0x08040400, 0x07800c48, 0x0a618008, 0x06800049,
+	0x07800c88, 0x0a60c008, 0x06800049, 0x06800009, 0x06040509,
+	0x07800e48, 0x07800e89, 0x09610209, 0x06040308, 0x07800d48,
+	0x07800d89, 0x09610209, 0x06040408, 0x06450d08, 0x09001248,
+	0x0a6f8009, 0x00000000, 0x08040640, 0x06414f0a, 0x07800148,
+	0x0aa10008, 0x06800009, 0x06800289, 0x0980a24a, 0x06040c09,
+	0x06014f0a, 0x06440009, 0x09809009, 0x06040009, 0x09c09009,
+	0x06040009, 0x06800048, 0x09482248, 0x09809049, 0x06040009,
+	0x07800249, 0x04408249, 0x06450108, 0x09602209, 0x09642209,
+	0x06050108, 0x078002c8, 0x07800309, 0x09610209, 0x06050208,
+	0x07800bc8, 0x06050c08, 0x07800d48, 0x07800d89, 0x0960a209,
+	0x07800cc9, 0x09584209, 0x07800d09, 0x09784209, 0x06050608,
+	0x07800d4a, 0x07800e48, 0x02008288, 0x04401208, 0x07800d8a,
+	0x07800e89, 0x02009289, 0x04401249, 0x0960a209, 0x06050708,
+	0x07800d48, 0x07800d89, 0x0960a209, 0x06050808, 0x078002c8,
+	0x07800309, 0x09610209, 0x06060508, 0x07800408, 0x04401208,
+	0x07800449, 0x04401249, 0x09610209, 0x06060608, 0x06460109,
+	0x09809709, 0x06060109, 0x07800ec9, 0x07800f08, 0x0958c248,
+	0x0978425f, 0x06011609, 0x06411009, 0x091e1249, 0x0a6f8009,
+	0x00000000, 0x06a00208, 0x06014108, 0x06414108, 0x09061248,
+	0x0a6f8009, 0x09201248, 0x0aa08009, 0x0c780000, 0x07800508,
+	0x09808788, 0x098087c8, 0x06012408, 0x07800d48, 0x0a610008,
+	0x07800d88, 0x0a608008, 0x00000000, 0x06800048, 0x0541f208,
+	0x06020408, 0x06060408, 0x08040701, 0x06450808, 0x098087c8,
+	0x06050808, 0x06414008, 0x09808048, 0x06014008, 0x06414008,
+	0x0c783500, 0x00000000, 0x078001c8, 0x0a614008, 0x06800009,
+	0x06410c08, 0x08010e81, 0x093e1248, 0x07c00f89, 0x0a60c009,
+	0x0780020a, 0x0aa0c00a, 0x0c00f380, 0x00000000, 0x06414f08,
+	0x095e1209, 0x05001289, 0x0968120a, 0x06014f08, 0x07800208,
+	0x0a614008, 0x06800009, 0x06410c08, 0x08010e82, 0x093c2248,
+	0x07c00fc9, 0x07800f88, 0x0aa08008, 0x0c7f0c80, 0x06410c08,
+	0x08010e88, 0x09308248, 0x07c01009, 0x06410c08, 0x08010e8c,
+	0x0928c248, 0x07c01049, 0x09101209, 0x09081289, 0x0a806288,
+	0x068009ca, 0x09001289, 0x0a803288, 0x06800d8a, 0x06800e8a,
+	0x06414f09, 0x0940624a, 0x06014f09, 0x0680008a, 0x0680000b,
+	0x06410c08, 0x08010e81, 0x093e1248, 0x03408289, 0x02c0b20b,
+	0x0a63c009, 0x07c023cb, 0x0b20c00a, 0x0c7ffe00, 0x0440128a,
+	0x06410c08, 0x08010e90, 0x09210248, 0x04001249, 0x06410c08,
+	0x08010e90, 0x09210208, 0x04001208, 0x07c00308, 0x07c002c9,
+	0x06410c08, 0x08010e81, 0x093e1248, 0x07c021c9, 0x0aa2c009,
+	0x00000000, 0x06410c08, 0x08010e90, 0x09210248, 0x04001249,
+	0x07c02309, 0x08010e90, 0x09010208, 0x04001208, 0x07c02348,
+	0x06410c08, 0x08010e81, 0x093e1248, 0x07c01089, 0x06414f08,
+	0x09661209, 0x06014f08, 0x06410c08, 0x08010e81, 0x093e1248,
+	0x0a61c009, 0x0680010a, 0x08010e82, 0x093a2248, 0x0b60c089,
+	0x04000289, 0x0500128a, 0x07c010ca, 0x06414f08, 0x0960320a,
+	0x06014f08, 0x0c7f0b40, 0x00000000, 0x0a60c188, 0x00000000,
+	0x08010e90, 0x0c780080, 0x0800c0ff, 0x00800000, 0x07800008,
+	0x0c7edb00, 0x06030408, 0x06806008, 0x06010e08, 0x06410f08,
+	0x0befc0c8, 0x09118208, 0x0cc00000, 0x07400248, 0x0680e008,
+	0x06010e08, 0x06410f08, 0x0befc0c8, 0x09118208, 0x0cc00000,
+	0x07400248, 0x06410509, 0x06bfff89, 0x06030409, 0x00400000,
+	0x0be0c108, 0x0c7ffa40, 0x00000000, 0x08012104, 0x080150c0,
+	0x06411c26, 0x06411d27, 0x06414728, 0x06414229, 0x07800409,
+	0x0ae1c049, 0x0641432a, 0x04000866, 0x040008a7, 0x040008e8,
+	0x04000929, 0x0400096a, 0x06014224, 0x06014325, 0x06011c21,
+	0x06011d22, 0x0a21c91f, 0x06014723, 0x08011e00, 0x08011f00,
+	0x08014800, 0x08014400, 0x08014500, 0x0be0e026, 0x0c7809c0,
+	0x00000000, 0x07800a48, 0x0aa0c008, 0x0c00aac0, 0x00000000,
+	0x068001df, 0x0978479f, 0x06420409, 0x093e1209, 0x0a6f8008,
+	0x09c09749, 0x06020409, 0x07800cc8, 0x04001208, 0x07800c49,
+	0x0b009248, 0x07c00cc8, 0x06800008, 0x07c00cc8, 0x07800d08,
+	0x04001208, 0x07800c89, 0x0ac08248, 0x07c00d08, 0x0c006940,
+	0x00000000, 0x0c003e40, 0x00000000, 0x0c7f7c00, 0x00000000,
+	0x07800549, 0x0aa0c009, 0x0c00ac40, 0x00000000, 0x0c003c40,
+	0x00000000, 0x0c7fea00, 0x0800c0ff, 0x0601161e, 0x07800508,
+	0x09808788, 0x098087c8, 0x06012408, 0x06414009, 0x09809049,
+	0x06014009, 0x06414009, 0x09c1f09f, 0x07800508, 0x04001208,
+	0x07c00508, 0x07800b88, 0x04001208, 0x07c00b88, 0x0a21409f,
+	0x07800e49, 0x0b803248, 0x00000000, 0x09c1f05f, 0x07800ec8,
+	0x04001208, 0x07800dc9, 0x0b811248, 0x07c00ec8, 0x07800d48,
+	0x07c00ec8, 0x0981f09f, 0x07800508, 0x07800409, 0x02008248,
+	0x07800e49, 0x02408248, 0x07c00508, 0x07800f08, 0x04001208,
+	0x07800e09, 0x0b803248, 0x07c00f08, 0x0981f0df, 0x07800f08,
+	0x04001208, 0x07800e09, 0x0b80f248, 0x07800ec8, 0x04001208,
+	0x07800dc9, 0x0b80b248, 0x07800409, 0x0b807248, 0x07800f08,
+	0x04001208, 0x07800449, 0x0b803248, 0x0c7800c0, 0x09c1f11f,
+	0x0981f11f, 0x0981f0df, 0x07800ede, 0x07800f08, 0x0958c788,
+	0x0978479f, 0x07800b88, 0x0ae08048, 0x0c780a00, 0x07800ec9,
+	0x07800d4a, 0x0400228a, 0x0b407289, 0x04402209, 0x0440128a,
+	0x07800dc8, 0x0b403289, 0x04401208, 0x04401208, 0x05403248,
+	0x02009248, 0x02008248, 0x06806009, 0x02009209, 0x07400266,
+	0x09210226, 0x04001249, 0x07400248, 0x04001249, 0x07400269,
+	0x09210229, 0x04001249, 0x07400248, 0x04001249, 0x0740026a,
+	0x0921022a, 0x04001249, 0x07400248, 0x04001249, 0x07400267,
+	0x09210227, 0x04001249, 0x07400248, 0x04001249, 0x07400268,
+	0x09210228, 0x04001249, 0x07400248, 0x0a21c09f, 0x06800024,
+	0x06800025, 0x06800021, 0x06800022, 0x0c780800, 0x06800023,
+	0x07800ec8, 0x05403248, 0x02009248, 0x02008248, 0x06806009,
+	0x02009209, 0x07000261, 0x04001249, 0x07000248, 0x09610848,
+	0x04001249, 0x07000264, 0x04001249, 0x07000248, 0x09610908,
+	0x04001249, 0x07000265, 0x04001249, 0x07000248, 0x09610948,
+	0x04001249, 0x07000262, 0x04001249, 0x07000248, 0x09610888,
+	0x04001249, 0x07000263, 0x04001249, 0x07000248, 0x096108c8,
+	0x07800a48, 0x0aa0c008, 0x0c005cc0, 0x00000000, 0x0c7fc500,
+	0x00000000, 0x06412106, 0x090c1186, 0x0a6f8006, 0x0c7e9f40,
+	0x00000000, 0x06804009, 0x06012d09, 0x06800f8a, 0x08012e00,
+	0x00000000, 0x0d07ff8a, 0x00000000, 0x0cc00000, 0x00000000,
+	0x07800148, 0x07c02008, 0x07800188, 0x07c020c8, 0x078001c8,
+	0x07c02108, 0x07800208, 0x07c02148, 0x07800f88, 0x07c02188,
+	0x07800fc8, 0x07c02208, 0x07801008, 0x07c02248, 0x078002c8,
+	0x07c02288, 0x07800308, 0x07c022c8, 0x07801048, 0x07c02388,
+	0x078006c8, 0x07c02408, 0x07800708, 0x07c02448, 0x07800748,
+	0x07c02488, 0x07800788, 0x07c024c8, 0x078007c8, 0x07c02508,
+	0x07800808, 0x07c02548, 0x07800848, 0x07c02588, 0x07800648,
+	0x07c025c8, 0x07800688, 0x07c02608, 0x07800248, 0x07c02648,
+	0x07800a48, 0x07c02888, 0x07800b08, 0x07c028c8, 0x0640c108,
+	0x06035108, 0x06802008, 0x06035208, 0x06a02008, 0x06035008,
+	0x06435008, 0x0580f208, 0x0bef8048, 0x00000000, 0x06435308,
+	0x0900c208, 0x0a6f8008, 0x00000000, 0x0cc00000, 0x00000000,
+	0x0800cf00, 0x0800c0ff, 0x06800009, 0x0680ffca, 0x07000248,
+	0x09808408, 0x0600cf08, 0x00000000, 0x0640cf08, 0x0a6fc008,
+	0x0b403289, 0x0c7ffe40, 0x04001249, 0x0cc00000, 0x00000000,
+	0x069fffca, 0x06440109, 0x0a2fc049, 0x0440128a, 0x06460309,
+	0x093e1289, 0x0a6f800a, 0x00000000, 0x0cc00000, 0x00000000,
+	0x06410c08, 0x08010e81, 0x093e1248, 0x0a60c009, 0x07c00a89,
+	0x0c780b80, 0x06847f4a, 0x06012d0a, 0x0680000a, 0x06410c08,
+	0x08010e81, 0x093e1248, 0x0aa14009, 0x06803fc9, 0x06410c08,
+	0x08010e88, 0x09308248, 0x054082cb, 0x094082c9, 0x0bad80ca,
+	0x0400128a, 0x0a60c10a, 0x00000000, 0x06012e0b, 0x0bac41ca,
+	0x00000000, 0x054082cb, 0x06012e0b, 0x06847fca, 0x06012d0a,
+	0x06410c08, 0x08010e81, 0x093e1248, 0x06bfc00b, 0x0aa40009,
+	0x07c00ac9, 0x0680000a, 0x06410c08, 0x08010e81, 0x093e1248,
+	0x0aa14009, 0x06803fc9, 0x06410c08, 0x08010e88, 0x09308248,
+	0x054082cb, 0x094082c9, 0x0bad808a, 0x0400128a, 0x054082cb,
+	0x06012e0b, 0x06410c08, 0x08010e81, 0x093e1248, 0x0a60c009,
+	0x0c780d80, 0x00000000, 0x06410c08, 0x08010e81, 0x093e1248,
+	0x07c00b09, 0x0680000c, 0x06410c08, 0x08010e81, 0x093e1248,
+	0x0aa14009, 0x0680000a, 0x06410c08, 0x08010e89, 0x092e9288,
+	0x0680268b, 0x0200b30b, 0x074002ca, 0x0680000b, 0x06410c08,
+	0x08010e81, 0x093e1248, 0x0540f289, 0x0aa28009, 0x095612c9,
+	0x06410c08, 0x08010e87, 0x09346248, 0x09406289, 0x094862c9,
+	0x09321248, 0x09501289, 0x095412c9, 0x040a420c, 0x0740020a,
+	0x06410c08, 0x08010e81, 0x093e1248, 0x0aa18009, 0x094612c9,
+	0x06410c08, 0x08010e82, 0x093c2248, 0x094222c9, 0x06410c08,
+	0x08010e81, 0x093e1248, 0x094012c9, 0x096c32cc, 0x0980b7cb,
+	0x0b6101cc, 0x0601460b, 0x0c7ff4c0, 0x0400130c, 0x0680000c,
+	0x07800b0a, 0x0aa0c00a, 0x0780088b, 0x0680000b, 0x06802688,
+	0x02008308, 0x07000208, 0x09028288, 0x09001248, 0x0aa0c009,
+	0x0200928b, 0x0240928b, 0x0ba14009, 0x0680000a, 0x0ae0ffc9,
+	0x06803fca, 0x04000289, 0x07900988, 0x0200920a, 0x0ba14009,
+	0x0680000b, 0x0ae0ffc9, 0x06803fcb, 0x040002c9, 0x095082ca,
+	0x096232cc, 0x0601460b, 0x07900a08, 0x0200920a, 0x0ba14009,
+	0x0680000b, 0x0ae0ffc9, 0x06803fcb, 0x040002c9, 0x079009c8,
+	0x0200920a, 0x0ba14009, 0x06800008, 0x0ae0ffc9, 0x06803fc8,
+	0x04000209, 0x0950820b, 0x0962320c, 0x09808408, 0x06014608,
+	0x0b60c1cc, 0x0c7ff480, 0x0400130c, 0x0cc00000, 0x00000000,
+	0x07800dc8, 0x04401208, 0x05403248, 0x02009248, 0x02008248,
+	0x06806009, 0x02009209, 0x07400266, 0x09210226, 0x04001249,
+	0x07400248, 0x04001249, 0x07400269, 0x09210229, 0x04001249,
+	0x07400248, 0x04001249, 0x0740026a, 0x0921022a, 0x04001249,
+	0x07400248, 0x04001249, 0x07400267, 0x09210227, 0x04001249,
+	0x07400248, 0x04001249, 0x07400268, 0x09210228, 0x04001249,
+	0x0cc00000, 0x07400248, 0x07800d48, 0x05403248, 0x02009248,
+	0x02008248, 0x06806009, 0x02009209, 0x07000261, 0x04001249,
+	0x07000248, 0x09610848, 0x04001249, 0x07000264, 0x04001249,
+	0x07000248, 0x09610908, 0x04001249, 0x07000265, 0x04001249,
+	0x07000248, 0x09610948, 0x04001249, 0x07000262, 0x04001249,
+	0x07000248, 0x09610888, 0x04001249, 0x07000263, 0x04001249,
+	0x07000248, 0x096108c8, 0x06014224, 0x06014325, 0x06011c21,
+	0x06011d22, 0x0cc00000, 0x06014723, 0x07800a88, 0x0aa14008,
+	0x07800ac8, 0x0a60c008, 0x0cc00000, 0x00000000, 0x07801208,
+	0x0640cb09, 0x02009248, 0x06435008, 0x0580f208, 0x0bef8048,
+	0x00000000, 0x06035109, 0x06800c08, 0x06035208, 0x06b10008,
+	0x06035008, 0x08015020, 0x06435008, 0x0580f208, 0x0bef8048,
+	0x06810008, 0x0680018b, 0x07800b49, 0x0a618009, 0x06800009,
+	0x0d00000b, 0x06015109, 0x0cc00000, 0x08015080, 0x07000209,
+	0x04001208, 0x0700020a, 0x04001208, 0x0961024a, 0x0d07fecb,
+	0x06015109, 0x0cc00000, 0x08015080, 0x07800b88, 0x0ae08048,
+	0x0c780900, 0x078012c8, 0x05403248, 0x05402208, 0x02008248,
+	0x06810009, 0x02008248, 0x08015020, 0x0643500b, 0x0580f2cb,
+	0x0bef804b, 0x0680018b, 0x06415109, 0x07400209, 0x04001208,
+	0x09210249, 0x07400209, 0x0d07fecb, 0x04001208, 0x07c012c8,
+	0x07801288, 0x0be3c0c8, 0x0be0c108, 0x0681000b, 0x040302cb,
+	0x07800a88, 0x0aa28008, 0x07801248, 0x0640cb09, 0x02009248,
+	0x06035109, 0x078012c8, 0x024082c8, 0x06035208, 0x0980b3cb,
+	0x0603500b, 0x07801208, 0x07c01248, 0x07801288, 0x07c012c8,
+	0x07800f08, 0x07801349, 0x0a408248, 0x07800eca, 0x07801309,
+	0x04001249, 0x0a40c289, 0x07801289, 0x0c780340, 0x04001249,
+	0x04001249, 0x0a407209, 0x07800eca, 0x0a61400a, 0x07801309,
+	0x04001249, 0x0780040a, 0x0a8f6289, 0x07801289, 0x04004249,
+	0x048fc249, 0x04807249, 0x07c01289, 0x0be340c9, 0x07800f08,
+	0x07800409, 0x0e000248, 0x07800ec9, 0x00000000, 0x00000000,
+	0x0f000200, 0x02008248, 0x05404248, 0x05403208, 0x02008248,
+	0x07c01208, 0x07800ec8, 0x07c01308, 0x07800f08, 0x07c01348,
+	0x07800a88, 0x0aa14008, 0x07800ac8, 0x0a60c008, 0x0cc00000,
+	0x00000000, 0x07801289, 0x0be400c9, 0x07801208, 0x0640cb09,
+	0x02009248, 0x06435008, 0x0580f208, 0x0bef8048, 0x00000000,
+	0x06035109, 0x06800c08, 0x06035208, 0x07801289, 0x0be0c109,
+	0x06b10c08, 0x06b10008, 0x06035008, 0x06435008, 0x0580f208,
+	0x0bef8048, 0x00000000, 0x07801288, 0x05403248, 0x05402208,
+	0x02008248, 0x06810009, 0x02008248, 0x08015020, 0x0680018b,
+	0x07800b49, 0x0a618009, 0x06800009, 0x0d00000b, 0x06015109,
+	0x0cc00000, 0x00000000, 0x07000209, 0x04001208, 0x0700020a,
+	0x04001208, 0x0961024a, 0x0d07fecb, 0x06015109, 0x0cc00000,
+	0x00000000, 0x078012c8, 0x0a20c108, 0x0681000a, 0x06810c0a,
+	0x05403248, 0x05402208, 0x02008248, 0x06810009, 0x02008248,
+	0x08015020, 0x0643500b, 0x0580f2cb, 0x0bef804b, 0x0680018b,
+	0x06415109, 0x07400209, 0x04001208, 0x09210249, 0x07400209,
+	0x0d07fecb, 0x04001208, 0x07c012c8, 0x07800a88, 0x0a608008,
+	0x0cc00000, 0x07801248, 0x0640cb09, 0x02009248, 0x06035109,
+	0x078012c8, 0x02408288, 0x06035208, 0x0980a3ca, 0x0cc00000,
+	0x0603500a, 0x06410108, 0x09808348, 0x06010108, 0x06410108,
+	0x09021208, 0x0a6f8008, 0x07800588, 0x0aa34048, 0x06bf0008,
+	0x06e016c8, 0x06014d08, 0x0640ca08, 0x06013408, 0x08013503,
+	0x06413508, 0x090e1248, 0x0a6f8009, 0x09308248, 0x0a6f0009,
+	0x00000000, 0x08014d00, 0x06af0008, 0x06ec05c8, 0x06014d08,
+	0x0640c908, 0x07800589, 0x0aa10009, 0x06900009, 0x078005c9,
+	0x0540c249, 0x02008248, 0x06013408, 0x08013503, 0x06413508,
+	0x090e1248, 0x0a6f8009, 0x09308248, 0x0a6f0009, 0x00000000,
+	0x08013500, 0x08014d00, 0x07800588, 0x0aa14048, 0x06803f48,
+	0x078005c9, 0x09502209, 0x0600c308, 0x06410108, 0x09c08348,
+	0x0cc00000, 0x06010108, 0x06435008, 0x0580f208, 0x0bef8048,
+	0x00000000, 0x0640c408, 0x07801189, 0x05408249, 0x02008248,
+	0x06035108, 0x08035280, 0x06bd4008, 0x06035008, 0x07801189,
+	0x04001249, 0x07c01189, 0x06814009, 0x07c01149, 0x06462308,
+	0x09808288, 0x06062308, 0x06462d08, 0x09808048, 0x06062d08,
+	0x06435008, 0x0580f208, 0x0bef8048, 0x00000000, 0x0cc00000,
+	0x00000000, 0x06463908, 0x09105248, 0x0aa40009, 0x0780114a,
+	0x07000288, 0x0400128a, 0x0700028b, 0x0961020b, 0x06063808,
+	0x0400128a, 0x07c0114a, 0x06816008, 0x0b8f620a, 0x04401249,
+	0x0c07f540, 0x00000000, 0x0c7ffc00, 0x00000000, 0x0cc00000,
+	0x00000000, 0x0680000c, 0x06800008, 0x07c00b48, 0x0409a2cc,
+	0x074002c8, 0x040a42cc, 0x074002c8, 0x054162cc, 0x0980b7cb,
+	0x0b6101cc, 0x0601460b, 0x0c7ffe00, 0x0400130c, 0x06800048,
+	0x07c00708, 0x06800008, 0x07c00748, 0x07c00808, 0x07c00848,
+	0x04401208, 0x07c00788, 0x0cc00000, 0x07c007c8, 0x07800349,
+	0x07800388, 0x09610248, 0x06412308, 0x0a804248, 0x06800009,
+	0x07c00b49, 0x06800049, 0x07c003c9, 0x09010248, 0x07c002c9,
+	0x07c00349, 0x09210208, 0x07c00308, 0x07c00388, 0x0403f289,
+	0x0580628a, 0x07c0040a, 0x0403f288, 0x0580628a, 0x0cc00000,
+	0x07c0044a, 0x067f2f2b, 0x0a2fc12b, 0x0640c02b, 0x0a6f7feb,
+	0x00000000, 0x0641392b, 0x0680006f, 0x0c001200, 0x06800030,
+	0x0c001d00, 0x069fffb1, 0x08013900, 0x06410b2b, 0x0982b0ab,
+	0x06010b2b, 0x0641212b, 0x0a2fc06b, 0x00000000, 0x069315ae,
+	0x06d0536e, 0x06410c2b, 0x068000af, 0x0c000e40, 0x04000c2b,
+	0x0a4edbab, 0x08012101, 0x08010e90, 0x08010e90, 0x06410c2b,
+	0x068000ef, 0x0c000c40, 0x04000c2b, 0x0695556e, 0x06d5556e,
+	0x0a409bab, 0x00000000, 0x08012101, 0x0800c0f2, 0x08007401,
+	0x0640c02e, 0x0aaffcae, 0x0c7ff700, 0x00000000, 0x093c2aeb,
+	0x0aa0c0ab, 0x0c7ff600, 0x00000000, 0x0641162c, 0x093e1b2c,
+	0x0aa0402c, 0x0640d22c, 0x0a21406c, 0x00000000, 0x0800c0f1,
+	0x0c7ff280, 0x08007401, 0x0680006d, 0x0680012f, 0x0c000540,
+	0x04000c2d, 0x0600c02d, 0x08030504, 0x0c7ff080, 0x00000000,
+	0x0c074980, 0x00000000, 0x0800c0f0, 0x08007401, 0x0cc00000,
+	0x00000000, 0x0640c009, 0x0aa0c149, 0x0a6f8189, 0x00000000,
+	0x068004af, 0x0c000100, 0x06800030, 0x0cc00000, 0x00000000,
+	0x0600d130, 0x078013f0, 0x0aa18030, 0x00000000, 0x0600d02f,
+	0x08007401, 0x0640d02f, 0x0a6fc02f, 0x00000000, 0x0cc00000,
+	0x00000000, 0x0600d130, 0x078013f0, 0x0aa54030, 0x00000000,
+	0x0640cf30, 0x06035130, 0x0680fc30, 0x06035230, 0x06a00030,
+	0x06035030, 0x06435030, 0x0580fc30, 0x0bef8070, 0x00000000,
+	0x06435330, 0x0900cc30, 0x0a6f8030, 0x00000000, 0x0982f42f,
+	0x0600d02f, 0x08007401, 0x0640d02f, 0x0a6fc02f, 0x0cc00000,
+	0x00000000, 0x06810030, 0x06800008, 0x06410c2f, 0x08010e90,
+	0x09210bef, 0x0740022f, 0x0d07ff30, 0x04001208, 0x0cc00000,
+	0x00000000, 0x0aa54031, 0x04000c31, 0x0640d42f, 0x09010bef,
+	0x0a411c2f, 0x0640d42f, 0x09202bef, 0x0a61406f, 0x00000000,
+	0x0c07f500, 0x06800030, 0x0c780180, 0x0a6d80ef, 0x00000000,
+	0x0c07fa00, 0x00000000, 0x0c780040, 0x04000c31, 0x0600d430,
+	0x0c7ffbc0, 0x00000000, 0x0cc00000, 0x00000000, 0x078002c8,
+	0x07800309, 0x09610209, 0x06012308, 0x06800208, 0x078004c9,
+	0x03408248, 0x06040608, 0x078002c9, 0x0780030a, 0x0960f24a,
+	0x06040209, 0x07800409, 0x0780044a, 0x0960c24a, 0x06040309,
+	0x08040400, 0x0cc00000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
+};
+
+
+
+#define FOR_VFORMAT VFORMAT_VP9
+
+#define REG_FIRMWARE_ALL()\
+		DEF_FIRMWARE_VER(vvp9_mc, VERSTR);\
+
+INIT_DEF_FIRMWARE();
+
-- 
1.9.1

From 6d0e40e5612b9a90a47dc9ccf2fa8613ae2a6bea Mon Sep 17 00:00:00 2001
From: Jamie Coldhill <wrxtasy@amnet.net.au>
Date: Sun, 2 Oct 2016 19:22:56 +0800
Subject: [PATCH 02/13] Update: amstream

---
 drivers/amlogic/amports/amstream.c  | 86 ++++++++++++++++---------------------
 drivers/amlogic/amports/streambuf.h |  1 +
 2 files changed, 39 insertions(+), 48 deletions(-)

diff --git a/drivers/amlogic/amports/amstream.c b/drivers/amlogic/amports/amstream.c
index b7c46a7..985549c 100644
--- a/drivers/amlogic/amports/amstream.c
+++ b/drivers/amlogic/amports/amstream.c
@@ -430,42 +430,19 @@ static void amstream_change_vbufsize(struct stream_port_s *port,
 		pr_info("streambuf is alloced before\n");
 		return;
 	}
-	if (pvbuf->type == BUF_TYPE_VIDEO || pvbuf->type == BUF_TYPE_HEVC) {
-		if (port->vformat == VFORMAT_H264_4K2K ||
-			port->vformat == VFORMAT_HEVC) {
-			int framesize = amstream_dec_info.height *
-				amstream_dec_info.width;
-			pvbuf->buf_size = DEFAULT_VIDEO_BUFFER_SIZE_4K;
-			if ((framesize > 0) &&
-				(port->vformat == VFORMAT_HEVC) &&
-				(framesize <= 1920 * 1088)) {
-				/*if hevc not 4k used 15M streambuf.*/
-				pvbuf->buf_size = DEFAULT_VIDEO_BUFFER_SIZE;
-			}
-			if ((pvbuf->buf_size > 30 * SZ_1M) &&
-			(codec_mm_get_total_size() < 220 * SZ_1M)) {
-				/*if less than 250M, used 20M for 4K & 265*/
-				pvbuf->buf_size = pvbuf->buf_size >> 1;
-			}
-		/* pr_err(" amstream_change_vbufsize 4k2k
-		* bufsize[0x%x] defaultsize[0x%x]\n",
-		* bufs[BUF_TYPE_VIDEO].buf_size,pvbuf->default_buf_size); */
-		} else if (pvbuf->buf_size > DEFAULT_VIDEO_BUFFER_SIZE) {
-			pvbuf->buf_size = DEFAULT_VIDEO_BUFFER_SIZE;
-			/* pr_err(" amstream_change_vbufsize
-			 * MAX_STREAMBUFFER_SIZE-[0x%x]
-			 * defaultsize-[0x%x] vformat-[%d]\n",
-			 * bufs[BUF_TYPE_VIDEO].buf_size,
-			 * pvbuf->default_buf_size,port->vformat); */
-		} else {
-			/* pr_err(" amstream_change_vbufsize bufsize[0x%x]
-			 * defaultbufsize [0x%x]\n",
-			 * bufs[BUF_TYPE_VIDEO].buf_size,
-			 * pvbuf->default_buf_size); */
+	if (pvbuf->for_4k) {
+		pvbuf->buf_size = DEFAULT_VIDEO_BUFFER_SIZE_4K;
+		if ((pvbuf->buf_size > 30 * SZ_1M) &&
+		(codec_mm_get_total_size() < 220 * SZ_1M)) {
+			/*if less than 250M, used 20M for 4K & 265*/
+			pvbuf->buf_size = pvbuf->buf_size >> 1;
 		}
-
-		reset_canuse_buferlevel(10000);
+	} else if (pvbuf->buf_size > DEFAULT_VIDEO_BUFFER_SIZE) {
+		pvbuf->buf_size = DEFAULT_VIDEO_BUFFER_SIZE;
+	} else {
+		pvbuf->buf_size = DEFAULT_VIDEO_BUFFER_SIZE;
 	}
+	reset_canuse_buferlevel(10000);
 
 	return;
 }
@@ -502,6 +479,13 @@ static int video_port_init(struct stream_port_s *port,
 		return -EPERM;
 	}
 
+	if (port->vformat == VFORMAT_H264_4K2K ||
+		(amstream_dec_info.height *
+			amstream_dec_info.width) > 1920*1088) {
+		pbuf->for_4k = 1;
+	}
+
+
 	amstream_change_vbufsize(port, pbuf);
 
 	if (has_hevc_vdec()) {
@@ -512,7 +496,6 @@ static int video_port_init(struct stream_port_s *port,
 				vdec_poweroff(VDEC_HEVC);
 		}
 	}
-
 	r = stbuf_init(pbuf);
 	if (r < 0) {
 		pr_err("video_port_init %d, stbuf_init failed\n", __LINE__);
@@ -736,12 +719,12 @@ static int amstream_port_init(struct stream_port_s *port)
 		pubuf->buf_start = 0;
 		pubuf->buf_wp = 0;
 		pubuf->buf_rp = 0;
-
+		pubuf->for_4k = 0;
 		if (has_hevc_vdec()) {
-			if (port->vformat == VFORMAT_HEVC)
+			if (port->vformat == VFORMAT_HEVC ||
+				port->vformat == VFORMAT_VP9)
 				pvbuf = &bufs[BUF_TYPE_HEVC];
 		}
-
 		r = video_port_init(port, pvbuf);
 		if (r < 0) {
 			pr_err("video_port_init  failed\n");
@@ -764,7 +747,8 @@ static int amstream_port_init(struct stream_port_s *port)
 			(port->flag & PORT_FLAG_AID) ? port->aid : 0xffff,
 			(port->flag & PORT_FLAG_SID) ? port->sid : 0xffff,
 			(port->pcr_inited == 1) ? port->pcrid : 0xffff,
-			(port->vformat == VFORMAT_HEVC));
+			(port->vformat == VFORMAT_HEVC) ||
+			(port->vformat == VFORMAT_VP9));
 		} else {
 			r = tsdemux_init(
 			(port->flag & PORT_FLAG_VID) ? port->vid : 0xffff,
@@ -829,7 +813,8 @@ static int amstream_port_release(struct stream_port_s *port)
 	struct stream_buf_s *psbuf = &bufs[BUF_TYPE_SUBTITLE];
 
 	if (has_hevc_vdec()) {
-		if (port->vformat == VFORMAT_HEVC)
+		if (port->vformat == VFORMAT_HEVC
+			|| port->vformat == VFORMAT_VP9)
 			pvbuf = &bufs[BUF_TYPE_HEVC];
 	}
 
@@ -901,6 +886,7 @@ static ssize_t amstream_vbuf_write(struct file *file, const char *buf,
 	struct stream_buf_s *pbuf = NULL;
 	int r;
 
+
 	if (has_hevc_vdec()) {
 		pbuf = (port->type & PORT_TYPE_HEVC) ? &bufs[BUF_TYPE_HEVC] :
 			&bufs[BUF_TYPE_VIDEO];
@@ -954,9 +940,9 @@ static ssize_t amstream_mpts_write(struct file *file, const char *buf,
 	int r = 0;
 
 	if (has_hevc_vdec()) {
-		pvbuf =	(port->vformat ==
-			VFORMAT_HEVC) ? &bufs[BUF_TYPE_HEVC] :
-			&bufs[BUF_TYPE_VIDEO];
+		pvbuf =	(port->vformat == VFORMAT_HEVC ||
+					port->vformat == VFORMAT_VP9) ?
+			&bufs[BUF_TYPE_HEVC] : &bufs[BUF_TYPE_VIDEO];
 	} else
 		pvbuf = &bufs[BUF_TYPE_VIDEO];
 
@@ -1092,7 +1078,6 @@ static ssize_t amstream_sub_write(struct file *file, const char *buf,
 		if (r < 0)
 			return r;
 	}
-	pr_err("amstream_sub_write\n");
 	r = esparser_write(file, pbuf, buf, count);
 	if (r < 0)
 		return r;
@@ -1786,8 +1771,9 @@ static long amstream_ioctl_get_ex(struct stream_port_s *this, ulong arg)
 			struct am_ioctl_parm_ex *p = &parm;
 			struct stream_buf_s *buf = NULL;
 
-			buf = (this->vformat ==
-				VFORMAT_HEVC) ? &bufs[BUF_TYPE_HEVC] :
+			buf = (this->vformat == VFORMAT_HEVC ||
+				this->vformat == VFORMAT_VP9) ?
+				&bufs[BUF_TYPE_HEVC] :
 				&bufs[BUF_TYPE_VIDEO];
 
 			if (p == NULL)
@@ -2127,8 +2113,9 @@ static long amstream_do_ioctl_old(struct stream_port_s *this,
 			struct am_io_param *p = &para;
 			struct stream_buf_s *buf = NULL;
 
-			buf = (this->vformat ==
-				VFORMAT_HEVC) ? &bufs[BUF_TYPE_HEVC] :
+			buf = (this->vformat == VFORMAT_HEVC ||
+					this->vformat == VFORMAT_VP9) ?
+				&bufs[BUF_TYPE_HEVC] :
 				&bufs[BUF_TYPE_VIDEO];
 
 			if (p == NULL)
@@ -3119,6 +3106,9 @@ static int amstream_probe(struct platform_device *pdev)
 	reset_canuse_buferlevel(10000);
 	amstream_pdev = pdev;
 	amports_clock_gate_init(&amstream_pdev->dev);
+
+	/*prealloc fetch buf to avoid no continue buffer later...*/
+	stbuf_fetch_init();
 	return 0;
 
 	/*
diff --git a/drivers/amlogic/amports/streambuf.h b/drivers/amlogic/amports/streambuf.h
index 0dcdaa5..703ccd5 100644
--- a/drivers/amlogic/amports/streambuf.h
+++ b/drivers/amlogic/amports/streambuf.h
@@ -56,6 +56,7 @@ struct stream_buf_s {
 	u32 max_buffer_delay_ms;
 	u64 last_write_jiffies64;
 	void *write_thread;
+	int for_4k;
 } /*stream_buf_t */;
 
 struct stream_port_s {
-- 
1.9.1

From 05facfc76aa9f852bfcc9cff2c317c2dee4a6001 Mon Sep 17 00:00:00 2001
From: Jamie Coldhill <wrxtasy@amnet.net.au>
Date: Sun, 2 Oct 2016 19:23:45 +0800
Subject: [PATCH 03/13] Update: streambuf.c

---
 drivers/amlogic/amports/streambuf.c | 8 +++++++-
 1 file changed, 7 insertions(+), 1 deletion(-)

diff --git a/drivers/amlogic/amports/streambuf.c b/drivers/amlogic/amports/streambuf.c
index 55c160e..2fd8c5a 100644
--- a/drivers/amlogic/amports/streambuf.c
+++ b/drivers/amlogic/amports/streambuf.c
@@ -60,8 +60,13 @@ static s32 _stbuf_alloc(struct stream_buf_s *buf)
 		/*if 4k,
 		used cma first,for less mem fragments.
 		*/
+		if (((buf->type == BUF_TYPE_HEVC) ||
+			(buf->type == BUF_TYPE_VIDEO)) &&
+			buf->for_4k)
+			flags |= CODEC_MM_FLAGS_CMA_FIRST;
 		if (buf->buf_size > 20 * 1024 * 1024)
-			flags = CODEC_MM_FLAGS_CMA_FIRST;
+			flags |= CODEC_MM_FLAGS_CMA_FIRST;
+
 		if ((buf->type == BUF_TYPE_HEVC) ||
 			(buf->type == BUF_TYPE_VIDEO)) {
 			flags |= CODEC_MM_FLAGS_FOR_VDECODER;
@@ -69,6 +74,7 @@ static s32 _stbuf_alloc(struct stream_buf_s *buf)
 			flags |= CODEC_MM_FLAGS_FOR_ADECODER;
 			flags |= CODEC_MM_FLAGS_DMA_CPU;
 		}
+
 		buf->buf_start = codec_mm_alloc_for_dma(MEM_NAME,
 			buf->buf_page_num, 4+PAGE_SHIFT, flags);
 		if (!buf->buf_start) {
-- 
1.9.1

From e47185fd27c558b8e89f6b260ed599597571512f Mon Sep 17 00:00:00 2001
From: Jamie Coldhill <wrxtasy@amnet.net.au>
Date: Sun, 2 Oct 2016 19:24:50 +0800
Subject: [PATCH 04/13] Update: thread_rw

---
 drivers/amlogic/amports/thread_rw.c | 40 ++++++++++++++++++++++++++++++-------
 drivers/amlogic/amports/thread_rw.h |  9 ++++++---
 2 files changed, 39 insertions(+), 10 deletions(-)

diff --git a/drivers/amlogic/amports/thread_rw.c b/drivers/amlogic/amports/thread_rw.c
index fc1c729..7b142f6 100644
--- a/drivers/amlogic/amports/thread_rw.c
+++ b/drivers/amlogic/amports/thread_rw.c
@@ -60,8 +60,10 @@ struct threadrw_write_task {
 	int buffered_data_size;
 	int passed_data_len;
 	int buffer_size;
+	int data_offset;
 	int writework_on;
 	unsigned long codec_mm_buffer;
+	int manual_write;
 	wait_queue_head_t wq;
 	ssize_t (*write)(struct file *,
 		struct stream_buf_s *,
@@ -177,7 +179,10 @@ static ssize_t threadrw_write_in(
 
 	/*end: */
 	spin_lock_irqsave(&task->lock, flags);
-	task->buffered_data_size += off;
+	if (off > 0) {
+		task->buffered_data_size += off;
+		task->data_offset += off;
+	}
 	spin_unlock_irqrestore(&task->lock, flags);
 	if (off > 0)
 		return off;
@@ -201,11 +206,17 @@ static int do_write_work_in(struct threadrw_write_task *task)
 		codec_mm_dma_flush(rwbuf->vbuffer,
 				rwbuf->data_size,
 				DMA_TO_DEVICE);
-
-	ret = task->write(task->file, task->sbuf,
+	if (task->manual_write) {
+		ret = task->write(task->file, task->sbuf,
+			(const char __user *)rwbuf->vbuffer + rwbuf->write_off,
+			rwbuf->data_size,
+			2);	/* noblock,virtual addr */
+	} else {
+		ret = task->write(task->file, task->sbuf,
 		(const char __user *)rwbuf->dma_handle + rwbuf->write_off,
 		rwbuf->data_size,
 		3);	/* noblock,phy addr */
+	}
 	if (ret == -EAGAIN) {
 		need_re_write = 0;
 		/*do later retry. */
@@ -230,8 +241,8 @@ static int do_write_work_in(struct threadrw_write_task *task)
 		task->errors = ret;
 	}
 	if (write_len > 0) {
-		task->passed_data_len += write_len;
 		spin_lock_irqsave(&task->lock, flags);
+		task->passed_data_len += write_len;
 		task->buffered_data_size -= write_len;
 		spin_unlock_irqrestore(&task->lock, flags);
 	}
@@ -326,7 +337,8 @@ static struct threadrw_write_task *threadrw_buf_alloc_in(int num,
 		int block_size,
 		ssize_t (*write)(struct file *,
 			struct stream_buf_s *,
-			const char __user *, size_t, int))
+			const char __user *, size_t, int),
+			int flags)
 {
 	int task_buffer_size = sizeof(struct threadrw_write_task) +
 				sizeof(struct threadrw_buf) * (num - 1) + 4;
@@ -349,6 +361,7 @@ static struct threadrw_write_task *threadrw_buf_alloc_in(int num,
 	task->write = write;
 	task->file = NULL;
 	task->buffer_size = 0;
+	task->manual_write = flags & 1;
 	ret = init_task_buffers(task, num, block_size);
 	if (ret < 0)
 		goto err3;
@@ -412,6 +425,18 @@ int threadrw_passed_len(struct stream_buf_s *stbuf)
 	return 0;
 
 }
+/*
+all data writed.;
+*/
+int threadrw_dataoffset(struct stream_buf_s *stbuf)
+{
+	struct threadrw_write_task *task = stbuf->write_thread;
+	int offset = 0;
+	if (task)
+		return task->data_offset;
+	return offset;
+
+}
 
 ssize_t threadrw_write(struct file *file, struct stream_buf_s *stbuf,
 					   const char __user *buf, size_t count)
@@ -444,9 +469,10 @@ void *threadrw_alloc(int num,
 			ssize_t (*write)(struct file *,
 				struct stream_buf_s *,
 				const char __user *,
-				size_t, int))
+				size_t, int),
+				int flags)
 {
-	return threadrw_buf_alloc_in(num, block_size, write);
+	return threadrw_buf_alloc_in(num, block_size, write, flags);
 }
 
 void threadrw_release(struct stream_buf_s *stbuf)
diff --git a/drivers/amlogic/amports/thread_rw.h b/drivers/amlogic/amports/thread_rw.h
index 301c88d..df7d4f3 100644
--- a/drivers/amlogic/amports/thread_rw.h
+++ b/drivers/amlogic/amports/thread_rw.h
@@ -13,9 +13,11 @@ ssize_t threadrw_write(struct file *file,
 void *threadrw_alloc(int num,
 		int block_size,
 			ssize_t (*write)(struct file *,
-					struct stream_buf_s *,
-					const char __user *,
-					size_t, int));
+				struct stream_buf_s *,
+				const char __user *,
+				size_t, int),
+				int flags);/*flags &1: manual mode*/
+
 void threadrw_release(struct stream_buf_s *stbuf);
 
 int threadrw_buffer_level(struct stream_buf_s *stbuf);
@@ -24,5 +26,6 @@ int threadrw_datafifo_len(struct stream_buf_s *stbuf);
 int threadrw_freefifo_len(struct stream_buf_s *stbuf);
 int threadrw_passed_len(struct stream_buf_s *stbuf);
 int threadrw_flush_buffers(struct stream_buf_s *stbuf);
+int threadrw_dataoffset(struct stream_buf_s *stbuf);
 
 #endif
-- 
1.9.1

From 06ce24ddf1be269f99da7938fb4eb7ccec3fc00b Mon Sep 17 00:00:00 2001
From: Jamie Coldhill <wrxtasy@amnet.net.au>
Date: Sun, 2 Oct 2016 19:26:12 +0800
Subject: [PATCH 05/13] Update: esparser

---
 drivers/amlogic/amports/esparser.c | 21 +++++++++++++++------
 1 file changed, 15 insertions(+), 6 deletions(-)

diff --git a/drivers/amlogic/amports/esparser.c b/drivers/amlogic/amports/esparser.c
index f5ea1fd..aab12b1 100644
--- a/drivers/amlogic/amports/esparser.c
+++ b/drivers/amlogic/amports/esparser.c
@@ -300,14 +300,22 @@ end_write:
 
 s32 es_vpts_checkin_us64(struct stream_buf_s *buf, u64 us64)
 {
-	u32 passed = video_data_parsed + threadrw_buffer_level(buf);
+	u32 passed;
+	if (buf->write_thread)
+		passed = threadrw_dataoffset(buf);
+	else
+		passed = video_data_parsed;
 	return pts_checkin_offset_us64(PTS_TYPE_VIDEO, passed, us64);
 
 }
 
 s32 es_apts_checkin_us64(struct stream_buf_s *buf, u64 us64)
 {
-	u32 passed = audio_data_parsed + threadrw_buffer_level(buf);
+	u32 passed;
+	if (buf->write_thread)
+		passed = threadrw_dataoffset(buf);
+	else
+		passed = audio_data_parsed;
 	return pts_checkin_offset_us64(PTS_TYPE_AUDIO, passed, us64);
 }
 
@@ -551,12 +559,13 @@ s32 esparser_init(struct stream_buf_s *buf)
 		int block_size = (buf->type == BUF_TYPE_AUDIO) ?
 			PAGE_SIZE << 2 : PAGE_SIZE << 4;
 		int buf_num = (buf->type == BUF_TYPE_AUDIO) ?
-			5 : 5;
-		if (!(buf->type == BUF_TYPE_SUBTITLE) &&
-			!(buf->type == BUF_TYPE_AUDIO)) /*for audio manual*/
+			5 : 10;
+		if (!(buf->type == BUF_TYPE_SUBTITLE))
 			buf->write_thread = threadrw_alloc(buf_num,
 				block_size,
-				esparser_write_ex);
+				esparser_write_ex,
+			(buf->type == BUF_TYPE_AUDIO) ? 1 : 0);
+			/*manul mode for audio*/
 	}
 	return 0;
 
-- 
1.9.1

From d126b8bea18aa17923179fd5d4989646538db81f Mon Sep 17 00:00:00 2001
From: Jamie Coldhill <wrxtasy@amnet.net.au>
Date: Sun, 2 Oct 2016 19:27:12 +0800
Subject: [PATCH 06/13] Update: tsync

---
 drivers/amlogic/amports/tsync_pcr.c | 229 +++++++++++++++++++++++++++++++++---
 1 file changed, 210 insertions(+), 19 deletions(-)

diff --git a/drivers/amlogic/amports/tsync_pcr.c b/drivers/amlogic/amports/tsync_pcr.c
index c2c5c03..b08738f 100644
--- a/drivers/amlogic/amports/tsync_pcr.c
+++ b/drivers/amlogic/amports/tsync_pcr.c
@@ -83,7 +83,8 @@ enum pcr_init_priority_e {
 #define PAUSE_CHECK_TIME   2700
 #define PAUSE_RESUME_TIME   18000
 
-static u32 tsync_pcr_recovery_span = 10;
+/* modify it by dolby av sync 20160126 */
+static u32 tsync_pcr_recovery_span = 3; /* 10 */
 
 
 
@@ -124,8 +125,9 @@ static u32 tsync_pcr_ref_latency = (TIME_UNIT90K * 0.3);
 /* use for pcr valid mode */
 static u32 tsync_pcr_max_cache_time = TIME_UNIT90K * 1.5;
 static u32 tsync_pcr_up_cache_time = TIME_UNIT90K * 1.2;
-static u32 tsync_pcr_down_cache_time = TIME_UNIT90K * 0.6;
-static u32 tsync_pcr_min_cache_time = TIME_UNIT90K * 0.2;
+/* modify it by dolby av sync */
+static u32 tsync_pcr_down_cache_time = TIME_UNIT90K * 0.8;   /* 0.6 */
+static u32 tsync_pcr_min_cache_time = TIME_UNIT90K * 0.4;    /* 0.2 */
 
 /* use for pcr invalid mode */
 static u32 tsync_pcr_max_delay_time = TIME_UNIT90K * 3;
@@ -133,6 +135,10 @@ static u32 tsync_pcr_up_delay_time = TIME_UNIT90K * 2;
 static u32 tsync_pcr_down_delay_time = TIME_UNIT90K * 1.5;
 static u32 tsync_pcr_min_delay_time = TIME_UNIT90K * 0.8;
 
+static u32 tsync_apts_adj_value = 150000;  /* add it by dolby av sync */
+static u32 tsync_pcr_adj_value = 27000;  /* 300ms*/
+
+
 static u32 tsync_pcr_first_video_frame_pts;
 static u32 tsync_pcr_first_audio_frame_pts;
 
@@ -183,6 +189,9 @@ static u8 tsync_pcr_usepcr = 1;
 static u64 first_time_record;
 static u8 wait_pcr_count;
 
+static int abuf_fatal_error;
+static int vbuf_fatal_error;
+
 static DEFINE_SPINLOCK(tsync_pcr_lock);
 
 #define LTRACE() pr_info("[%s:%d]\n", __func__, __LINE__);
@@ -367,11 +376,10 @@ void tsync_pcr_pcrscr_set(void)
 			cur_pcr = 0;
 	}
 	/* decide use which para to init */
-	if (cur_pcr && first_apts && first_vpts
-		&& !(tsync_pcr_inited_flag & complete_init_flag)
-		&& (cur_pcr < min_checkinpts)) {
+	if (cur_pcr && !(tsync_pcr_inited_flag & complete_init_flag)
+		&& (min_checkinpts != 0)) {
 		tsync_pcr_inited_flag |= TSYNC_PCR_INITCHECK_PCR;
-		ref_pcr = cur_pcr - tsync_pcr_ref_latency;
+		ref_pcr = cur_pcr - tsync_pcr_adj_value * 15;
 		timestamp_pcrscr_set(ref_pcr);
 		tsync_pcr_usepcr = 1;
 
@@ -390,9 +398,14 @@ void tsync_pcr_pcrscr_set(void)
 	}
 
 	if (first_apts && !(tsync_pcr_inited_flag & complete_init_flag)
-		&& (first_apts < min_checkinpts)) {
+		&& (min_checkinpts != 0)) {
 		tsync_pcr_inited_flag |= TSYNC_PCR_INITCHECK_APTS;
 		ref_pcr = first_apts;
+
+		/* add it for dolby av sync */
+		if (cur_pcr > 0)
+			ref_pcr = cur_pcr - tsync_apts_adj_value;
+
 		timestamp_pcrscr_set(ref_pcr);
 		if (cur_pcr > 0)
 			tsync_pcr_usepcr = 1;
@@ -413,9 +426,9 @@ void tsync_pcr_pcrscr_set(void)
 	}
 
 	if (first_vpts && !(tsync_pcr_inited_flag & complete_init_flag)
-		&& (first_vpts < min_checkinpts)) {
+		&& (min_checkinpts != 0)) {
 		tsync_pcr_inited_flag |= TSYNC_PCR_INITCHECK_VPTS;
-		ref_pcr = first_vpts - tsync_pcr_ref_latency * 2;
+		ref_pcr = first_vpts - tsync_pcr_ref_latency * 15;
 		timestamp_pcrscr_set(ref_pcr);
 		if (cur_pcr > 0)
 			tsync_pcr_usepcr = 1;
@@ -439,6 +452,8 @@ void tsync_pcr_pcrscr_set(void)
 void tsync_pcr_avevent_locked(enum avevent_e event, u32 param)
 {
 	ulong flags;
+	u32 cur_apts, cur_pcr, last_pcr, cur_vpts;
+	u32 first_vpts, first_checkinvpts, ref_vpts;
 	spin_lock_irqsave(&tsync_pcr_lock, flags);
 
 	switch (event) {
@@ -491,6 +506,8 @@ void tsync_pcr_avevent_locked(enum avevent_e event, u32 param)
 			u32 last_checkin_minpts =
 				tsync_pcr_get_min_checkinpts();
 			u32 ref_pcr = 0;
+			cur_apts = timestamp_apts_get();
+			cur_pcr = timestamp_pcrscr_get();
 
 			ref_pcr = param - tsync_pcr_ref_latency;
 			pr_info("[%s]Use param.",  __func__);
@@ -522,7 +539,18 @@ void tsync_pcr_avevent_locked(enum avevent_e event, u32 param)
 			/* if(ref_pcr == 0) */
 			/* ref_pcr=tsdemux_pcr-tsync_pcr_vstream_delayed(); */
 
-			timestamp_pcrscr_set(ref_pcr);
+			/* if pcr larger than vpts, apts and pcr in 500ms
+			    arrange, apts not discontinue,not set pcr
+			*/
+			if (cur_pcr - param > TIME_UNIT90K &&
+				abs(cur_pcr - cur_apts) < (TIME_UNIT90K >> 1) &&
+				!(tsync_pcr_tsdemuxpcr_discontinue &
+					AUDIO_DISCONTINUE)) {
+				/*pr_info("%s,discontinue, not set pcr\n",
+					__FUNCTION__); */
+			} else {
+				timestamp_pcrscr_set(ref_pcr);
+			}
 
 			tsync_pcr_tsdemux_startpcr = tsdemux_pcr;
 			tsync_pcr_system_startpcr = ref_pcr;
@@ -562,10 +590,43 @@ void tsync_pcr_avevent_locked(enum avevent_e event, u32 param)
 		tsync_pcr_astart_flag = 1;
 		tsync_pcr_apause_flag = 0;
 
+		pr_info("audio start!timestamp_apts_set =%x.\n", param);
+
 		/*tsync_pcr_inited_mode = INIT_MODE_AUDIO;*/
 		tsync_pcr_pcrscr_set();
 
-		pr_info("audio start!timestamp_apts_set =%x.\n", param);
+		/*acroding apts,vpts set pcr */
+		cur_apts = timestamp_apts_get();
+		last_pcr = timestamp_pcrscr_get();
+		cur_vpts = timestamp_vpts_get();
+		first_vpts = timestamp_firstvpts_get();
+		first_checkinvpts = timestamp_checkin_firstvpts_get();
+
+		if (cur_vpts > 0 && cur_vpts == first_checkinvpts
+		    && cur_vpts < first_vpts)
+			ref_vpts = first_vpts;
+		else if (cur_vpts > 0 && cur_apts > 0 &&
+		    abs(cur_vpts - cur_apts) > 10 * 90000 &&
+		    abs(first_vpts - cur_apts) < 3 * 90000)
+			ref_vpts = first_vpts;
+		else
+			ref_vpts = cur_vpts;
+
+		if (cur_apts >= ref_vpts && ref_vpts > 0)
+			cur_pcr = ref_vpts;
+		else if (cur_apts < ref_vpts && ref_vpts - cur_apts < 27000)
+			cur_pcr = cur_apts - 6300;
+		else if (ref_vpts > 0 && cur_apts > 0)
+			cur_pcr = cur_apts - 6300;
+		else
+			cur_pcr = cur_apts - 6300;
+
+		timestamp_pcrscr_set(cur_pcr);
+
+		pr_info("after audio:cur_pcr =0x%x,cur_apts=0x%x,cur_vpts=0x%x\n",
+			timestamp_pcrscr_get(), cur_apts, cur_vpts);
+		pr_info("after audio:last_pcr=0x%x,first_vpts=0x%x,first_checkinvpts=0x%x\n",
+			last_pcr, first_vpts, first_checkinvpts);
 		break;
 
 	case AUDIO_RESUME:
@@ -711,7 +772,7 @@ static unsigned long tsync_pcr_check(void)
 		u64 cur_system_time = (jiffies * TIME_UNIT90K) / HZ;
 		if (cur_system_time - first_time_record < 270000) {
 			/*tsync_pcr_inited_mode = INIT_MODE_VIDEO;*/
-			tsync_pcr_pcrscr_set();
+			/*tsync_pcr_pcrscr_set();*/
 		} else {
 			tsync_pcr_inited_mode = INIT_PRIORITY_VIDEO;
 			tsync_pcr_pcrscr_set();
@@ -728,6 +789,37 @@ static unsigned long tsync_pcr_check(void)
 	vbuf_level = get_stream_buffer_level(0);
 	vbuf_size = get_stream_buffer_size(0);
 
+	/***********************************************************
+	 On S905/S905X Platform, when we play avs video file on dtv
+	 which contian long cabac   some time it will cause amstream
+	 video buffer enter an error status. vbuf_level will over  vbuf_size,
+	 this will cause a lot of print in this function. And that will
+	 prevent reset ts monitor work thread from getting cpu control
+	 and to reset ts module. So we add the following  code to avoid
+	 this case.
+
+	       Rong.Zhang@amlogic.com    2016-08-10
+	***********************************************************/
+	if (abuf_level > abuf_size) {
+		if (!abuf_fatal_error) {
+			abuf_fatal_error = 1;
+			pr_info("amstream must be some fatal error for audio and wait for reset\n");
+			pr_info("abuf_level = 0x%x, abuf_size = 0x%x, vbuf_level = 0x%x, vbuf_size = 0x%x\n",
+				abuf_level, abuf_size, vbuf_level, vbuf_size);
+		}
+		return res;
+	}
+
+	if (vbuf_level > vbuf_size) {
+		if (!vbuf_fatal_error) {
+			vbuf_fatal_error = 1;
+			pr_info("amstream must be some fatal error for video and wait for reset\n");
+			pr_info("abuf_level = 0x%x, abuf_size = 0x%x, vbuf_level = 0x%x, vbuf_size = 0x%x\n",
+				abuf_level, abuf_size, vbuf_level, vbuf_size);
+		}
+		return res;
+	}
+
 	last_checkin_vpts = (u32) get_last_checkin_pts(PTS_TYPE_VIDEO);
 	last_checkin_apts = (u32) get_last_checkin_pts(PTS_TYPE_AUDIO);
 	last_cur_pcr = timestamp_pcrscr_get();
@@ -735,12 +827,26 @@ static unsigned long tsync_pcr_check(void)
 	cur_apts = timestamp_apts_get();
 	cur_vpts = timestamp_vpts_get();
 
+	/*set pcr after discontinue according to apts and vpts*/
+	if (tsync_pcr_tsdemuxpcr_discontinue &
+		(AUDIO_DISCONTINUE | VIDEO_DISCONTINUE)) {
+		if (cur_apts < cur_vpts && cur_vpts - cur_apts < 3 * 90000
+			&& last_checkin_minpts - cur_apts > 54000)
+			timestamp_pcrscr_set(cur_apts + 6300);
+		else
+			timestamp_pcrscr_set(cur_apts);
+/*
+		pr_info("after discontinue, pcr = 0x%x,apts=0x%x,vpts=0x%x\n",
+			timestamp_pcrscr_get(), cur_apts, cur_vpts);
+*/
+	}
+
 	if (tsync_pcr_reset_flag == 0) {
 		/* check whether it need reset */
 		if (tsync_pcr_lastcheckin_apts == last_checkin_apts
 			&& tsync_pcr_lastcheckin_vpts == last_checkin_vpts) {
 			++tsync_pcr_pausecheck_cnt;
-			if (tsync_pcr_pausecheck_cnt > 50) {
+			if (tsync_pcr_pausecheck_cnt > 100) {
 				pr_info
 				("[tsync_pcr_check]reset abuf_level=%x ",
 				 abuf_level);
@@ -768,20 +874,23 @@ static unsigned long tsync_pcr_check(void)
 		if (last_cur_pcr - cur_apts > MAX_SYNC_AGAP_TIME &&
 			abs(cur_apts - cur_vpts) > MAX_SYNC_AGAP_TIME &&
 			last_checkin_apts > 0 &&
-			last_checkin_apts - last_cur_pcr < MIN_SYNC_ACHACH_TIME
+			(last_checkin_apts > last_cur_pcr &&
+			last_checkin_apts - last_cur_pcr < MIN_SYNC_ACHACH_TIME)
 			&& !(tsync_pcr_tsdemuxpcr_discontinue
-			& PCR_DISCONTINUE))
+			& PCR_DISCONTINUE) && tsync_pcr_astart_flag) {
 			tsync_pcr_asynccheck_cnt++;
-		else
+			} else
 			tsync_pcr_asynccheck_cnt = 0;
 
 		if (last_cur_pcr - cur_vpts > MAX_SYNC_VGAP_TIME &&
 			abs(cur_apts - cur_vpts) > MAX_SYNC_VGAP_TIME &&
 			last_checkin_vpts > 0 &&
-			last_checkin_vpts - last_cur_pcr < MIN_SYNC_VCHACH_TIME
+			(last_checkin_vpts > last_cur_pcr &&
+			last_checkin_vpts - last_cur_pcr < MIN_SYNC_VCHACH_TIME)
 			&& !(tsync_pcr_tsdemuxpcr_discontinue
-			& PCR_DISCONTINUE))
+			& PCR_DISCONTINUE) && tsync_pcr_vstart_flag) {
 			tsync_pcr_vsynccheck_cnt++;
+			}
 		else
 			tsync_pcr_vsynccheck_cnt = 0;
 
@@ -803,6 +912,11 @@ static unsigned long tsync_pcr_check(void)
 			int64_t new_pcr =
 				last_checkin_minpts - tsync_pcr_ref_latency * 2;
 			int64_t old_pcr = timestamp_pcrscr_get();
+
+			/* add for dolby ddp stream av sync */
+			if (new_pcr < cur_apts && cur_apts - new_pcr > 3000)
+				new_pcr = cur_apts - 3000;
+
 			timestamp_pcrscr_set(new_pcr);
 			pr_info
 			("[%s]video stream underrun,force slow play.\n",
@@ -819,6 +933,7 @@ static unsigned long tsync_pcr_check(void)
 		|| (abuf_level * 3 > abuf_size * 2 && abuf_size > 0))
 		&& play_mode != PLAY_MODE_FORCE_SPEED) {
 		/* the stream buffer have too much data. speed out */
+#if 0
 		pr_info
 		("[tsync_pcr_check]Buffer will overflow and speed play. ");
 
@@ -826,6 +941,16 @@ static unsigned long tsync_pcr_check(void)
 		("vlevel=%x,vsize=%x\n", vbuf_level, vbuf_size);
 		pr_info("alevel=%x asize=%x play_mode=%d\n",
 			abuf_level, abuf_size, play_mode);
+#else
+		if (vbuf_level * 3 > vbuf_size * 2 && vbuf_size > 0) {
+			pr_info("vbuf > 2/3 %x %x mode=%d\n",
+				vbuf_level, vbuf_size, play_mode);
+		}
+		if (abuf_level * 3 > abuf_size * 2 && abuf_size > 0) {
+			pr_info("abuf > 2/3 %x %x mode=%d\n",
+				abuf_level, abuf_size, play_mode);
+		}
+#endif
 		play_mode = PLAY_MODE_FORCE_SPEED;
 	} else if ((vbuf_level * 5 > vbuf_size * 4 && vbuf_size > 0)
 		|| (abuf_level * 5 > abuf_size * 4 && abuf_size > 0)) {
@@ -839,12 +964,23 @@ static unsigned long tsync_pcr_check(void)
 			 __func__, timestamp_pcrscr_get(), new_pcr);
 		}
 		timestamp_pcrscr_set(new_pcr);
+#if 0
 		pr_info
 		("[tsync_pcr_check]Buffer will overflow and speed play. ");
 		pr_info("new_pcr=%x vlevel=%x vsize=%x ",
 				new_pcr, vbuf_level, vbuf_size);
 		pr_info("alevel=%x asize=%x play_mode=%d\n",
 				abuf_level, abuf_size, play_mode);
+#else
+		if (vbuf_level * 5 > vbuf_size * 4 && vbuf_size > 0) {
+			pr_info("vbuf > 4/5 %x %x new_pcr=%x\n",
+				vbuf_level, vbuf_size, new_pcr);
+		}
+		if (abuf_level * 5 > abuf_size * 4 && abuf_size > 0) {
+			pr_info("abuf > 4/5 %x %x new_pcr=%x\n",
+				abuf_level, abuf_size, new_pcr);
+		}
+#endif
 	}
 
 	if (play_mode == PLAY_MODE_FORCE_SLOW) {
@@ -1082,6 +1218,8 @@ int tsync_pcr_start(void)
 			tsync_pcr_usepcr, tsync_pcr_inited_mode);
 		add_timer(&tsync_pcr_check_timer);
 	}
+	abuf_fatal_error = 0;
+	vbuf_fatal_error = 0;
 	return 0;
 }
 
@@ -1205,6 +1343,54 @@ static ssize_t tsync_pcr_recovery_span_store(struct class *cla,
 	return count;
 }
 
+/* add it for dolby av sync 20160126 */
+static ssize_t tsync_apts_adj_value_show(struct class *cla,
+	    struct class_attribute *attr, char *buf)
+{
+	return sprintf(buf, "%d\n", tsync_apts_adj_value);
+}
+
+static ssize_t tsync_apts_adj_value_store(struct class *cla,
+	    struct class_attribute *attr, const char *buf, size_t count)
+{
+	size_t r;
+
+	r = sscanf(buf, "%d", &tsync_apts_adj_value);
+
+	pr_info("%s(%d)\n", __func__, tsync_apts_adj_value);
+
+	if (r != 1)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t tsync_pcr_adj_value_show(struct class *cla,
+	    struct class_attribute *attr, char *buf)
+{
+	return sprintf(buf, "%d\n", tsync_pcr_adj_value);
+}
+
+static ssize_t tsync_pcr_adj_value_store(struct class *cla,
+	    struct class_attribute *attr, const char *buf, size_t count)
+{
+	size_t r;
+
+	r = sscanf(buf, "%d", &tsync_pcr_adj_value);
+
+	pr_info("%s(%d)\n", __func__, tsync_pcr_adj_value);
+
+	if (r != 1)
+		return -EINVAL;
+
+	return count;
+}
+
+static ssize_t tsync_pcr_discontinue_show(struct class *cla,
+	    struct class_attribute *attr, char *buf)
+{
+	return sprintf(buf, "0x%x\n", tsync_pcr_tsdemuxpcr_discontinue);
+}
 /* ----------------------------------------------------------------------- */
 /* define of tsync pcr module */
 
@@ -1222,6 +1408,11 @@ static struct class_attribute tsync_pcr_class_attrs[] = {
 	show_apause_flag, NULL),
 	__ATTR(tsync_pcr_recovery_span, S_IRUGO | S_IWUSR,
 	tsync_pcr_recovery_span_show, tsync_pcr_recovery_span_store),
+	__ATTR(tsync_apts_adj_value, S_IRUGO | S_IWUSR,
+	tsync_apts_adj_value_show, tsync_apts_adj_value_store),
+	__ATTR(tsync_pcr_adj_value, S_IRUGO | S_IWUSR,
+	tsync_pcr_adj_value_show, tsync_pcr_adj_value_store),
+	__ATTR_RO(tsync_pcr_discontinue),
 	__ATTR_NULL
 };
 
-- 
1.9.1

From b367519ef9974dde893570f21b8279608092c70c Mon Sep 17 00:00:00 2001
From: Jamie Coldhill <wrxtasy@amnet.net.au>
Date: Sun, 2 Oct 2016 19:27:59 +0800
Subject: [PATCH 07/13] Update: clkgx

---
 drivers/amlogic/amports/arch/clkgx.c | 103 ++++++++++++++++++++++++++++-------
 1 file changed, 84 insertions(+), 19 deletions(-)

diff --git a/drivers/amlogic/amports/arch/clkgx.c b/drivers/amlogic/amports/arch/clkgx.c
index 0548205..349f680 100644
--- a/drivers/amlogic/amports/arch/clkgx.c
+++ b/drivers/amlogic/amports/arch/clkgx.c
@@ -29,7 +29,7 @@
 
 
 #include "register_ops.h"
-#define debug_print pr_info
+#define debug_print pr_debug
 /*
 HHI_VDEC_CLK_CNTL
 0x1078[11:9] (fclk = 2000MHz)
@@ -138,11 +138,21 @@ int vdec_set_clk(int dec, int source, int div)
 	return 0;
 }
 
-/* 648M <-- (1296/2) */
+static bool is_gp0_div2 = true;
+
+
+/* set gp0 648M vdec use gp0 clk*/
 #define VDEC1_648M() \
-	WRITE_HHI_REG_BITS(HHI_VDEC_CLK_CNTL,  (6 << 9) | (1), 0, 16)
+	WRITE_HHI_REG_BITS(HHI_VDEC_CLK_CNTL,  (6 << 9) | (0), 0, 16)
 
 #define HEVC_648M() \
+	WRITE_HHI_REG_BITS(HHI_VDEC2_CLK_CNTL, (6 << 9) | (0), 16, 16)
+
+/*set gp0 1296M vdec use gp0 clk div2*/
+#define VDEC1_648M_DIV() \
+	WRITE_HHI_REG_BITS(HHI_VDEC_CLK_CNTL,  (6 << 9) | (1), 0, 16)
+
+#define HEVC_648M_DIV() \
 	WRITE_HHI_REG_BITS(HHI_VDEC2_CLK_CNTL, (6 << 9) | (1), 16, 16)
 
 #define VDEC1_WITH_GP_PLL() \
@@ -213,10 +223,17 @@ static int gp_pll_user_cb_vdec(struct gp_pll_user_handle_s *user,
 	if (event == GP_PLL_USER_EVENT_GRANT) {
 		struct clk *clk = clk_get(NULL, "gp0_pll");
 		if (!IS_ERR(clk)) {
-			clk_set_rate(clk, 1296000000UL);
+			if (is_gp0_div2)
+				clk_set_rate(clk, 1296000000UL);
+			else
+				clk_set_rate(clk, 648000000UL);
 			VDEC1_SAFE_CLOCK();
 			VDEC1_CLOCK_OFF();
-			VDEC1_648M();
+			if (is_gp0_div2)
+				VDEC1_648M_DIV();
+			else
+				VDEC1_648M();
+
 			VDEC1_CLOCK_ON();
 			debug_print("gp_pll_user_cb_vdec call set\n");
 		}
@@ -240,6 +257,7 @@ enum vformat_e {
 	VFORMAT_HEVC,
 	VFORMAT_H264_ENC,
 	VFORMAT_JPEG_ENC,
+	VFORMAT_VP9,
 	VFORMAT_MAX
 };
 sample:
@@ -265,7 +283,7 @@ static  struct clk_set_setting clks_for_formats[] = {
 		{1920*1080*60, 600}, {4096*2048*60, 600}, {INT_MAX, 600},}
 	},
 	{/*[VFORMAT_MJPEG]*/
-		{{1280*720*30, 100}, {1920*1080*30, 166}, {1920*1080*60, 333},
+		{{1280*720*30, 200}, {1920*1080*30, 200}, {1920*1080*60, 333},
 		{4096*2048*30, 600}, {4096*2048*60, 600}, {INT_MAX, 600},}
 	},
 	{/*[VFORMAT_REAL]*/
@@ -297,8 +315,8 @@ static  struct clk_set_setting clks_for_formats[] = {
 			{0, 0}, {0, 0}, {0, 0},}
 	},
 	{/*VFORMAT_HEVC*/
-		{{1280*720*30, 100}, {1920*1080*30, 100}, {1920*1080*60, 166},
-		{4096*2048*30, 333}, {4096*2048*60, 630}, {INT_MAX, 630},}
+		{{1280*720*30, 100}, {1920*1080*60, 166}, {4096*2048*25, 333},
+		{4096*2048*30, 400}, {4096*2048*60, 630}, {INT_MAX, 630},}
 	},
 	{/*VFORMAT_H264_ENC*/
 		{{1280*720*30, 0}, {INT_MAX, 0},
@@ -308,6 +326,11 @@ static  struct clk_set_setting clks_for_formats[] = {
 		{{1280*720*30, 0}, {INT_MAX, 0},
 		{0, 0}, {0, 0}, {0, 0}, {0, 0},}
 	},
+	{/*VFORMAT_VP9*/
+		{{1280*720*30, 100}, {1920*1080*30, 100}, {1920*1080*60, 166},
+		{4096*2048*30, 333}, {4096*2048*60, 630}, {INT_MAX, 630},}
+	},
+
 };
 
 
@@ -319,10 +342,34 @@ static int vdec_clock_init(void)
 {
 	gp_pll_user_vdec = gp_pll_user_register("vdec", 0,
 		gp_pll_user_cb_vdec);
-
+	if (get_cpu_type() >= MESON_CPU_MAJOR_ID_GXL)
+		is_gp0_div2 = false;
+	else
+		is_gp0_div2 = true;
+
+	if (get_cpu_type() >= MESON_CPU_MAJOR_ID_GXL) {
+		pr_info("used fix clk for vdec clk source!\n");
+		update_vdec_clk_config_settings(1);
+	}
 	return (gp_pll_user_vdec) ? 0 : -ENOMEM;
 }
 
+static void update_clk_with_clk_configs(
+	int clk, int *source, int *div, int *rclk)
+{
+	unsigned int config = get_vdec_clk_config_settings();
+
+	if (!config)
+		return;
+	if (config >= 10) {
+		int wantclk;
+		wantclk = config;
+		vdec_get_clk_source(wantclk, source, div, rclk);
+	}
+	return;
+}
+#define NO_GP0_PLL (get_vdec_clk_config_settings() == 1)
+#define ALWAYS_GP0_PLL (get_vdec_clk_config_settings() == 2)
 
 static int vdec_clock_set(int clk)
 {
@@ -351,11 +398,14 @@ static int vdec_clock_set(int clk)
 			clk = clock_real_clk[VDEC_1];
 	}
 	vdec_get_clk_source(clk, &source, &div, &rclk);
+	update_clk_with_clk_configs(clk, &source, &div, &rclk);
 
 	if (clock_real_clk[VDEC_1] == rclk)
 		return rclk;
-
-	if (rclk > 500 && clk != 667) {/*default used gp_pull.*/
+	if (NO_GP0_PLL) {
+		use_gpll = 0;
+		clk_seted = 0;
+	} else if ((rclk > 500 && clk != 667) || ALWAYS_GP0_PLL) {
 		if (clock_real_clk[VDEC_1] == 648)
 			return 648;
 		use_gpll = 1;
@@ -426,10 +476,16 @@ static int gp_pll_user_cb_hevc(struct gp_pll_user_handle_s *user,
 	if (event == GP_PLL_USER_EVENT_GRANT) {
 		struct clk *clk = clk_get(NULL, "gp0_pll");
 		if (!IS_ERR(clk)) {
-			clk_set_rate(clk, 1296000000UL);
+			if (is_gp0_div2)
+				clk_set_rate(clk, 1296000000UL);
+			else
+				clk_set_rate(clk, 648000000UL);
 			HEVC_SAFE_CLOCK();
 			HEVC_CLOCK_OFF();
-			HEVC_648M();
+			if (is_gp0_div2)
+				HEVC_648M_DIV();
+			else
+				HEVC_648M();
 			HEVC_CLOCK_ON();
 			debug_print("gp_pll_user_cb_hevc callback2\n");
 		}
@@ -453,6 +509,7 @@ static int hevc_clock_set(int clk)
 	int source, div, rclk;
 	int gp_pll_wait = 0;
 	int clk_seted = 0;
+
 	debug_print("hevc_clock_set 1 to clk %d\n", clk);
 	if (clk == 1)
 		clk = 200;
@@ -474,13 +531,15 @@ static int hevc_clock_set(int clk)
 		else
 			clk = clock_real_clk[VDEC_HEVC];
 	}
-
 	vdec_get_clk_source(clk, &source, &div, &rclk);
+	update_clk_with_clk_configs(clk, &source, &div, &rclk);
 
 	if (rclk == clock_real_clk[VDEC_HEVC])
 		return rclk;/*clk not changed,*/
-
-	if (rclk > 500 && clk != 667) {/*500 up default used gp_pull.*/
+	if (NO_GP0_PLL) {
+		use_gpll = 0;
+		clk_seted = 0;
+	} else if ((rclk > 500 && clk != 667) || ALWAYS_GP0_PLL) {
 		if (clock_real_clk[VDEC_HEVC] == 648)
 			return 648;
 		use_gpll = 1;
@@ -505,7 +564,9 @@ static int hevc_clock_set(int clk)
 	if (!use_gpll)
 		gp_pll_release(gp_pll_user_hevc);
 	clock_real_clk[VDEC_HEVC] = rclk;
-	debug_print("hevc_clock_set 2 to rclk=%d\n", rclk);
+	debug_print("hevc_clock_set 2 to rclk=%d, configs=%d\n",
+		rclk,
+		get_vdec_clk_config_settings());
 	return rclk;
 }
 
@@ -537,7 +598,11 @@ static int vdec_clock_get(enum vdec_type_e core)
 #define VDEC_HAS_VDEC_HCODEC
 #define VDEC_HAS_CLK_SETTINGS
 #define CLK_FOR_CPU {\
-			MESON_CPU_MAJOR_ID_GXBB,\
-			0}
+	MESON_CPU_MAJOR_ID_GXBB,\
+	MESON_CPU_MAJOR_ID_GXTVBB,\
+	MESON_CPU_MAJOR_ID_GXL,\
+	MESON_CPU_MAJOR_ID_GXM,\
+	MESON_CPU_MAJOR_ID_TXL,\
+	0}
 #include "clk.h"
 ARCH_VDEC_CLK_INIT();
-- 
1.9.1

From 98445e5b15756d0c10a7525826943068fdc59ba8 Mon Sep 17 00:00:00 2001
From: Jamie Coldhill <wrxtasy@amnet.net.au>
Date: Sun, 2 Oct 2016 19:29:41 +0800
Subject: [PATCH 08/13] Update: vdec

---
 drivers/amlogic/amports/vdec.c | 80 +++++++++++++++++++++++++++++++++++++-----
 drivers/amlogic/amports/vdec.h |  3 ++
 2 files changed, 74 insertions(+), 9 deletions(-)

diff --git a/drivers/amlogic/amports/vdec.c b/drivers/amlogic/amports/vdec.c
index 89ca152..8259da5 100644
--- a/drivers/amlogic/amports/vdec.c
+++ b/drivers/amlogic/amports/vdec.c
@@ -56,6 +56,8 @@ static int inited_vcodec_num;
 static int poweron_clock_level;
 static int keep_vdec_mem;
 static unsigned int debug_trace_num = 16 * 20;
+static unsigned int clk_config;
+
 static int vdec_irq[VDEC_IRQ_MAX];
 static struct platform_device *vdec_device;
 static struct platform_device *vdec_core_device;
@@ -75,6 +77,23 @@ struct am_reg {
 
 static struct vdec_dev_reg_s vdec_dev_reg;
 
+/*
+ clk_config:
+ 0:default
+ 1:no gp0_pll;
+ 2:always used gp0_pll;
+ >=10:fixed n M clk;
+ == 100 , 100M clks;
+*/
+unsigned int get_vdec_clk_config_settings(void)
+{
+	return clk_config;
+}
+void update_vdec_clk_config_settings(unsigned int config)
+{
+	clk_config = config;
+}
+
 static bool hevc_workaround_needed(void)
 {
 	return (get_cpu_type() == MESON_CPU_MAJOR_ID_GXBB) &&
@@ -98,7 +117,10 @@ static const char * const vdec_device_name[] = {
 	"amvdec_yuv",
 	"amvdec_h264mvc",
 	"amvdec_h264_4k2k",
-	"amvdec_h265"
+	"amvdec_h265",
+	"amvenc_avc",
+	"jpegenc",
+	"amvdec_vp9"
 };
 
 static int vdec_default_buf_size[] = {
@@ -114,6 +136,9 @@ static int vdec_default_buf_size[] = {
 	64, /*"amvdec_h264mvc",*/
 	64, /*"amvdec_h264_4k2k", else alloc on decoder*/
 	48, /*"amvdec_h265", else alloc on decoder*/
+	0,  /* avs encoder */
+	0,  /* jpg encoder */
+	32, /*"amvdec_vp9", else alloc on decoder*/
 	0
 };
 
@@ -144,18 +169,29 @@ s32 vdec_init(enum vformat_e vf, int is_4k)
 {
 	s32 r;
 	int retry_num = 0;
-
+	int more_buffers = 0;
 	if (inited_vcodec_num >= SUPPORT_VCODEC_NUM) {
-		pr_info("We only support the one video code at each time\n");
+		pr_err("We only support the one video code at each time\n");
 		return -EIO;
 	}
+	if (is_4k && vf < VFORMAT_H264) {
+		/*old decoder don't support 4k
+			but size is bigger;
+			clear 4k flag, and used more buffers;
+		*/
+		more_buffers = 1;
+		is_4k = 0;
+	}
 	if (vf == VFORMAT_H264_4K2K ||
 		(vf == VFORMAT_HEVC && is_4k)) {
 		try_free_keep_video();
 	}
+
+	mutex_lock(&vdec_mutex);
 	inited_vcodec_num++;
+	mutex_unlock(&vdec_mutex);
 
-	pr_info("vdec_dev_reg.mem[0x%lx -- 0x%lx]\n",
+	pr_debug("vdec_dev_reg.mem[0x%lx -- 0x%lx]\n",
 		vdec_dev_reg.mem_start,
 		vdec_dev_reg.mem_end);
 
@@ -169,8 +205,12 @@ s32 vdec_init(enum vformat_e vf, int is_4k)
 			int m4k_size =
 				vdec_default_buf_size[VFORMAT_H264_4K2K] *
 				SZ_1M;
+			if (get_cpu_type() >= MESON_CPU_MAJOR_ID_GXTVBB)
+				m4k_size = 32 * SZ_1M;
 			if ((m4k_size > 0) && (m4k_size < 200 * SZ_1M))
 				alloc_size = m4k_size;
+		} else if (more_buffers) {
+			alloc_size = alloc_size + 16 * SZ_1M;
 		}
 		vdec_dev_reg.mem_start = codec_mm_alloc_for_dma(MEM_NAME,
 			alloc_size / PAGE_SIZE, 4 + PAGE_SHIFT,
@@ -187,7 +227,7 @@ s32 vdec_init(enum vformat_e vf, int is_4k)
 			inited_vcodec_num--;
 			return -ENOMEM;
 		}
-		pr_info("vdec base memory alloced %p\n",
+		pr_debug("vdec base memory alloced %p\n",
 		(void *)vdec_dev_reg.mem_start);
 
 		vdec_dev_reg.mem_end = vdec_dev_reg.mem_start +
@@ -205,7 +245,7 @@ s32 vdec_init(enum vformat_e vf, int is_4k)
 
 	if (IS_ERR(vdec_device)) {
 		r = PTR_ERR(vdec_device);
-		pr_info("vdec: Decoder device register failed (%d)\n", r);
+		pr_err("vdec: Decoder device register failed (%d)\n", r);
 		inited_vcodec_num--;
 		goto error;
 	}
@@ -229,7 +269,8 @@ s32 vdec_release(enum vformat_e vf)
 	if (delay_release-- <= 0 &&
 			!keep_vdec_mem &&
 			vdec_mem_alloced_from_codec &&
-			vdec_dev_reg.mem_start) {
+			vdec_dev_reg.mem_start &&
+			get_blackout_policy()) {
 		codec_mm_free_for_dma(MEM_NAME, vdec_dev_reg.mem_start);
 		vdec_cma_page = NULL;
 		vdec_dev_reg.mem_start = reserved_mem_start;
@@ -244,6 +285,26 @@ s32 vdec_release(enum vformat_e vf)
 	return 0;
 }
 
+void vdec_free_cmabuf(void)
+{
+	mutex_lock(&vdec_mutex);
+
+	if ((inited_vcodec_num > 0) || (vdec_device)) {
+		mutex_unlock(&vdec_mutex);
+		return;
+	}
+
+	if (vdec_mem_alloced_from_codec && vdec_dev_reg.mem_start) {
+		codec_mm_free_for_dma(MEM_NAME, vdec_dev_reg.mem_start);
+		vdec_cma_page = NULL;
+		vdec_dev_reg.mem_start = reserved_mem_start;
+		vdec_dev_reg.mem_end = reserved_mem_end;
+		pr_info("force free vdec memory\n");
+	}
+
+	mutex_unlock(&vdec_mutex);
+}
+
 #if 1				/* MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8 */
 static bool test_hevc(u32 decomp_addr, u32 us_delay)
 {
@@ -1135,7 +1196,7 @@ void pre_alloc_vdec_memory(void)
 		CODEC_MM_FLAGS_FOR_VDECODER);
 	if (!vdec_dev_reg.mem_start)
 		return;
-	pr_info("vdec base memory alloced %p\n",
+	pr_debug("vdec base memory alloced %p\n",
 	(void *)vdec_dev_reg.mem_start);
 
 	vdec_dev_reg.mem_end = vdec_dev_reg.mem_start +
@@ -1167,7 +1228,7 @@ static int vdec_probe(struct platform_device *pdev)
 		vdec_clock_hi_enable();
 	}
 
-	if (get_cpu_type() >= MESON_CPU_MAJOR_ID_GXBB) {
+	if (get_cpu_type() == MESON_CPU_MAJOR_ID_GXBB) {
 		/* set vdec dmc request to urgent */
 		WRITE_DMCREG(DMC_AM5_CHAN_CTRL, 0x3f203cf);
 	}
@@ -1247,6 +1308,7 @@ RESERVEDMEM_OF_DECLARE(vdec, "amlogic, vdec-memory", vdec_mem_setup);
 
 module_param(debug_trace_num, uint, 0664);
 module_param(hevc_max_reset_count, int, 0664);
+module_param(clk_config, uint, 0664);
 
 module_init(vdec_module_init);
 module_exit(vdec_module_exit);
diff --git a/drivers/amlogic/amports/vdec.h b/drivers/amlogic/amports/vdec.h
index 45cea34..56e37fb 100644
--- a/drivers/amlogic/amports/vdec.h
+++ b/drivers/amlogic/amports/vdec.h
@@ -101,5 +101,8 @@ extern void set_vdec2_usage(enum vdec2_usage_e usage);
 extern enum vdec2_usage_e get_vdec2_usage(void);
 
 extern void dma_contiguous_early_fixup(phys_addr_t base, unsigned long size);
+unsigned int get_vdec_clk_config_settings(void);
+void update_vdec_clk_config_settings(unsigned int config);
+
 
 #endif				/* VDEC_H */
-- 
1.9.1

From f92877c8281e5c056d7132c52b7abd7a9d4c9765 Mon Sep 17 00:00:00 2001
From: Jamie Coldhill <wrxtasy@amnet.net.au>
Date: Sun, 2 Oct 2016 19:30:29 +0800
Subject: [PATCH 09/13] Update: video

---
 drivers/amlogic/amports/video.c | 1981 ++++++++++++++++++++++++++++-----------
 1 file changed, 1423 insertions(+), 558 deletions(-)

diff --git a/drivers/amlogic/amports/video.c b/drivers/amlogic/amports/video.c
index ec4ec7d..2d31e7c 100644
--- a/drivers/amlogic/amports/video.c
+++ b/drivers/amlogic/amports/video.c
@@ -123,13 +123,21 @@ static int output_fps;
 static u32 omx_pts;
 static int omx_pts_interval_upper = 11000;
 static int omx_pts_interval_lower = -5500;
+static bool bypass_pps;
+/*For 3D usage ----0:  mbx   1: tv */
+bool platform_type = 1;
 
+/* for bit depth setting. */
+int bit_depth_flag = 8;
 
 bool omx_secret_mode = false;
 #define DEBUG_FLAG_FFPLAY	(1<<0)
 #define DEBUG_FLAG_CALC_PTS_INC	(1<<1)
 
 #define RECEIVER_NAME "amvideo"
+
+static s32 amvideo_poll_major;
+
 static int video_receiver_event_fun(int type, void *data, void *);
 
 static const struct vframe_receiver_op_s video_vf_receiver = {
@@ -314,7 +322,7 @@ static int video2_onoff_state = VIDEO_ENABLE_STATE_IDLE;
 		VIDEO_LAYER_ON(); \
 	} while (0)
 #endif
-#ifdef TV_3D_FUNCTION_OPEN
+#if 0  /*TV_3D_FUNCTION_OPEN*/
 #define EnableVideoLayer2()  \
 	do { \
 		VD2_MEM_POWER_ON(); \
@@ -364,7 +372,7 @@ static int video2_onoff_state = VIDEO_ENABLE_STATE_IDLE;
 #else
 #define DisableVideoLayer_NoDelay() DisableVideoLayer()
 #endif
-#ifdef TV_3D_FUNCTION_OPEN
+#if 0  /*TV_3D_FUNCTION_OPEN */
 #define DisableVideoLayer2() \
 	do { \
 		CLEAR_VCBUS_REG_MASK(VPP_MISC + cur_dev->vpp_off, \
@@ -451,7 +459,7 @@ static int vsync_rdma_line_max;
 #endif
 
 static unsigned int process_3d_type;
-
+static unsigned int last_process_3d_type;
 #ifdef TV_3D_FUNCTION_OPEN
 /* toggle_3d_fa_frame is for checking the vpts_expire  in 2 vsnyc */
 static int toggle_3d_fa_frame = 1;
@@ -513,7 +521,7 @@ static DEFINE_MUTEX(video_module_mutex);
 static DEFINE_SPINLOCK(lock);
 static u32 frame_par_ready_to_set, frame_par_force_to_set;
 static u32 vpts_remainder;
-static bool video_property_changed;
+static int video_property_changed;
 static u32 video_notify_flag;
 static int enable_video_discontinue_report = 1;
 
@@ -690,13 +698,16 @@ static u32 force_blackout;
 
 /* disable video */
 static u32 disable_video = VIDEO_DISABLE_NONE;
-static u32 video_enabled;
+static u32 video_enabled __nosavedata;
 /* show first frame*/
 static bool show_first_frame_nosync;
+bool show_first_picture = false;
 /* static bool first_frame=false; */
 
 /* test screen*/
 static u32 test_screen;
+/* rgb screen*/
+static u32 rgb_screen;
 
 /* video frame repeat count */
 static u32 frame_repeat_count;
@@ -742,6 +753,7 @@ u32 trickmode_i = 0;
 /* trickmode ff/fb */
 u32 trickmode_fffb = 0;
 atomic_t trickmode_framedone = ATOMIC_INIT(0);
+atomic_t video_sizechange = ATOMIC_INIT(0);
 atomic_t video_unreg_flag = ATOMIC_INIT(0);
 atomic_t video_pause_flag = ATOMIC_INIT(0);
 int trickmode_duration = 0;
@@ -775,6 +787,9 @@ static const u8 skip_tab[6] = { 0x24, 0x04, 0x68, 0x48, 0x28, 0x08 };
 /* wait queue for poll */
 static wait_queue_head_t amvideo_trick_wait;
 
+/* wait queue for poll */
+static wait_queue_head_t amvideo_sizechange_wait;
+
 #if 1				/* MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8 */
 #define VPU_DELAYWORK_VPU_CLK            1
 #define VPU_DELAYWORK_MEM_POWER_OFF_VD1  2
@@ -1330,6 +1345,32 @@ static inline struct vframe_s *video_vf_get(void)
 			process_3d_type &= (~MODE_3D_MVC);
 			mvc_flag = 0;
 		}
+		if ((process_3d_type & MODE_FORCE_3D_TO_2D_LR)
+		&& (!(vf->type & VIDTYPE_MVC))) {
+			vf->trans_fmt = TVIN_TFMT_3D_DET_LR;
+			vf->left_eye.start_x = 0;
+			vf->left_eye.start_y = 0;
+			vf->left_eye.width = vf->width / 2;
+			vf->left_eye.height = vf->height;
+
+			vf->right_eye.start_x = vf->width / 2;
+			vf->right_eye.start_y = 0;
+			vf->right_eye.width = vf->width / 2;
+		}
+		if ((process_3d_type & MODE_FORCE_3D_TO_2D_TB)
+		&& (!(vf->type & VIDTYPE_MVC))) {
+			vf->trans_fmt = TVIN_TFMT_3D_TB;
+			vf->left_eye.start_x = 0;
+			vf->left_eye.start_y = 0;
+			vf->left_eye.width = vf->width;
+			vf->left_eye.height = vf->height/2;
+
+			vf->right_eye.start_x = 0;
+			vf->right_eye.start_y = vf->height/2;
+			vf->right_eye.width = vf->width;
+			vf->right_eye.height = vf->height/2;
+		}
+
 #endif
 	}
 	return vf;
@@ -1407,69 +1448,85 @@ static void vpp_settings_h(struct vpp_frame_par_s *framePtr)
 {
 	struct vppfilter_mode_s *vpp_filter = &framePtr->vpp_filter;
 	u32 r1, r2, r3;
-#ifdef TV_3D_FUNCTION_OPEN
+
 	u32 x_lines;
-#endif
+
 	r1 = framePtr->VPP_hsc_linear_startp - framePtr->VPP_hsc_startp;
 	r2 = framePtr->VPP_hsc_linear_endp - framePtr->VPP_hsc_startp;
 	r3 = framePtr->VPP_hsc_endp - framePtr->VPP_hsc_startp;
-#ifdef SUPER_SCALER_OPEN
-	if (framePtr->supscl_path == sup0_pp_sp1_scpath)
+
+	if ((framePtr->supscl_path == sup0_pp_sp1_scpath) &&
+		(get_cpu_type() >= MESON_CPU_MAJOR_ID_GXTVBB))
 		r3 >>= framePtr->supsc1_hori_ratio;
-#endif
-#ifdef TV_3D_FUNCTION_OPEN
-	x_lines = zoom_end_x_lines / (framePtr->hscale_skip_count + 1);
-	if (process_3d_type & MODE_3D_OUT_TB) {
-		/* vd1 and vd2 do pre blend */
-		VSYNC_WR_MPEG_REG(VPP_PREBLEND_VD1_H_START_END,
-				((zoom_start_x_lines & VPP_VD_SIZE_MASK) <<
-				VPP_VD1_START_BIT) | (((zoom_end_x_lines) &
-				VPP_VD_SIZE_MASK) << VPP_VD1_END_BIT));
-		VSYNC_WR_MPEG_REG(VPP_BLEND_VD2_H_START_END,
-				((zoom_start_x_lines & VPP_VD_SIZE_MASK) <<
-				VPP_VD1_START_BIT) | (((zoom_end_x_lines) &
-				VPP_VD_SIZE_MASK) << VPP_VD1_END_BIT));
-		VSYNC_WR_MPEG_REG(VPP_POSTBLEND_VD1_H_START_END +
-				cur_dev->vpp_off,
-				((framePtr->VPP_hsc_startp & VPP_VD_SIZE_MASK)
-				<< VPP_VD1_START_BIT) |
-				((framePtr->VPP_hsc_endp & VPP_VD_SIZE_MASK)
-				<< VPP_VD1_END_BIT));
-	} else if (process_3d_type & MODE_3D_OUT_LR) {
-		/* vd1 and vd2 do pre blend */
-		VSYNC_WR_MPEG_REG(VPP_PREBLEND_VD1_H_START_END,
-				((zoom_start_x_lines & VPP_VD_SIZE_MASK) <<
-				VPP_VD1_START_BIT) | (((x_lines >> 1) &
-				VPP_VD_SIZE_MASK) <<
-				VPP_VD1_END_BIT));
-		VSYNC_WR_MPEG_REG(VPP_BLEND_VD2_H_START_END,
-				((((x_lines + 1) >> 1) & VPP_VD_SIZE_MASK) <<
-				VPP_VD1_START_BIT) | ((x_lines &
-				VPP_VD_SIZE_MASK) << VPP_VD1_END_BIT));
-		VSYNC_WR_MPEG_REG(VPP_POSTBLEND_VD1_H_START_END +
-				cur_dev->vpp_off,
-				((framePtr->VPP_hsc_startp & VPP_VD_SIZE_MASK)
-				<< VPP_VD1_START_BIT) |
-				((framePtr->VPP_hsc_endp & VPP_VD_SIZE_MASK)
-				<< VPP_VD1_END_BIT));
-	} else
-#endif
-	{
 
-		VSYNC_WR_MPEG_REG(VPP_POSTBLEND_VD1_H_START_END +
-				cur_dev->vpp_off,
-				((framePtr->VPP_hsc_startp & VPP_VD_SIZE_MASK)
-				<< VPP_VD1_START_BIT) |
-				((framePtr->VPP_hsc_endp & VPP_VD_SIZE_MASK)
-				<< VPP_VD1_END_BIT));
+	if (platform_type == 1) {
+		x_lines = zoom_end_x_lines / (framePtr->hscale_skip_count + 1);
+		if (process_3d_type & MODE_3D_OUT_TB) {
+			/* vd1 and vd2 do pre blend */
+			VSYNC_WR_MPEG_REG(VPP_PREBLEND_VD1_H_START_END,
+			((zoom_start_x_lines & VPP_VD_SIZE_MASK) <<
+			VPP_VD1_START_BIT) | (((zoom_end_x_lines) &
+			VPP_VD_SIZE_MASK) << VPP_VD1_END_BIT));
+			VSYNC_WR_MPEG_REG(VPP_BLEND_VD2_H_START_END,
+			((zoom_start_x_lines & VPP_VD_SIZE_MASK) <<
+			VPP_VD1_START_BIT) | (((zoom_end_x_lines) &
+			VPP_VD_SIZE_MASK) << VPP_VD1_END_BIT));
+			VSYNC_WR_MPEG_REG(VPP_POSTBLEND_VD1_H_START_END +
+			cur_dev->vpp_off,
+			((framePtr->VPP_hsc_startp & VPP_VD_SIZE_MASK)
+			<< VPP_VD1_START_BIT) |
+			((framePtr->VPP_hsc_endp & VPP_VD_SIZE_MASK)
+			<< VPP_VD1_END_BIT));
+		} else if (process_3d_type & MODE_3D_OUT_LR) {
+			/* vd1 and vd2 do pre blend */
+			VSYNC_WR_MPEG_REG(VPP_PREBLEND_VD1_H_START_END,
+			((zoom_start_x_lines & VPP_VD_SIZE_MASK) <<
+			VPP_VD1_START_BIT) | (((x_lines >> 1) &
+			VPP_VD_SIZE_MASK) <<
+			VPP_VD1_END_BIT));
+			VSYNC_WR_MPEG_REG(VPP_BLEND_VD2_H_START_END,
+			((((x_lines + 1) >> 1) & VPP_VD_SIZE_MASK) <<
+			VPP_VD1_START_BIT) | ((x_lines &
+			VPP_VD_SIZE_MASK) << VPP_VD1_END_BIT));
+			VSYNC_WR_MPEG_REG(VPP_POSTBLEND_VD1_H_START_END +
+			cur_dev->vpp_off,
+			((framePtr->VPP_hsc_startp & VPP_VD_SIZE_MASK)
+			<< VPP_VD1_START_BIT) |
+			((framePtr->VPP_hsc_endp & VPP_VD_SIZE_MASK)
+			<< VPP_VD1_END_BIT));
+		} else{
 
-		VSYNC_WR_MPEG_REG(VPP_BLEND_VD2_H_START_END + cur_dev->vpp_off,
+			VSYNC_WR_MPEG_REG(VPP_POSTBLEND_VD1_H_START_END +
+			cur_dev->vpp_off,
+			((framePtr->VPP_hsc_startp & VPP_VD_SIZE_MASK)
+			<< VPP_VD1_START_BIT) |
+			((framePtr->VPP_hsc_endp & VPP_VD_SIZE_MASK)
+			<< VPP_VD1_END_BIT));
+
+			VSYNC_WR_MPEG_REG(VPP_BLEND_VD2_H_START_END +
+			cur_dev->vpp_off,
+			((framePtr->VPP_hd_start_lines_ &
+			VPP_VD_SIZE_MASK) << VPP_VD1_START_BIT) |
+			((framePtr->VPP_hd_end_lines_ &
+			VPP_VD_SIZE_MASK) << VPP_VD1_END_BIT));
+		}
+	} else {
+			VSYNC_WR_MPEG_REG(VPP_POSTBLEND_VD1_H_START_END +
+			cur_dev->vpp_off,
+			((framePtr->VPP_hsc_startp & VPP_VD_SIZE_MASK)
+			<< VPP_VD1_START_BIT) |
+			((framePtr->VPP_hsc_endp & VPP_VD_SIZE_MASK)
+			<< VPP_VD1_END_BIT));
+
+			VSYNC_WR_MPEG_REG(VPP_BLEND_VD2_H_START_END +
+			cur_dev->vpp_off,
 			((framePtr->VPP_hd_start_lines_ &
 			VPP_VD_SIZE_MASK) << VPP_VD1_START_BIT) |
 			((framePtr->VPP_hd_end_lines_ &
 			VPP_VD_SIZE_MASK) << VPP_VD1_END_BIT));
 	}
-	VSYNC_WR_MPEG_REG(VPP_HSC_REGION12_STARTP + cur_dev->vpp_off,
+	VSYNC_WR_MPEG_REG(VPP_HSC_REGION12_STARTP +
+			cur_dev->vpp_off,
 			(0 << VPP_REGION1_BIT) |
 			((r1 & VPP_REGION_MASK) << VPP_REGION2_BIT));
 
@@ -1497,9 +1554,7 @@ static void vpp_settings_v(struct vpp_frame_par_s *framePtr)
 {
 	struct vppfilter_mode_s *vpp_filter = &framePtr->vpp_filter;
 	u32 r, afbc_enble_flag;
-#ifdef TV_3D_FUNCTION_OPEN
 	u32 y_lines;
-#endif
 	r = framePtr->VPP_vsc_endp - framePtr->VPP_vsc_startp;
 	afbc_enble_flag = 0;
 	if (is_meson_gxbb_cpu())
@@ -1518,66 +1573,94 @@ static void vpp_settings_v(struct vpp_frame_par_s *framePtr)
 			| ((framePtr->VPP_vsc_endp & VPP_VD_SIZE_MASK) <<
 			VPP_VD1_END_BIT));
 
-#ifdef TV_3D_FUNCTION_OPEN
-	y_lines = zoom_end_y_lines / (framePtr->vscale_skip_count + 1);
-	if (process_3d_type & MODE_3D_OUT_TB) {
-		VSYNC_WR_MPEG_REG(VPP_PREBLEND_VD1_V_START_END,
-				((zoom_start_y_lines & VPP_VD_SIZE_MASK) <<
-				VPP_VD1_START_BIT) | (((y_lines >> 1) &
-				VPP_VD_SIZE_MASK) <<
-				VPP_VD1_END_BIT));
-		VSYNC_WR_MPEG_REG(
-				VPP_BLEND_VD2_V_START_END,
-				((((y_lines + 1) >> 1) & VPP_VD_SIZE_MASK) <<
-				VPP_VD1_START_BIT) |
-				((y_lines & VPP_VD_SIZE_MASK) <<
-				VPP_VD1_END_BIT));
-	} else if (process_3d_type & MODE_3D_OUT_LR) {
-		VSYNC_WR_MPEG_REG(VPP_PREBLEND_VD1_V_START_END,
-				((zoom_start_y_lines & VPP_VD_SIZE_MASK) <<
-				VPP_VD1_START_BIT) | ((zoom_end_y_lines &
-				VPP_VD_SIZE_MASK) << VPP_VD1_END_BIT));
-		VSYNC_WR_MPEG_REG(VPP_BLEND_VD2_V_START_END,
-				((zoom_start_y_lines & VPP_VD_SIZE_MASK) <<
-				VPP_VD1_START_BIT) | ((zoom_end_y_lines &
-				VPP_VD_SIZE_MASK) << VPP_VD1_END_BIT));
-	} else
-#endif
-	{
-		if ((framePtr->VPP_post_blend_vd_v_end_ -
-			framePtr->VPP_post_blend_vd_v_start_ + 1) >
-			VPP_PREBLEND_VD_V_END_LIMIT) {
-			VSYNC_WR_MPEG_REG(VPP_PREBLEND_VD1_V_START_END +
+	if (platform_type == 1) {
+		y_lines = zoom_end_y_lines / (framePtr->vscale_skip_count + 1);
+		if (process_3d_type & MODE_3D_OUT_TB) {
+			VSYNC_WR_MPEG_REG(VPP_PREBLEND_VD1_V_START_END,
+			((zoom_start_y_lines & VPP_VD_SIZE_MASK) <<
+			VPP_VD1_START_BIT) | (((y_lines >> 1) &
+			VPP_VD_SIZE_MASK) <<
+			VPP_VD1_END_BIT));
+			VSYNC_WR_MPEG_REG(
+			VPP_BLEND_VD2_V_START_END,
+			((((y_lines + 1) >> 1) & VPP_VD_SIZE_MASK) <<
+			VPP_VD1_START_BIT) |
+			((y_lines & VPP_VD_SIZE_MASK) <<
+			VPP_VD1_END_BIT));
+		} else if (process_3d_type & MODE_3D_OUT_LR) {
+			VSYNC_WR_MPEG_REG(VPP_PREBLEND_VD1_V_START_END,
+			((zoom_start_y_lines & VPP_VD_SIZE_MASK) <<
+			VPP_VD1_START_BIT) | ((zoom_end_y_lines &
+			VPP_VD_SIZE_MASK) << VPP_VD1_END_BIT));
+			VSYNC_WR_MPEG_REG(VPP_BLEND_VD2_V_START_END,
+			((zoom_start_y_lines & VPP_VD_SIZE_MASK) <<
+			VPP_VD1_START_BIT) | ((zoom_end_y_lines &
+			VPP_VD_SIZE_MASK) << VPP_VD1_END_BIT));
+		} else {
+			if ((framePtr->VPP_post_blend_vd_v_end_ -
+				framePtr->VPP_post_blend_vd_v_start_ + 1) >
+				VPP_PREBLEND_VD_V_END_LIMIT) {
+				VSYNC_WR_MPEG_REG(VPP_PREBLEND_VD1_V_START_END +
 				cur_dev->vpp_off,
 				((framePtr->VPP_post_blend_vd_v_start_
 				& VPP_VD_SIZE_MASK) <<
 				VPP_VD1_START_BIT) |
 				((framePtr->VPP_post_blend_vd_v_end_ &
-					VPP_VD_SIZE_MASK)
+				VPP_VD_SIZE_MASK)
 				<< VPP_VD1_END_BIT));
-		} else {
-			VSYNC_WR_MPEG_REG(VPP_PREBLEND_VD1_V_START_END +
+			} else {
+				VSYNC_WR_MPEG_REG(VPP_PREBLEND_VD1_V_START_END +
 				cur_dev->vpp_off,
 				((0 & VPP_VD_SIZE_MASK) <<
 				VPP_VD1_START_BIT) |
 				(((VPP_PREBLEND_VD_V_END_LIMIT - 1) &
 				VPP_VD_SIZE_MASK) <<
 				VPP_VD1_END_BIT));
+			}
+			VSYNC_WR_MPEG_REG(VPP_BLEND_VD2_V_START_END +
+			cur_dev->vpp_off,
+			(((framePtr->VPP_vd_end_lines_ / 2) &
+			VPP_VD_SIZE_MASK) << VPP_VD1_START_BIT) |
+			(((framePtr->VPP_vd_end_lines_) &
+			VPP_VD_SIZE_MASK) << VPP_VD1_END_BIT));
 		}
-		VSYNC_WR_MPEG_REG(VPP_BLEND_VD2_V_START_END + cur_dev->vpp_off,
-				(((framePtr->VPP_vd_end_lines_ / 2) &
-				VPP_VD_SIZE_MASK) << VPP_VD1_START_BIT) |
-				(((framePtr->VPP_vd_end_lines_) &
-				VPP_VD_SIZE_MASK) << VPP_VD1_END_BIT));
+	} else {
+			if ((framePtr->VPP_post_blend_vd_v_end_ -
+				framePtr->VPP_post_blend_vd_v_start_ + 1) >
+				VPP_PREBLEND_VD_V_END_LIMIT) {
+				VSYNC_WR_MPEG_REG(VPP_PREBLEND_VD1_V_START_END +
+				cur_dev->vpp_off,
+				((framePtr->VPP_post_blend_vd_v_start_
+				& VPP_VD_SIZE_MASK) <<
+				VPP_VD1_START_BIT) |
+				((framePtr->VPP_post_blend_vd_v_end_ &
+				VPP_VD_SIZE_MASK)
+				<< VPP_VD1_END_BIT));
+			} else {
+				VSYNC_WR_MPEG_REG(VPP_PREBLEND_VD1_V_START_END +
+					cur_dev->vpp_off,
+					((0 & VPP_VD_SIZE_MASK) <<
+					VPP_VD1_START_BIT) |
+					(((VPP_PREBLEND_VD_V_END_LIMIT - 1) &
+					VPP_VD_SIZE_MASK) <<
+					VPP_VD1_END_BIT));
+			}
+			VSYNC_WR_MPEG_REG(VPP_BLEND_VD2_V_START_END +
+			cur_dev->vpp_off,
+			((((framePtr->VPP_vd_end_lines_ + 1) / 2) &
+			VPP_VD_SIZE_MASK) << VPP_VD1_START_BIT) |
+			(((framePtr->VPP_vd_end_lines_) &
+			VPP_VD_SIZE_MASK) << VPP_VD1_END_BIT));
 	}
 	VSYNC_WR_MPEG_REG(VPP_VSC_REGION12_STARTP + cur_dev->vpp_off, 0);
 	VSYNC_WR_MPEG_REG(VPP_VSC_REGION34_STARTP + cur_dev->vpp_off,
 			  ((r & VPP_REGION_MASK) << VPP_REGION3_BIT) |
 			  ((r & VPP_REGION_MASK) << VPP_REGION4_BIT));
-#ifdef SUPER_SCALER_OPEN
-	if (framePtr->supscl_path == sup0_pp_sp1_scpath)
+
+	if ((framePtr->supscl_path == sup0_pp_sp1_scpath) &&
+		(get_cpu_type() >= MESON_CPU_MAJOR_ID_GXTVBB))
 		r >>= framePtr->supsc1_vert_ratio;
-#endif
+
 	VSYNC_WR_MPEG_REG(VPP_VSC_REGION4_ENDP + cur_dev->vpp_off, r);
 
 	VSYNC_WR_MPEG_REG(VPP_VSC_START_PHASE_STEP + cur_dev->vpp_off,
@@ -1758,6 +1841,7 @@ static void zoom_get_vert_pos(struct vframe_s *vf, u32 vpp_3d_mode, u32 *ls,
 static void zoom_display_horz(int hscale)
 {
 	u32 ls, le, rs, re;
+	int content_w, content_l, content_r;
 #ifdef TV_3D_FUNCTION_OPEN
 	if (process_3d_type & MODE_3D_ENABLE) {
 		zoom_get_horz_pos(cur_dispbuf, cur_frame_par->vpp_3d_mode, &ls,
@@ -1795,12 +1879,13 @@ static void zoom_display_horz(int hscale)
 	if (get_cpu_type() >= MESON_CPU_MAJOR_ID_GXBB) {
 		int l_aligned;
 		int r_aligned;
-		if (zoom_start_x_lines > 0) {
+		if ((zoom_start_x_lines > 0) ||
+		(zoom_end_x_lines < ori_end_x_lines)) {
 			l_aligned = round_down(ori_start_x_lines, 32);
-			r_aligned = round_up(ori_end_x_lines, 32);
+			r_aligned = round_up(ori_end_x_lines + 1, 32);
 		} else {
 			l_aligned = round_down(zoom_start_x_lines, 32);
-			r_aligned = round_up(zoom_end_x_lines, 32);
+			r_aligned = round_up(zoom_end_x_lines + 1, 32);
 		}
 		VSYNC_WR_MPEG_REG(AFBC_VD_CFMT_W,
 			  ((r_aligned - l_aligned) << 16) |
@@ -1810,14 +1895,29 @@ static void zoom_display_horz(int hscale)
 			  ((l_aligned / 32) << 16) |
 			  ((r_aligned / 32) - 1));
 
-
-		VSYNC_WR_MPEG_REG(AFBC_PIXEL_HOR_SCOPE,
-			  ((zoom_start_x_lines - l_aligned) << 16) |
-			  (zoom_end_x_lines - l_aligned));
-
+		if (get_cpu_type() >= MESON_CPU_MAJOR_ID_GXL) {
+			VSYNC_WR_MPEG_REG(AFBC_SIZE_OUT,
+				(VSYNC_RD_MPEG_REG(AFBC_SIZE_OUT) & 0xffff) |
+				((r_aligned - l_aligned) << 16));
+		}
+#ifdef TV_REVERSE
+		if (reverse) {
+			content_w = zoom_end_x_lines - zoom_start_x_lines + 1;
+			content_l = (r_aligned - zoom_end_x_lines - 1) +
+			(zoom_start_x_lines - l_aligned);
+			content_r = content_l + content_w - 1;
+			VSYNC_WR_MPEG_REG(AFBC_PIXEL_HOR_SCOPE,
+				  (content_l << 16) | content_r);
+		} else
+#endif
+		{
+			VSYNC_WR_MPEG_REG(AFBC_PIXEL_HOR_SCOPE,
+				  ((zoom_start_x_lines - l_aligned) << 16) |
+				  (zoom_end_x_lines - l_aligned));
+		}
 		VSYNC_WR_MPEG_REG(AFBC_SIZE_IN,
-			  (VSYNC_RD_MPEG_REG(AFBC_SIZE_IN) & 0xffff) |
-			  ((r_aligned - l_aligned) << 16));
+			 (VSYNC_RD_MPEG_REG(AFBC_SIZE_IN) & 0xffff) |
+			 ((r_aligned - l_aligned) << 16));
 	}
 
 	VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_X0,
@@ -1847,37 +1947,42 @@ static void zoom_display_vert(void)
 {
 
 	u32 ls, le, rs, re;
-#ifdef TV_3D_FUNCTION_OPEN
-
-	if (process_3d_type & MODE_3D_ENABLE) {
-		zoom_get_vert_pos(cur_dispbuf, cur_frame_par->vpp_3d_mode, &ls,
-				  &le, &rs, &re);
+	if (platform_type == 1) {
+		if (process_3d_type & MODE_3D_ENABLE) {
+			zoom_get_vert_pos(cur_dispbuf,
+			cur_frame_par->vpp_3d_mode, &ls,
+					  &le, &rs, &re);
+		} else {
+			ls = rs = zoom_start_y_lines;
+			le = re = zoom_end_y_lines;
+		}
 	} else {
-		ls = rs = zoom_start_y_lines;
-		le = re = zoom_end_y_lines;
+		if (process_3d_type & MODE_3D_ENABLE) {
+			zoom_get_vert_pos(cur_dispbuf,
+			cur_frame_par->vpp_3d_mode, &ls,
+					  &le, &rs, &re);
+		} else {
+			ls = rs = zoom_start_y_lines;
+			le = re = zoom_end_y_lines;
+		}
 	}
-#else
-	ls = rs = zoom_start_y_lines;
-	le = re = zoom_end_y_lines;
-
-#endif
 
 	if ((cur_dispbuf) && (cur_dispbuf->type & VIDTYPE_MVC)) {
 		VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_Y0 + cur_dev->viu_off,
 				(ls * 2 << VDIF_PIC_START_BIT) |
-				(le * 2 << VDIF_PIC_END_BIT));
+				((le * 2 - 1) << VDIF_PIC_END_BIT));
 
 		VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_Y0 + cur_dev->viu_off,
 				((ls) << VDIF_PIC_START_BIT) |
-				((le) << VDIF_PIC_END_BIT));
+				((le - 1) << VDIF_PIC_END_BIT));
 
 		VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_Y0,
 				(ls * 2 << VDIF_PIC_START_BIT) |
-				(le * 2 << VDIF_PIC_END_BIT));
+				((le * 2 - 1) << VDIF_PIC_END_BIT));
 
 		VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_Y0,
 				((ls) << VDIF_PIC_START_BIT) |
-				((le) << VDIF_PIC_END_BIT));
+				((le - 1) << VDIF_PIC_END_BIT));
 	} else {
 		VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_Y0 + cur_dev->viu_off,
 				(ls << VDIF_PIC_START_BIT) |
@@ -1894,37 +1999,37 @@ static void zoom_display_vert(void)
 		VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_Y1 + cur_dev->viu_off,
 				((rs / 2) << VDIF_PIC_START_BIT) |
 				((re / 2) << VDIF_PIC_END_BIT));
-#ifdef TV_3D_FUNCTION_OPEN
-		/* vd2 */
-		VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_Y0,
-				(ls << VDIF_PIC_START_BIT) |
-				(le << VDIF_PIC_END_BIT));
-
-		VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_Y0,
-				((ls / 2) << VDIF_PIC_START_BIT) |
-				((le / 2) << VDIF_PIC_END_BIT));
-
-		VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_Y1,
-				(rs << VDIF_PIC_START_BIT) |
-				(re << VDIF_PIC_END_BIT));
-
-		VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_Y1,
-				((rs / 2) << VDIF_PIC_START_BIT) |
-				((re / 2) << VDIF_PIC_END_BIT));
-#endif
+		if (platform_type == 1) {
+			/* vd2 */
+			VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_Y0,
+					(ls << VDIF_PIC_START_BIT) |
+					(le << VDIF_PIC_END_BIT));
+
+			VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_Y0,
+					((ls / 2) << VDIF_PIC_START_BIT) |
+					((le / 2) << VDIF_PIC_END_BIT));
+
+			VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_Y1,
+					(rs << VDIF_PIC_START_BIT) |
+					(re << VDIF_PIC_END_BIT));
+
+			VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_Y1,
+					((rs / 2) << VDIF_PIC_START_BIT) |
+					((re / 2) << VDIF_PIC_END_BIT));
+		}
 	}
 
 	if (get_cpu_type() >= MESON_CPU_MAJOR_ID_GXBB) {
 		int t_aligned;
 		int b_aligned;
-		if (zoom_start_y_lines > 0) {
-			t_aligned = round_down(zoom_start_y_lines, 32);
-			b_aligned = round_up(zoom_end_y_lines, 32);
+		if ((zoom_start_y_lines > 0) ||
+		(zoom_end_y_lines < ori_end_y_lines)) {
+			t_aligned = round_down(ori_start_y_lines, 4);
+			b_aligned = round_up(ori_end_y_lines + 1, 4);
 		} else {
-			t_aligned = round_down(zoom_start_y_lines, 32);
-			b_aligned = round_up(zoom_end_y_lines, 32);
+			t_aligned = round_down(zoom_start_y_lines, 4);
+			b_aligned = round_up(zoom_end_y_lines + 1, 4);
 		}
-
 		VSYNC_WR_MPEG_REG(AFBC_VD_CFMT_H,
 		    b_aligned - t_aligned);
 
@@ -1936,9 +2041,14 @@ static void zoom_display_vert(void)
 		    ((zoom_start_y_lines - t_aligned) << 16) |
 		    (zoom_end_y_lines - t_aligned));
 
-		VSYNC_WR_MPEG_REG(AFBC_SIZE_IN,
-		    (VSYNC_RD_MPEG_REG(AFBC_SIZE_IN) & 0xffff0000) |
-		    (b_aligned - t_aligned));
+	VSYNC_WR_MPEG_REG(AFBC_SIZE_IN,
+		(VSYNC_RD_MPEG_REG(AFBC_SIZE_IN) & 0xffff0000) |
+		(b_aligned - t_aligned));
+	if (get_cpu_type() >= MESON_CPU_MAJOR_ID_GXL) {
+			VSYNC_WR_MPEG_REG(AFBC_SIZE_OUT,
+				(VSYNC_RD_MPEG_REG(AFBC_SIZE_OUT) & 0xffff0000)
+				| (b_aligned - t_aligned));
+		}
 	}
 }
 
@@ -1994,9 +2104,11 @@ static void vsync_toggle_frame(struct vframe_s *vf)
 	unsigned long flags;
 	frame_count++;
 	ori_start_x_lines = 0;
-	ori_end_x_lines = vf->width - 1;
+	ori_end_x_lines = ((vf->type & VIDTYPE_COMPRESS) ?
+		vf->compWidth : vf->width) - 1;
 	ori_start_y_lines = 0;
-	ori_end_y_lines = vf->height - 1;
+	ori_end_y_lines = ((vf->type & VIDTYPE_COMPRESS) ?
+		vf->compHeight : vf->height) - 1;
 	if (debug_flag & DEBUG_FLAG_PRINT_TOGGLE_FRAME)
 		pr_info("%s()\n", __func__);
 
@@ -2101,11 +2213,10 @@ static void vsync_toggle_frame(struct vframe_s *vf)
 	}
 	/* switch buffer */
 	post_canvas = vf->canvas0Addr;
-
 	if ((get_cpu_type() >= MESON_CPU_MAJOR_ID_GXBB) &&
 		(vf->type & VIDTYPE_COMPRESS)) {
-		VSYNC_WR_MPEG_REG(AFBC_HEAD_BADDR, vf->canvas0Addr>>4);
-		VSYNC_WR_MPEG_REG(AFBC_BODY_BADDR, vf->canvas1Addr>>4);
+		VSYNC_WR_MPEG_REG(AFBC_HEAD_BADDR, vf->compHeadAddr>>4);
+		VSYNC_WR_MPEG_REG(AFBC_BODY_BADDR, vf->compBodyAddr>>4);
 	} else if ((VSYNC_RD_MPEG_REG(DI_IF1_GEN_REG) & 0x1) == 0) {
 #ifdef CONFIG_VSYNC_RDMA
 		canvas_copy(vf->canvas0Addr & 0xff,
@@ -2123,28 +2234,46 @@ static void vsync_toggle_frame(struct vframe_s *vf)
 
 		VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS0 + cur_dev->viu_off,
 				  disp_canvas[rdma_canvas_id][0]);
-#ifndef TV_3D_FUNCTION_OPEN
-		VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS1 + cur_dev->viu_off,
-				  disp_canvas[rdma_canvas_id][0]);
-		VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS0 + cur_dev->viu_off,
-				  disp_canvas[rdma_canvas_id][1]);
-		VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS1 + cur_dev->viu_off,
-				  disp_canvas[rdma_canvas_id][1]);
-#else
-		VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS0 + cur_dev->viu_off,
-				  disp_canvas[rdma_canvas_id][0]);
-		if (cur_frame_par && (cur_frame_par->vpp_2pic_mode == 1)) {
+		if (platform_type == 0) {
 			VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS1 + cur_dev->viu_off,
 					  disp_canvas[rdma_canvas_id][0]);
+			VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS0 + cur_dev->viu_off,
+					  disp_canvas[rdma_canvas_id][1]);
 			VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS1 + cur_dev->viu_off,
-					  disp_canvas[rdma_canvas_id][0]);
+					  disp_canvas[rdma_canvas_id][1]);
 		} else {
+			VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS0 + cur_dev->viu_off,
+					  disp_canvas[rdma_canvas_id][0]);
+			if (cur_frame_par &&
+			(cur_frame_par->vpp_2pic_mode == 1)) {
+				VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS1 +
+				cur_dev->viu_off,
+				disp_canvas[rdma_canvas_id][0]);
+				VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS1 +
+				cur_dev->viu_off,
+				disp_canvas[rdma_canvas_id][0]);
+			} else {
+				VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS1 +
+				cur_dev->viu_off,
+				disp_canvas[rdma_canvas_id][1]);
+				VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS1 +
+				cur_dev->viu_off,
+				disp_canvas[rdma_canvas_id][1]);
+			}
+		}
+		if (cur_frame_par
+		&& (process_3d_type & MODE_3D_ENABLE)
+		&& (process_3d_type & MODE_3D_TO_2D_R)
+		&& (cur_frame_par->vpp_2pic_mode == VPP_SELECT_PIC1)) {
+			VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS0 + cur_dev->viu_off,
+					  disp_canvas[rdma_canvas_id][1]);
 			VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS1 + cur_dev->viu_off,
 					  disp_canvas[rdma_canvas_id][1]);
+			VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS0 + cur_dev->viu_off,
+					  disp_canvas[rdma_canvas_id][1]);
 			VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS1 + cur_dev->viu_off,
 					  disp_canvas[rdma_canvas_id][1]);
 		}
-#endif
 		/* VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS1,
 		disp_canvas[rdma_canvas_id][1]); */
 		next_rdma_canvas_id = rdma_canvas_id ? 0 : 1;
@@ -2176,36 +2305,41 @@ static void vsync_toggle_frame(struct vframe_s *vf)
 			    disp_canvas_index[4]);
 		canvas_copy((vf->canvas1Addr >> 16) & 0xff,
 			    disp_canvas_index[5]);
-#ifndef TV_3D_FUNCTION_OPEN
-		VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS0 + cur_dev->viu_off,
-				  disp_canvas[0]);
-		VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS1 + cur_dev->viu_off,
-				  disp_canvas[0]);
-		VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS0 + cur_dev->viu_off,
-				  disp_canvas[1]);
-		VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS1 + cur_dev->viu_off,
-				  disp_canvas[1]);
-#else
-		VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS0 + cur_dev->viu_off,
-				  disp_canvas[0]);
-		VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS0 + cur_dev->viu_off,
-				  disp_canvas[0]);
-		if (cur_frame_par && (cur_frame_par->vpp_2pic_mode == 1)) {
-			VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS1 + cur_dev->viu_off,
-					  disp_canvas[0]);
-			VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS1 + cur_dev->viu_off,
+		if (platform_type == 0) {
+			VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS0 + cur_dev->viu_off,
 					  disp_canvas[0]);
-		} else {
 			VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS1 + cur_dev->viu_off,
+					  disp_canvas[0]);
+			VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS0 + cur_dev->viu_off,
 					  disp_canvas[1]);
 			VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS1 + cur_dev->viu_off,
 					  disp_canvas[1]);
+		} else {
+			VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS0 + cur_dev->viu_off,
+					  disp_canvas[0]);
+			VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS0 + cur_dev->viu_off,
+					  disp_canvas[0]);
+			if (cur_frame_par &&
+			(cur_frame_par->vpp_2pic_mode == 1)) {
+				VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS1 +
+				cur_dev->viu_off,
+				disp_canvas[0]);
+				VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS1 +
+				cur_dev->viu_off,
+				disp_canvas[0]);
+			} else {
+				VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS1 +
+				cur_dev->viu_off,
+				disp_canvas[1]);
+				VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS1 +
+				cur_dev->viu_off,
+				disp_canvas[1]);
+			}
+			/* VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS0 +
+			cur_dev->viu_off, disp_canvas[0]); */
+			/* VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS1 +
+			cur_dev->viu_off, disp_canvas[1]); */
 		}
-		/* VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS0 +
-		cur_dev->viu_off, disp_canvas[0]); */
-		/* VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS1 +
-		cur_dev->viu_off, disp_canvas[1]); */
-#endif
 #if HAS_VPU_PROT
 		if (has_vpu_prot()) {
 			if (use_prot) {
@@ -2265,10 +2399,9 @@ static void vsync_toggle_frame(struct vframe_s *vf)
 	    (cur_dispbuf->bufWidth != vf->bufWidth) ||
 	    (cur_dispbuf->width != vf->width) ||
 	    (cur_dispbuf->height != vf->height) ||
-#ifdef TV_3D_FUNCTION_OPEN
-	    ((process_3d_type & MODE_3D_AUTO) &&
-	     (cur_dispbuf->trans_fmt != vf->trans_fmt)) ||
-#endif
+	    (cur_dispbuf->bitdepth != vf->bitdepth) ||
+	     (cur_dispbuf->trans_fmt != vf->trans_fmt) ||
+	     (last_process_3d_type != process_3d_type) ||
 	    (cur_dispbuf->ratio_control != vf->ratio_control) ||
 	    ((cur_dispbuf->type_backup & VIDTYPE_INTERLACE) !=
 	     (vf->type_backup & VIDTYPE_INTERLACE)) ||
@@ -2278,6 +2411,9 @@ static void vsync_toggle_frame(struct vframe_s *vf)
 	    || video_prot.angle_changed
 #endif
 	    ) {
+	    last_process_3d_type = process_3d_type;
+		atomic_inc(&video_sizechange);
+		wake_up_interruptible(&amvideo_sizechange_wait);
 		amlog_mask(LOG_MASK_FRAMEINFO,
 			   "%s %dx%d  ar=0x%x\n",
 			   ((vf->type & VIDTYPE_TYPEMASK) ==
@@ -2404,7 +2540,10 @@ static void vsync_toggle_frame(struct vframe_s *vf)
 		/* #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8 */
 		if ((get_cpu_type() >= MESON_CPU_MAJOR_ID_M8)
 		    && !is_meson_mtvd_cpu()) {
-			if ((vf->width > 1920) && (vf->height > 1088)) {
+			if (((vf->width > 1920) && (vf->height > 1088)) ||
+				((vf->type & VIDTYPE_COMPRESS) &&
+				 (vf->compWidth > 1920) &&
+				 (vf->compHeight > 1080))) {
 				if (vpu_clk_level == 0) {
 					vpu_clk_level = 1;
 
@@ -2441,7 +2580,12 @@ static void vsync_toggle_frame(struct vframe_s *vf)
 				EnableVideoLayer2();
 		}
 	}
-
+	if (cur_dispbuf && (cur_dispbuf->type != vf->type)) {
+		if (vf->type & VIDTYPE_MVC)
+			EnableVideoLayer2();
+		else
+			DisableVideoLayer2();
+	}
 	cur_dispbuf = vf;
 	if (keep_video_on && cur_dispbuf != &vf_local) {
 		pr_info("toggle new frame after keep.\n");
@@ -2463,9 +2607,13 @@ static void viu_set_dcu(struct vpp_frame_par_s *frame_par, struct vframe_s *vf)
 	u32 pat, loop;
 	static const u32 vpat[] = { 0, 0x8, 0x9, 0xa, 0xb, 0xc };
 	u32 u, v;
+	u32 type = vf->type, bit_mode = 0;
 
 	if (get_cpu_type() >= MESON_CPU_MAJOR_ID_GXBB) {
-		if (vf->type & VIDTYPE_COMPRESS) {
+		if (frame_par->nocomp)
+			type &= ~VIDTYPE_COMPRESS;
+
+		if (type & VIDTYPE_COMPRESS) {
 			r = (3 << 24) |
 			    (17 << 16) |
 			    (1 << 14) | /*burst1 1*/
@@ -2475,7 +2623,10 @@ static void viu_set_dcu(struct vpp_frame_par_s *frame_par, struct vframe_s *vf)
 				r |= 0x33;
 			if (frame_par->vscale_skip_count)
 				r |= 0xcc;
-
+#ifdef TV_REVERSE
+			if (reverse)
+				r |= (1<<26)|(1<<27);
+#endif
 			if (vf->bitdepth & BITDEPTH_SAVING_MODE)
 				r |= (1<<28); /* mem_saving_mode */
 			VSYNC_WR_MPEG_REG(AFBC_MODE, r);
@@ -2488,18 +2639,62 @@ static void viu_set_dcu(struct vpp_frame_par_s *frame_par, struct vframe_s *vf)
 				0x80 << (u + 10) |
 				0x80 << v);
 			/* chroma formatter */
-			VSYNC_WR_MPEG_REG(AFBC_VD_CFMT_CTRL,
-				HFORMATTER_RRT_PIXEL0 |
-				HFORMATTER_YC_RATIO_2_1 |
-				HFORMATTER_EN |
-				VFORMATTER_RPTLINE0_EN |
-				/*(0xa << VFORMATTER_INIPHASE_BIT) |*/
-				(0x8 << VFORMATTER_PHASE_BIT) |
-				VFORMATTER_EN);
+#ifdef TV_REVERSE
+			if (reverse) {
+				VSYNC_WR_MPEG_REG(AFBC_VD_CFMT_CTRL,
+					/*HFORMATTER_RRT_PIXEL0 |*/
+					HFORMATTER_YC_RATIO_2_1 |
+					HFORMATTER_EN |
+					VFORMATTER_RPTLINE0_EN |
+					/*(0xa << VFORMATTER_INIPHASE_BIT) |*/
+					(0x8 << VFORMATTER_PHASE_BIT) |
+					VFORMATTER_EN);
+			} else
+#endif
+			{
+				VSYNC_WR_MPEG_REG(AFBC_VD_CFMT_CTRL,
+					HFORMATTER_RRT_PIXEL0 |
+					HFORMATTER_YC_RATIO_2_1 |
+					HFORMATTER_EN |
+					VFORMATTER_RPTLINE0_EN |
+					/*(0xa << VFORMATTER_INIPHASE_BIT) |*/
+					(0x8 << VFORMATTER_PHASE_BIT) |
+					VFORMATTER_EN);
+			}
+			if ((READ_VCBUS_REG(DI_POST_CTRL) & 0x100) == 0)
+				VSYNC_WR_MPEG_REG_BITS(VIU_MISC_CTRL0 +
+					cur_dev->viu_off, 0, 16, 3);
 
+			VSYNC_WR_MPEG_REG_BITS(VIU_MISC_CTRL0 +
+					cur_dev->viu_off, 1, 20, 1);
 			return;
 
 		} else {
+			if (vf->bitdepth & BITDEPTH_Y10) {
+				if (vf->type & VIDTYPE_VIU_444) {
+					bit_mode = 2;
+				} else {
+					if (vf->bitdepth & FULL_PACK_422_MODE)
+						bit_mode = 3;
+					else
+						bit_mode = 1;
+				}
+			} else {
+				bit_mode = 0;
+			}
+			VSYNC_WR_MPEG_REG_BITS(VD1_IF0_GEN_REG3,
+				(bit_mode&0x3), 8, 2);
+			VSYNC_WR_MPEG_REG_BITS(DI_IF1_GEN_REG3,
+				(bit_mode&0x3), 8, 2);
+			if (is_meson_txl_cpu())
+				VSYNC_WR_MPEG_REG_BITS(DI_IF2_GEN_REG3,
+				(bit_mode&0x3), 8, 2);
+			if ((READ_VCBUS_REG(DI_POST_CTRL) & 0x100) == 0)
+				VSYNC_WR_MPEG_REG_BITS(VIU_MISC_CTRL0 +
+					cur_dev->viu_off, 0, 16, 3);
+
+			VSYNC_WR_MPEG_REG_BITS(VIU_MISC_CTRL0 +
+					cur_dev->viu_off, 0, 20, 1);
 			VSYNC_WR_MPEG_REG(AFBC_ENABLE, 0);
 		}
 	}
@@ -2512,10 +2707,10 @@ static void viu_set_dcu(struct vpp_frame_par_s *frame_par, struct vframe_s *vf)
 	if (debug_flag & DEBUG_FLAG_GOFIELD_MANUL)
 		r |= 1<<7; /*for manul triggle gofiled.*/
 
-	if ((vf->type & VIDTYPE_VIU_SINGLE_PLANE) == 0)
+	if ((type & VIDTYPE_VIU_SINGLE_PLANE) == 0)
 		r |= VDIF_SEPARATE_EN;
 	else {
-		if (vf->type & VIDTYPE_VIU_422)
+		if (type & VIDTYPE_VIU_422)
 			r |= VDIF_FORMAT_422;
 		else {
 			r |= VDIF_FORMAT_RGB888_YUV444 |
@@ -2540,7 +2735,7 @@ static void viu_set_dcu(struct vpp_frame_par_s *frame_par, struct vframe_s *vf)
 
 	/* #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6 */
 	if (get_cpu_type() >= MESON_CPU_MAJOR_ID_M6) {
-		if (vf->type & VIDTYPE_VIU_NV21) {
+		if (type & VIDTYPE_VIU_NV21) {
 			VSYNC_WR_MPEG_REG_BITS(VD1_IF0_GEN_REG2 +
 				cur_dev->viu_off, 1, 0, 1);
 		} else {
@@ -2563,54 +2758,94 @@ static void viu_set_dcu(struct vpp_frame_par_s *frame_par, struct vframe_s *vf)
 				}
 			}
 		}
+#else
+#ifdef TV_REVERSE
+		if (reverse) {
+			VSYNC_WR_MPEG_REG_BITS((VD1_IF0_GEN_REG2 +
+				cur_dev->viu_off), 0xf, 2, 4);
+			if (vf->type & VIDTYPE_MVC)
+				VSYNC_WR_MPEG_REG_BITS((VD2_IF0_GEN_REG2 +
+					cur_dev->viu_off), 0xf, 2, 4);
+		} else {
+			VSYNC_WR_MPEG_REG_BITS((VD1_IF0_GEN_REG2 +
+				cur_dev->viu_off), 0, 2, 4);
+			if (vf->type & VIDTYPE_MVC)
+				VSYNC_WR_MPEG_REG_BITS((VD2_IF0_GEN_REG2 +
+					cur_dev->viu_off), 0, 2, 4);
+		}
+#endif
 #endif
 	}
 	/* #endif */
 
 	/* chroma formatter */
-	if (vf->type & VIDTYPE_VIU_444) {
+	if (type & VIDTYPE_VIU_444) {
 		VSYNC_WR_MPEG_REG(VIU_VD1_FMT_CTRL + cur_dev->viu_off,
 				  HFORMATTER_YC_RATIO_1_1);
 		VSYNC_WR_MPEG_REG(VIU_VD2_FMT_CTRL + cur_dev->viu_off,
 				  HFORMATTER_YC_RATIO_1_1);
-	} else if (vf->type & VIDTYPE_VIU_FIELD) {
+	} else if (type & VIDTYPE_VIU_FIELD) {
 		vini_phase = 0xc << VFORMATTER_INIPHASE_BIT;
 		vphase =
-		    ((vf->type & VIDTYPE_VIU_422) ? 0x10 : 0x08) <<
+		    ((type & VIDTYPE_VIU_422) ? 0x10 : 0x08) <<
 		    VFORMATTER_PHASE_BIT;
-
-		VSYNC_WR_MPEG_REG(VIU_VD1_FMT_CTRL + cur_dev->viu_off,
+	if (is_meson_gxtvbb_cpu() || is_meson_txl_cpu()) {
+		if ((vf->width >= 3840) &&
+			(vf->height >= 2160) &&
+			(type & VIDTYPE_VIU_422)) {
+			VSYNC_WR_MPEG_REG(VIU_VD1_FMT_CTRL + cur_dev->viu_off,
+			HFORMATTER_YC_RATIO_2_1 | HFORMATTER_EN |
+			VFORMATTER_RPTLINE0_EN | vini_phase | vphase);
+
+			VSYNC_WR_MPEG_REG(VIU_VD2_FMT_CTRL + cur_dev->viu_off,
+			HFORMATTER_RRT_PIXEL0 | HFORMATTER_YC_RATIO_2_1 |
+			HFORMATTER_EN | VFORMATTER_RPTLINE0_EN |
+			vini_phase | vphase);
+			} else {
+			VSYNC_WR_MPEG_REG(VIU_VD1_FMT_CTRL + cur_dev->viu_off,
+			HFORMATTER_YC_RATIO_2_1 | HFORMATTER_EN |
+			VFORMATTER_RPTLINE0_EN | vini_phase | vphase |
+			VFORMATTER_EN);
+
+			VSYNC_WR_MPEG_REG(VIU_VD2_FMT_CTRL + cur_dev->viu_off,
+			HFORMATTER_YC_RATIO_2_1 | HFORMATTER_EN |
+			VFORMATTER_RPTLINE0_EN | vini_phase | vphase |
+			VFORMATTER_EN);
+			}
+		} else {
+			VSYNC_WR_MPEG_REG(VIU_VD1_FMT_CTRL + cur_dev->viu_off,
 				HFORMATTER_YC_RATIO_2_1 | HFORMATTER_EN |
 				VFORMATTER_RPTLINE0_EN |
 				vini_phase | vphase |
 				VFORMATTER_EN);
 
-		VSYNC_WR_MPEG_REG(VIU_VD2_FMT_CTRL + cur_dev->viu_off,
+			VSYNC_WR_MPEG_REG(VIU_VD2_FMT_CTRL + cur_dev->viu_off,
 				HFORMATTER_YC_RATIO_2_1 | HFORMATTER_EN |
 				VFORMATTER_RPTLINE0_EN | vini_phase | vphase |
 				VFORMATTER_EN);
-	} else if (vf->type & VIDTYPE_MVC) {
+		}
+	} else if (type & VIDTYPE_MVC) {
 		VSYNC_WR_MPEG_REG(VIU_VD1_FMT_CTRL + cur_dev->viu_off,
 				HFORMATTER_YC_RATIO_2_1 |
 				HFORMATTER_EN |
 				VFORMATTER_RPTLINE0_EN |
 				(0xe << VFORMATTER_INIPHASE_BIT) |
-				(((vf->type & VIDTYPE_VIU_422) ? 0x10 : 0x08)
+				(((type & VIDTYPE_VIU_422) ? 0x10 : 0x08)
 				<< VFORMATTER_PHASE_BIT) | VFORMATTER_EN);
 		VSYNC_WR_MPEG_REG(VIU_VD2_FMT_CTRL + cur_dev->viu_off,
 				HFORMATTER_YC_RATIO_2_1 | HFORMATTER_EN |
 				VFORMATTER_RPTLINE0_EN | (0xa <<
 				VFORMATTER_INIPHASE_BIT) |
-				(((vf->type & VIDTYPE_VIU_422) ? 0x10 : 0x08)
+				(((type & VIDTYPE_VIU_422) ? 0x10 : 0x08)
 				<< VFORMATTER_PHASE_BIT) | VFORMATTER_EN);
-	} else if ((vf->type & VIDTYPE_INTERLACE)
+	} else if ((type & VIDTYPE_INTERLACE)
 		   &&
-		   (((vf->type & VIDTYPE_TYPEMASK) == VIDTYPE_INTERLACE_TOP))) {
+		   (((type & VIDTYPE_TYPEMASK) == VIDTYPE_INTERLACE_TOP))) {
 		VSYNC_WR_MPEG_REG(VIU_VD1_FMT_CTRL + cur_dev->viu_off,
 				HFORMATTER_YC_RATIO_2_1 | HFORMATTER_EN |
 				VFORMATTER_RPTLINE0_EN | (0xe <<
 				VFORMATTER_INIPHASE_BIT) |
-				(((vf->type & VIDTYPE_VIU_422) ? 0x10 : 0x08)
+				(((type & VIDTYPE_VIU_422) ? 0x10 : 0x08)
 				<< VFORMATTER_PHASE_BIT) | VFORMATTER_EN);
 
 		VSYNC_WR_MPEG_REG(VIU_VD2_FMT_CTRL + cur_dev->viu_off,
@@ -2618,7 +2853,7 @@ static void viu_set_dcu(struct vpp_frame_par_s *frame_par, struct vframe_s *vf)
 				HFORMATTER_EN |
 				VFORMATTER_RPTLINE0_EN |
 				(0xe << VFORMATTER_INIPHASE_BIT) |
-				(((vf->type & VIDTYPE_VIU_422) ? 0x10 : 0x08)
+				(((type & VIDTYPE_VIU_422) ? 0x10 : 0x08)
 				<< VFORMATTER_PHASE_BIT) | VFORMATTER_EN);
 	} else {
 		VSYNC_WR_MPEG_REG(VIU_VD1_FMT_CTRL + cur_dev->viu_off,
@@ -2626,7 +2861,7 @@ static void viu_set_dcu(struct vpp_frame_par_s *frame_par, struct vframe_s *vf)
 				  HFORMATTER_EN |
 				  VFORMATTER_RPTLINE0_EN |
 				  (0xa << VFORMATTER_INIPHASE_BIT) |
-				  (((vf->type & VIDTYPE_VIU_422) ? 0x10 : 0x08)
+				  (((type & VIDTYPE_VIU_422) ? 0x10 : 0x08)
 				   << VFORMATTER_PHASE_BIT) | VFORMATTER_EN);
 
 		VSYNC_WR_MPEG_REG(VIU_VD2_FMT_CTRL + cur_dev->viu_off,
@@ -2634,7 +2869,7 @@ static void viu_set_dcu(struct vpp_frame_par_s *frame_par, struct vframe_s *vf)
 				HFORMATTER_EN |
 				VFORMATTER_RPTLINE0_EN |
 				(0xa << VFORMATTER_INIPHASE_BIT) |
-				(((vf->type & VIDTYPE_VIU_422) ? 0x10 : 0x08)
+				(((type & VIDTYPE_VIU_422) ? 0x10 : 0x08)
 				<< VFORMATTER_PHASE_BIT) | VFORMATTER_EN);
 	}
 #if HAS_VPU_PROT
@@ -2653,15 +2888,15 @@ static void viu_set_dcu(struct vpp_frame_par_s *frame_par, struct vframe_s *vf)
 	/* LOOP/SKIP pattern */
 	pat = vpat[frame_par->vscale_skip_count];
 
-	if (vf->type & VIDTYPE_VIU_FIELD) {
+	if (type & VIDTYPE_VIU_FIELD) {
 		loop = 0;
 
-		if (vf->type & VIDTYPE_INTERLACE)
+		if (type & VIDTYPE_INTERLACE)
 			pat = vpat[frame_par->vscale_skip_count >> 1];
-	} else if (vf->type & VIDTYPE_MVC) {
+	} else if (type & VIDTYPE_MVC) {
 		loop = 0x11;
 		pat = 0x80;
-	} else if ((vf->type & VIDTYPE_TYPEMASK) == VIDTYPE_INTERLACE_TOP) {
+	} else if ((type & VIDTYPE_TYPEMASK) == VIDTYPE_INTERLACE_TOP) {
 		loop = 0x11;
 		pat <<= 4;
 	} else
@@ -2684,7 +2919,7 @@ static void viu_set_dcu(struct vpp_frame_par_s *frame_par, struct vframe_s *vf)
 	VSYNC_WR_MPEG_REG(VD1_IF0_LUMA1_RPT_PAT + cur_dev->viu_off, pat);
 	VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA1_RPT_PAT + cur_dev->viu_off, pat);
 
-	if (vf->type & VIDTYPE_MVC)
+	if (type & VIDTYPE_MVC)
 		pat = 0x88;
 
 	VSYNC_WR_MPEG_REG(VD2_IF0_LUMA0_RPT_PAT, pat);
@@ -2692,79 +2927,97 @@ static void viu_set_dcu(struct vpp_frame_par_s *frame_par, struct vframe_s *vf)
 	VSYNC_WR_MPEG_REG(VD2_IF0_LUMA1_RPT_PAT, pat);
 	VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA1_RPT_PAT, pat);
 
-#ifndef TV_3D_FUNCTION_OPEN
-	/* picture 0/1 control */
-	if (((vf->type & VIDTYPE_INTERLACE) == 0) &&
-	    ((vf->type & VIDTYPE_VIU_FIELD) == 0) &&
-	    ((vf->type & VIDTYPE_MVC) == 0)) {
-		/* progressive frame in two pictures */
-		VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL +
-		cur_dev->viu_off, (2 << 26) |	/* two pic mode */
-		(2 << 24) |	/* use own last line */
-		(2 << 8) |	/* toggle pic 0 and 1, use pic0 first */
-		(0x01));	/* loop pattern */
-		VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL + cur_dev->viu_off,
-		(2 << 26) |	/* two pic mode */
-		(2 << 24) |	/* use own last line */
-		(2 << 8) |	/* toggle pic 0 and 1, use pic0 first */
-		(0x01));	/* loop pattern */
-	} else {
-		VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL + cur_dev->viu_off, 0);
-		VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL + cur_dev->viu_off, 0);
-		VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_PSEL, 0);
-		VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_PSEL, 0);
-	}
-#else
-	/* picture 0/1 control */
-	if ((((vf->type & VIDTYPE_INTERLACE) == 0) &&
-	     ((vf->type & VIDTYPE_VIU_FIELD) == 0) &&
-	     ((vf->type & VIDTYPE_MVC) == 0)) ||
-	    (frame_par->vpp_2pic_mode & 0x3)) {
-		/* progressive frame in two pictures */
-		if (frame_par->vpp_2pic_mode & VPP_PIC1_FIRST) {
+	if (platform_type == 0) {
+		/* picture 0/1 control */
+		if (((type & VIDTYPE_INTERLACE) == 0) &&
+			((type & VIDTYPE_VIU_FIELD) == 0) &&
+			((type & VIDTYPE_MVC) == 0)) {
+			/* progressive frame in two pictures */
 			VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL +
 			cur_dev->viu_off, (2 << 26) |	/* two pic mode */
 			(2 << 24) |	/* use own last line */
-			(1 << 8) |	/* toggle pic 0 and 1, use pic1 first*/
+			(2 << 8) |	/* toggle pic 0 and 1, use pic0 first */
 			(0x01));	/* loop pattern */
 			VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL +
-			cur_dev->viu_off, (2 << 26) |	/* two pic mode */
+			cur_dev->viu_off,
+			(2 << 26) |	/* two pic mode */
 			(2 << 24) |	/* use own last line */
-			(1 << 8) |	/* toggle pic 0 and 1,use pic1 first */
+			(2 << 8) |	/* toggle pic 0 and 1, use pic0 first */
 			(0x01));	/* loop pattern */
 		} else {
 			VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL +
-			cur_dev->viu_off, (2 << 26) |	/* two pic mode */
-			(2 << 24) |	/* use own last line */
-			(2 << 8) |	/* toggle pic 0 and 1, use pic0 first */
-			(0x01));	/* loop pattern */
+			cur_dev->viu_off, 0);
 			VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL +
-			cur_dev->viu_off, (2 << 26) |	/* two pic mode */
-			(2 << 24) |/* use own last line */
-			(2 << 8)  |/* toggle pic 0 and 1, use pic0 first */
-			(0x01));/* loop pattern */
-
+			cur_dev->viu_off, 0);
+			VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_PSEL, 0);
+			VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_PSEL, 0);
 		}
 	} else {
-		if (frame_par->vpp_2pic_mode & VPP_SELECT_PIC1) {
-			VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL + cur_dev->viu_off,
-					  0x4000000);
-			VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL +
-					  cur_dev->viu_off, 0x4000000);
-			VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_PSEL + cur_dev->viu_off,
-					  0x4000000);
-			VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_PSEL +
-					  cur_dev->viu_off, 0x4000000);
+		/* picture 0/1 control */
+		if ((((type & VIDTYPE_INTERLACE) == 0) &&
+			 ((type & VIDTYPE_VIU_FIELD) == 0) &&
+			 ((type & VIDTYPE_MVC) == 0)) ||
+			(frame_par->vpp_2pic_mode & 0x3)) {
+			/* progressive frame in two pictures */
+			if (frame_par->vpp_2pic_mode & VPP_PIC1_FIRST) {
+				VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL +
+				cur_dev->viu_off, (2 << 26) |
+				/* two pic mode */
+				(2 << 24) |
+				/* use own last line */
+				(1 << 8) |
+				/* toggle pic 0 and 1, use pic1 first*/
+				(0x01));
+				/* loop pattern */
+				VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL +
+				cur_dev->viu_off, (2 << 26) |
+				/* two pic mode */
+				(2 << 24) |
+				/* use own last line */
+				(1 << 8) |
+				/* toggle pic 0 and 1,use pic1 first */
+				(0x01));
+				/* loop pattern */
+			} else {
+				VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL +
+				cur_dev->viu_off, (2 << 26) |
+				/* two pic mode */
+				(2 << 24) |
+				/* use own last line */
+				(2 << 8) |
+				/* toggle pic 0 and 1, use pic0 first */
+				(0x01));
+				/* loop pattern */
+				VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL +
+				cur_dev->viu_off, (2 << 26) |
+				/* two pic mode */
+				(2 << 24) |
+				/* use own last line */
+				(2 << 8) |
+				/* toggle pic 0 and 1, use pic0 first */
+				(0x01));
+				/* loop pattern */
+			}
 		} else {
-			VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL + cur_dev->viu_off,
-					  0);
-			VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL +
-					  cur_dev->viu_off, 0);
-			VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_PSEL, 0);
-			VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_PSEL, 0);
+			if (frame_par->vpp_2pic_mode & VPP_SELECT_PIC1) {
+				VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL +
+				cur_dev->viu_off, 0);
+				VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL +
+				cur_dev->viu_off, 0);
+				VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_PSEL +
+				cur_dev->viu_off, 0);
+				VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_PSEL +
+				cur_dev->viu_off, 0);
+			} else {
+				VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL +
+				cur_dev->viu_off, 0);
+				VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL +
+						  cur_dev->viu_off, 0);
+				VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_PSEL, 0);
+				VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_PSEL, 0);
+			}
 		}
 	}
-#endif
 }
 
 #if 1				/* MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6 */
@@ -2956,7 +3209,8 @@ static inline bool vpts_expire(struct vframe_s *cur_vf,
 			if (next_vf->pts != 0)
 				tsync_avevent_locked(VIDEO_TSTAMP_DISCONTINUITY,
 						     next_vf->pts);
-			else
+			else if (next_vf->pts == 0 &&
+				(tsync_get_mode() != TSYNC_MODE_PCRMASTER))
 				tsync_avevent_locked(VIDEO_TSTAMP_DISCONTINUITY,
 						     pts);
 
@@ -2968,9 +3222,12 @@ static inline bool vpts_expire(struct vframe_s *cur_vf,
 			/* pts==0 is a keep frame maybe. */
 			if (systime > next_vf->pts || next_vf->pts == 0)
 				return true;
+			if (omx_secret_mode == true)
+				return true;
 
 			return false;
-		}
+		} else if (omx_secret_mode == true)
+			return true;
 	}
 #if 1
 	if (vsync_pts_inc_upint && (!freerun_mode)) {
@@ -3233,11 +3490,13 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
 	s32 i, vout_type;
 	struct vframe_s *vf;
 	unsigned long flags;
+#ifdef CONFIG_TVIN_VDIN
 	struct vdin_v4l2_ops_s *vdin_ops = NULL;
 	struct vdin_arg_s arg;
+#endif
 	bool show_nosync = false;
 	u32 vpp_misc_save, vpp_misc_set;
-
+	int first_set = 0;
 #ifdef CONFIG_AM_VIDEO_LOG
 	int toggle_cnt;
 #endif
@@ -3331,10 +3590,14 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
 	}
 #endif
 
-	/* #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8 */
-	if ((get_cpu_type() >= MESON_CPU_MAJOR_ID_M8) && !is_meson_mtvd_cpu()) {
-		vdin_ops = NULL;	/* /get_vdin_v4l2_ops(); */
-		if (vdin_ops) {
+#if defined(CONFIG_AM_VECM)
+	amvecm_on_vs(vf);
+#endif
+#ifdef CONFIG_TVIN_VDIN
+	/* patch for m8 4k2k wifidisplay bandwith bottleneck */
+	if (get_cpu_type() == MESON_CPU_MAJOR_ID_M8) {
+		vdin_ops = get_vdin_v4l2_ops();
+		if (vdin_ops && vdin_ops->tvin_vdin_func) {
 			arg.cmd = VDIN_CMD_ISR;
 			vdin_ops->tvin_vdin_func(1, &arg);
 #ifdef CONFIG_AM_VIDEO2
@@ -3342,7 +3605,7 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
 #endif
 		}
 	}
-	/* #endif */
+#endif
 	vout_type = detect_vout_type();
 	hold_line = calc_hold_line();
 	if (vsync_pts_inc_upint) {
@@ -3463,7 +3726,7 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
 						     (vf->pts) ? vf->pts :
 						     timestamp_vpts_get());
 
-			if (show_first_frame_nosync)
+			if (show_first_frame_nosync || show_first_picture)
 				show_nosync = true;
 
 			if (slowsync_repeat_enable)
@@ -3479,12 +3742,17 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
 					u32 cur_index =
 					    READ_VCBUS_REG(VD1_IF0_CANVAS0 +
 							   cur_dev->viu_off);
-					if (!((get_cpu_type() >=
-						MESON_CPU_MAJOR_ID_GXBB) &&
-						(cur_dispbuf->type &
-						  VIDTYPE_COMPRESS)))
-						cur_dispbuf->canvas0Addr
-							= cur_index;
+					if ((get_cpu_type() >=
+					MESON_CPU_MAJOR_ID_GXBB) &&
+					(cur_dispbuf->type &
+					VIDTYPE_COMPRESS)) {
+						cur_dispbuf->compHeadAddr =
+						READ_VCBUS_REG(AFBC_HEAD_BADDR)
+						<< 4;
+					} else {
+						cur_dispbuf->canvas0Addr =
+						cur_index;
+					}
 				}
 				vsync_toggle_frame(cur_dispbuf);
 			} else
@@ -3502,10 +3770,12 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
 
 	if (!vf)
 		underflow++;
-#ifdef TV_3D_FUNCTION_OPEN
-	/* toggle_3d_fa_frame  determine the out frame is L or R or blank */
-	judge_3d_fa_out_mode();
-#endif
+	if (platform_type == 1) {
+		/* toggle_3d_fa_frame
+		* determine the out frame is L or R or blank */
+		judge_3d_fa_out_mode();
+	}
+
 	while (vf) {
 		if (vpts_expire(cur_dispbuf, vf) || show_nosync) {
 			amlog_mask(LOG_MASK_TIMESTAMP,
@@ -3518,7 +3788,7 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
 				      "skipped\n");
 
 #if defined(CONFIG_AM_VECM)
-			amvecm_on_vs(vf);
+			refresh_on_vs(vf);
 #endif
 
 			vf = video_vf_get();
@@ -3527,17 +3797,18 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
 			if (video_vf_dirty_put(vf))
 				break;
 			force_blackout = 0;
-#ifdef TV_3D_FUNCTION_OPEN
-
-			if (vf) {
-				if (last_mode_3d != vf->mode_3d_enable) {
-					last_mode_3d = vf->mode_3d_enable;
-					mode_3d_changed = 1;
+			if ((platform_type == 1) ||
+			(platform_type == 0)) {
+				if (vf) {
+					if (last_mode_3d !=
+					vf->mode_3d_enable) {
+						last_mode_3d =
+						vf->mode_3d_enable;
+						mode_3d_changed = 1;
+					}
+					video_3d_format = vf->trans_fmt;
 				}
-				video_3d_format = vf->trans_fmt;
 			}
-#endif
-
 			vsync_toggle_frame(vf);
 			if (trickmode_fffb == 1) {
 				trickmode_vpts = vf->pts;
@@ -3619,9 +3890,7 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
 				} else
 					vsync_toggle_frame(cur_dispbuf);
 			}
-#if defined(CONFIG_AM_VECM)
-			amvecm_on_vs(vf);
-#endif
+
 			break;
 		}
 
@@ -3648,13 +3917,12 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
 		cur_frame_par = next_frame_par;
 		frame_par_di_set = 1;
 	}
-#ifdef TV_3D_FUNCTION_OPEN
-
-	if (mode_3d_changed) {
-		mode_3d_changed = 0;
-		frame_par_force_to_set = 1;
+	if ((platform_type == 1) || (platform_type == 0)) {
+		if (mode_3d_changed) {
+			mode_3d_changed = 0;
+			frame_par_force_to_set = 1;
+		}
 	}
-#endif
 	if (cur_dispbuf) {
 		struct f2v_vphase_s *vphase;
 		u32 vin_type = cur_dispbuf->type & VIDTYPE_TYPEMASK;
@@ -3663,7 +3931,8 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
 			if (frame_par_ready_to_set)
 				viu_set_dcu(cur_frame_par, cur_dispbuf);
 		}
-
+		{
+#if 0
 		if (get_cpu_type() >= MESON_CPU_MAJOR_ID_GXBB) {
 			if (cur_dispbuf->type & VIDTYPE_COMPRESS) {
 				/*SET_VCBUS_REG_MASK(VIU_MISC_CTRL0,
@@ -3677,151 +3946,160 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
 					cur_dev->viu_off, 0, 20, 1);
 			}
 		}
+#endif
 
-#ifdef TV_3D_FUNCTION_OPEN
-		if ((cur_frame_par->hscale_skip_count)
-		    && (cur_dispbuf->type & VIDTYPE_VIU_FIELD)) {
-			VSYNC_WR_MPEG_REG_BITS(VIU_VD1_FMT_CTRL +
-				cur_dev->viu_off, 0, 20, 1);
-			/* HFORMATTER_EN */
-			VSYNC_WR_MPEG_REG_BITS(VIU_VD2_FMT_CTRL +
-				cur_dev->viu_off, 0, 20, 1);
-			/* HFORMATTER_EN */
-		}
-		if (process_3d_type & MODE_3D_OUT_FA_MASK) {
-			if (toggle_3d_fa_frame == OUT_FA_A_FRAME) {
-				VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
-					cur_dev->vpp_off, 1, 14, 1);
-				/* VPP_VD1_PREBLEND disable */
-				VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
-					cur_dev->vpp_off, 1, 10, 1);
-				/* VPP_VD1_POSTBLEND disable */
-				VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL +
-						  cur_dev->viu_off, 0x4000000);
-				VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL +
-						  cur_dev->viu_off, 0x4000000);
-				VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_PSEL +
-						  cur_dev->viu_off, 0x4000000);
-				VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_PSEL +
-						  cur_dev->viu_off, 0x4000000);
-			} else if (OUT_FA_B_FRAME == toggle_3d_fa_frame) {
-				VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
+		if (platform_type == 1) {
+			if ((cur_frame_par->hscale_skip_count)
+				&& (cur_dispbuf->type & VIDTYPE_VIU_FIELD)) {
+				VSYNC_WR_MPEG_REG_BITS(VIU_VD1_FMT_CTRL +
+					cur_dev->viu_off, 0, 20, 1);
+				/* HFORMATTER_EN */
+				VSYNC_WR_MPEG_REG_BITS(VIU_VD2_FMT_CTRL +
+					cur_dev->viu_off, 0, 20, 1);
+				/* HFORMATTER_EN */
+			}
+			if (process_3d_type & MODE_3D_OUT_FA_MASK) {
+				if (toggle_3d_fa_frame == OUT_FA_A_FRAME) {
+					VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
+						cur_dev->vpp_off, 1, 14, 1);
+					/* VPP_VD1_PREBLEND disable */
+					VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
+						cur_dev->vpp_off, 1, 10, 1);
+					/* VPP_VD1_POSTBLEND disable */
+					VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL +
+					cur_dev->viu_off, 0x4000000);
+					VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL +
+					cur_dev->viu_off, 0x4000000);
+					VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_PSEL +
+					cur_dev->viu_off, 0x4000000);
+					VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_PSEL +
+					cur_dev->viu_off, 0x4000000);
+				} else if (OUT_FA_B_FRAME ==
+				toggle_3d_fa_frame) {
+					VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
 					cur_dev->vpp_off, 1, 14, 1);
-				/* VPP_VD1_PREBLEND disable */
-				VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
+					/* VPP_VD1_PREBLEND disable */
+					VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
 					cur_dev->vpp_off, 1, 10, 1);
-				/* VPP_VD1_POSTBLEND disable */
-				VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL +
-						  cur_dev->viu_off, 0);
-				VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL +
-						  cur_dev->viu_off, 0);
-				VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_PSEL, 0);
-				VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_PSEL, 0);
-
-			} else if (toggle_3d_fa_frame == OUT_FA_BANK_FRAME) {
-				/* output a banking frame */
-				VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
-					cur_dev->vpp_off, 0, 14, 1);
-				/* VPP_VD1_PREBLEND disable */
-				VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
-				cur_dev->vpp_off, 0, 10, 1);
-				/* VPP_VD1_POSTBLEND disable */
+					/* VPP_VD1_POSTBLEND disable */
+					VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL +
+					cur_dev->viu_off, 0);
+					VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL +
+					cur_dev->viu_off, 0);
+					VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_PSEL, 0);
+					VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_PSEL,
+					0);
+				} else if (toggle_3d_fa_frame ==
+				OUT_FA_BANK_FRAME) {
+					/* output a banking frame */
+					VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
+						cur_dev->vpp_off, 0, 14, 1);
+					/* VPP_VD1_PREBLEND disable */
+					VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
+					cur_dev->vpp_off, 0, 10, 1);
+					/* VPP_VD1_POSTBLEND disable */
+				}
 			}
-		}
-		if ((process_3d_type & MODE_3D_OUT_TB)
-		    || (process_3d_type & MODE_3D_OUT_LR)) {
-			if (cur_frame_par->vpp_2pic_mode & VPP_PIC1_FIRST) {
-				VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL +
-						  cur_dev->viu_off, 0x4000000);
-				VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL +
-						  cur_dev->viu_off, 0x4000000);
-				VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_PSEL +
-						  cur_dev->viu_off, 0);
-				VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_PSEL +
-						  cur_dev->viu_off, 0);
-			} else {
-				VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL +
-						  cur_dev->viu_off, 0);
-				VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL +
-						  cur_dev->viu_off, 0);
-				VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_PSEL +
-						  cur_dev->viu_off, 0x4000000);
-				VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_PSEL +
-						  cur_dev->viu_off, 0x4000000);
+			if ((process_3d_type & MODE_3D_OUT_TB)
+				|| (process_3d_type & MODE_3D_OUT_LR)) {
+				if (cur_frame_par->vpp_2pic_mode &
+				VPP_PIC1_FIRST) {
+					VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL +
+					cur_dev->viu_off, 0x4000000);
+					VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL +
+					cur_dev->viu_off, 0x4000000);
+					VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_PSEL +
+					cur_dev->viu_off, 0);
+					VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_PSEL +
+					cur_dev->viu_off, 0);
+				} else {
+					VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL +
+					cur_dev->viu_off, 0);
+					VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL +
+					cur_dev->viu_off, 0);
+					VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_PSEL +
+					cur_dev->viu_off, 0x4000000);
+					VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_PSEL +
+					cur_dev->viu_off, 0x4000000);
+				}
+/*
+VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
+cur_dev->vpp_off,1,15,1);//VPP_VD2_PREBLEND enable
+//VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
+cur_dev->vpp_off,1,11,1);//VPP_VD2_POSTBLEND enable
+VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
+cur_dev->vpp_off,1,6,1);//PREBLEND enable must be set!
+VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
+cur_dev->vpp_off,0x1ff,
+VPP_VD2_ALPHA_BIT,9);//vd2 alpha must set
+*/
 			}
-			EnableVideoLayer2();
-			/*
-			VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
-			cur_dev->vpp_off,1,15,1);//VPP_VD2_PREBLEND enable
-			//VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
-			cur_dev->vpp_off,1,11,1);//VPP_VD2_POSTBLEND enable
-			VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
-			cur_dev->vpp_off,1,6,1);//PREBLEND enable must be set!
-			VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
-			cur_dev->vpp_off,0x1ff,
-			VPP_VD2_ALPHA_BIT,9);//vd2 alpha must set
-			*/
-		} else
-			DisableVideoLayer2();
-		/*
-		else{
-		VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
-		cur_dev->vpp_off,0,15,1);//VPP_VD2_PREBLEND enable
-		//VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
-		cur_dev->vpp_off,1,11,1);//VPP_VD2_POSTBLEND enable
-		VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
-		cur_dev->vpp_off,0,6,1);//PREBLEND enable
-		VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
-		cur_dev->vpp_off,0,VPP_VD2_ALPHA_BIT,9);//vd2 alpha must set
-		} */
-#endif
-		/* vertical phase */
-		vphase =
-		    &cur_frame_par->VPP_vf_ini_phase_[vpp_phase_table[vin_type]
-						      [vout_type]];
-		VSYNC_WR_MPEG_REG(VPP_VSC_INI_PHASE + cur_dev->vpp_off,
-				  ((u32) (vphase->phase) << 8));
 
-		if (vphase->repeat_skip >= 0) {
-			/* skip lines */
-			VSYNC_WR_MPEG_REG_BITS(VPP_VSC_PHASE_CTRL +
-					       cur_dev->vpp_off,
-					       skip_tab[vphase->repeat_skip],
-					       VPP_PHASECTL_INIRCVNUMT_BIT,
-					       VPP_PHASECTL_INIRCVNUM_WID +
-					       VPP_PHASECTL_INIRPTNUM_WID);
-
-		} else {
-			/* repeat first line */
-			VSYNC_WR_MPEG_REG_BITS(VPP_VSC_PHASE_CTRL +
-					       cur_dev->vpp_off, 4,
-					       VPP_PHASECTL_INIRCVNUMT_BIT,
-					       VPP_PHASECTL_INIRCVNUM_WID);
-			VSYNC_WR_MPEG_REG_BITS(VPP_VSC_PHASE_CTRL +
-					       cur_dev->vpp_off,
-					       1 - vphase->repeat_skip,
-					       VPP_PHASECTL_INIRPTNUMT_BIT,
-					       VPP_PHASECTL_INIRPTNUM_WID);
+/*
+else{
+VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
+cur_dev->vpp_off,0,15,1);//VPP_VD2_PREBLEND enable
+//VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
+cur_dev->vpp_off,1,11,1);//VPP_VD2_POSTBLEND enable
+VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
+cur_dev->vpp_off,0,6,1);//PREBLEND enable
+VSYNC_WR_MPEG_REG_BITS(VPP_MISC +
+cur_dev->vpp_off,0,VPP_VD2_ALPHA_BIT,9);//vd2 alpha must set
+} */
 		}
-#ifdef TV_3D_FUNCTION_OPEN
+			/* vertical phase */
+			vphase =
+			&cur_frame_par->VPP_vf_ini_phase_
+			[vpp_phase_table[vin_type]
+			[vout_type]];
+			VSYNC_WR_MPEG_REG(VPP_VSC_INI_PHASE + cur_dev->vpp_off,
+					  ((u32) (vphase->phase) << 8));
+
+			if (vphase->repeat_skip >= 0) {
+				/* skip lines */
+				VSYNC_WR_MPEG_REG_BITS(VPP_VSC_PHASE_CTRL +
+				cur_dev->vpp_off,
+				skip_tab[vphase->repeat_skip],
+				VPP_PHASECTL_INIRCVNUMT_BIT,
+				VPP_PHASECTL_INIRCVNUM_WID +
+				VPP_PHASECTL_INIRPTNUM_WID);
 
-		if (force_3d_scaler == 3 && cur_frame_par->vpp_3d_scale) {
-			VSYNC_WR_MPEG_REG_BITS(VPP_VSC_PHASE_CTRL, 3,
-					       VPP_PHASECTL_DOUBLELINE_BIT, 2);
-		} else if (force_3d_scaler == 1 &&
-				cur_frame_par->vpp_3d_scale) {
-			VSYNC_WR_MPEG_REG_BITS(VPP_VSC_PHASE_CTRL, 1,
-					       VPP_PHASECTL_DOUBLELINE_BIT,
-					       VPP_PHASECTL_DOUBLELINE_WID);
-		} else if (force_3d_scaler == 2 &&
-			cur_frame_par->vpp_3d_scale) {
-			VSYNC_WR_MPEG_REG_BITS(VPP_VSC_PHASE_CTRL, 2,
-					       VPP_PHASECTL_DOUBLELINE_BIT, 2);
-		} else {
-			VSYNC_WR_MPEG_REG_BITS(VPP_VSC_PHASE_CTRL, 0,
-					       VPP_PHASECTL_DOUBLELINE_BIT, 2);
+			} else {
+				/* repeat first line */
+				VSYNC_WR_MPEG_REG_BITS(VPP_VSC_PHASE_CTRL +
+				cur_dev->vpp_off, 4,
+				VPP_PHASECTL_INIRCVNUMT_BIT,
+				VPP_PHASECTL_INIRCVNUM_WID);
+				VSYNC_WR_MPEG_REG_BITS(VPP_VSC_PHASE_CTRL +
+				cur_dev->vpp_off,
+				1 - vphase->repeat_skip,
+				VPP_PHASECTL_INIRPTNUMT_BIT,
+				VPP_PHASECTL_INIRPTNUM_WID);
+			}
+			if (platform_type == 1) {
+				if (force_3d_scaler == 3 &&
+					cur_frame_par->vpp_3d_scale) {
+					VSYNC_WR_MPEG_REG_BITS(
+					VPP_VSC_PHASE_CTRL, 3,
+					VPP_PHASECTL_DOUBLELINE_BIT, 2);
+				} else if (force_3d_scaler == 1 &&
+					cur_frame_par->vpp_3d_scale) {
+					VSYNC_WR_MPEG_REG_BITS(
+					VPP_VSC_PHASE_CTRL, 1,
+					VPP_PHASECTL_DOUBLELINE_BIT,
+					VPP_PHASECTL_DOUBLELINE_WID);
+				} else if (force_3d_scaler == 2 &&
+					cur_frame_par->vpp_3d_scale) {
+					VSYNC_WR_MPEG_REG_BITS(
+					VPP_VSC_PHASE_CTRL, 2,
+					VPP_PHASECTL_DOUBLELINE_BIT, 2);
+				} else {
+					VSYNC_WR_MPEG_REG_BITS(
+					VPP_VSC_PHASE_CTRL, 0,
+					VPP_PHASECTL_DOUBLELINE_BIT, 2);
+				}
+			}
 		}
-#endif
 	}
 
 	if (((frame_par_ready_to_set) || (frame_par_force_to_set)) &&
@@ -3838,8 +4116,8 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
 					cur_frame_par->VPP_vd_start_lines_
 					>> 1;
 					zoom_end_y =
-					(cur_frame_par->VPP_vd_end_lines_ + 1)
-					>> 1;
+					((cur_frame_par->VPP_vd_end_lines_ + 1)
+					>> 1) - 1;
 				} else {
 					zoom_start_y =
 					cur_frame_par->VPP_vd_start_lines_;
@@ -3857,8 +4135,8 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
 					cur_frame_par->VPP_vd_start_lines_
 					>> 1;
 					zoom_end_y =
-					(cur_frame_par->VPP_vd_end_lines_ +
-					1) >> 1;
+					((cur_frame_par->VPP_vd_end_lines_ +
+					1) >> 1) - 1;
 				}
 			}
 
@@ -3872,6 +4150,20 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
 			zoom_display_vert();
 		}
 
+		/* vpp super scaler */
+		if (get_cpu_type() >= MESON_CPU_MAJOR_ID_GXTVBB)
+			vpp_set_super_scaler_regs(cur_frame_par->supscl_path,
+				cur_frame_par->supsc0_enable,
+				cur_frame_par->spsc0_w_in,
+				cur_frame_par->spsc0_h_in,
+				cur_frame_par->supsc0_hori_ratio,
+				cur_frame_par->supsc0_vert_ratio,
+				cur_frame_par->supsc1_enable,
+				cur_frame_par->spsc1_w_in,
+				cur_frame_par->spsc1_h_in,
+				cur_frame_par->supsc1_hori_ratio,
+				cur_frame_par->supsc1_vert_ratio);
+
 		/* vpp filters */
 		/* SET_MPEG_REG_MASK(VPP_SC_MISC + cur_dev->vpp_off, */
 		/* VPP_SC_TOP_EN | VPP_SC_VERT_EN | VPP_SC_HORZ_EN); */
@@ -3881,21 +4173,39 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
 				  VPP_SC_TOP_EN | VPP_SC_VERT_EN |
 				  VPP_SC_HORZ_EN);
 
-#ifdef TV_3D_FUNCTION_OPEN
-		if (last_mode_3d) {
-			/*turn off vertical scaler when 3d display */
-			/* CLEAR_MPEG_REG_MASK(VPP_SC_MISC,VPP_SC_VERT_EN); */
-			VSYNC_WR_MPEG_REG(VPP_SC_MISC + cur_dev->vpp_off,
-					  READ_MPEG_REG(VPP_SC_MISC +
-							cur_dev->vpp_off) &
-					  (~VPP_SC_VERT_EN));
+		/* pps pre hsc&vsc en */
+		VSYNC_WR_MPEG_REG_BITS(VPP_SC_MISC + cur_dev->vpp_off,
+			vpp_filter->vpp_pre_hsc_en,
+			VPP_SC_PREHORZ_EN_BIT, 1);
+		VSYNC_WR_MPEG_REG_BITS(VPP_SC_MISC + cur_dev->vpp_off,
+			vpp_filter->vpp_pre_vsc_en,
+			VPP_SC_PREVERT_EN_BIT, 1);
+		VSYNC_WR_MPEG_REG_BITS(VPP_SC_MISC + cur_dev->vpp_off,
+			vpp_filter->vpp_pre_vsc_en,
+			VPP_LINE_BUFFER_EN_BIT, 1);
+		/* for bypass pps debug */
+		if ((vpp_filter->vpp_hsc_start_phase_step == 0x1000000) &&
+			(vpp_filter->vpp_vsc_start_phase_step == 0x1000000) &&
+			bypass_pps)
+			VSYNC_WR_MPEG_REG_BITS(VPP_SC_MISC + cur_dev->vpp_off,
+				0, VPP_SC_TOP_EN_BIT, VPP_SC_TOP_EN_WID);
+	/*turn off vertical scaler when 3d display */
+	/* CLEAR_MPEG_REG_MASK(VPP_SC_MISC,VPP_SC_VERT_EN); */
+		if (platform_type == 1) {
+			if (last_mode_3d) {
+				VSYNC_WR_MPEG_REG(
+				VPP_SC_MISC + cur_dev->vpp_off,
+				READ_MPEG_REG(VPP_SC_MISC +
+				cur_dev->vpp_off) &
+				(~VPP_SC_VERT_EN));
+			}
 		}
-#endif
 		/* horitontal filter settings */
-		VSYNC_WR_MPEG_REG_BITS(VPP_SC_MISC + cur_dev->vpp_off,
-				       vpp_filter->vpp_horz_coeff[0],
-				       VPP_SC_HBANK_LENGTH_BIT,
-				       VPP_SC_BANK_LENGTH_WID);
+		VSYNC_WR_MPEG_REG_BITS(
+		VPP_SC_MISC + cur_dev->vpp_off,
+		vpp_filter->vpp_horz_coeff[0],
+		VPP_SC_HBANK_LENGTH_BIT,
+		VPP_SC_BANK_LENGTH_WID);
 
 		/* #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8 */
 		if ((get_cpu_type() >= MESON_CPU_MAJOR_ID_M8)
@@ -3936,6 +4246,64 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
 					  vpp_filter->vpp_vert_coeff[i + 2]);
 		}
 
+		/* vertical chroma filter settings */
+		if (vpp_filter->vpp_vert_chroma_filter_en) {
+			const u32 *pCoeff = vpp_filter->vpp_vert_chroma_coeff;
+			VSYNC_WR_MPEG_REG(
+				VPP_SCALE_COEF_IDX + cur_dev->vpp_off,
+				VPP_COEF_VERT_CHROMA|VPP_COEF_SEP_EN);
+			for (i = 0; i < pCoeff[1]; i++)
+				VSYNC_WR_MPEG_REG(
+					VPP_SCALE_COEF + cur_dev->vpp_off,
+					pCoeff[i + 2]);
+		}
+
+#if (!HAS_VPU_PROT)
+		if (is_meson_gxbb_cpu()) {
+			if (cur_dispbuf->type & VIDTYPE_INTERLACE) {
+				cur_frame_par->VPP_pic_in_height_ =
+				zoom_end_y_lines - zoom_start_y_lines + 1;
+				cur_frame_par->VPP_line_in_length_ =
+				zoom_end_x_lines - zoom_start_x_lines + 1;
+			} else {
+				cur_frame_par->VPP_pic_in_height_ =
+				(zoom_end_y_lines - zoom_start_y_lines + 1) /
+				(cur_frame_par->vscale_skip_count + 1);
+				if (cur_dispbuf->type & VIDTYPE_MVC)
+					cur_frame_par->VPP_pic_in_height_ *= 2;
+				cur_frame_par->VPP_line_in_length_ =
+				(zoom_end_x_lines - zoom_start_x_lines + 1) /
+				(cur_frame_par->hscale_skip_count + 1);
+			}
+		}
+		if (is_meson_gxtvbb_cpu() || is_meson_txl_cpu()) {
+			if (cur_dispbuf->type & VIDTYPE_INTERLACE) {
+				cur_frame_par->VPP_pic_in_height_ =
+				(zoom_end_y_lines - zoom_start_y_lines + 1)  <<
+				cur_frame_par->supsc0_vert_ratio;
+				cur_frame_par->VPP_line_in_length_ =
+				(zoom_end_x_lines - zoom_start_x_lines + 1) <<
+				cur_frame_par->supsc0_hori_ratio;
+			} else {
+				cur_frame_par->VPP_pic_in_height_ =
+				((zoom_end_y_lines - zoom_start_y_lines + 1) /
+				(cur_frame_par->vscale_skip_count + 1)) <<
+				cur_frame_par->supsc0_vert_ratio;
+				if (cur_dispbuf->type & VIDTYPE_MVC)
+					cur_frame_par->VPP_pic_in_height_ *= 2;
+				cur_frame_par->VPP_line_in_length_ =
+				((zoom_end_x_lines - zoom_start_x_lines + 1) /
+				(cur_frame_par->hscale_skip_count + 1)) <<
+				cur_frame_par->supsc0_hori_ratio;
+			}
+
+			VSYNC_WR_MPEG_REG(VPP_IN_H_V_SIZE,
+				(((cur_frame_par->VPP_line_in_length_ >>
+				cur_frame_par->supsc0_hori_ratio) & 0x1fff) <<
+				16) | ((cur_frame_par->VPP_pic_in_height_ >>
+				cur_frame_par->supsc0_vert_ratio) & 0x1fff));
+		}
+#endif
 		VSYNC_WR_MPEG_REG(VPP_PIC_IN_HEIGHT + cur_dev->vpp_off,
 				  cur_frame_par->VPP_pic_in_height_);
 
@@ -3980,6 +4348,7 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
 		vpp_settings_v(cur_frame_par);
 		frame_par_ready_to_set = 0;
 		frame_par_force_to_set = 0;
+		first_set = 1;
 	}
 	/* VPP one time settings */
 	wait_sync = 0;
@@ -4008,7 +4377,23 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
 		SET_VCBUS_REG_MASK(VPP_MISC + cur_dev->vpp_off,
 				VPP_VD1_PREBLEND | VPP_VD1_POSTBLEND
 				   | VPP_POSTBLEND_EN);
-		pr_info("should never happen, rdma fail!");
+		pr_info("VPP_VD1_POSTBLEND register rdma write fail!");
+	}
+	if ((video_enabled == 1) && cur_frame_par
+	&& (cur_dispbuf != &vf_local) && (first_set == 0)
+	&& (video_onoff_state == VIDEO_ENABLE_STATE_IDLE)) {
+		struct vppfilter_mode_s *vpp_filter =
+		    &cur_frame_par->vpp_filter;
+		u32 h_phase_step , v_phase_step;
+		h_phase_step = READ_VCBUS_REG(
+		VPP_HSC_START_PHASE_STEP + cur_dev->vpp_off);
+		v_phase_step = READ_VCBUS_REG(
+		VPP_VSC_START_PHASE_STEP + cur_dev->vpp_off);
+		if ((vpp_filter->vpp_hsc_start_phase_step != h_phase_step) ||
+		(vpp_filter->vpp_vsc_start_phase_step != v_phase_step)) {
+			video_property_changed = true;
+			/*pr_info("frame info register rdma write fail!\n");*/
+		}
 	}
 	if (likely(video_onoff_state != VIDEO_ENABLE_STATE_IDLE)) {
 		/* state change for video layer enable/disable */
@@ -4383,11 +4768,14 @@ int get_curren_frame_para(int *top, int *left, int *bottom, int *right)
 
 int get_current_vscale_skip_count(struct vframe_s *vf)
 {
+	int ret = 0;
 	static struct vpp_frame_par_s frame_par;
 
 	vpp_set_filters(process_3d_type, wide_setting, vf, &frame_par, vinfo);
-
-	return frame_par.vscale_skip_count;
+	ret = frame_par.vscale_skip_count;
+	if (cur_frame_par && (process_3d_type & MODE_3D_ENABLE))
+		ret |= (cur_frame_par->vpp_3d_mode<<8);
+	return ret;
 }
 
 int query_video_status(int type, int *value)
@@ -4463,6 +4851,8 @@ static void video_vf_unreg_provider(void)
 #endif
 	atomic_set(&video_unreg_flag, 0);
 	enable_video_discontinue_report = 1;
+	show_first_picture = false;
+	show_first_frame_nosync = false;
 }
 
 static void video_vf_light_unreg_provider(void)
@@ -4501,6 +4891,41 @@ static void video_vf_light_unreg_provider(void)
 	spin_unlock_irqrestore(&lock, flags);
 }
 
+static int  get_display_info(void *data)
+{
+	s32 w, h, x, y;
+	struct vdisplay_info_s  *info_para = (struct vdisplay_info_s *)data;
+	const struct vinfo_s *info = get_current_vinfo();
+
+	if ((!cur_frame_par) || (!info))
+		return -1;
+	vpp_get_video_layer_position(&x, &y, &w, &h);
+	if ((w == 0) || (w  > info->width))
+		w =  info->width;
+	if ((h == 0) || (h  > info->height))
+		h =  info->height;
+
+	info_para->frame_hd_start_lines_ = cur_frame_par->VPP_hd_start_lines_;
+	info_para->frame_hd_end_lines_ = cur_frame_par->VPP_hd_end_lines_;
+	info_para->frame_vd_start_lines_ = cur_frame_par->VPP_vd_start_lines_;
+	info_para->frame_vd_end_lines_ = cur_frame_par->VPP_vd_end_lines_;
+	info_para->display_hsc_startp = cur_frame_par->VPP_hsc_startp - x;
+	info_para->display_hsc_endp =
+	cur_frame_par->VPP_hsc_endp + (info->width - x - w);
+	info_para->display_vsc_startp = cur_frame_par->VPP_vsc_startp - y;
+	info_para->display_vsc_endp =
+	cur_frame_par->VPP_vsc_endp + (info->height - y - h);
+	info_para->screen_vd_h_start_ =
+	cur_frame_par->VPP_post_blend_vd_h_start_;
+	info_para->screen_vd_h_end_ =
+	cur_frame_par->VPP_post_blend_vd_h_end_;
+	info_para->screen_vd_v_start_ =
+	cur_frame_par->VPP_post_blend_vd_v_start_;
+	info_para->screen_vd_v_end_ = cur_frame_par->VPP_post_blend_vd_v_end_;
+
+	return 0;
+}
+
 static int video_receiver_event_fun(int type, void *data, void *private_data)
 {
 #ifdef CONFIG_AM_VIDEO2
@@ -4527,15 +4952,15 @@ static int video_receiver_event_fun(int type, void *data, void *private_data)
 			set_clone_frame_rate(video_play_clone_rate, 100);
 		}
 #endif
-#ifdef TV_3D_FUNCTION_OPEN
-
-		if ((process_3d_type & MODE_3D_FA) && !cur_dispbuf->trans_fmt)
-			/*notify di 3d mode is frame
-			alternative mode,passing two buffer in one frame */
-			vf_notify_receiver_by_name("deinterlace",
-				VFRAME_EVENT_PROVIDER_SET_3D_VFRAME_INTERLEAVE,
+/*notify di 3d mode is frame
+alternative mode,passing two buffer in one frame */
+		if (platform_type == 1) {
+			if ((process_3d_type & MODE_3D_FA) &&
+			!cur_dispbuf->trans_fmt)
+				vf_notify_receiver_by_name("deinterlace",
+			VFRAME_EVENT_PROVIDER_SET_3D_VFRAME_INTERLEAVE,
 				(void *)1);
-#endif
+		}
 
 		video_vf_light_unreg_provider();
 	} else if (type == VFRAME_EVENT_PROVIDER_FORCE_BLACKOUT) {
@@ -4553,6 +4978,8 @@ static int video_receiver_event_fun(int type, void *data, void *private_data)
 #ifdef CONFIG_AM_VOUT
 		set_vframe_rate_end_hint();
 #endif
+	} else if (type == VFRAME_EVENT_PROVIDER_QUREY_DISPLAY_INFO) {
+		get_display_info(data);
 	}
 	return 0;
 }
@@ -4566,6 +4993,7 @@ static int video4osd_receiver_event_fun(int type, void *data,
 			pr_info("[video4osd] clear osd_prov\n");
 	} else if (type == VFRAME_EVENT_PROVIDER_REG) {
 		osd_prov = vf_get_provider(RECEIVER4OSD_NAME);
+
 		if (debug_flag & DEBUG_FLAG_BLACKOUT)
 			pr_info("[video4osd] set osd_prov\n");
 	}
@@ -4652,6 +5080,7 @@ unsigned int vf_keep_current(void)
 	if (!keep_y_addr
 	    || (cur_dispbuf->type & VIDTYPE_VIU_422) == VIDTYPE_VIU_422) {
 		/* no support VIDTYPE_VIU_422... */
+		pr_info("%s:no support VIDTYPE_VIU_422\n", __func__);
 		return -1;
 	}
 
@@ -4878,6 +5307,8 @@ static void _set_video_window(int *p)
 {
 	int w, h;
 	int *parsed = p;
+	int last_x, last_y, last_w, last_h;
+	int new_x, new_y, new_w, new_h;
 #ifdef TV_REVERSE
 	int temp, temp1;
 	const struct vinfo_s *info = get_current_vinfo();
@@ -4894,6 +5325,7 @@ static void _set_video_window(int *p)
 		parsed[3] = info->height - temp1 - 1;
 	}
 #endif
+	vpp_get_video_layer_position(&last_x, &last_y, &last_w, &last_h);
 	if (parsed[0] < 0 && parsed[2] < 2) {
 		parsed[2] = 2;
 		parsed[0] = 0;
@@ -4932,7 +5364,11 @@ static void _set_video_window(int *p)
 						     h);
 		}
 	}
-	video_property_changed = true;
+	vpp_get_video_layer_position(&new_x, &new_y, &new_w, &new_h);
+	if ((last_x != new_x) || (last_y != new_y)
+	|| (last_w != new_w) || (last_h != new_h)) {
+		video_property_changed = true;
+	}
 }
 
 /*********************************************************
@@ -4943,6 +5379,11 @@ static int amvideo_open(struct inode *inode, struct file *file)
 	return 0;
 }
 
+static int amvideo_poll_open(struct inode *inode, struct file *file)
+{
+	return 0;
+}
+
 static int amvideo_release(struct inode *inode, struct file *file)
 {
 	if (blackout | force_blackout) {
@@ -4952,6 +5393,15 @@ static int amvideo_release(struct inode *inode, struct file *file)
 	return 0;
 }
 
+static int amvideo_poll_release(struct inode *inode, struct file *file)
+{
+	if (blackout | force_blackout) {
+		/*	DisableVideoLayer();
+		don't need it ,it have problem on  pure music playing */
+	}
+	return 0;
+}
+
 static long amvideo_ioctl(struct file *file, unsigned int cmd, ulong arg)
 {
 	long ret = 0;
@@ -5197,7 +5647,7 @@ static long amvideo_ioctl(struct file *file, unsigned int cmd, ulong arg)
 		{
 #ifdef TV_3D_FUNCTION_OPEN
 			unsigned int set_3d =
-				VFRAME_EVENT_PROVIDER_SET_3D_VFRAME_INTERLEAVE,
+				VFRAME_EVENT_PROVIDER_SET_3D_VFRAME_INTERLEAVE;
 			unsigned int type = (unsigned int)arg;
 			if (type != process_3d_type) {
 				process_3d_type = type;
@@ -5228,6 +5678,20 @@ static long amvideo_ioctl(struct file *file, unsigned int cmd, ulong arg)
 
 #endif
 		break;
+	case AMSTREAM_IOC_GET_SOURCE_VIDEO_3D_TYPE:
+#ifdef TV_3D_FUNCTION_OPEN
+	{
+		int source_video_3d_type = VPP_3D_MODE_NULL;
+		if (!cur_frame_par)
+			source_video_3d_type =
+		VPP_3D_MODE_NULL;
+		else
+			get_vpp_3d_mode(cur_frame_par->trans_fmt,
+		&source_video_3d_type);
+		put_user(source_video_3d_type, (u32 __user *)argp);
+	}
+#endif
+		break;
 	case AMSTREAM_IOC_SET_VSYNC_UPINT:
 		vsync_pts_inc_upint = arg;
 		break;
@@ -5274,6 +5738,7 @@ static long amvideo_compat_ioctl(struct file *file, unsigned int cmd, ulong arg)
 	case AMSTREAM_IOC_SET_BLACKOUT_POLICY:
 	case AMSTREAM_IOC_GET_FREERUN_MODE:
 	case AMSTREAM_IOC_GET_3D_TYPE:
+	case AMSTREAM_IOC_GET_SOURCE_VIDEO_3D_TYPE:
 	case AMSTREAM_IOC_GET_VSYNC_SLOW_FACTOR:
 		arg = (unsigned long) compat_ptr(arg);
 	case AMSTREAM_IOC_TRICKMODE:
@@ -5315,6 +5780,18 @@ static unsigned int amvideo_poll(struct file *file, poll_table *wait_table)
 	return 0;
 }
 
+static unsigned int amvideo_poll_poll(struct file *file, poll_table *wait_table)
+{
+	poll_wait(file, &amvideo_sizechange_wait, wait_table);
+
+	if (atomic_read(&video_sizechange)) {
+		atomic_set(&video_sizechange, 0);
+		return POLLIN | POLLWRNORM;
+	}
+
+	return 0;
+}
+
 static const struct file_operations amvideo_fops = {
 	.owner = THIS_MODULE,
 	.open = amvideo_open,
@@ -5326,11 +5803,19 @@ static const struct file_operations amvideo_fops = {
 	.poll = amvideo_poll,
 };
 
+static const struct file_operations amvideo_poll_fops = {
+	.owner = THIS_MODULE,
+	.open = amvideo_poll_open,
+	.release = amvideo_poll_release,
+	.poll = amvideo_poll_poll,
+};
+
 /*********************************************************
  * SYSFS property functions
  *********************************************************/
 #define MAX_NUMBER_PARA 10
 #define AMVIDEO_CLASS_NAME "video"
+#define AMVIDEO_POLL_CLASS_NAME "video_poll"
 
 static int parse_para(const char *para, int para_num, int *result)
 {
@@ -5479,6 +5964,53 @@ static ssize_t video_state_show(struct class *cla,
 	len +=
 	    sprintf(buf + len, "vscale phase step 0x%x.\n",
 		    vpp_filter->vpp_vsc_start_phase_step);
+	len +=
+	    sprintf(buf + len, "pps pre hsc enable %d.\n",
+		    vpp_filter->vpp_pre_hsc_en);
+	len +=
+	    sprintf(buf + len, "pps pre vsc enable %d.\n",
+		    vpp_filter->vpp_pre_vsc_en);
+	    sprintf(buf + len, "hscale filter coef %d.\n",
+		    vpp_filter->vpp_horz_filter);
+	len +=
+	    sprintf(buf + len, "vscale filter coef %d.\n",
+		    vpp_filter->vpp_vert_filter);
+	len +=
+	    sprintf(buf + len, "post_blend_vd_h_start 0x%x.\n",
+		    cur_frame_par->VPP_post_blend_vd_h_start_);
+	len +=
+	    sprintf(buf + len, "post_blend_vd_h_end 0x%x.\n",
+		    cur_frame_par->VPP_post_blend_vd_h_end_);
+	len +=
+	    sprintf(buf + len, "post_blend_vd_v_start 0x%x.\n",
+		    cur_frame_par->VPP_post_blend_vd_v_start_);
+	len +=
+	    sprintf(buf + len, "post_blend_vd_v_end 0x%x.\n",
+		    cur_frame_par->VPP_post_blend_vd_v_end_);
+	len +=
+	    sprintf(buf + len, "VPP_hd_start_lines_ 0x%x.\n",
+		    cur_frame_par->VPP_hd_start_lines_);
+	len +=
+	    sprintf(buf + len, "VPP_hd_end_lines_ 0x%x.\n",
+		    cur_frame_par->VPP_hd_end_lines_);
+	len +=
+	    sprintf(buf + len, "VPP_vd_start_lines_ 0x%x.\n",
+		    cur_frame_par->VPP_vd_start_lines_);
+	len +=
+	    sprintf(buf + len, "VPP_vd_end_lines_ 0x%x.\n",
+		    cur_frame_par->VPP_vd_end_lines_);
+	len +=
+	    sprintf(buf + len, "VPP_hsc_startp 0x%x.\n",
+		    cur_frame_par->VPP_hsc_startp);
+	len +=
+	    sprintf(buf + len, "VPP_hsc_endp 0x%x.\n",
+		    cur_frame_par->VPP_hsc_endp);
+	len +=
+	    sprintf(buf + len, "VPP_vsc_startp 0x%x.\n",
+		    cur_frame_par->VPP_vsc_startp);
+	len +=
+	    sprintf(buf + len, "VPP_vsc_endp 0x%x.\n",
+		    cur_frame_par->VPP_vsc_endp);
 	return len;
 }
 
@@ -5812,6 +6344,157 @@ static ssize_t video_test_screen_show(struct class *cla,
 {
 	return sprintf(buf, "0x%x\n", test_screen);
 }
+static ssize_t video_rgb_screen_show(struct class *cla,
+				      struct class_attribute *attr, char *buf)
+{
+	return sprintf(buf, "0x%x\n", rgb_screen);
+}
+
+#define SCALE 6
+
+static short R_Cr[] = { -11484, -11394, -11305, -11215, -11125,
+-11036, -10946, -10856, -10766, -10677, -10587, -10497, -10407,
+-10318, -10228, -10138, -10049, -9959, -9869, -9779, -9690, -9600,
+-9510, -9420, -9331, -9241, -9151, -9062, -8972, -8882, -8792, -8703,
+-8613, -8523, -8433, -8344, -8254, -8164, -8075, -7985, -7895, -7805,
+-7716, -7626, -7536, -7446, -7357, -7267, -7177, -7088, -6998, -6908,
+-6818, -6729, -6639, -6549, -6459, -6370, -6280, -6190, -6101, -6011,
+-5921, -5831, -5742, -5652, -5562, -5472, -5383, -5293, -5203, -5113,
+-5024, -4934, -4844, -4755, -4665, -4575, -4485, -4396, -4306, -4216,
+-4126, -4037, -3947, -3857, -3768, -3678, -3588, -3498, -3409, -3319,
+-3229, -3139, -3050, -2960, -2870, -2781, -2691, -2601, -2511, -2422,
+-2332, -2242, -2152, -2063, -1973, -1883, -1794, -1704, -1614, -1524,
+-1435, -1345, -1255, -1165, -1076, -986, -896, -807, -717, -627, -537,
+-448, -358, -268, -178, -89, 0, 90, 179, 269, 359, 449, 538, 628, 718,
+808, 897, 987, 1077, 1166, 1256, 1346, 1436, 1525, 1615, 1705, 1795,
+1884, 1974, 2064, 2153, 2243, 2333, 2423, 2512, 2602, 2692, 2782,
+2871, 2961, 3051, 3140, 3230, 3320, 3410, 3499, 3589, 3679, 3769,
+3858, 3948, 4038, 4127, 4217, 4307, 4397, 4486, 4576, 4666, 4756,
+4845, 4935, 5025, 5114, 5204, 5294, 5384, 5473, 5563, 5653, 5743,
+5832, 5922, 6012, 6102, 6191, 6281, 6371, 6460, 6550, 6640, 6730,
+6819, 6909, 6999, 7089, 7178, 7268, 7358, 7447, 7537, 7627, 7717,
+7806, 7896, 7986, 8076, 8165, 8255, 8345, 8434, 8524, 8614, 8704,
+8793, 8883, 8973, 9063, 9152, 9242, 9332, 9421, 9511, 9601, 9691,
+9780, 9870, 9960, 10050, 10139, 10229, 10319, 10408, 10498, 10588,
+10678, 10767, 10857, 10947, 11037, 11126, 11216, 11306, 11395 };
+
+static short G_Cb[] = { 2819, 2797, 2775, 2753, 2731, 2709, 2687,
+2665, 2643, 2621, 2599, 2577, 2555, 2533, 2511, 2489, 2467, 2445,
+2423, 2401, 2379, 2357, 2335, 2313, 2291, 2269, 2247, 2225, 2202,
+2180, 2158, 2136, 2114, 2092, 2070, 2048, 2026, 2004, 1982, 1960,
+1938, 1916, 1894, 1872, 1850, 1828, 1806, 1784, 1762, 1740, 1718,
+1696, 1674, 1652, 1630, 1608, 1586, 1564, 1542, 1520, 1498, 1476,
+1454, 1432, 1410, 1388, 1366, 1344, 1321, 1299, 1277, 1255, 1233,
+1211, 1189, 1167, 1145, 1123, 1101, 1079, 1057, 1035, 1013, 991, 969,
+947, 925, 903, 881, 859, 837, 815, 793, 771, 749, 727, 705, 683, 661,
+639, 617, 595, 573, 551, 529, 507, 485, 463, 440, 418, 396, 374, 352,
+330, 308, 286, 264, 242, 220, 198, 176, 154, 132, 110, 88, 66, 44, 22,
+0, -21, -43, -65, -87, -109, -131, -153, -175, -197, -219, -241, -263,
+-285, -307, -329, -351, -373, -395, -417, -439, -462, -484, -506,
+-528, -550, -572, -594, -616, -638, -660, -682, -704, -726, -748,
+-770, -792, -814, -836, -858, -880, -902, -924, -946, -968, -990,
+-1012, -1034, -1056, -1078, -1100, -1122, -1144, -1166, -1188, -1210,
+-1232, -1254, -1276, -1298, -1320, -1343, -1365, -1387, -1409, -1431,
+-1453, -1475, -1497, -1519, -1541, -1563, -1585, -1607, -1629, -1651,
+-1673, -1695, -1717, -1739, -1761, -1783, -1805, -1827, -1849, -1871,
+-1893, -1915, -1937, -1959, -1981, -2003, -2025, -2047, -2069, -2091,
+-2113, -2135, -2157, -2179, -2201, -2224, -2246, -2268, -2290, -2312,
+-2334, -2356, -2378, -2400, -2422, -2444, -2466, -2488, -2510, -2532,
+-2554, -2576, -2598, -2620, -2642, -2664, -2686, -2708, -2730, -2752,
+-2774, -2796 };
+
+static short G_Cr[] = { 5850, 5805, 5759, 5713, 5667, 5622, 5576,
+5530, 5485, 5439, 5393, 5347, 5302, 5256, 5210, 5165, 5119, 5073,
+5028, 4982, 4936, 4890, 4845, 4799, 4753, 4708, 4662, 4616, 4570,
+4525, 4479, 4433, 4388, 4342, 4296, 4251, 4205, 4159, 4113, 4068,
+4022, 3976, 3931, 3885, 3839, 3794, 3748, 3702, 3656, 3611, 3565,
+3519, 3474, 3428, 3382, 3336, 3291, 3245, 3199, 3154, 3108, 3062,
+3017, 2971, 2925, 2879, 2834, 2788, 2742, 2697, 2651, 2605, 2559,
+2514, 2468, 2422, 2377, 2331, 2285, 2240, 2194, 2148, 2102, 2057,
+2011, 1965, 1920, 1874, 1828, 1782, 1737, 1691, 1645, 1600, 1554,
+1508, 1463, 1417, 1371, 1325, 1280, 1234, 1188, 1143, 1097, 1051,
+1006, 960, 914, 868, 823, 777, 731, 686, 640, 594, 548, 503, 457, 411,
+366, 320, 274, 229, 183, 137, 91, 46, 0, -45, -90, -136, -182, -228,
+-273, -319, -365, -410, -456, -502, -547, -593, -639, -685, -730,
+-776, -822, -867, -913, -959, -1005, -1050, -1096, -1142, -1187,
+-1233, -1279, -1324, -1370, -1416, -1462, -1507, -1553, -1599, -1644,
+-1690, -1736, -1781, -1827, -1873, -1919, -1964, -2010, -2056, -2101,
+-2147, -2193, -2239, -2284, -2330, -2376, -2421, -2467, -2513, -2558,
+-2604, -2650, -2696, -2741, -2787, -2833, -2878, -2924, -2970, -3016,
+-3061, -3107, -3153, -3198, -3244, -3290, -3335, -3381, -3427, -3473,
+-3518, -3564, -3610, -3655, -3701, -3747, -3793, -3838, -3884, -3930,
+-3975, -4021, -4067, -4112, -4158, -4204, -4250, -4295, -4341, -4387,
+-4432, -4478, -4524, -4569, -4615, -4661, -4707, -4752, -4798, -4844,
+-4889, -4935, -4981, -5027, -5072, -5118, -5164, -5209, -5255, -5301,
+-5346, -5392, -5438, -5484, -5529, -5575, -5621, -5666, -5712, -5758,
+-5804 };
+
+static short B_Cb[] = { -14515, -14402, -14288, -14175, -14062,
+-13948, -13835, -13721, -13608, -13495, -13381, -13268, -13154,
+-13041, -12928, -12814, -12701, -12587, -12474, -12360, -12247,
+-12134, -12020, -11907, -11793, -11680, -11567, -11453, -11340,
+-11226, -11113, -11000, -10886, -10773, -10659, -10546, -10433,
+-10319, -10206, -10092, -9979, -9865, -9752, -9639, -9525, -9412,
+-9298, -9185, -9072, -8958, -8845, -8731, -8618, -8505, -8391, -8278,
+-8164, -8051, -7938, -7824, -7711, -7597, -7484, -7371, -7257, -7144,
+-7030, -6917, -6803, -6690, -6577, -6463, -6350, -6236, -6123, -6010,
+-5896, -5783, -5669, -5556, -5443, -5329, -5216, -5102, -4989, -4876,
+-4762, -4649, -4535, -4422, -4309, -4195, -4082, -3968, -3855, -3741,
+-3628, -3515, -3401, -3288, -3174, -3061, -2948, -2834, -2721, -2607,
+-2494, -2381, -2267, -2154, -2040, -1927, -1814, -1700, -1587, -1473,
+-1360, -1246, -1133, -1020, -906, -793, -679, -566, -453, -339, -226,
+-112, 0, 113, 227, 340, 454, 567, 680, 794, 907, 1021, 1134, 1247,
+1361, 1474, 1588, 1701, 1815, 1928, 2041, 2155, 2268, 2382, 2495,
+2608, 2722, 2835, 2949, 3062, 3175, 3289, 3402, 3516, 3629, 3742,
+3856, 3969, 4083, 4196, 4310, 4423, 4536, 4650, 4763, 4877, 4990,
+5103, 5217, 5330, 5444, 5557, 5670, 5784, 5897, 6011, 6124, 6237,
+6351, 6464, 6578, 6691, 6804, 6918, 7031, 7145, 7258, 7372, 7485,
+7598, 7712, 7825, 7939, 8052, 8165, 8279, 8392, 8506, 8619, 8732,
+8846, 8959, 9073, 9186, 9299, 9413, 9526, 9640, 9753, 9866, 9980,
+10093, 10207, 10320, 10434, 10547, 10660, 10774, 10887, 11001, 11114,
+11227, 11341, 11454, 11568, 11681, 11794, 11908, 12021, 12135, 12248,
+12361, 12475, 12588, 12702, 12815, 12929, 13042, 13155, 13269, 13382,
+13496, 13609, 13722, 13836, 13949, 14063, 14176, 14289, 14403
+};
+
+static u32 yuv2rgb(u32 yuv)
+{
+	int y = (yuv >> 16) & 0xff;
+	int cb = (yuv >> 8) & 0xff;
+	int cr = yuv & 0xff;
+	int r, g, b;
+
+	r = y + ((R_Cr[cr]) >> SCALE);
+	g = y + ((G_Cb[cb] + G_Cr[cr]) >> SCALE);
+	b = y + ((B_Cb[cb]) >> SCALE);
+
+	r = r - 16;
+	if (r < 0)
+		r = 0;
+		r = r*1164/1000;
+	g = g - 16;
+	if (g < 0)
+		g = 0;
+		g = g*1164/1000;
+	b = b - 16;
+	if (b < 0)
+		b = 0;
+		b = b*1164/1000;
+
+	r = (r <= 0) ? 0 : (r >= 255) ? 255 : r;
+	g = (g <= 0) ? 0 : (g >= 255) ? 255 : g;
+	b = (b <= 0) ? 0 : (b >= 255) ? 255 : b;
+
+	return  (r << 16) | (g << 8) | b;
+}
+/* 8bit convert to 10bit */
+static u32 eight2ten(u32 yuv)
+{
+	int y = (yuv >> 16) & 0xff;
+	int cb = (yuv >> 8) & 0xff;
+	int cr = yuv & 0xff;
+	return  (y << 20) | (cb << 10) | cr;
+}
 
 static ssize_t video_test_screen_store(struct class *cla,
 				       struct class_attribute *attr,
@@ -5845,9 +6528,27 @@ static ssize_t video_test_screen_store(struct class *cla,
 	   else
 	   data &= (~VPP_VD2_POSTBLEND);
 	 */
-	/* show test screen */
-	WRITE_VCBUS_REG(VPP_DUMMY_DATA1, test_screen & 0x00ffffff);
-
+	/* show test screen  YUV blend*/
+	if (is_meson_gxm_cpu()) {/* bit width change to 10bit in gxm */
+		if (READ_VCBUS_REG(VIU_OSD1_BLK0_CFG_W0) & 0x80)
+			WRITE_VCBUS_REG(VPP_DUMMY_DATA1,
+				eight2ten(test_screen & 0x00ffffff));
+		else /* RGB blend */
+			WRITE_VCBUS_REG(VPP_DUMMY_DATA1,
+				eight2ten(yuv2rgb(test_screen & 0x00ffffff)));
+	} else {
+		if (READ_VCBUS_REG(VIU_OSD1_BLK0_CFG_W0) & 0x80)
+			WRITE_VCBUS_REG(VPP_DUMMY_DATA1,
+				test_screen & 0x00ffffff);
+		else {/* RGB blend */
+			if (is_meson_txl_cpu())
+				WRITE_VCBUS_REG(VPP_DUMMY_DATA1,
+					test_screen & 0x00ffffff);
+			else
+				WRITE_VCBUS_REG(VPP_DUMMY_DATA1,
+				yuv2rgb(test_screen & 0x00ffffff));
+		}
+	}
 	WRITE_VCBUS_REG(VPP_MISC, data);
 
 	if (debug_flag & DEBUG_FLAG_BLACKOUT) {
@@ -5857,6 +6558,55 @@ static ssize_t video_test_screen_store(struct class *cla,
 	return count;
 }
 
+static ssize_t video_rgb_screen_store(struct class *cla,
+				       struct class_attribute *attr,
+				       const char *buf, size_t count)
+{
+	size_t r;
+	unsigned data = 0x0;
+	r = sscanf(buf, "0x%x", &rgb_screen);
+	if (r != 1)
+		return -EINVAL;
+
+	/* vdin0 pre post blend enable or disabled */
+	data = READ_VCBUS_REG(VPP_MISC);
+	if (rgb_screen & 0x01000000)
+		data |= VPP_VD1_PREBLEND;
+	else
+		data &= (~VPP_VD1_PREBLEND);
+
+	if (rgb_screen & 0x02000000)
+		data |= VPP_VD1_POSTBLEND;
+	else
+		data &= (~VPP_VD1_POSTBLEND);
+	/*
+	   if (test_screen & 0x04000000)
+	   data |= VPP_VD2_PREBLEND;
+	   else
+	   data &= (~VPP_VD2_PREBLEND);
+
+	   if (test_screen & 0x08000000)
+	   data |= VPP_VD2_POSTBLEND;
+	   else
+	   data &= (~VPP_VD2_POSTBLEND);
+	 */
+	/* show test screen  YUV blend*/
+	if (is_meson_gxtvbb_cpu())   {
+		if (!(READ_VCBUS_REG(VIU_OSD1_BLK0_CFG_W0) & 0x80))
+			WRITE_VCBUS_REG(VPP_DUMMY_DATA1,
+				rgb_screen & 0x00ffffff);
+	}
+	WRITE_VCBUS_REG(VPP_MISC, data);
+
+	if (debug_flag & DEBUG_FLAG_BLACKOUT) {
+		pr_info("%s write(VPP_MISC,%x) write(VPP_DUMMY_DATA1, %x)\n",
+		       __func__, data, rgb_screen & 0x00ffffff);
+	}
+	return count;
+}
+
+
+
 static ssize_t video_nonlinear_factor_show(struct class *cla,
 					   struct class_attribute *attr,
 					   char *buf)
@@ -6056,8 +6806,12 @@ static ssize_t frame_width_show(struct class *cla,
 			struct class_attribute *attr,
 			char *buf)
 {
-	if (cur_dispbuf)
-		return sprintf(buf, "%d\n", cur_dispbuf->width);
+	if (cur_dispbuf) {
+		if (cur_dispbuf->type & VIDTYPE_COMPRESS)
+			return sprintf(buf, "%d\n", cur_dispbuf->compWidth);
+		else
+			return sprintf(buf, "%d\n", cur_dispbuf->width);
+	}
 
 	return sprintf(buf, "NA\n");
 }
@@ -6065,8 +6819,12 @@ static ssize_t frame_width_show(struct class *cla,
 static ssize_t frame_height_show(struct class *cla,
 				 struct class_attribute *attr, char *buf)
 {
-	if (cur_dispbuf)
-		return sprintf(buf, "%d\n", cur_dispbuf->height);
+	if (cur_dispbuf) {
+		if (cur_dispbuf->type & VIDTYPE_COMPRESS)
+			return sprintf(buf, "%d\n", cur_dispbuf->compHeight);
+		else
+			return sprintf(buf, "%d\n", cur_dispbuf->height);
+	}
 
 	return sprintf(buf, "NA\n");
 }
@@ -6074,15 +6832,22 @@ static ssize_t frame_height_show(struct class *cla,
 static ssize_t frame_format_show(struct class *cla,
 				 struct class_attribute *attr, char *buf)
 {
+	ssize_t ret = 0;
+
 	if (cur_dispbuf) {
 		if ((cur_dispbuf->type & VIDTYPE_TYPEMASK) ==
 		    VIDTYPE_INTERLACE_TOP)
-			return sprintf(buf, "interlace-top\n");
+			ret = sprintf(buf, "interlace-top\n");
 		else if ((cur_dispbuf->type & VIDTYPE_TYPEMASK) ==
 			 VIDTYPE_INTERLACE_BOTTOM)
-			return sprintf(buf, "interlace-bottom\n");
+			ret = sprintf(buf, "interlace-bottom\n");
 		else
-			return sprintf(buf, "progressive\n");
+			ret = sprintf(buf, "progressive\n");
+
+		if (cur_dispbuf->type & VIDTYPE_COMPRESS)
+			ret += sprintf(buf + ret, "Compressed\n");
+
+		return ret;
 	}
 
 	return sprintf(buf, "NA\n");
@@ -6464,6 +7229,26 @@ static ssize_t show_first_frame_nosync_store(struct class *cla,
 	return count;
 }
 
+static ssize_t show_first_picture_store(struct class *cla,
+				   struct class_attribute *attr,
+				   const char *buf, size_t count)
+{
+	size_t r;
+	int value;
+
+	r = sscanf(buf, "%d", &value);
+
+	if (r != 1)
+		return -EINVAL;
+
+	if (value == 0)
+		show_first_picture = false;
+	else
+		show_first_picture = true;
+
+	return count;
+}
+
 static ssize_t video_free_keep_buffer_store(struct class *cla,
 				   struct class_attribute *attr,
 				   const char *buf, size_t count)
@@ -6481,6 +7266,25 @@ static ssize_t video_free_keep_buffer_store(struct class *cla,
 }
 
 
+static ssize_t free_cma_buffer_store(struct class *cla,
+				   struct class_attribute *attr,
+				   const char *buf, size_t count)
+{
+	size_t r;
+	int val;
+	r = sscanf(buf, "%d", &val);
+	if (r != 1)
+		return -EINVAL;
+	if (val == 1) {
+		pr_info("start to free cma buffer\n");
+		vh265_free_cmabuf();
+		vh264_4k_free_cmabuf();
+		vdec_free_cmabuf();
+	}
+	return count;
+}
+
+
 static struct class_attribute amvideo_class_attrs[] = {
 	__ATTR(axis,
 	       S_IRUGO | S_IWUSR | S_IWGRP,
@@ -6538,6 +7342,10 @@ static struct class_attribute amvideo_class_attrs[] = {
 	       S_IRUGO | S_IWUSR,
 	       video_test_screen_show,
 	       video_test_screen_store),
+	__ATTR(rgb_screen,
+	       S_IRUGO | S_IWUSR,
+	       video_rgb_screen_show,
+	       video_rgb_screen_store),
 	__ATTR(file_name,
 	       S_IRUGO | S_IWUSR,
 	       video_filename_show,
@@ -6585,6 +7393,9 @@ static struct class_attribute amvideo_class_attrs[] = {
 	       S_IRUGO | S_IWUSR,
 	       show_first_frame_nosync_show,
 	       show_first_frame_nosync_store),
+	__ATTR(show_first_picture,
+	       S_IRUGO | S_IWUSR | S_IWGRP, NULL,
+	       show_first_picture_store),
 	__ATTR(slowsync_repeat_enable,
 	       S_IRUGO | S_IWUSR,
 	       slowsync_repeat_enable_show,
@@ -6592,6 +7403,9 @@ static struct class_attribute amvideo_class_attrs[] = {
 	__ATTR(free_keep_buffer,
 	       S_IRUGO | S_IWUSR | S_IWGRP, NULL,
 	       video_free_keep_buffer_store),
+	__ATTR(free_cma_buffer,
+	       S_IRUGO | S_IWUSR | S_IWGRP, NULL,
+	       free_cma_buffer_store),
 #ifdef CONFIG_AM_VOUT
 	__ATTR_RO(device_resolution),
 #endif
@@ -6610,6 +7424,14 @@ static struct class_attribute amvideo_class_attrs[] = {
 	__ATTR_NULL
 };
 
+static struct class_attribute amvideo_poll_class_attrs[] = {
+	__ATTR_RO(frame_width),
+	__ATTR_RO(frame_height),
+	__ATTR_RO(vframe_states),
+	__ATTR_RO(video_state),
+	__ATTR_NULL
+};
+
 #ifdef CONFIG_PM
 static int amvideo_class_suspend(struct device *dev, pm_message_t state)
 {
@@ -6735,11 +7557,16 @@ static struct class amvideo_class = {
 #endif
 };
 
+static struct class amvideo_poll_class = {
+	.name = AMVIDEO_POLL_CLASS_NAME,
+	.class_attrs = amvideo_poll_class_attrs,
+};
+
 #ifdef TV_REVERSE
 static int __init vpp_axis_reverse(char *str)
 {
 	unsigned char *ptr = str;
-	pr_info("%s: bootargs is %s.\n", __func__, str);
+	pr_info("%s: bootargs is %s\n", __func__, str);
 	if (strstr(ptr, "1"))
 		reverse = true;
 	else
@@ -6748,7 +7575,7 @@ static int __init vpp_axis_reverse(char *str)
 	return 0;
 }
 
-__setup("panel_reverse=", vpp_axis_reverse);
+__setup("video_reverse=", vpp_axis_reverse);
 #endif
 
 struct vframe_s *get_cur_dispbuf(void)
@@ -6757,6 +7584,8 @@ struct vframe_s *get_cur_dispbuf(void)
 }
 
 static struct device *amvideo_dev;
+static struct device *amvideo_poll_dev;
+
 
 #ifdef CONFIG_AM_VOUT
 int vout_notify_callback(struct notifier_block *block, unsigned long cmd,
@@ -6916,8 +7745,8 @@ static void do_vpu_delay_work(struct work_struct *work)
 
 				switch_vpu_mem_pd_vmod(VPU_VIU_VD1,
 						       VPU_MEM_POWER_DOWN);
-				switch_vpu_mem_pd_vmod(VPU_AFBC_DEC,
-						       VPU_MEM_POWER_DOWN);
+				/*switch_vpu_mem_pd_vmod(VPU_AFBC_DEC,
+						       VPU_MEM_POWER_DOWN);*/
 				switch_vpu_mem_pd_vmod(VPU_DI_POST,
 						       VPU_MEM_POWER_DOWN);
 			}
@@ -6966,18 +7795,35 @@ static int __init video_early_init(void)
 
 	if (get_logo_vmode() >= VMODE_MAX) {
 #if 1				/* MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6 */
-		WRITE_VCBUS_REG_BITS(VPP_OFIFO_SIZE, 0x77f, VPP_OFIFO_SIZE_BIT,
-				     VPP_OFIFO_SIZE_WID);
+		if (is_meson_gxtvbb_cpu())
+			WRITE_VCBUS_REG_BITS(VPP_OFIFO_SIZE, 0xfff,
+				VPP_OFIFO_SIZE_BIT, VPP_OFIFO_SIZE_WID);
+		else
+			WRITE_VCBUS_REG_BITS(VPP_OFIFO_SIZE, 0x77f,
+				VPP_OFIFO_SIZE_BIT, VPP_OFIFO_SIZE_WID);
 #if 0			/* MESON_CPU_TYPE >= MESON_CPU_TYPE_MESONG9TV */
 		WRITE_VCBUS_REG_BITS(VPP_OFIFO_SIZE, 0x800, VPP_OFIFO_SIZE_BIT,
 				     VPP_OFIFO_SIZE_WID);
 #endif
 #endif			/* MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6 */
+	} else {
+		if (is_meson_gxtvbb_cpu())
+			WRITE_VCBUS_REG_BITS(VPP_OFIFO_SIZE, 0xfff,
+				VPP_OFIFO_SIZE_BIT, VPP_OFIFO_SIZE_WID);
 	}
 #if 1			/* MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8 */
 	WRITE_VCBUS_REG(VPP_PREBLEND_VD1_H_START_END, 4096);
 	WRITE_VCBUS_REG(VPP_BLEND_VD2_H_START_END, 4096);
 #endif
+	if (is_meson_txl_cpu()) {
+		/* fifo max size on txl :128*3=384[0x180]  */
+		WRITE_VCBUS_REG(VD1_IF0_LUMA_FIFO_SIZE, 0x180);
+		WRITE_VCBUS_REG(VD2_IF0_LUMA_FIFO_SIZE, 0x180);
+	}
+
+	 /*fix S905 av out flicker black dot*/
+	if (is_meson_gxbb_cpu())
+		SET_VCBUS_REG_MASK(VPP_MISC, VPP_OUT_SATURATE);
 
 	if (get_logo_vmode() >= VMODE_MAX) {
 		CLEAR_VCBUS_REG_MASK(VPP_VSC_PHASE_CTRL,
@@ -7008,7 +7854,17 @@ static int __init video_early_init(void)
 	WRITE_VCBUS_REG_BITS(VPU_OSD3_MMC_CTRL, 2, 12, 2);
 	/* select vdin_mmc_arb for VIU2_OSD1 request */
 #endif
-
+	/* default 10bit setting for gxm */
+	if (is_meson_gxm_cpu()) {
+		WRITE_VCBUS_REG_BITS(VIU_MISC_CTRL1, 0xff, 16, 8);
+		WRITE_VCBUS_REG(VPP_DOLBY_CTRL, 0x20000);
+		/* default setting is black for dummy data1& dumy data0,
+		for dummy data1 the y/cb/cr data width is 10bit on gxm,
+		for dummy data the y/cb/cr data width is 8bit but
+		vpp_dummy_data will be left shift 2bit auto on gxm!!! */
+		WRITE_VCBUS_REG(VPP_DUMMY_DATA1, 0x1020080);
+		WRITE_VCBUS_REG(VPP_DUMMY_DATA, 0x42020);
+	}
 	/* temp: enable VPU arb mem */
 	if (get_cpu_type() >= MESON_CPU_MAJOR_ID_GXBB)
 		switch_vpu_mem_pd_vmod(VPU_VPU_ARB, VPU_MEM_POWER_ON);
@@ -7016,40 +7872,6 @@ static int __init video_early_init(void)
 	return 0;
 }
 
-#ifdef SUPER_SCALER_OPEN
-static void super_scaler_init(void)
-{
-	/*load super scaler default cub setting */
-	WRITE_VCBUS_REG(0x3102, 0xf84848f8);
-	WRITE_VCBUS_REG(0x3103, 0xf84848f8);
-	WRITE_VCBUS_REG(0x3104, 0xf84848f8);
-	WRITE_VCBUS_REG(0x3105, 0xf84848f8);
-	WRITE_VCBUS_REG(0x3106, 0x02330344);
-	WRITE_VCBUS_REG(0x310a, 0x0080a0eb);
-	WRITE_VCBUS_REG(0x310c, 0x0080a0eb);
-	WRITE_VCBUS_REG(0x310d, 0x7a7a3a50);
-
-	WRITE_VCBUS_REG(0x3112, 0x00017f00);
-	WRITE_VCBUS_REG(0x3113, 0x00017f00);
-	WRITE_VCBUS_REG(0x3114, 0x00017f00);
-	WRITE_VCBUS_REG(0x3115, 0x00017f00);
-	WRITE_VCBUS_REG(0x311a, 0xf84848f8);
-	WRITE_VCBUS_REG(0x311b, 0xf84848f8);
-	WRITE_VCBUS_REG(0x311c, 0xf84848f8);
-	WRITE_VCBUS_REG(0x311d, 0xf84848f8);
-
-	WRITE_VCBUS_REG(0x311e, 0x02330344);
-	WRITE_VCBUS_REG(0x3122, 0x0080a0eb);
-	WRITE_VCBUS_REG(0x3124, 0x0080a0eb);
-	WRITE_VCBUS_REG(0x3125, 0x7a7a3a50);
-
-	WRITE_VCBUS_REG(0x312b, 0x00017f00);
-	WRITE_VCBUS_REG(0x312c, 0x00017f00);
-	WRITE_VCBUS_REG(0x312d, 0x00017f00);
-	WRITE_VCBUS_REG(0x312e, 0x00017f00);
-}
-#endif
-
 static int __init video_init(void)
 {
 	int r = 0;
@@ -7083,16 +7905,15 @@ static int __init video_init(void)
 		(1 << 0));	/* DDR clk / 2 */
 	}
 #endif
-#ifdef SUPER_SCALER_OPEN
-	super_scaler_init();
-#endif
-
 
 	DisableVideoLayer();
 	DisableVideoLayer2();
 
+	/* check super scaler support status */
+	vpp_super_scaler_support();
+
 #ifndef CONFIG_AM_VIDEO2
-	DisableVPP2VideoLayer();
+	/*DisableVPP2VideoLayer();*/
 #endif
 
 	cur_dispbuf = NULL;
@@ -7113,7 +7934,18 @@ static int __init video_init(void)
 	}
 #endif
 
-	/* sysfs node creation */
+    /* sysfs node creation */
+	r = class_register(&amvideo_poll_class);
+	if (r) {
+		amlog_level(LOG_LEVEL_ERROR, "create video_poll class fail.\n");
+#ifdef FIQ_VSYNC
+		free_irq(BRIDGE_IRQ, (void *)video_dev_id);
+#else
+		vdec_free_irq(VSYNC_IRQ, (void *)video_dev_id);
+#endif
+		goto err1;
+	}
+
 	r = class_register(&amvideo_class);
 	if (r) {
 		amlog_level(LOG_LEVEL_ERROR, "create video class fail.\n");
@@ -7133,15 +7965,34 @@ static int __init video_init(void)
 		goto err2;
 	}
 
+	r = register_chrdev(0, "amvideo_poll", &amvideo_poll_fops);
+	if (r < 0) {
+		amlog_level(LOG_LEVEL_ERROR,
+			"Can't register major for amvideo_poll device\n");
+		goto err3;
+	}
+
+	amvideo_poll_major = r;
+
 	amvideo_dev = device_create(&amvideo_class, NULL,
 		MKDEV(AMVIDEO_MAJOR, 0), NULL, DEVICE_NAME);
 
 	if (IS_ERR(amvideo_dev)) {
 		amlog_level(LOG_LEVEL_ERROR, "Can't create amvideo device\n");
-		goto err3;
+		goto err4;
+	}
+
+	amvideo_poll_dev = device_create(&amvideo_poll_class, NULL,
+		MKDEV(amvideo_poll_major, 0), NULL, "amvideo_poll");
+
+	if (IS_ERR(amvideo_poll_dev)) {
+		amlog_level(LOG_LEVEL_ERROR,
+			"Can't create amvideo_poll device\n");
+		goto err5;
 	}
 
 	init_waitqueue_head(&amvideo_trick_wait);
+	init_waitqueue_head(&amvideo_sizechange_wait);
 #if 1				/* MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8 */
 	INIT_WORK(&vpu_delay_work, do_vpu_delay_work);
 #endif
@@ -7203,7 +8054,10 @@ static int __init video_init(void)
 #endif
 
 	return 0;
-
+ err5:
+	device_destroy(&amvideo_class, MKDEV(AMVIDEO_MAJOR, 0));
+ err4:
+	unregister_chrdev(amvideo_poll_major, "amvideo_poll");
  err3:
 	unregister_chrdev(AMVIDEO_MAJOR, DEVICE_NAME);
 
@@ -7211,10 +8065,9 @@ static int __init video_init(void)
 #ifdef FIQ_VSYNC
 	unregister_fiq_bridge_handle(&vsync_fiq_bridge);
 #endif
-
- err1:
 	class_unregister(&amvideo_class);
-
+ err1:
+	class_unregister(&amvideo_poll_class);
 #ifdef FIQ_VSYNC
  err0:
 #endif
@@ -7235,14 +8088,17 @@ static void __exit video_exit(void)
 	vsync2_fiq_down();
 #endif
 	device_destroy(&amvideo_class, MKDEV(AMVIDEO_MAJOR, 0));
+	device_destroy(&amvideo_poll_class, MKDEV(amvideo_poll_major, 0));
 
 	unregister_chrdev(AMVIDEO_MAJOR, DEVICE_NAME);
+	unregister_chrdev(amvideo_poll_major, "amvideo_poll");
 
 #ifdef FIQ_VSYNC
 	unregister_fiq_bridge_handle(&vsync_fiq_bridge);
 #endif
 
 	class_unregister(&amvideo_class);
+	class_unregister(&amvideo_poll_class);
 
 #ifdef CONFIG_GE2D_KEEP_FRAME
 	ge2d_videotask_release();
@@ -7320,6 +8176,15 @@ module_param(omx_pts_interval_upper, int, 0664);
 MODULE_PARM_DESC(omx_pts_interval_lower, "\n omx_pts_interval\n");
 module_param(omx_pts_interval_lower, int, 0664);
 
+MODULE_PARM_DESC(bypass_pps, "\n pps_bypass\n");
+module_param(bypass_pps, bool, 0664);
+
+MODULE_PARM_DESC(platform_type, "\n platform_type\n");
+module_param(platform_type, bool, 0664);
+
+MODULE_PARM_DESC(process_3d_type, "\n process_3d_type\n");
+module_param(process_3d_type, uint, 0664);
+
 
 #ifdef TV_REVERSE
 module_param(reverse, bool, 0644);
-- 
1.9.1

From f268f038fd90ad51e0786793ceab568ffcb66c4b Mon Sep 17 00:00:00 2001
From: Jamie Coldhill <wrxtasy@amnet.net.au>
Date: Sun, 2 Oct 2016 19:31:53 +0800
Subject: [PATCH 10/13] Update: various h264 & h265 codecs

---
 drivers/amlogic/amports/vh264.c      | 1049 ++++++++++---------
 drivers/amlogic/amports/vh264_4k2k.c |   39 +-
 drivers/amlogic/amports/vh265.c      | 1838 +++++++++++++++++++++++-----------
 3 files changed, 1831 insertions(+), 1095 deletions(-)

diff --git a/drivers/amlogic/amports/vh264.c b/drivers/amlogic/amports/vh264.c
index 8a09007..72c5793 100644
--- a/drivers/amlogic/amports/vh264.c
+++ b/drivers/amlogic/amports/vh264.c
@@ -37,6 +37,7 @@
 #include <linux/slab.h>
 #include "amports_priv.h"
 #include <linux/amlogic/canvas/canvas.h>
+#include <linux/amlogic/codec_mm/codec_mm.h>
 
 #include "vdec.h"
 #include "vdec_reg.h"
@@ -45,13 +46,11 @@
 #include "streambuf.h"
 #include <linux/delay.h>
 
-
-#ifdef CONFIG_GE2D_KEEP_FRAME
 #include <linux/amlogic/ge2d/ge2d.h>
-#endif
 
 #define DRIVER_NAME "amvdec_h264"
 #define MODULE_NAME "amvdec_h264"
+#define MEM_NAME "codec_264"
 
 #define HANDLE_H264_IRQ
 /* #define DEBUG_PTS */
@@ -67,15 +66,13 @@
 #define PTS2DUR(x) ((x)*96/90)
 #define DUR2PTS_REM(x) (x*90 - DUR2PTS(x)*96)
 #define FIX_FRAME_RATE_CHECK_IDRFRAME_NUM 2
+#define VDEC_CLOCK_ADJUST_FRAME 50
 
 static inline bool close_to(int a, int b, int m)
 {
 	return (abs(a - b) < m) ? true : false;
 }
 
-/* #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6 */
-#define NV21
-/* #endif */
 static DEFINE_MUTEX(vh264_mutex);
 /* 12M for L41 */
 #define MAX_DPB_BUFF_SIZE       (12*1024*1024)
@@ -83,6 +80,7 @@ static DEFINE_MUTEX(vh264_mutex);
 #define AVIL_DPB_BUFF_SIZE      0x01ec2000
 
 #define DEF_BUF_START_ADDR            0x1000000
+#define V_BUF_ADDR_OFFSET_NEW         (0x1ee000)
 #define V_BUF_ADDR_OFFSET             (0x13e000)
 
 #define PIC_SINGLE_FRAME        0
@@ -104,6 +102,8 @@ static DEFINE_MUTEX(vh264_mutex);
 #define SWITCHING_STATE_OFF       0
 #define SWITCHING_STATE_ON_CMD3   1
 #define SWITCHING_STATE_ON_CMD1   2
+#define SWITCHING_STATE_ON_CMD1_PENDING   3
+
 
 #define DEC_CONTROL_FLAG_FORCE_2997_1080P_INTERLACE 0x0001
 #define DEC_CONTROL_FLAG_FORCE_2500_576P_INTERLACE  0x0002
@@ -122,7 +122,7 @@ struct buffer_spec_s {
 	int y_canvas_index;
 	int u_canvas_index;
 	int v_canvas_index;
-#ifdef CONFIG_GE2D_KEEP_FRAME
+
 	unsigned int y_canvas_width;
 	unsigned int u_canvas_width;
 	unsigned int v_canvas_width;
@@ -130,7 +130,9 @@ struct buffer_spec_s {
 	unsigned int y_canvas_height;
 	unsigned int u_canvas_height;
 	unsigned int v_canvas_height;
-#endif
+
+	unsigned long phy_addr;
+	int alloc_count;
 };
 
 #define spec2canvas(x)  \
@@ -178,15 +180,17 @@ static u32 frame_packing_type;
 static DECLARE_KFIFO(newframe_q, struct vframe_s *, VF_POOL_SIZE);
 static DECLARE_KFIFO(display_q, struct vframe_s *, VF_POOL_SIZE);
 static DECLARE_KFIFO(recycle_q, struct vframe_s *, VF_POOL_SIZE);
+static DECLARE_KFIFO(delay_display_q, struct vframe_s *, VF_POOL_SIZE);
 
 static struct vframe_s vfpool[VF_POOL_SIZE];
 static s32 vfbuf_use[VF_BUF_NUM];
 static struct buffer_spec_s buffer_spec[VF_BUF_NUM];
-static struct vframe_s switching_fense_vf;
+static struct buffer_spec_s fense_buffer_spec[2];
+static struct vframe_s fense_vf[2];
 
 static struct timer_list recycle_timer;
 static u32 stat;
-static unsigned long buf_start;
+static unsigned long buf_start, buf_end;
 static u32 buf_size;
 static s32 buf_offset;
 static u32 ucode_map_start;
@@ -208,6 +212,7 @@ static u32 h264_ar;
 #ifdef DROP_B_FRAME_FOR_1080P_50_60FPS
 static u32 last_interlaced;
 #endif
+static bool is_4k;
 static unsigned char h264_first_pts_ready;
 static bool h264_first_valid_pts_ready;
 static u32 h264pts1, h264pts2;
@@ -225,6 +230,8 @@ static u32 vh264_running;
 static s32 vh264_stream_switching_state;
 static s32 vh264_eos;
 static struct vframe_s *p_last_vf;
+static s32 iponly_early_mode;
+
 /*TODO irq*/
 #if 1
 static u32 last_pts, last_pts_remainder;
@@ -233,6 +240,8 @@ static u32 last_pts;
 #endif
 static bool check_pts_discontinue;
 static u32 wait_buffer_counter;
+static u32 video_signal_from_vui;
+
 static uint error_recovery_mode;
 static uint error_recovery_mode_in = 3;
 static uint error_recovery_mode_use = 3;
@@ -251,6 +260,7 @@ static atomic_t vh264_active = ATOMIC_INIT(0);
 static int vh264_reset;
 static struct work_struct error_wd_work;
 static struct work_struct stream_switching_work;
+static struct work_struct set_parameter_work;
 
 static struct dec_sysinfo vh264_amstream_dec_info;
 static dma_addr_t mc_dma_handle;
@@ -261,6 +271,7 @@ static u64 first_pts64;
 static bool first_pts_cached;
 static void *sei_data_buffer;
 static dma_addr_t sei_data_buffer_phys;
+static int clk_adj_frame_count;
 
 #define MC_OFFSET_HEADER    0x0000
 #define MC_OFFSET_DATA      0x1000
@@ -275,7 +286,10 @@ static dma_addr_t sei_data_buffer_phys;
 #define MODE_FULL  1
 
 static DEFINE_SPINLOCK(lock);
+static DEFINE_SPINLOCK(prepare_lock);
+static DEFINE_SPINLOCK(recycle_lock);
 
+static bool block_display_q;
 static int vh264_stop(int mode);
 static s32 vh264_init(void);
 
@@ -283,7 +297,6 @@ static s32 vh264_init(void);
 
 static bool pts_discontinue;
 
-#ifdef CONFIG_GE2D_KEEP_FRAME
 static struct ge2d_context_s *ge2d_videoh264_context;
 
 static int ge2d_videoh264task_init(void)
@@ -313,8 +326,8 @@ static int ge2d_canvas_dup(struct canvas_s *srcy, struct canvas_s *srcu,
 {
 
 	struct config_para_ex_s ge2d_config;
-	pr_info("[%s]h264 ADDR srcy[0x%lx] srcu[0x%lx] des[0x%lx]\n",
-		   __func__, srcy->addr, srcu->addr, des->addr);
+	/* pr_info("[%s]h264 ADDR srcy[0x%lx] srcu[0x%lx] des[0x%lx]\n",
+		   __func__, srcy->addr, srcu->addr, des->addr); */
 	memset(&ge2d_config, 0, sizeof(struct config_para_ex_s));
 
 	ge2d_config.alu_const_color = 0;
@@ -365,7 +378,6 @@ static int ge2d_canvas_dup(struct canvas_s *srcy, struct canvas_s *srcu,
 
 	return 0;
 }
-#endif
 
 static inline int fifo_level(void)
 {
@@ -376,7 +388,6 @@ static inline int fifo_level(void)
 void spec_set_canvas(struct buffer_spec_s *spec,
 					 unsigned width, unsigned height)
 {
-#ifdef NV21
 	canvas_config(spec->y_canvas_index,
 			spec->y_addr,
 			width, height,
@@ -386,25 +397,44 @@ void spec_set_canvas(struct buffer_spec_s *spec,
 				  spec->u_addr,
 				  width, height / 2,
 				  CANVAS_ADDR_NOWRAP, CANVAS_BLKMODE_32X32);
-#else
-	canvas_config(spec->y_canvas_index,
-				  spec->y_addr,
-				  width, height,
-				  CANVAS_ADDR_NOWRAP, CANVAS_BLKMODE_32X32);
+	return;
+}
 
-	canvas_config(spec->u_canvas_index,
-				  spec->u_addr,
-				  width / 2,
-				  height / 2,
-				  CANVAS_ADDR_NOWRAP, CANVAS_BLKMODE_32X32);
+static void prepare_display_q(void)
+{
+	unsigned long flags;
+	int count;
 
-	canvas_config(spec->v_canvas_index,
-				  spec->v_addr,
-				  width / 2,
-				  height / 2,
-				  CANVAS_ADDR_NOWRAP, CANVAS_BLKMODE_32X32);
-#endif
-	return;
+	spin_lock_irqsave(&prepare_lock, flags);
+
+	if (block_display_q) {
+		spin_unlock_irqrestore(&prepare_lock, flags);
+		return;
+	}
+
+	spin_unlock_irqrestore(&prepare_lock, flags);
+
+	count  = (int)VF_POOL_SIZE -
+		kfifo_len(&delay_display_q) -
+		kfifo_len(&display_q) -
+		kfifo_len(&recycle_q) -
+		kfifo_len(&newframe_q);
+
+	if ((vh264_stream_switching_state != SWITCHING_STATE_OFF)
+		|| is_4k)
+		count = 0;
+	else
+		count = (count < 2) ? 0 : 2;
+
+	while (kfifo_len(&delay_display_q) > count) {
+		struct vframe_s *vf;
+		if (kfifo_get(&delay_display_q, &vf)) {
+			kfifo_put(&display_q,
+				(const struct vframe_s *)vf);
+			vf_notify_receiver(PROVIDER_NAME,
+				VFRAME_EVENT_PROVIDER_VFRAME_READY, NULL);
+		}
+	}
 }
 
 static struct vframe_s *vh264_vf_peek(void *op_arg)
@@ -429,7 +459,14 @@ static struct vframe_s *vh264_vf_get(void *op_arg)
 
 static void vh264_vf_put(struct vframe_s *vf, void *op_arg)
 {
-	kfifo_put(&recycle_q, (const struct vframe_s *)vf);
+	unsigned long flags;
+
+	spin_lock_irqsave(&recycle_lock, flags);
+
+	  if ((vf != &fense_vf[0]) && (vf != &fense_vf[1]))
+		kfifo_put(&recycle_q, (const struct vframe_s *)vf);
+
+	spin_unlock_irqrestore(&recycle_lock, flags);
 }
 
 static int vh264_event_cb(int type, void *data, void *private_data)
@@ -459,7 +496,8 @@ static int vh264_vf_states(struct vframe_states *states, void *op_arg)
 
 	states->vf_pool_size = VF_POOL_SIZE;
 	states->buf_free_num = kfifo_len(&newframe_q);
-	states->buf_avail_num = kfifo_len(&display_q);
+	states->buf_avail_num = kfifo_len(&display_q) +
+				kfifo_len(&delay_display_q);
 	states->buf_recycle_num = kfifo_len(&recycle_q);
 
 	spin_unlock_irqrestore(&lock, flags);
@@ -467,7 +505,7 @@ static int vh264_vf_states(struct vframe_states *states, void *op_arg)
 	return 0;
 }
 
-#ifdef CONFIG_POST_PROCESS_MANAGER_3D_PROCESS
+#if 0
 static tvin_trans_fmt_t convert_3d_format(u32 type)
 {
 	const tvin_trans_fmt_t conv_tab[] = {
@@ -494,8 +532,7 @@ static void set_frame_info(struct vframe_s *vf)
 	vf->flag = 0;
 
 #ifdef CONFIG_POST_PROCESS_MANAGER_3D_PROCESS
-	vf->trans_fmt = convert_3d_format(frame_packing_type);
-
+	vf->trans_fmt = 0;
 	if ((vf->trans_fmt == TVIN_TFMT_3D_LRF) ||
 		(vf->trans_fmt == TVIN_TFMT_3D_LA)) {
 		vf->left_eye.start_x = 0;
@@ -534,6 +571,7 @@ static void vh264_ppmgr_reset(void)
 	pr_info("vh264dec: vf_ppmgr_reset\n");
 }
 #endif
+
 static int get_max_dpb_size(int level_idc, int mb_width, int mb_height)
 {
 	int size, r;
@@ -576,28 +614,35 @@ static int get_max_dpb_size(int level_idc, int mb_width, int mb_height)
 		break;
 	default:
 		return 0;
-	}
-	size = (mb_width * mb_height + (mb_width * mb_height / 2)) * 256 * 10;
-	r = (r * 1024 + size-1) / size;
-	r = min(r, 16);
-	pr_info("max_dpb %d size:%d\n", r, size);
-	return r;
+		}
+		size = (mb_width * mb_height +
+				(mb_width * mb_height / 2)) * 256 * 10;
+		r = (r * 1024 + size-1) / size;
+		r = min(r, 16);
+		/*pr_info("max_dpb %d size:%d\n", r, size);*/
+		return r;
 }
-
-
-static int vh264_set_params(void)
+static void vh264_set_params(struct work_struct *work)
 {
 	int aspect_ratio_info_present_flag, aspect_ratio_idc;
 	int max_dpb_size, actual_dpb_size, max_reference_size;
-	int i, mb_mv_byte;
-	unsigned addr;
+	int i, mb_mv_byte, start_addr;
+	unsigned long addr;
 	unsigned int post_canvas;
 	unsigned int frame_mbs_only_flag;
-	unsigned int chroma_format_idc, chroma444;
-	unsigned int crop_infor, crop_bottom, crop_right, level_idc = 0;
-
+	unsigned int chroma_format_idc, chroma444, video_signal;
+	unsigned int crop_infor, crop_bottom, crop_right, level_idc;
+	u32 disp_addr = 0xffffffff;
+	struct canvas_s cur_canvas;
+	if (!atomic_read(&vh264_active))
+		return;
+	mutex_lock(&vh264_mutex);
+	if (vh264_stream_switching_state == SWITCHING_STATE_ON_CMD1)
+		vh264_stream_switching_state = SWITCHING_STATE_ON_CMD1_PENDING;
 	post_canvas = get_post_canvas();
-
+	clk_adj_frame_count = 0;
+	/* set to max decoder clock rate at the beginning */
+	vdec_source_changed(VFORMAT_H264, 3840, 2160, 60);
 	timing_info_present_flag = 0;
 	mb_width = READ_VREG(AV_SCRATCH_1);
 	seq_info = READ_VREG(AV_SCRATCH_2);
@@ -605,13 +650,38 @@ static int vh264_set_params(void)
 	num_units_in_tick = READ_VREG(AV_SCRATCH_4);
 	time_scale = READ_VREG(AV_SCRATCH_5);
 	level_idc = READ_VREG(AV_SCRATCH_A);
+	video_signal = READ_VREG(AV_SCRATCH_H);
+	video_signal_from_vui =
+				((video_signal & 0xffff) << 8) |
+				((video_signal & 0xff0000) >> 16) |
+				((video_signal & 0x3f000000));
+/*	pr_info("video_signal_type_present_flag 0x%x\n",
+				(video_signal_from_vui >> 29) & 1);
+	pr_info("video_format  0x%x\n",
+				(video_signal_from_vui >> 26) & 7);
+	pr_info("video_full_range_flag  0x%x\n",
+				(video_signal_from_vui >> 25) & 1);
+	pr_info("color_description_present_flag  0x%x\n",
+				(video_signal_from_vui >> 24) & 1);
+	pr_info("color_primaries	0x%x\n",
+				(video_signal_from_vui >> 16) & 0xff);
+	pr_info("transfer_characteristic	0x%x\n",
+				(video_signal_from_vui >> 8) & 0xff);
+	pr_info("matrix_coefficient	0x%x\n",
+				video_signal_from_vui  & 0xff);*/
+
 	mb_total = (mb_width >> 8) & 0xffff;
 	max_reference_size = (mb_width >> 24) & 0x7f;
 	mb_mv_byte = (mb_width & 0x80000000) ? 24 : 96;
+	if (ucode_type == UCODE_IP_ONLY_PARAM)
+		mb_mv_byte = 96;
 	mb_width = mb_width & 0xff;
+	if (get_cpu_type() >= MESON_CPU_MAJOR_ID_GXTVBB) {
+		if (!mb_width && mb_total)
+			mb_width = 256;
+	}
 	mb_height = mb_total / mb_width;
 	last_duration = 0;
-
 	/* AV_SCRATCH_2
 	   bit 15: frame_mbs_only_flag
 	   bit 13-14: chroma_format_idc */
@@ -662,13 +732,14 @@ static int vh264_set_params(void)
 							   chroma444)
 							  - 1));
 		}
+#if 0
 		pr_info
 		("frame_mbs_only_flag %d, crop_bottom %d,  frame_height %d, ",
 		 frame_mbs_only_flag, crop_bottom, frame_height);
 		pr_info
 		("mb_height %d,crop_right %d, frame_width %d, mb_width %d\n",
 		 mb_height, crop_right, frame_width, mb_width);
-
+#endif
 		if (frame_height == 1088)
 			frame_height = 1080;
 	}
@@ -677,156 +748,138 @@ static int vh264_set_params(void)
 	mb_height = (mb_height + 3) & 0xfffffffc;
 	mb_total = mb_width * mb_height;
 
-	if (mb_total > 8160) {	/* resolution exceed 1920x1088, */
-		pr_info("mb_total %d, mb_width %d, mb_height %d\n", mb_total,
-			   mb_width, mb_height);
-		return -1;
-	}
-
-/*	max_dpb_size =
-		(frame_buffer_size - mb_total * 384 * 4 -
-		 mb_total * mb_mv_byte) /
-		(mb_total * 384 + mb_total * mb_mv_byte);
-	if (max_reference_size <= max_dpb_size) {
-		max_dpb_size = MAX_DPB_BUFF_SIZE / (mb_total * 384);
-		if (max_dpb_size > 16)
-			max_dpb_size = 16;
-
-		if (max_refer_buf && (max_reference_size < max_dpb_size))
-			max_reference_size = max_dpb_size + 1;
-		else {
-			max_dpb_size = max_reference_size;
-			max_reference_size++;
-		}
-	} else {
-		max_dpb_size = max_reference_size;
-		max_reference_size++;
-	}
-
-	if (mb_total * 384 * (max_dpb_size + 3) +
-		mb_total * mb_mv_byte * max_reference_size >
-		frame_buffer_size) {
-		max_dpb_size =
-			(frame_buffer_size - mb_total * 384 * 3 -
-			 mb_total * mb_mv_byte) / (mb_total * 384 +
-				 mb_total * mb_mv_byte);
-		max_reference_size = max_dpb_size + 1;
-	}
-
-	actual_dpb_size =
-		(frame_buffer_size -
-		 mb_total * mb_mv_byte * max_reference_size) / (mb_total * 384);
-	if (actual_dpb_size > 24)
-		actual_dpb_size = 24;
-
-	if (max_dpb_size > 5) {
-		if (actual_dpb_size < max_dpb_size + 3) {
-			actual_dpb_size = max_dpb_size + 3;
-			if (actual_dpb_size > 24)
-				actual_dpb_size = 24;
-			max_reference_size =
-				(frame_buffer_size -
-				 mb_total * 384 * actual_dpb_size) / (mb_total *
-						 mb_mv_byte);
+	 /*max_reference_size <= max_dpb_size <= actual_dpb_size*/
+	 is_4k = (mb_total > 8160) ? true:false;
+	if (is_4k) {
+		/*4k2k*/
+		if (get_cpu_type() >= MESON_CPU_MAJOR_ID_GXTVBB) {
+			max_dpb_size = get_max_dpb_size(
+					level_idc, mb_width, mb_height);
+			actual_dpb_size = max_dpb_size + 4;
+		      if (actual_dpb_size > VF_BUF_NUM)
+			actual_dpb_size = VF_BUF_NUM;
+		} else {
+			vh264_running = 0;
+			fatal_error_flag =
+			DECODER_FATAL_ERROR_SIZE_OVERFLOW;
+			mutex_unlock(&vh264_mutex);
+			pr_err("oversize ! mb_total %d,\n", mb_total);
+			return;
 		}
 	} else {
-		if (actual_dpb_size < max_dpb_size + 4) {
+		actual_dpb_size = (frame_buffer_size - mb_total * mb_mv_byte *
+				max_reference_size) / (mb_total * 384);
+		actual_dpb_size = min(actual_dpb_size, VF_BUF_NUM);
+		max_dpb_size = get_max_dpb_size(level_idc, mb_width, mb_height);
+		if (actual_dpb_size < (max_dpb_size + 4)) {
 			actual_dpb_size = max_dpb_size + 4;
-			if (actual_dpb_size > 24)
-				actual_dpb_size = 24;
-			max_reference_size =
-				(frame_buffer_size -
-				 mb_total * 384 * actual_dpb_size) / (mb_total *
-						 mb_mv_byte);
+			if (actual_dpb_size > VF_BUF_NUM)
+				actual_dpb_size = VF_BUF_NUM;
 		}
+		 pr_info("actual_dpb_size %d max_dpb_size %d\n",
+				 actual_dpb_size, max_dpb_size);
 	}
-*/
-	/* max_reference_size <= max_dpb_size <= actual_dpb_size */
-	actual_dpb_size = (frame_buffer_size -
-		mb_total * mb_mv_byte *
-		max_reference_size) / (mb_total * 384);
-	actual_dpb_size = min(actual_dpb_size, 24);
-	max_dpb_size = get_max_dpb_size(level_idc, mb_width, mb_height);
 	if (max_dpb_size == 0)
 		max_dpb_size = actual_dpb_size;
 	else
-		max_dpb_size = min(max_dpb_size, actual_dpb_size);
-
+	   max_dpb_size = min(max_dpb_size, actual_dpb_size);
 	max_reference_size = min(max_reference_size, actual_dpb_size-1);
 	max_dpb_size = max(max_reference_size, max_dpb_size);
 	max_reference_size++;
 
-
+	start_addr = addr = buf_start;
+	if (is_4k)
+		addr += ((mb_total << 8) + (mb_total << 7));/*keep last frame */
+	WRITE_VREG(AV_SCRATCH_1, addr);
+	WRITE_VREG(AV_SCRATCH_3, post_canvas);	/* should be modified later */
+	canvas_read((READ_VCBUS_REG(VD1_IF0_CANVAS0) & 0xff), &cur_canvas);
+	disp_addr = (cur_canvas.addr + 7) >> 3;
+	if ((addr + mb_total * mb_mv_byte * max_reference_size)
+		>= buf_end) {
+				fatal_error_flag =
+					DECODER_FATAL_ERROR_NO_MEM;
+				vh264_running = 0;
+				mutex_unlock(&vh264_mutex);
+				pr_err("mv buf not enough!\n");
+				return;
+		}
+	addr += mb_total * mb_mv_byte * max_reference_size;
+	WRITE_VREG(AV_SCRATCH_4, addr);
 	if (!(READ_VREG(AV_SCRATCH_F) & 0x1)) {
-		addr = buf_start;
-
-		if (actual_dpb_size <= 21) {
-			for (i = 0; i < actual_dpb_size; i++) {
-				buffer_spec[i].y_addr = addr;
-				addr += mb_total << 8;
-#ifdef NV21
-				buffer_spec[i].u_addr = addr;
-				buffer_spec[i].v_addr = addr;
-				addr += mb_total << 7;
+		bool use_alloc = is_4k ? true:false;
+		int alloc_count = 0;
+		for (i = 0; i < actual_dpb_size; i++) {
+			if (((addr + (mb_total << 8) + (mb_total << 7))
+					>= buf_end) && (!use_alloc)) {
+				pr_info("start alloc for %d\n", i);
+				use_alloc = true;
+			}
+			if (use_alloc) {
+#ifdef DOUBLE_WRITE
+				int page_count =
+				PAGE_ALIGN((mb_total << 8) + (mb_total
+						<< 7) +	(mb_total << 6) +
+						(mb_total << 5)) / PAGE_SIZE;
 #else
-				buffer_spec[i].u_addr = addr;
-				addr += mb_total << 6;
-				buffer_spec[i].v_addr = addr;
-				addr += mb_total << 6;
-#endif
-				vfbuf_use[i] = 0;
-
-#ifdef NV21
-				buffer_spec[i].y_canvas_index = 128 + i * 2;
-				buffer_spec[i].u_canvas_index = 128 + i * 2 + 1;
-				buffer_spec[i].v_canvas_index = 128 + i * 2 + 1;
-#ifdef CONFIG_GE2D_KEEP_FRAME
-				buffer_spec[i].y_canvas_width = mb_width << 4;
-				buffer_spec[i].y_canvas_height = mb_height << 4;
-				buffer_spec[i].u_canvas_width = mb_width << 4;
-				buffer_spec[i].u_canvas_height = mb_height << 4;
-				buffer_spec[i].v_canvas_width = mb_width << 4;
-				buffer_spec[i].v_canvas_height = mb_height << 4;
-#endif
-				canvas_config(128 + i * 2,
-						buffer_spec[i].y_addr,
-						mb_width << 4, mb_height << 4,
-						CANVAS_ADDR_NOWRAP,
-						CANVAS_BLKMODE_32X32);
-				canvas_config(128 + i * 2 + 1,
-						buffer_spec[i].u_addr,
-						mb_width << 4, mb_height << 3,
-						CANVAS_ADDR_NOWRAP,
-						CANVAS_BLKMODE_32X32);
-				WRITE_VREG(ANC0_CANVAS_ADDR + i,
-						spec2canvas(&buffer_spec[i]));
-#else
-				buffer_spec[i].y_canvas_index = 128 + i * 3;
-				buffer_spec[i].u_canvas_index = 128 + i * 3 + 1;
-				buffer_spec[i].v_canvas_index = 128 + i * 3 + 2;
-
-				canvas_config(128 + i * 3,
-						buffer_spec[i].y_addr,
-						mb_width << 4, mb_height << 4,
-						CANVAS_ADDR_NOWRAP,
-						CANVAS_BLKMODE_32X32);
-				canvas_config(128 + i * 3 + 1,
-						buffer_spec[i].u_addr,
-						mb_width << 3, mb_height << 3,
-						CANVAS_ADDR_NOWRAP,
-						CANVAS_BLKMODE_32X32);
-				canvas_config(128 + i * 3 + 2,
-						buffer_spec[i].v_addr,
-						mb_width << 3, mb_height << 3,
-						CANVAS_ADDR_NOWRAP,
-						CANVAS_BLKMODE_32X32);
-				WRITE_VREG(ANC0_CANVAS_ADDR + i,
-						spec2canvas(&buffer_spec[i]));
+				int page_count =
+					PAGE_ALIGN((mb_total << 8) +
+						(mb_total << 7)) / PAGE_SIZE;
 #endif
+				if (buffer_spec[i].phy_addr) {
+					if (page_count !=
+						buffer_spec[i].alloc_count) {
+						pr_info("Delay release cma	buf %d\n",
+							i);
+						codec_mm_free_for_dma(MEM_NAME,
+						buffer_spec[i].phy_addr);
+						buffer_spec[i].phy_addr = 0;
+						buffer_spec[i].alloc_count = 0;
+					} else
+					pr_info("Re-use CMA buffer %d\n", i);
+				}
+				if (!buffer_spec[i].phy_addr) {
+					if (!codec_mm_enough_for_size(
+						page_count * PAGE_SIZE)) {
+						buffer_spec[i].alloc_count = 0;
+						fatal_error_flag =
+						DECODER_FATAL_ERROR_NO_MEM;
+						vh264_running = 0;
+						mutex_unlock(&vh264_mutex);
+						pr_err("CMA  not enough mem! %d\n",
+							i);
+						return;
+					}
+					buffer_spec[i].alloc_count = page_count;
+					buffer_spec[i].phy_addr =
+						codec_mm_alloc_for_dma(MEM_NAME,
+						buffer_spec[i].alloc_count,
+						4 + PAGE_SHIFT,
+						CODEC_MM_FLAGS_CMA_CLEAR |
+						CODEC_MM_FLAGS_FOR_VDECODER);
+					pr_info("CMA malloc ok  %d\n", i);
+				}
+				alloc_count++;
+				if (!buffer_spec[i].phy_addr) {
+					buffer_spec[i].alloc_count = 0;
+					pr_err("264-4k mem alloc failed %d\n",
+						i);
+					vh264_running = 0;
+					mutex_unlock(&vh264_mutex);
+					return;
+				}
+				addr = buffer_spec[i].phy_addr;
+			} else {
+					if (buffer_spec[i].phy_addr) {
+						codec_mm_free_for_dma(MEM_NAME,
+						buffer_spec[i].phy_addr);
+						buffer_spec[i].phy_addr = 0;
+						buffer_spec[i].alloc_count = 0;
+					}
 			}
-		} else {
-			for (i = 0; i < 21; i++) {
-#ifdef NV21
+			/*4k keep last frame */
+			if (is_4k && ((addr + 7) >> 3) == disp_addr)
+				addr = start_addr;
+			if (i <= 21) {
 				buffer_spec[i].y_addr = addr;
 				addr += mb_total << 8;
 				buffer_spec[i].u_addr = addr;
@@ -837,14 +890,14 @@ static int vh264_set_params(void)
 				buffer_spec[i].y_canvas_index = 128 + i * 2;
 				buffer_spec[i].u_canvas_index = 128 + i * 2 + 1;
 				buffer_spec[i].v_canvas_index = 128 + i * 2 + 1;
-#ifdef CONFIG_GE2D_KEEP_FRAME
+
 				buffer_spec[i].y_canvas_width = mb_width << 4;
 				buffer_spec[i].y_canvas_height = mb_height << 4;
 				buffer_spec[i].u_canvas_width = mb_width << 4;
 				buffer_spec[i].u_canvas_height = mb_height << 4;
 				buffer_spec[i].v_canvas_width = mb_width << 4;
 				buffer_spec[i].v_canvas_height = mb_height << 4;
-#endif
+
 				canvas_config(128 + i * 2,
 						buffer_spec[i].y_addr,
 						mb_width << 4, mb_height << 4,
@@ -857,84 +910,30 @@ static int vh264_set_params(void)
 						CANVAS_BLKMODE_32X32);
 				WRITE_VREG(ANC0_CANVAS_ADDR + i,
 						spec2canvas(&buffer_spec[i]));
-#else
-				buffer_spec[i].y_addr = addr;
-				addr += mb_total << 8;
-				buffer_spec[i].u_addr = addr;
-				addr += mb_total << 6;
-				buffer_spec[i].v_addr = addr;
-				addr += mb_total << 6;
-				vfbuf_use[i] = 0;
-
-				buffer_spec[i].y_canvas_index = 128 + i * 3;
-				buffer_spec[i].u_canvas_index = 128 + i * 3 + 1;
-				buffer_spec[i].v_canvas_index = 128 + i * 3 + 2;
-
-				canvas_config(128 + i * 3,
-						buffer_spec[i].y_addr,
-						mb_width << 4, mb_height << 4,
-						CANVAS_ADDR_NOWRAP,
-						CANVAS_BLKMODE_32X32);
-				canvas_config(128 + i * 3 + 1,
-						buffer_spec[i].u_addr,
-						mb_width << 3, mb_height << 3,
-						CANVAS_ADDR_NOWRAP,
-						CANVAS_BLKMODE_32X32);
-				canvas_config(128 + i * 3 + 2,
-						buffer_spec[i].v_addr,
-						mb_width << 3, mb_height << 3,
-						CANVAS_ADDR_NOWRAP,
-						CANVAS_BLKMODE_32X32);
-				WRITE_VREG(ANC0_CANVAS_ADDR + i,
-						spec2canvas(&buffer_spec[i]));
-#endif
-			}
-
-			for (i = 21; i < actual_dpb_size; i++) {
-#ifdef NV21
+				} else {
 				buffer_spec[i].y_canvas_index =
-					2 * (i - 21) + 2;
+					2 * (i - 21) + 4;
 				buffer_spec[i].y_addr = addr;
 				addr += mb_total << 8;
 				buffer_spec[i].u_canvas_index =
-					2 * (i - 21) + 3;
+					2 * (i - 21) + 5;
 				buffer_spec[i].v_canvas_index =
-					2 * (i - 21) + 3;
+					2 * (i - 21) + 5;
 				buffer_spec[i].u_addr = addr;
 				addr += mb_total << 7;
 				vfbuf_use[i] = 0;
-#ifdef CONFIG_GE2D_KEEP_FRAME
+
 				buffer_spec[i].y_canvas_width = mb_width << 4;
 				buffer_spec[i].y_canvas_height = mb_height << 4;
 				buffer_spec[i].u_canvas_width = mb_width << 4;
 				buffer_spec[i].u_canvas_height = mb_height << 4;
 				buffer_spec[i].v_canvas_width = mb_width << 4;
 				buffer_spec[i].v_canvas_height = mb_height << 4;
-#endif
-				spec_set_canvas(&buffer_spec[i], mb_width << 4,
-								mb_height << 4);
-				WRITE_VREG(ANC0_CANVAS_ADDR + i,
-						spec2canvas(&buffer_spec[i]));
-#else
-				buffer_spec[i].y_canvas_index =
-					3 * (i - 21) + 3;
-				buffer_spec[i].y_addr = addr;
-				addr += mb_total << 8;
-				buffer_spec[i].u_canvas_index =
-					3 * (i - 21) + 4;
-				buffer_spec[i].u_addr = addr;
-				addr += mb_total << 6;
-				buffer_spec[i].v_canvas_index =
-					3 * (i - 21) + 5;
-				buffer_spec[i].v_addr = addr;
-				addr += mb_total << 6;
-				vfbuf_use[i] = 0;
 
-				spec_set_canvas(&buffer_spec[i], mb_width << 4,
-								mb_height << 4);
-				WRITE_VREG(ANC0_CANVAS_ADDR + i,
-						spec2canvas(&buffer_spec[i]));
-#endif
+				spec_set_canvas(&buffer_spec[i]
+					, mb_width << 4, mb_height << 4);
+				WRITE_VREG(ANC0_CANVAS_ADDR + i
+					, spec2canvas(&buffer_spec[i]));
 			}
 		}
 	} else
@@ -1075,14 +1074,15 @@ static int vh264_set_params(void)
 			h264_ar = frame_height * 0x100 / frame_width;
 	}
 
-	WRITE_VREG(AV_SCRATCH_1, addr);
-	WRITE_VREG(AV_SCRATCH_3, post_canvas);	/* should be modified later */
-	addr += mb_total * mb_mv_byte * max_reference_size;
-	WRITE_VREG(AV_SCRATCH_4, addr);
 	WRITE_VREG(AV_SCRATCH_0,
 			(max_reference_size << 24) | (actual_dpb_size << 16) |
 			(max_dpb_size << 8));
-	return 0;
+	if (vh264_stream_switching_state != SWITCHING_STATE_OFF) {
+			vh264_stream_switching_state = SWITCHING_STATE_OFF;
+			pr_info("Leaving switching mode.\n");
+		}
+	mutex_unlock(&vh264_mutex);
+	return;
 }
 
 static unsigned pts_inc_by_duration(unsigned *new_pts, unsigned *new_pts_rem)
@@ -1257,8 +1257,7 @@ static void vh264_isr(void)
 		DEC_CONTROL_FLAG_FORCE_2997_1080P_INTERLACE;
 	static const unsigned int flg_576_itl =
 		DEC_CONTROL_FLAG_FORCE_2500_576P_INTERLACE;
-	static const unsigned int vf_ready =
-		VFRAME_EVENT_PROVIDER_VFRAME_READY;
+
 	WRITE_VREG(ASSIST_MBOX1_CLR_REG, 1);
 
 	if (0 == (stat & STAT_VDEC_RUN)) {
@@ -1290,20 +1289,23 @@ static void vh264_isr(void)
 			/* a cmd 1 sent during decoding w/o getting a cmd 3. */
 			/* should not happen but the original code has such
 			   case, do the same process */
+			if ((READ_VREG(AV_SCRATCH_1) & 0xff)
+				== 1) {/*invalid mb_width*/
+				vh264_running = 0;
+				fatal_error_flag = DECODER_FATAL_ERROR_UNKNOW;
+			/* this is fatal error, need restart */
+				pr_info("cmd 1 fatal error happend\n");
+				schedule_work(&error_wd_work);
+			} else {
 			vh264_stream_switching_state = SWITCHING_STATE_ON_CMD1;
-
 			pr_info("Enter switching mode cmd1.\n");
 			schedule_work(&stream_switching_work);
+			}
 			return IRQ_HANDLED;
 		}
-
-		if (vh264_set_params() < 0) {
-			vh264_running = 0;
-			fatal_error_flag = DECODER_FATAL_ERROR_UNKNOW;
-			if (!fatal_error_reset)
-				schedule_work(&error_wd_work);
-		}
-
+		pr_info("Enter set parameter cmd1.\n");
+		schedule_work(&set_parameter_work);
+		return IRQ_HANDLED;
 	} else if ((cpu_cmd & 0xff) == 2) {
 		int frame_mb_only, pic_struct_present, pic_struct, prog_frame,
 			poc_sel, idr_flag, eos, error;
@@ -1331,7 +1333,9 @@ static void vh264_isr(void)
 
 			if ((error_recovery_mode_use & 2) && error)
 				check_pts_discontinue = true;
-
+			if (ucode_type == UCODE_IP_ONLY_PARAM
+				&& iponly_early_mode)
+				continue;
 			if ((p_last_vf != NULL)
 				&& (p_last_vf->index == buffer_index))
 				continue;
@@ -1359,6 +1363,9 @@ static void vh264_isr(void)
 				return IRQ_HANDLED;
 			}
 
+			if (clk_adj_frame_count < VDEC_CLOCK_ADJUST_FRAME)
+				clk_adj_frame_count++;
+
 			set_frame_info(vf);
 
 			switch (i) {
@@ -1515,9 +1522,18 @@ static void vh264_isr(void)
 					last_pts_remainder = 0;
 
 			} else {
-				pts =
-					pts_inc_by_duration(&pts,
-							&last_pts_remainder);
+				if (fixed_frame_rate_flag && !pts_discontinue &&
+					(fixed_frame_rate_check_count
+							> idr_num) &&
+					pts_valid_save &&
+					(abs(pts_inc_by_duration(NULL, NULL)
+					 - pts)
+					 > DUR2PTS(frame_dur))) {
+						duration_from_pts_done = 0;
+						pr_info("recalc frame_dur\n");
+				} else
+					pts = pts_inc_by_duration(&pts,
+						&last_pts_remainder);
 				pts_valid = 1;
 			}
 
@@ -1592,16 +1608,12 @@ static void vh264_isr(void)
 							frame_dur);
 
 				vf->index = buffer_index;
-#ifdef NV21
 				vf->type =
 					VIDTYPE_PROGRESSIVE |
 					VIDTYPE_VIU_FIELD |
 					VIDTYPE_VIU_NV21;
-#else
-				vf->type =
-					VIDTYPE_PROGRESSIVE | VIDTYPE_VIU_FIELD;
-#endif
 				vf->duration_pulldown = 0;
+				vf->signal_type = video_signal_from_vui;
 				vf->index = buffer_index;
 				vf->pts = (pts_valid) ? pts : 0;
 				if (pts_us64_valid == 1)
@@ -1610,6 +1622,7 @@ static void vh264_isr(void)
 				vf->pts_us64 = div64_u64(((u64)vf->pts)*100, 9);
 				vf->canvas0Addr = vf->canvas1Addr =
 					spec2canvas(&buffer_spec[buffer_index]);
+				vf->type_original = vf->type;
 				vfbuf_use[buffer_index]++;
 
 				if ((error_recovery_mode_use & 2) && error) {
@@ -1618,14 +1631,9 @@ static void vh264_isr(void)
 				} else {
 					p_last_vf = vf;
 					pts_discontinue = false;
-					kfifo_put(&display_q,
+					kfifo_put(&delay_display_q,
 						  (const struct vframe_s *)vf);
-
-					vf_notify_receiver(PROVIDER_NAME,
-						vf_ready,
-						NULL);
 				}
-
 			} else {
 				if (pic_struct_present
 					&& pic_struct == PIC_TOP_BOT)
@@ -1639,13 +1647,12 @@ static void vh264_isr(void)
 						VIDTYPE_INTERLACE_BOTTOM :
 						VIDTYPE_INTERLACE_TOP;
 				}
-#ifdef NV21
 				vf->type |= VIDTYPE_VIU_NV21;
-#endif
 				vf->type |= VIDTYPE_INTERLACE_FIRST;
 
 				vf->duration >>= 1;
 				vf->duration_pulldown = 0;
+				vf->signal_type = video_signal_from_vui;
 				vf->index = buffer_index;
 				vf->pts = (pts_valid) ? pts : 0;
 				if (pts_us64_valid == 1)
@@ -1654,6 +1661,7 @@ static void vh264_isr(void)
 				vf->pts_us64 = div64_u64(((u64)vf->pts)*100, 9);
 				vf->canvas0Addr = vf->canvas1Addr =
 					spec2canvas(&buffer_spec[buffer_index]);
+				vf->type_original = vf->type;
 				vfbuf_use[buffer_index]++;
 				vf->ready_jiffies64 = jiffies_64;
 
@@ -1663,14 +1671,11 @@ static void vh264_isr(void)
 					continue;
 				} else {
 					pts_discontinue = false;
-					kfifo_put(&display_q,
+					kfifo_put(&delay_display_q,
 						(const struct vframe_s *)vf);
 				}
 
 				if (READ_VREG(AV_SCRATCH_F) & 2) {
-					vf_notify_receiver(PROVIDER_NAME,
-						vf_ready,
-						NULL);
 					continue;
 				}
 
@@ -1695,28 +1700,23 @@ static void vh264_isr(void)
 						VIDTYPE_INTERLACE_BOTTOM;
 				}
 
-#ifdef NV21
 				vf->type |= VIDTYPE_VIU_NV21;
-#endif
-
 				vf->duration >>= 1;
 				vf->duration_pulldown = 0;
+				vf->signal_type = video_signal_from_vui;
 				vf->index = buffer_index;
 				vf->pts = 0;
-
+				vf->pts_us64 = 0;
 				vf->canvas0Addr = vf->canvas1Addr =
 					spec2canvas(&buffer_spec[buffer_index]);
+				vf->type_original = vf->type;
 				vfbuf_use[buffer_index]++;
 
 				p_last_vf = vf;
 				vf->ready_jiffies64 = jiffies_64;
 
-				kfifo_put(&display_q,
+				kfifo_put(&delay_display_q,
 						(const struct vframe_s *)vf);
-
-				vf_notify_receiver(PROVIDER_NAME,
-					vf_ready,
-					NULL);
 			}
 		}
 
@@ -1762,7 +1762,44 @@ static void vh264_isr(void)
 			 &first_pts64) == 0)
 			first_pts_cached = true;
 		WRITE_VREG(AV_SCRATCH_0, 0);
-	}
+
+	} else if ((cpu_cmd & 0xff) == 0xa) {
+			int b_offset = READ_VREG(AV_SCRATCH_2);
+			buffer_index = READ_VREG(AV_SCRATCH_1);
+			/*pr_info("iponly output %d  b_offset %x\n",
+				buffer_index,b_offset);*/
+			if (kfifo_get(&newframe_q, &vf) == 0) {
+				WRITE_VREG(AV_SCRATCH_0, 0);
+				pr_info
+				("fatal error, no available buffer slot.");
+				return IRQ_HANDLED;
+			}
+			if (pts_lookup_offset_us64 (PTS_TYPE_VIDEO, b_offset,
+						&pts, 0, &pts_us64) != 0)
+				vf->pts_us64 = vf->pts = 0;
+			else {
+					vf->pts_us64 = pts_us64;
+					vf->pts = pts;
+				}
+
+			set_frame_info(vf);
+			vf->type = VIDTYPE_PROGRESSIVE |
+					VIDTYPE_VIU_FIELD |
+					VIDTYPE_VIU_NV21;
+			vf->duration_pulldown = 0;
+			vf->signal_type = video_signal_from_vui;
+			vf->index = buffer_index;
+			vf->canvas0Addr = vf->canvas1Addr =
+					spec2canvas(&buffer_spec[buffer_index]);
+			vf->type_original = vf->type;
+			vfbuf_use[buffer_index]++;
+			p_last_vf = vf;
+			pts_discontinue = false;
+			iponly_early_mode = 1;
+			kfifo_put(&delay_display_q,
+				(const struct vframe_s *)vf);
+			WRITE_VREG(AV_SCRATCH_0, 0);
+		}
 
 	sei_itu35_flags = READ_VREG(AV_SCRATCH_J);
 	if (sei_itu35_flags & (1 << 15)) {	/* data ready */
@@ -1794,9 +1831,9 @@ static void vh264_isr(void)
 			pr_info("0x%x\n", *daddr);
 		}
 #endif
-		pr_info("pocinfo 0x%x, top poc %d, wp 0x%x, length %d\n",
+	/*	pr_info("pocinfo 0x%x, top poc %d, wp 0x%x, length %d\n",
 			   READ_VREG(AV_SCRATCH_L), READ_VREG(AV_SCRATCH_M),
-			   sei_itu35_wp, sei_itu35_data_length);
+			   sei_itu35_wp, sei_itu35_data_length);*/
 		user_data_poc.poc_info = READ_VREG(AV_SCRATCH_L);
 		user_data_poc.poc_number = READ_VREG(AV_SCRATCH_M);
 		set_userdata_poc(user_data_poc);
@@ -1824,6 +1861,9 @@ static void vh264_put_timer_func(unsigned long arg)
 		pr_info("operation forbidden in timer !\n");
 		goto exit;
 	}
+
+	prepare_display_q();
+
 	if (vf_get_receiver(PROVIDER_NAME)) {
 		state =
 			vf_notify_receiver(PROVIDER_NAME,
@@ -1849,6 +1889,7 @@ static void vh264_put_timer_func(unsigned long arg)
 		wait_i_pass_frames = reg_val & 0xff;
 		if (wait_buffer_status) {
 			if (kfifo_is_empty(&display_q) &&
+				kfifo_is_empty(&delay_display_q) &&
 				kfifo_is_empty(&recycle_q) &&
 				(state == RECEIVER_INACTIVE)) {
 				pr_info("$$$$decoder is waiting for buffer\n");
@@ -1909,7 +1950,7 @@ static void vh264_put_timer_func(unsigned long arg)
 		   && (vh264_stream_switching_state == SWITCHING_STATE_OFF)) {
 		struct vframe_s *vf;
 		if (kfifo_get(&recycle_q, &vf)) {
-			if ((vf->index >= 0) && (vf != &switching_fense_vf)) {
+			if ((vf->index >= 0) && (vf->index < VF_BUF_NUM)) {
 				if (--vfbuf_use[vf->index] == 0) {
 					if (READ_VREG(AV_SCRATCH_7) == 0) {
 						WRITE_VREG(AV_SCRATCH_7,
@@ -1931,8 +1972,8 @@ static void vh264_put_timer_func(unsigned long arg)
 		while (!kfifo_is_empty(&recycle_q)) {
 			struct vframe_s *vf;
 			if (kfifo_get(&recycle_q, &vf)) {
-				if ((vf->index >= 0)
-					&& (vf != &switching_fense_vf)) {
+				if ((vf->index >= 0 &&
+					(vf->index < VF_BUF_NUM))) {
 					vf->index = VF_BUF_NUM;
 					kfifo_put(&newframe_q,
 						(const struct vframe_s *)vf);
@@ -1947,7 +1988,9 @@ static void vh264_put_timer_func(unsigned long arg)
 			stream_switching_done();
 	}
 
-	if (frame_dur > 0 && saved_resolution !=
+	if (ucode_type != UCODE_IP_ONLY_PARAM &&
+		(clk_adj_frame_count > VDEC_CLOCK_ADJUST_FRAME) &&
+		frame_dur > 0 && saved_resolution !=
 		frame_width * frame_height * (96000 / frame_dur)) {
 		int fps = 96000 / frame_dur;
 		if (frame_dur < 10) /*dur is too small ,think it errors fps*/
@@ -2054,9 +2097,7 @@ static void vh264_prot_init(void)
 	/* enable mailbox interrupt */
 	WRITE_VREG(ASSIST_MBOX1_MASK, 1);
 
-#ifdef NV21
 	SET_VREG_MASK(MDEC_PIC_DC_CTRL, 1 << 17);
-#endif
 	if (ucode_type == UCODE_IP_ONLY_PARAM)
 		SET_VREG_MASK(AV_SCRATCH_F, 1 << 6);
 	else
@@ -2098,7 +2139,7 @@ static void vh264_local_init(void)
 	pr_info
 	("H264 sysinfo: %dx%d duration=%d, pts_outside=%d, ",
 	 frame_width, frame_height, frame_dur, pts_outside);
-	pr_info("sync_outside=%d, use_idr_framerate=%d\n",
+	pr_debug("sync_outside=%d, use_idr_framerate=%d\n",
 	 sync_outside, use_idr_framerate);
 
 	if ((unsigned long) vh264_amstream_dec_info.param & 0x08)
@@ -2120,6 +2161,7 @@ static void vh264_local_init(void)
 		vfbuf_use[i] = 0;
 
 	INIT_KFIFO(display_q);
+	INIT_KFIFO(delay_display_q);
 	INIT_KFIFO(recycle_q);
 	INIT_KFIFO(newframe_q);
 
@@ -2160,6 +2202,7 @@ static s32 vh264_init(void)
 {
 	int trickmode_fffb = 0;
 	int firmwareloaded = 0;
+	int i;
 
 	/* pr_info("\nvh264_init\n"); */
 	init_timer(&recycle_timer);
@@ -2175,6 +2218,7 @@ static s32 vh264_init(void)
 	first_pts_cached = false;
 	fixed_frame_rate_check_count = 0;
 	saved_resolution = 0;
+	iponly_early_mode = 0;
 	vh264_local_init();
 
 	query_video_status(0, &trickmode_fffb);
@@ -2199,16 +2243,16 @@ static s32 vh264_init(void)
 	if (!mc_cpu_addr) {
 		amvdec_disable();
 
-		pr_info("vh264_init: Can not allocate mc memory.\n");
+		pr_err("vh264_init: Can not allocate mc memory.\n");
 		return -ENOMEM;
 	}
 
-	pr_info("264 ucode swap area: phyaddr %p, cpu vaddr %p\n",
+	pr_debug("264 ucode swap area: phyaddr %p, cpu vaddr %p\n",
 		(void *)mc_dma_handle, mc_cpu_addr);
 	if (debugfirmware) {
 		int r0 , r1 , r2 , r3 , r4 , r5;
 		char firmwarename[32];
-		pr_info("start load debug %d firmware ...\n", debugfirmware);
+		pr_debug("start load debug %d firmware ...\n", debugfirmware);
 
 		snprintf(firmwarename, 32, "%s%d", "vh264_mc", debugfirmware);
 		r0 = amvdec_loadmc_ex(VFORMAT_H264, firmwarename, NULL);
@@ -2263,11 +2307,13 @@ static s32 vh264_init(void)
 	}
 	if (!firmwareloaded) {
 		int r0 , r1 , r2 , r3 , r4 , r5;
-		pr_info("start load orignal firmware ...\n");
-		r0 = amvdec_loadmc_ex(VFORMAT_H264, "vh264_mc", NULL);
+		unsigned int cpu_type = get_cpu_type();
+		pr_debug("start load orignal firmware ...\n");
+	 if (cpu_type == MESON_CPU_MAJOR_ID_GXBB) {
 
+		r0 = amvdec_loadmc_ex(VFORMAT_H264, "vh264_mc", NULL);
 		/*memcpy((u8 *) mc_cpu_addr + MC_OFFSET_HEADER, vh264_header_mc,
-			   MC_SWAP_SIZE);*/
+				MC_SWAP_SIZE);*/
 		r1 = get_decoder_firmware_data(VFORMAT_H264, "vh264_header_mc",
 			(u8 *) mc_cpu_addr + MC_OFFSET_HEADER, MC_SWAP_SIZE);
 		/*memcpy((u8 *) mc_cpu_addr + MC_OFFSET_DATA, vh264_data_mc,
@@ -2290,6 +2336,45 @@ static s32 vh264_init(void)
 		*/
 		r5 = get_decoder_firmware_data(VFORMAT_H264, "vh264_slice_mc",
 			(u8 *) mc_cpu_addr + MC_OFFSET_SLICE, MC_SWAP_SIZE);
+	 } else if (cpu_type >= MESON_CPU_MAJOR_ID_GXM) {
+		r0 = amvdec_loadmc_ex(VFORMAT_H264, "gxm_vh264_mc", NULL);
+		r1 = get_decoder_firmware_data(VFORMAT_H264,
+			"gxm_vh264_header_mc",
+			(u8 *) mc_cpu_addr + MC_OFFSET_HEADER, MC_SWAP_SIZE);
+		r2 = get_decoder_firmware_data(VFORMAT_H264,
+			"gxm_vh264_data_mc",
+			(u8 *) mc_cpu_addr + MC_OFFSET_DATA, MC_SWAP_SIZE);
+		r3 = get_decoder_firmware_data(VFORMAT_H264,
+			"gxm_vh264_mmco_mc",
+			(u8 *) mc_cpu_addr + MC_OFFSET_MMCO, MC_SWAP_SIZE);
+		r4 = get_decoder_firmware_data(VFORMAT_H264,
+			"gxm_vh264_list_mc",
+			(u8 *) mc_cpu_addr + MC_OFFSET_LIST, MC_SWAP_SIZE);
+		r5 = get_decoder_firmware_data(VFORMAT_H264,
+			"gxm_vh264_slice_mc",
+			(u8 *) mc_cpu_addr + MC_OFFSET_SLICE, MC_SWAP_SIZE);
+	 } else if (cpu_type >= MESON_CPU_MAJOR_ID_GXTVBB) {
+		r0 = amvdec_loadmc_ex(VFORMAT_H264, "gxtvbb_vh264_mc", NULL);
+		r1 = get_decoder_firmware_data(VFORMAT_H264,
+			"gxtvbb_vh264_header_mc",
+			(u8 *) mc_cpu_addr + MC_OFFSET_HEADER, MC_SWAP_SIZE);
+		r2 = get_decoder_firmware_data(VFORMAT_H264,
+			"gxtvbb_vh264_data_mc",
+			(u8 *) mc_cpu_addr + MC_OFFSET_DATA, MC_SWAP_SIZE);
+		r3 = get_decoder_firmware_data(VFORMAT_H264,
+			"gxtvbb_vh264_mmco_mc",
+			(u8 *) mc_cpu_addr + MC_OFFSET_MMCO, MC_SWAP_SIZE);
+		r4 = get_decoder_firmware_data(VFORMAT_H264,
+			"gxtvbb_vh264_list_mc",
+			(u8 *) mc_cpu_addr + MC_OFFSET_LIST, MC_SWAP_SIZE);
+		r5 = get_decoder_firmware_data(VFORMAT_H264,
+			"gxtvbb_vh264_slice_mc",
+			(u8 *) mc_cpu_addr + MC_OFFSET_SLICE, MC_SWAP_SIZE);
+	 } else {
+		pr_err("invalid cpu type 0x%x! firmware load failed\n",
+				cpu_type);
+		return -1;
+	}
 		if (r0 < 0 || r1 < 0 || r2 < 0 || r3 < 0 || r4 < 0 || r5 < 0) {
 			pr_err("264 load orignal firmware error %d,%d,%d,%d,%d,%d\n",
 				r0 , r1 , r2 , r3 , r4 , r5);
@@ -2306,6 +2391,21 @@ static s32 vh264_init(void)
 
 	stat |= STAT_MC_LOAD;
 
+	for (i = 0; i < ARRAY_SIZE(fense_buffer_spec); i++) {
+		struct buffer_spec_s *s = &fense_buffer_spec[i];
+		if (!codec_mm_enough_for_size(3 * SZ_1M))
+			return -ENOMEM;
+
+		s->alloc_count = 3 * SZ_1M / PAGE_SIZE;
+		s->phy_addr = codec_mm_alloc_for_dma(MEM_NAME,
+			s->alloc_count,
+			4 + PAGE_SHIFT,
+			CODEC_MM_FLAGS_CMA_CLEAR | CODEC_MM_FLAGS_FOR_VDECODER);
+		s->y_canvas_index = 2 * i;
+		s->u_canvas_index = 2 * i + 1;
+		s->v_canvas_index = 2 * i + 1;
+	}
+
 	/* enable AMRISC side protocol */
 	vh264_prot_init();
 
@@ -2314,7 +2414,7 @@ static s32 vh264_init(void)
 
 	if (vdec_request_irq(VDEC_IRQ_1, vh264_isr,
 			"vh264-irq", (void *)vh264_dec_id)) {
-		pr_info("vh264 irq register error.\n");
+		pr_err("vh264 irq register error.\n");
 		amvdec_disable();
 		return -ENOENT;
 	}
@@ -2363,6 +2463,8 @@ static s32 vh264_init(void)
 
 static int vh264_stop(int mode)
 {
+	int i;
+
 	if (stat & STAT_VDEC_RUN) {
 		amvdec_stop();
 		stat &= ~STAT_VDEC_RUN;
@@ -2412,6 +2514,28 @@ static int vh264_stop(int mode)
 	}
 	amvdec_disable();
 
+	for (i = 0; i < ARRAY_SIZE(fense_buffer_spec); i++) {
+		if (fense_buffer_spec[i].phy_addr) {
+			codec_mm_free_for_dma(MEM_NAME,
+				fense_buffer_spec[i].phy_addr);
+			fense_buffer_spec[i].phy_addr = 0;
+			fense_buffer_spec[i].alloc_count = 0;
+		}
+	}
+
+	  for (i = 0; i < ARRAY_SIZE(buffer_spec); i++) {
+			if (buffer_spec[i].phy_addr) {
+				if (is_4k && !get_blackout_policy())
+					pr_info("Skip releasing CMA buffer %d\n",
+								i);
+				else {
+					codec_mm_free_for_dma(MEM_NAME,
+					buffer_spec[i].phy_addr);
+					buffer_spec[i].phy_addr = 0;
+					buffer_spec[i].alloc_count = 0;
+				}
+			}
+	  }
 	return 0;
 }
 
@@ -2457,13 +2581,12 @@ static void stream_switching_done(void)
 	WRITE_VREG(AV_SCRATCH_9, 0);
 
 	if (state == SWITCHING_STATE_ON_CMD1) {
-		if (vh264_set_params() < 0) {
-			vh264_running = 0;
-			fatal_error_flag = DECODER_FATAL_ERROR_UNKNOW;
-			if (!fatal_error_reset)
-				schedule_work(&error_wd_work);
-		}
-	}
+		pr_info("Enter set parameter cmd1 switching_state %x.\n",
+					vh264_stream_switching_state);
+		schedule_work(&set_parameter_work);
+		return;
+	} else if (state == SWITCHING_STATE_ON_CMD1_PENDING)
+		return;
 
 	vh264_stream_switching_state = SWITCHING_STATE_OFF;
 
@@ -2475,182 +2598,131 @@ static void stream_switching_done(void)
 	pr_info("Leaving switching mode.\n");
 }
 
-#if !defined(NV21) || !defined(CONFIG_GE2D_KEEP_FRAME)
-static int canvas_dup(u8 *dst, ulong src_paddr, ulong size)
-{
-	void __iomem *p = ioremap_wc(src_paddr, size);
-	if (p) {
-		memcpy(dst, p, size);
-		iounmap(p);
-		return 1;
-	}
-	return 0;
-}
-#endif
-
 /* construt a new frame as a copy of last frame so frame receiver can
  * release all buffer resources to decoder.
  */
 static void stream_switching_do(struct work_struct *work)
 {
-	unsigned int buffer_index;
-	bool do_copy = true;
-	int mb_total_num, mb_width_num, mb_height_num;
-	struct vframe_s *vf;
-
-#ifdef CONFIG_GE2D_KEEP_FRAME
-	u32 y_index, u_index, src_index, des_index, y_desindex, u_dexindex;
+	int mb_total_num, mb_width_num, mb_height_num, i = 0;
+	struct vframe_s *vf = NULL;
+	u32 y_index, u_index, src_index, des_index, y_desindex, u_desindex;
 	struct canvas_s csy, csu, cyd;
-#endif
+	unsigned long flags;
+	bool delay = true;
+
 	if (!atomic_read(&vh264_active))
 		return;
-	if ((!p_last_vf)
-		|| (vh264_stream_switching_state == SWITCHING_STATE_OFF))
+
+	if (vh264_stream_switching_state == SWITCHING_STATE_OFF)
 		return;
 
-	if (atomic_read(&vh264_active)) {
-		ulong videoKeepBuf[3], videoKeepBufPhys[3];
+	spin_lock_irqsave(&prepare_lock, flags);
 
-		get_video_keep_buffer(videoKeepBuf, videoKeepBufPhys);
-#ifdef NV21
-#ifdef CONFIG_GE2D_KEEP_FRAME
-		if (!videoKeepBufPhys[0] || !videoKeepBufPhys[1])
-			do_copy = false;
-#else
-		if (!videoKeepBuf[0] || !videoKeepBuf[1])
-			do_copy = false;
-#endif
-#else
-		if (!videoKeepBuf[0] || !videoKeepBuf[1] || !videoKeepBuf[2])
-			do_copy = false;
-#endif
-		buffer_index = p_last_vf->index;
-		mb_total_num = mb_total;
-		mb_width_num = mb_width;
-		mb_height_num = mb_height;
+	block_display_q = true;
 
-		if (buffer_index > VF_BUF_NUM - 1)
-			do_copy = false;
+	spin_unlock_irqrestore(&prepare_lock, flags);
+
+	mb_total_num = mb_total;
+	mb_width_num = mb_width;
+	mb_height_num = mb_height;
+
+	while (is_4k || kfifo_len(&delay_display_q) > 2) {
+		if (kfifo_get(&delay_display_q, &vf)) {
+			kfifo_put(&display_q,
+				(const struct vframe_s *)vf);
+			vf_notify_receiver(PROVIDER_NAME,
+				VFRAME_EVENT_PROVIDER_VFRAME_READY, NULL);
+		} else
+			break;
+	}
+
+	if (!kfifo_get(&delay_display_q, &vf)) {
+		vf = p_last_vf;
+		delay = false;
+	}
+
+	while (vf) {
+		int buffer_index;
+
+		buffer_index = vf->index & 0xff;
 
 		/* construct a clone of the frame from last frame */
-		if (do_copy) {
-			/* construct a clone of the frame from last frame */
-#ifdef NV21
-#ifdef CONFIG_GE2D_KEEP_FRAME
-			pr_info
-			("src yaddr[0x%x] index[%d] width[%d] heigth[%d]\n",
-			 buffer_spec[buffer_index].y_addr,
-			 buffer_spec[buffer_index].y_canvas_index,
-			 buffer_spec[buffer_index].y_canvas_width,
-			 buffer_spec[buffer_index].y_canvas_height);
-
-			pr_info
-			("src uaddr[0x%x] index[%d] width[%d] heigth[%d]\n",
-			 buffer_spec[buffer_index].u_addr,
-			 buffer_spec[buffer_index].u_canvas_index,
-			 buffer_spec[buffer_index].u_canvas_width,
-			 buffer_spec[buffer_index].u_canvas_height);
+#if 0
+		pr_info("src yaddr[0x%x] index[%d] width[%d] heigth[%d]\n",
+			buffer_spec[buffer_index].y_addr,
+			buffer_spec[buffer_index].y_canvas_index,
+			buffer_spec[buffer_index].y_canvas_width,
+			buffer_spec[buffer_index].y_canvas_height);
+
+		pr_info("src uaddr[0x%x] index[%d] width[%d] heigth[%d]\n",
+			buffer_spec[buffer_index].u_addr,
+			buffer_spec[buffer_index].u_canvas_index,
+			buffer_spec[buffer_index].u_canvas_width,
+			buffer_spec[buffer_index].u_canvas_height);
+#endif
+		if (!is_4k) {
 			y_index = buffer_spec[buffer_index].y_canvas_index;
 			u_index = buffer_spec[buffer_index].u_canvas_index;
+
 			canvas_read(y_index, &csy);
 			canvas_read(u_index, &csu);
 
-			canvas_config(0, videoKeepBufPhys[0],
-					mb_width_num << 4, mb_height_num << 4,
-					CANVAS_ADDR_NOWRAP,
-					CANVAS_BLKMODE_LINEAR);
-			canvas_config(1, videoKeepBufPhys[1],
-					mb_width_num << 4, mb_height_num << 3,
-					CANVAS_ADDR_NOWRAP,
-					CANVAS_BLKMODE_LINEAR);
-
-			y_desindex = 0;
-			u_dexindex = 1;
+			canvas_config(fense_buffer_spec[i].y_canvas_index,
+				fense_buffer_spec[i].phy_addr,
+				mb_width_num << 4, mb_height_num << 4,
+				CANVAS_ADDR_NOWRAP,
+				CANVAS_BLKMODE_LINEAR);
+			canvas_config(fense_buffer_spec[i].u_canvas_index,
+				fense_buffer_spec[i].phy_addr +
+				(mb_total_num << 8),
+				mb_width_num << 4, mb_height_num << 3,
+				CANVAS_ADDR_NOWRAP,
+				CANVAS_BLKMODE_LINEAR);
+
+			y_desindex = fense_buffer_spec[i].y_canvas_index;
+			u_desindex = fense_buffer_spec[i].u_canvas_index;
+
 			canvas_read(y_desindex, &cyd);
-			src_index =
-				((y_index & 0xff) |
-				 ((u_index << 8) & 0x0000ff00));
-			des_index =
-				((y_desindex & 0xff) |
-				 ((u_dexindex << 8) & 0x0000ff00));
+
+			src_index = ((y_index & 0xff) |
+				((u_index << 8) & 0x0000ff00));
+			des_index = ((y_desindex & 0xff) |
+				((u_desindex << 8) & 0x0000ff00));
+
 			ge2d_canvas_dup(&csy, &csu, &cyd,
-					GE2D_FORMAT_M24_NV21,
-					src_index, des_index);
-#else
-			canvas_dup((u8 *) videoKeepBuf[0],
-					   buffer_spec[buffer_index].y_addr,
-					   mb_total_num << 8);
-			canvas_dup((u8 *) videoKeepBuf[1],
-					   buffer_spec[buffer_index].u_addr,
-					   mb_total_num << 7);
-
-			canvas_config(0, videoKeepBufPhys[0],
-					mb_width_num << 4,
-					mb_height_num << 4,
-					CANVAS_ADDR_NOWRAP,
-					CANVAS_BLKMODE_32X32);
-			canvas_config(1, videoKeepBufPhys[1],
-					mb_width_num << 4,
-					mb_height_num << 3,
-					CANVAS_ADDR_NOWRAP,
-					CANVAS_BLKMODE_32X32);
-#endif
-#else
-			canvas_dup((u8 *) videoKeepBuf[0],
-					   buffer_spec[buffer_index].y_addr,
-					   mb_total_num << 8);
-			canvas_dup((u8 *) videoKeepBuf[1],
-					   buffer_spec[buffer_index].u_addr,
-					   mb_total_num << 6);
-			canvas_dup((u8 *) videoKeepBuf[2],
-					   buffer_spec[buffer_index].v_addr,
-					   mb_total_num << 6);
-
-			canvas_config(0, videoKeepBufPhys[0], mb_width_num << 4,
-					mb_height_num << 4, CANVAS_ADDR_NOWRAP,
-					CANVAS_BLKMODE_32X32);
-			canvas_config(1, videoKeepBufPhys[1], mb_width_num << 3,
-					mb_height_num << 3, CANVAS_ADDR_NOWRAP,
-					CANVAS_BLKMODE_32X32);
-			canvas_config(2, videoKeepBufPhys[2], mb_width_num << 3,
-					mb_height_num << 3, CANVAS_ADDR_NOWRAP,
-					CANVAS_BLKMODE_32X32);
-#endif
+				GE2D_FORMAT_M24_NV21,
+				src_index,
+				des_index);
 		}
+		fense_vf[i] = *vf;
+		fense_vf[i].index = -1;
 
-		switching_fense_vf = *p_last_vf;
-		switching_fense_vf.duration = 1;
-		switching_fense_vf.index = -1;
-		switching_fense_vf.flag |= VFRAME_FLAG_SWITCHING_FENSE;
-		if (do_copy) {
-#ifdef NV21
-			switching_fense_vf.canvas0Addr = 0x010100;
-#else
-			switching_fense_vf.canvas0Addr = 0x020100;
-#endif
-		}
+		if (!is_4k)
+			fense_vf[i].canvas0Addr =
+				spec2canvas(&fense_buffer_spec[i]);
+		else
+			fense_vf[i].flag |= VFRAME_FLAG_SWITCHING_FENSE;
 
-		vf = &switching_fense_vf;
-
-		if (vh264_stream_switching_state != SWITCHING_STATE_OFF) {
-			/* we only insert the fense frame when necessary,
-			 * if all buffers are already recycled to decoder
-			 * then it's not  necessary to post fense frame.
-			 * Such cases may happen when receiver side generates
-			 * its own buffer for final output, such as ppmgr
-			 * and ionvideo. The frame buffer from provider will
-			 * be recycled pretty fast. It could happen that
-			 * all frames are returned to decoder before a
-			 * fense frame is ready from this delay work queue.
-			 */
-			kfifo_put(&display_q, (const struct vframe_s *)vf);
-			vf_notify_receiver(PROVIDER_NAME,
-					VFRAME_EVENT_PROVIDER_VFRAME_READY,
-					NULL);
+		/* send clone to receiver */
+		kfifo_put(&display_q,
+			(const struct vframe_s *)&fense_vf[i]);
 
-			pr_info("Switching fense frame post\n");
-		}
+		/* early recycle frames for last session */
+		if (delay)
+			vh264_vf_put(vf, NULL);
+
+		vf_notify_receiver(PROVIDER_NAME,
+			VFRAME_EVENT_PROVIDER_VFRAME_READY, NULL);
+
+		i++;
+
+		if (!kfifo_get(&delay_display_q, &vf))
+			break;
 	}
+
+	block_display_q = false;
+
+	pr_info("Switching fense frame post\n");
 }
 
 static int amvdec_h264_probe(struct platform_device *pdev)
@@ -2670,12 +2742,16 @@ static int amvdec_h264_probe(struct platform_device *pdev)
 	buf_size = pdata->mem_end - pdata->mem_start + 1;
 	if (buf_size < DEFAULT_MEM_SIZE) {
 		pr_info("\namvdec_h264 memory size not enough.\n");
+		mutex_unlock(&vh264_mutex);
 		return -ENOMEM;
 	}
 
 	buf_offset = pdata->mem_start - DEF_BUF_START_ADDR;
-	buf_start = V_BUF_ADDR_OFFSET + pdata->mem_start;
-
+	if (get_cpu_type() >= MESON_CPU_MAJOR_ID_GXTVBB)
+		buf_start = V_BUF_ADDR_OFFSET_NEW + pdata->mem_start;
+	else
+		buf_start = V_BUF_ADDR_OFFSET + pdata->mem_start;
+	buf_end = pdata->mem_end;
 	if (pdata->sys_info)
 		vh264_amstream_dec_info = *pdata->sys_info;
 	if (NULL == sei_data_buffer) {
@@ -2686,14 +2762,15 @@ static int amvdec_h264_probe(struct platform_device *pdev)
 		if (!sei_data_buffer) {
 			pr_info("%s: Can not allocate sei_data_buffer\n",
 				   __func__);
+			mutex_unlock(&vh264_mutex);
 			return -ENOMEM;
 		}
 		/* pr_info("buffer 0x%x, phys 0x%x, remap 0x%x\n",
 		   sei_data_buffer, sei_data_buffer_phys,
 		   (u32)sei_data_buffer_remap); */
 	}
-	pr_info("amvdec_h264 mem-addr=%lx,buff_offset=%x,buf_start=%lx\n",
-		   pdata->mem_start, buf_offset, buf_start);
+	pr_debug("amvdec_h264 mem-addr=%lx,buff_offset=%x,buf_start=%lx buf_size %x\n",
+		   pdata->mem_start, buf_offset, buf_start, buf_size);
 
 	if (vh264_init() < 0) {
 		pr_info("\namvdec_h264 init failed.\n");
@@ -2703,6 +2780,7 @@ static int amvdec_h264_probe(struct platform_device *pdev)
 
 	INIT_WORK(&error_wd_work, error_do_work);
 	INIT_WORK(&stream_switching_work, stream_switching_do);
+	INIT_WORK(&set_parameter_work, vh264_set_params);
 
 	atomic_set(&vh264_active, 1);
 
@@ -2714,13 +2792,13 @@ static int amvdec_h264_probe(struct platform_device *pdev)
 static int amvdec_h264_remove(struct platform_device *pdev)
 {
 	atomic_set(&vh264_active, 0);
+	cancel_work_sync(&set_parameter_work);
 	cancel_work_sync(&error_wd_work);
 	cancel_work_sync(&stream_switching_work);
 	mutex_lock(&vh264_mutex);
 	vh264_stop(MODE_FULL);
 	vdec_source_changed(VFORMAT_H264, 0, 0, 0);
 	atomic_set(&vh264_active, 0);
-
 #ifdef DEBUG_PTS
 	pr_info
 	("pts missed %ld, pts hit %ld, pts_outside %d, duration %d, ",
@@ -2753,26 +2831,27 @@ static struct codec_profile_t amvdec_h264_profile = {
 
 static int __init amvdec_h264_driver_init_module(void)
 {
-	pr_info("amvdec_h264 module init\n");
-#ifdef CONFIG_GE2D_KEEP_FRAME
+	pr_debug("amvdec_h264 module init\n");
+
 	ge2d_videoh264task_init();
-#endif
+
 	if (platform_driver_register(&amvdec_h264_driver)) {
-		pr_info("failed to register amvdec_h264 driver\n");
+		pr_err("failed to register amvdec_h264 driver\n");
 		return -ENODEV;
 	}
+	if (get_cpu_type() >= MESON_CPU_MAJOR_ID_GXTVBB)
+		amvdec_h264_profile.profile = "4k";
 	vcodec_profile_register(&amvdec_h264_profile);
 	return 0;
 }
 
 static void __exit amvdec_h264_driver_remove_module(void)
 {
-	pr_info("amvdec_h264 module remove.\n");
+	pr_debug("amvdec_h264 module remove.\n");
 
 	platform_driver_unregister(&amvdec_h264_driver);
-#ifdef CONFIG_GE2D_KEEP_FRAME
+
 	ge2d_videoh264task_release();
-#endif
 }
 
 /****************************************/
diff --git a/drivers/amlogic/amports/vh264_4k2k.c b/drivers/amlogic/amports/vh264_4k2k.c
index 509fa65..fffbb1d 100644
--- a/drivers/amlogic/amports/vh264_4k2k.c
+++ b/drivers/amlogic/amports/vh264_4k2k.c
@@ -119,6 +119,8 @@ static void *mc_cpu_addr;
 static DEFINE_SPINLOCK(lock);
 static int fatal_error;
 
+static atomic_t vh264_4k2k_active = ATOMIC_INIT(0);
+
 static DEFINE_MUTEX(vh264_4k2k_mutex);
 
 static void (*probe_callback)(void);
@@ -806,7 +808,7 @@ static irqreturn_t vh264_4k2k_isr(int irq, void *dev_id)
 				frame_dur = 96000 / 10;
 			}
 #endif
-
+			vf->signal_type = 0;
 			vf->index = display_buff_id;
 			vf->type = VIDTYPE_PROGRESSIVE | VIDTYPE_VIU_FIELD;
 			vf->type |= VIDTYPE_VIU_NV21;
@@ -988,9 +990,11 @@ static void vh264_4k2k_put_timer_func(unsigned long arg)
 			(READ_VREG(BUFFER_RECYCLE) == 0)) {
 		struct vframe_s *vf;
 		if (kfifo_get(&recycle_q, &vf)) {
-			if ((vf->index >= 0) && (--vfbuf_use[vf->index] == 0)) {
+			if ((vf->index >= 0)
+					&& (vf->index < DECODE_BUFFER_NUM_MAX)
+					&& (--vfbuf_use[vf->index] == 0)) {
 				WRITE_VREG(BUFFER_RECYCLE, vf->index + 1);
-				vf->index = -1;
+				vf->index = DECODE_BUFFER_NUM_MAX;
 			}
 
 			kfifo_put(&newframe_q, (const struct vframe_s *)vf);
@@ -1371,7 +1375,7 @@ static void vh264_4k2k_local_init(void)
 
 	for (i = 0; i < VF_POOL_SIZE; i++) {
 		const struct vframe_s *vf = &vfpool[i];
-		vfpool[i].index = -1;
+		vfpool[i].index = DECODE_BUFFER_NUM_MAX;
 		kfifo_put(&newframe_q, vf);
 	}
 
@@ -1659,6 +1663,25 @@ static int vh264_4k2k_stop(void)
 	return 0;
 }
 
+void vh264_4k_free_cmabuf(void)
+{
+	int i;
+	if (atomic_read(&vh264_4k2k_active))
+		return;
+	mutex_lock(&vh264_4k2k_mutex);
+	for (i = 0; i < ARRAY_SIZE(buffer_spec); i++) {
+		if (buffer_spec[i].phy_addr) {
+			codec_mm_free_for_dma(MEM_NAME,
+				buffer_spec[i].phy_addr);
+			buffer_spec[i].phy_addr = 0;
+			buffer_spec[i].alloc_pages = NULL;
+			buffer_spec[i].alloc_count = 0;
+			pr_info("force free CMA buffer %d\n", i);
+		}
+	}
+	mutex_unlock(&vh264_4k2k_mutex);
+}
+
 #if 0 /* (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8) && (HAS_HDEC) */
 /* extern void AbortEncodeWithVdec2(int abort); */
 #endif
@@ -1749,6 +1772,7 @@ static int amvdec_h264_4k2k_probe(struct platform_device *pdev)
 	/*set the max clk for smooth playing...*/
 		vdec_source_changed(VFORMAT_H264_4K2K,
 				4096, 2048, 30);
+	atomic_set(&vh264_4k2k_active, 1);
 	mutex_unlock(&vh264_4k2k_mutex);
 
 	return 0;
@@ -1759,6 +1783,7 @@ static int amvdec_h264_4k2k_remove(struct platform_device *pdev)
 	cancel_work_sync(&alloc_work);
 
 	mutex_lock(&vh264_4k2k_mutex);
+	atomic_set(&vh264_4k2k_active, 0);
 
 	vh264_4k2k_stop();
 
@@ -1813,10 +1838,10 @@ static struct codec_profile_t amvdec_h264_4k2k_profile = {
 
 static int __init amvdec_h264_4k2k_driver_init_module(void)
 {
-	pr_info("amvdec_h264_4k2k module init\n");
+	pr_debug("amvdec_h264_4k2k module init\n");
 
 	if (platform_driver_register(&amvdec_h264_4k2k_driver)) {
-		pr_info("failed to register amvdec_h264_4k2k driver\n");
+		pr_err("failed to register amvdec_h264_4k2k driver\n");
 		return -ENODEV;
 	}
 
@@ -1827,7 +1852,7 @@ static int __init amvdec_h264_4k2k_driver_init_module(void)
 
 static void __exit amvdec_h264_4k2k_driver_remove_module(void)
 {
-	pr_info("amvdec_h264_4k2k module remove.\n");
+	pr_debug("amvdec_h264_4k2k module remove.\n");
 
 	platform_driver_unregister(&amvdec_h264_4k2k_driver);
 }
diff --git a/drivers/amlogic/amports/vh265.c b/drivers/amlogic/amports/vh265.c
index 6344b86e2..a1ecbc3 100644
--- a/drivers/amlogic/amports/vh265.c
+++ b/drivers/amlogic/amports/vh265.c
@@ -39,6 +39,7 @@
 #include "amports_priv.h"
 #include <linux/amlogic/codec_mm/codec_mm.h>
 
+/*#define HEVC_PIC_STRUCT_SUPPORT*/
 
 #define MEM_NAME "codec_265"
 /* #include <mach/am_regs.h> */
@@ -73,14 +74,17 @@
 
 #define DUR2PTS(x) ((x)*90/96)
 
+struct hevc_state_s;
 static int vh265_vf_states(struct vframe_states *states, void *);
 static struct vframe_s *vh265_vf_peek(void *);
 static struct vframe_s *vh265_vf_get(void *);
 static void vh265_vf_put(struct vframe_s *, void *);
 static int vh265_event_cb(int type, void *data, void *private_data);
 
-static void vh265_prot_init(void);
-static int vh265_local_init(void);
+static int vh265_stop(struct hevc_state_s *hevc);
+static s32 vh265_init(struct hevc_state_s *hevc);
+static void vh265_prot_init(struct hevc_state_s *hevc);
+static int vh265_local_init(struct hevc_state_s *hevc);
 static void vh265_put_timer_func(unsigned long arg);
 
 static const char vh265_dec_id[] = "vh265-dev";
@@ -97,16 +101,36 @@ static const struct vframe_operations_s vh265_vf_provider = {
 
 static struct vframe_provider_s vh265_vf_prov;
 
-static u32 frame_width, frame_height, frame_dur, frame_ar;
-static u32 saved_resolution;
-static bool get_frame_dur;
-static struct timer_list recycle_timer;
-static u32 stat;
 static u32 bit_depth_luma;
 static u32 bit_depth_chroma;
-static u32 error_watchdog_count;
-static u32 error_skip_nal_watchdog_count;
-static u32 error_system_watchdog_count;
+static u32 video_signal_type;
+
+#define VIDEO_SIGNAL_TYPE_AVAILABLE_MASK	0x20000000
+
+static const char * const video_format_names[] = {
+	"component", "PAL", "NTSC", "SECAM",
+	"MAC", "unspecified", "unspecified", "unspecified"
+};
+
+static const char * const color_primaries_names[] = {
+	"unknown", "bt709", "undef", "unknown",
+	"bt470m", "bt470bg", "smpte170m", "smpte240m",
+	"film", "bt2020"
+};
+
+static const char * const transfer_characteristics_names[] = {
+	"unknown", "bt709", "undef", "unknown",
+	"bt470m", "bt470bg", "smpte170m", "smpte240m",
+	"linear", "log100", "log316", "iec61966-2-4",
+	"bt1361e", "iec61966-2-1", "bt2020-10", "bt2020-12",
+	"smpte-st-2084", "smpte-st-428"
+};
+
+static const char * const matrix_coeffs_names[] = {
+	"GBR", "bt709", "undef", "unknown",
+	"fcc", "bt470bg", "smpte170m", "smpte240m",
+	"YCgCo", "bt2020nc", "bt2020c"
+};
 
 #ifdef SUPPORT_10BIT
 #define HEVC_CM_BODY_START_ADDR                    0x3626
@@ -116,7 +140,8 @@ static u32 error_system_watchdog_count;
 
 #define LOSLESS_COMPRESS_MODE
 /* DOUBLE_WRITE_MODE is enabled only when NV21 8 bit output is needed */
-/* double_write_mode: 0, no double write; 1, 1:1 ratio; 2, (1/4):(1/4) ratio
+/* double_write_mode: 0, no double write; 1, 1:1 ratio; 2, (1/4):(1/4) ratio;
+	3, (1/4):(1/4) ratio, with both compressed frame included
 	0x10, double write only
 */
 static u32 double_write_mode;
@@ -129,7 +154,7 @@ static u32 workaround_enable;
 static u32 force_w_h;
 #endif
 static u32 force_fps;
-
+static u32 pts_unstable;
 #define H265_DEBUG_BUFMGR                   0x01
 #define H265_DEBUG_BUFMGR_MORE              0x02
 #define H265_DEBUG_UCODE                    0x04
@@ -143,6 +168,7 @@ static u32 force_fps;
 #define H265_DEBUG_DISCARD_NAL              0x400
 #define H265_DEBUG_OUT_PTS                  0x800
 #define H265_DEBUG_PRINT_DECODE_STATUS      0x1000
+#define H265_DEBUG_PRINT_SEI		      0x2000
 #define H265_DEBUG_DIS_LOC_ERROR_PROC       0x10000
 #define H265_DEBUG_DIS_SYS_ERROR_PROC   0x20000
 #define H265_DEBUG_DUMP_PIC_LIST       0x40000
@@ -155,8 +181,11 @@ static u32 force_fps;
 #define H265_DEBUG_IGNORE_CONFORMANCE_WINDOW	0x2000000
 #define H265_DEBUG_NOWAIT_DECODE_DONE_WHEN_STOP   0x4000000
 
+#define MAX_BUF_NUM 24
+#define MAX_REF_PIC_NUM 24
+#define MAX_REF_ACTIVE  16
 
-const u32 h265_version = 201512091;
+const u32 h265_version = 201602101;
 static u32 debug;
 static u32 radr;
 static u32 rval;
@@ -232,14 +261,8 @@ use_cma: 1, use both reserver memory and cma for buffers
 2, only use cma for buffers
 */
 static u32 use_cma = 2;
-static unsigned char init_flag;
-static unsigned char uninit_list;
-static u32 start_decoding_time;
-static u32 max_decoding_time;
-static int show_frame_num;
-static struct semaphore h265_sema;
-struct task_struct *h265_task = NULL;
 
+static u32 max_decoding_time;
 /*
 error handling
 */
@@ -265,6 +288,13 @@ static u32 error_skip_nal_count = 6;
 static u32 error_handle_threshold = 30;
 static u32 error_handle_nal_skip_threshold = 10;
 static u32 error_handle_system_threshold = 30;
+static u32 interlace_enable = 1;
+static u32 parser_sei_enable;
+
+static u32 max_buf_num = 16;
+
+DEFINE_SPINLOCK(lock);
+struct task_struct *h265_task = NULL;
 
 #define DEBUG_REG
 #ifdef DEBUG_REG
@@ -278,14 +308,6 @@ void WRITE_VREG_DBG(unsigned adr, unsigned val)
 #undef WRITE_VREG
 #define WRITE_VREG WRITE_VREG_DBG
 #endif
-#ifdef DEBUG_PTS
-static unsigned long pts_missed, pts_hit;
-#endif
-
-static struct dec_sysinfo vh265_amstream_dec_info;
-
-static DEFINE_SPINLOCK(lock);
-static int fatal_error;
 
 static DEFINE_MUTEX(vh265_mutex);
 
@@ -388,15 +410,17 @@ enum NalUnitType {
 /* --------------------------------------------------- */
 /* HEVC_DEC_STATUS define */
 /* --------------------------------------------------- */
-#define HEVC_DEC_IDLE                        0
-#define HEVC_NAL_UNIT_VPS                    1
-#define HEVC_NAL_UNIT_SPS                    2
-#define HEVC_NAL_UNIT_PPS                    3
-#define HEVC_NAL_UNIT_CODED_SLICE_SEGMENT    4
-#define HEVC_CODED_SLICE_SEGMENT_DAT         5
-#define HEVC_DUMP_LMEM              7
-#define HEVC_SLICE_SEGMENT_DONE         8
-#define HEVC_NAL_SEARCH_DONE            9
+#define HEVC_DEC_IDLE                        0x0
+#define HEVC_NAL_UNIT_VPS                    0x1
+#define HEVC_NAL_UNIT_SPS                    0x2
+#define HEVC_NAL_UNIT_PPS                    0x3
+#define HEVC_NAL_UNIT_CODED_SLICE_SEGMENT    0x4
+#define HEVC_CODED_SLICE_SEGMENT_DAT         0x5
+#define HEVC_DUMP_LMEM                       0x7
+#define HEVC_SLICE_SEGMENT_DONE              0x8
+#define HEVC_NAL_SEARCH_DONE                 0x9
+#define HEVC_SEI_DAT                         0xc
+#define HEVC_SEI_DAT_DONE                    0xd
 
 #define HEVC_4k2k_60HZ_NOT_SUPPORT	0x80
 #define HEVC_DISCARD_NAL         0xf0
@@ -502,6 +526,8 @@ bit [3:2]: valid when bit1==0;
 bit [15:4] nal skip count (valid when bit0 == 1 (manual mode) )
 bit [16]: for NAL_UNIT_EOS when bit0 is 0:
 	0, send SEARCH_DONE to arm ;  1, do not send SEARCH_DONE to arm
+bit [17]: for NAL_SEI when bit0 is 0:
+	0, do not parse SEI in ucode; 1, parse SEI in ucode
 bit [31:20]: used by ucode for debug purpose
 */
 #define NAL_SEARCH_CTL            HEVC_ASSIST_SCRATCH_I
@@ -577,9 +603,7 @@ union param_u {
 		unsigned short bit_depth;
 		unsigned short profile_etc;
 		unsigned short sei_frame_field_info;
-
-		unsigned short reserved[1];
-
+		unsigned short video_signal_type;
 		unsigned short modification_list[0x20];
 		unsigned short conformance_window_flag;
 		unsigned short conf_win_left_offset;
@@ -587,6 +611,7 @@ union param_u {
 		unsigned short conf_win_top_offset;
 		unsigned short conf_win_bottom_offset;
 		unsigned short chroma_format_idc;
+		unsigned short color_description;
 	} p;
 };
 
@@ -692,8 +717,8 @@ static struct BuffInfo_s amvh265_workbuff_spec[WORK_BUF_SPEC_NUM] = {
 		.mpred_above = {
 			.buf_size = 0x8000,
 		},
-		.mpred_mv = {
-			.buf_size = 0x40000 * 16,/* 1080p, 0x40000 per buffer */
+		.mpred_mv = {/* 1080p, 0x40000 per buffer */
+			.buf_size = 0x40000 * MAX_REF_PIC_NUM,
 		},
 		.rpm = {
 			.buf_size = RPM_BUF_SIZE,
@@ -770,7 +795,7 @@ static struct BuffInfo_s amvh265_workbuff_spec[WORK_BUF_SPEC_NUM] = {
 			/* .buf_size = 0x100000*16,
 			//4k2k , 0x100000 per buffer */
 			/* 4096x2304 , 0x120000 per buffer */
-			.buf_size = 0x120000 * 16,
+			.buf_size = 0x120000 * MAX_REF_PIC_NUM,
 		},
 		.rpm = {
 			.buf_size = RPM_BUF_SIZE,
@@ -931,7 +956,6 @@ enum SliceType {
 };
 
 /*USE_BUF_BLOCK*/
-#define MAX_BUF_NUM 16
 struct BUF_s {
 	int index;
 	unsigned int alloc_flag;
@@ -943,12 +967,7 @@ struct BUF_s {
 
 	unsigned int free_start_adr;
 } /*BUF_t */;
-static struct BUF_s m_BUF[MAX_BUF_NUM];
-static u32 max_buf_num = MAX_BUF_NUM;
-static u32 used_buf_num;
 
-#define MAX_REF_PIC_NUM 16
-#define MAX_REF_ACTIVE  MAX_REF_PIC_NUM
 /* level 6, 6.1 maximum slice number is 800; other is 200 */
 #define MAX_SLICE_NUM 800
 struct PIC_s {
@@ -992,9 +1011,25 @@ struct PIC_s {
 #ifdef LOSLESS_COMPRESS_MODE
 	unsigned int losless_comp_body_size;
 #endif
+	unsigned char pic_struct;
+	int vf_ref;
 } /*PIC_t */;
-static struct PIC_s m_PIC[MAX_REF_PIC_NUM];
 
+#define MAX_TILE_COL_NUM    5
+#define MAX_TILE_ROW_NUM    5
+struct tile_s {
+	int width;
+	int height;
+	int start_cu_x;
+	int start_cu_y;
+
+	unsigned int sao_vb_start_addr;
+	unsigned int sao_abv_start_addr;
+};
+
+#define SEI_MASTER_DISPLAY_COLOR_MASK 0x00000001
+
+#define VF_POOL_SIZE        32
 struct hevc_state_s {
 	struct BuffInfo_s *work_space_buf;
 	struct buff_s *mc_buf;
@@ -1003,7 +1038,6 @@ struct hevc_state_s {
 	void *lmem_addr;
 	dma_addr_t rpm_phy_addr;
 	dma_addr_t lmem_phy_addr;
-	union param_u *params;
 
 	unsigned int pic_list_init_flag;
 	unsigned int use_cma_flag;
@@ -1021,6 +1055,7 @@ struct hevc_state_s {
 	int lcu_size_log2;
 	int lcu_x_num_pre;
 	int lcu_y_num_pre;
+	int first_pic_after_recover;
 
 	int num_tile_col;
 	int num_tile_row;
@@ -1037,6 +1072,9 @@ struct hevc_state_s {
 	int slice_addr;
 	int slice_segment_addr;
 
+	unsigned char interlace_flag;
+	unsigned char curr_pic_struct;
+
 	unsigned short sps_num_reorder_pics_0;
 	unsigned short misc_flag0;
 	int m_temporalId;
@@ -1090,7 +1128,6 @@ struct hevc_state_s {
 	int last_pts;
 	u64 last_lookup_pts_us64;
 	u64 last_pts_us64;
-	u64 shift_byte_count;
 	u32 shift_byte_count_lo;
 	u32 shift_byte_count_hi;
 	int pts_mode_switching_count;
@@ -1098,17 +1135,74 @@ struct hevc_state_s {
 
 	int buf_num;
 	int pic_num;
+
+	/**/
+	struct buff_s mc_buf_spec;
+	union param_u param;
+
+	struct tile_s m_tile[MAX_TILE_ROW_NUM][MAX_TILE_COL_NUM];
+
+	struct timer_list timer;
+	struct BUF_s m_BUF[MAX_BUF_NUM];
+	u32 used_buf_num;
+	struct PIC_s m_PIC[MAX_REF_PIC_NUM];
+
+	DECLARE_KFIFO(newframe_q, struct vframe_s *, VF_POOL_SIZE);
+	DECLARE_KFIFO(display_q, struct vframe_s *, VF_POOL_SIZE);
+	DECLARE_KFIFO(pending_q, struct vframe_s *, VF_POOL_SIZE);
+	struct vframe_s vfpool[VF_POOL_SIZE];
+
+	u32 stat;
+	u32 frame_width;
+	u32 frame_height;
+	u32 frame_dur;
+	u32 frame_ar;
+	u32 bit_depth_luma;
+	u32 bit_depth_chroma;
+	u32 video_signal_type;
+	u32 saved_resolution;
+	bool get_frame_dur;
+	u32 error_watchdog_count;
+	u32 error_skip_nal_wt_cnt;
+	u32 error_system_watchdog_count;
+
+#ifdef DEBUG_PTS
+	unsigned long pts_missed;
+	unsigned long pts_hit;
+#endif
+	struct dec_sysinfo vh265_amstream_dec_info;
+	unsigned char init_flag;
+	unsigned char uninit_list;
+	u32 start_decoding_time;
+
+	int show_frame_num;
+	struct semaphore h265_sema;
+	int fatal_error;
+
+	unsigned long pre_last_frame_alloc_addr;
+	unsigned long pre_last_frame_alloc_size;
+	u32 predisp_addr;
+	u32 predisp_size;
+
+	u32 sei_present_flag;
+
+	/* data for SEI_MASTER_DISPLAY_COLOR */
+	unsigned int primaries[3][2];
+	unsigned int white_point[2];
+	unsigned int luminance[2];
+
+	struct PIC_s *pre_top_pic;
+	struct PIC_s *pre_bot_pic;
+
 } /*hevc_stru_t */;
 
 static void set_canvas(struct PIC_s *pic);
 
 static void hevc_init_stru(struct hevc_state_s *hevc,
 		struct BuffInfo_s *buf_spec_i,
-		struct buff_s *mc_buf_i,
-		union param_u *params_i)
+		struct buff_s *mc_buf_i)
 {
 	int i;
-	hevc->params = params_i;
 	hevc->work_space_buf = buf_spec_i;
 	hevc->mc_buf = mc_buf_i;
 	hevc->rpm_addr = NULL;
@@ -1151,7 +1245,6 @@ static void hevc_init_stru(struct hevc_state_s *hevc,
 	hevc->last_lookup_pts = 0;
 	hevc->last_pts_us64 = 0;
 	hevc->last_lookup_pts_us64 = 0;
-	hevc->shift_byte_count = 0;
 	hevc->shift_byte_count_lo = 0;
 	hevc->shift_byte_count_hi = 0;
 	hevc->pts_mode_switching_count = 0;
@@ -1165,12 +1258,17 @@ static void hevc_init_stru(struct hevc_state_s *hevc,
 		hevc->ignore_bufmgr_error = 0x0;
 
 	for (i = 0; i < MAX_REF_PIC_NUM; i++)
-		m_PIC[i].index = -1;
+		hevc->m_PIC[i].index = -1;
 	hevc->buf_num = 0;
 	hevc->pic_num = 0;
 	hevc->lcu_x_num_pre = 0;
 	hevc->lcu_y_num_pre = 0;
+	hevc->first_pic_after_recover = 0;
+
+	hevc->pre_top_pic = NULL;
+	hevc->pre_bot_pic = NULL;
 
+	hevc->sei_present_flag = 0;
 }
 
 static int prepare_display_buf(struct hevc_state_s *hevc, struct PIC_s *pic);
@@ -1196,7 +1294,7 @@ static struct PIC_s *get_pic_by_POC(struct hevc_state_s *hevc, int POC)
 	struct PIC_s *pic;
 	struct PIC_s *ret_pic = NULL;
 	for (i = 0; i < MAX_REF_PIC_NUM; i++) {
-		pic = &m_PIC[i];
+		pic = &hevc->m_PIC[i];
 		if (pic->index == -1)
 			continue;
 		if (pic->POC == POC) {
@@ -1217,7 +1315,7 @@ static struct PIC_s *get_ref_pic_by_POC(struct hevc_state_s *hevc, int POC)
 	struct PIC_s *pic;
 	struct PIC_s *ret_pic = NULL;
 	for (i = 0; i < MAX_REF_PIC_NUM; i++) {
-		pic = &m_PIC[i];
+		pic = &hevc->m_PIC[i];
 		if (pic->index == -1)
 			continue;
 		if ((pic->POC == POC) && (pic->referenced)) {
@@ -1253,11 +1351,7 @@ static unsigned int log2i(unsigned int val)
 static int init_buf_spec(struct hevc_state_s *hevc);
 
 /*USE_BUF_BLOCK*/
-static unsigned long pre_last_frame_alloc_addr;
-static unsigned long pre_last_frame_alloc_size;
-static u32 predisp_addr;
-static u32 predisp_size;
-static void uninit_buf_list(struct hevc_state_s *hevc)
+static void uninit_buf_list(struct hevc_state_s *hevc, bool force_free)
 {
 	int i;
 	unsigned char release_cma_flag = 0;
@@ -1268,7 +1362,13 @@ static void uninit_buf_list(struct hevc_state_s *hevc)
 	blackout &= ((buffer_mode_dbg >> 28) & 0xf);
 	blackout |=  ((buffer_mode_dbg >> 12) & 0xf);
 
-	predisp_addr = 0;
+	hevc->predisp_addr = 0;
+
+	if (force_free) {
+		blackout = 0;
+		buffer_mode_real = 0;
+		pr_info("maybe reuinit buf_list, free cma buffer\n");
+	}
 
 	if (buffer_mode_real & 1) {
 		if (blackout == 1)
@@ -1289,82 +1389,87 @@ static void uninit_buf_list(struct hevc_state_s *hevc)
 
 		msleep(50); /* ensure RDMA for display is done */
 		if (get_cpu_type() >= MESON_CPU_MAJOR_ID_GXBB &&
-			double_write_mode == 0) {
-			predisp_addr = READ_VCBUS_REG(AFBC_BODY_BADDR) << 4;
+			((double_write_mode == 0) ||
+			 (double_write_mode == 3))) {
+			hevc->predisp_addr =
+			READ_VCBUS_REG(AFBC_BODY_BADDR) << 4;
 		} else {
 			struct canvas_s cur_canvas;
 			canvas_read((READ_VCBUS_REG(VD1_IF0_CANVAS0) & 0xff),
 				 &cur_canvas);
-			predisp_addr = cur_canvas.addr;
+			hevc->predisp_addr = cur_canvas.addr;
 		}
 
 		for (i = 0; i < MAX_REF_PIC_NUM; i++) {
-			pic = &m_PIC[i];
+			pic = &hevc->m_PIC[i];
 			if (pic->index == -1)
 				continue;
-			if (predisp_addr == pic->mc_y_adr) {
-				predisp_size = pic->buf_size;
-				pr_info("%s, set  predisp_size = %d\n",
+			if (hevc->predisp_addr == pic->mc_y_adr) {
+				hevc->predisp_size = pic->buf_size;
+				pr_info("%s, set  hevc->predisp_size = %d\n",
 					__func__, pic->buf_size);
 				break;
 			}
 		}
 	}
 
-	if (pre_last_frame_alloc_addr) {
-		if (blackout == 1 || predisp_addr == 0
-			|| predisp_addr < pre_last_frame_alloc_addr
-			|| predisp_addr >= (pre_last_frame_alloc_addr
-				+ pre_last_frame_alloc_size)
+	if (hevc->pre_last_frame_alloc_addr) {
+		if (blackout == 1 || hevc->predisp_addr == 0
+			|| hevc->predisp_addr < hevc->pre_last_frame_alloc_addr
+			|| hevc->predisp_addr >=
+			(hevc->pre_last_frame_alloc_addr
+				+ hevc->pre_last_frame_alloc_size)
 			) {
 			codec_mm_free_for_dma(MEM_NAME,
-				pre_last_frame_alloc_addr);
+				hevc->pre_last_frame_alloc_addr);
 			pr_info("release pre_last_frame cma buffer %ld\n",
-				pre_last_frame_alloc_addr);
-			pre_last_frame_alloc_addr = 0;
-			pre_last_frame_alloc_size = 0;
+				hevc->pre_last_frame_alloc_addr);
+			hevc->pre_last_frame_alloc_addr = 0;
+			hevc->pre_last_frame_alloc_size = 0;
 		}
 	}
 
 	if (release_cma_flag) {
-		for (i = 0; i < used_buf_num; i++) {
-			if (m_BUF[i].alloc_addr != 0
-				&& m_BUF[i].cma_page_count > 0) {
+		for (i = 0; i < hevc->used_buf_num; i++) {
+			if (hevc->m_BUF[i].alloc_addr != 0
+				&& hevc->m_BUF[i].cma_page_count > 0) {
 				if ((release_cma_flag == 2)
-					&& (predisp_addr >=
-						m_BUF[i].start_adr)
-					&& (predisp_addr <
-					(m_BUF[i].start_adr +
-						m_BUF[i].size))) {
-					if (pre_last_frame_alloc_addr)
+					&& (hevc->predisp_addr >=
+						hevc->m_BUF[i].start_adr)
+					&& (hevc->predisp_addr <
+					(hevc->m_BUF[i].start_adr +
+						hevc->m_BUF[i].size))) {
+					if (hevc->pre_last_frame_alloc_addr)
 						pr_info("last buf not free\n");
 					else {
-						pre_last_frame_alloc_addr =
-							m_BUF[i].alloc_addr;
-						pre_last_frame_alloc_size =
-							m_BUF[i].size;
-						m_BUF[i].alloc_addr = 0;
-						m_BUF[i].cma_page_count = 0;
+						hevc->pre_last_frame_alloc_addr
+						=
+						hevc->m_BUF[i].alloc_addr;
+						hevc->pre_last_frame_alloc_size
+						= hevc->m_BUF[i].size;
+						hevc->m_BUF[i].alloc_addr = 0;
+						hevc->m_BUF[i].
+						cma_page_count = 0;
 						continue;
 					}
 				}
 
 				pr_info("release cma buffer[%d] (%d %ld)\n", i,
-					m_BUF[i].cma_page_count,
-					m_BUF[i].alloc_addr);
+					hevc->m_BUF[i].cma_page_count,
+					hevc->m_BUF[i].alloc_addr);
 				codec_mm_free_for_dma(MEM_NAME,
-					m_BUF[i].alloc_addr);
-				m_BUF[i].alloc_addr = 0;
-				m_BUF[i].cma_page_count = 0;
+					hevc->m_BUF[i].alloc_addr);
+				hevc->m_BUF[i].alloc_addr = 0;
+				hevc->m_BUF[i].cma_page_count = 0;
 
 			}
 		}
 	}
-	pr_info("%s, blackout %x r%x buf_mode %x r%x rel_cma_flag %x predisp_addr %d pre_alloc_addr(%ld, %ld)\n",
+	pr_info("%s, blackout %x r%x buf_mode %x r%x rel_cma_flag %x hevc->predisp_addr %d pre_alloc_addr(%ld, %ld)\n",
 		__func__, get_blackout_policy(), blackout,
 		buffer_mode, buffer_mode_real, release_cma_flag,
-		predisp_addr, pre_last_frame_alloc_addr,
-		pre_last_frame_alloc_size);
+		hevc->predisp_addr, hevc->pre_last_frame_alloc_addr,
+		hevc->pre_last_frame_alloc_size);
 	hevc->pic_list_init_flag = 0;
 	hevc->buf_num = 0;
 }
@@ -1376,13 +1481,13 @@ static void init_buf_list(struct hevc_state_s *hevc)
 	int mc_buffer_end = hevc->mc_buf->buf_start + hevc->mc_buf->buf_size;
 
 	if (dynamic_buf_num_margin > 0)
-		used_buf_num = hevc->sps_num_reorder_pics_0
+		hevc->used_buf_num = hevc->sps_num_reorder_pics_0
 			+ dynamic_buf_num_margin;
 	else
-		used_buf_num = max_buf_num;
+		hevc->used_buf_num = max_buf_num;
 
-	if (used_buf_num > MAX_BUF_NUM)
-		used_buf_num = MAX_BUF_NUM;
+	if (hevc->used_buf_num > MAX_BUF_NUM)
+		hevc->used_buf_num = MAX_BUF_NUM;
 	if (buf_alloc_size > 0) {
 		buf_size = buf_alloc_size;
 		if (debug)
@@ -1401,13 +1506,19 @@ static void init_buf_list(struct hevc_state_s *hevc)
 		+ losless_comp_body_size;
 	int mc_buffer_size_h = (mc_buffer_size + 0xffff)>>16;
 	if (double_write_mode) {
+		int pic_width_dw = ((double_write_mode == 2) ||
+			(double_write_mode == 3)) ?
+			pic_width / 2 : pic_width;
+		int pic_height_dw = ((double_write_mode == 2) ||
+			(double_write_mode == 3)) ?
+			pic_height / 2 : pic_height;
 		int lcu_size = hevc->lcu_size;
-		int pic_width_lcu  = (pic_width % lcu_size)
-			? pic_width / lcu_size
-			+ 1 : pic_width / lcu_size;
-		int pic_height_lcu = (pic_height % lcu_size)
-			? pic_height / lcu_size
-				+ 1 : pic_height / lcu_size;
+		int pic_width_lcu  = (pic_width_dw % lcu_size)
+			? pic_width_dw / lcu_size
+			+ 1 : pic_width_dw / lcu_size;
+		int pic_height_lcu = (pic_height_dw % lcu_size)
+			? pic_height_dw / lcu_size
+				+ 1 : pic_height_dw / lcu_size;
 		int lcu_total = pic_width_lcu * pic_height_lcu;
 		int mc_buffer_size_u_v = lcu_total * lcu_size * lcu_size / 2;
 		int mc_buffer_size_u_v_h = (mc_buffer_size_u_v + 0xffff) >> 16;
@@ -1439,11 +1550,13 @@ static void init_buf_list(struct hevc_state_s *hevc)
 		if (debug) {
 			pr_info
 			("init_buf_list num %d (width %d height %d):\n",
-			 used_buf_num, pic_width, pic_height);
+			 hevc->used_buf_num, pic_width, pic_height);
 		}
 	}
 
-	for (i = 0; i < used_buf_num; i++) {
+	pr_info("allocate begin\n");
+	get_cma_alloc_ref();
+	for (i = 0; i < hevc->used_buf_num; i++) {
 		if (((i + 1) * buf_size) > hevc->mc_buf->buf_size) {
 			if (use_cma)
 				hevc->use_cma_flag = 1;
@@ -1455,85 +1568,87 @@ static void init_buf_list(struct hevc_state_s *hevc)
 				break;
 			}
 		}
-		m_BUF[i].alloc_flag = 0;
-		m_BUF[i].index = i;
+		hevc->m_BUF[i].alloc_flag = 0;
+		hevc->m_BUF[i].index = i;
 
 		if (use_cma == 2)
 			hevc->use_cma_flag = 1;
 		if (hevc->use_cma_flag) {
-			if ((m_BUF[i].cma_page_count != 0)
-				&& (m_BUF[i].alloc_addr != 0)
-				&& (m_BUF[i].size != buf_size)) {
-				if ((predisp_addr >=
-						m_BUF[i].alloc_addr)
-					&& (predisp_addr <
-					(m_BUF[i].alloc_addr +
-						m_BUF[i].size))) {
-					pre_last_frame_alloc_addr =
-						m_BUF[i].alloc_addr;
-					pre_last_frame_alloc_size =
-						m_BUF[i].size;
+			if ((hevc->m_BUF[i].cma_page_count != 0)
+				&& (hevc->m_BUF[i].alloc_addr != 0)
+				&& (hevc->m_BUF[i].size != buf_size)) {
+				if ((hevc->predisp_addr >=
+						hevc->m_BUF[i].alloc_addr)
+					&& (hevc->predisp_addr <
+					(hevc->m_BUF[i].alloc_addr +
+						hevc->m_BUF[i].size))) {
+					hevc->pre_last_frame_alloc_addr =
+						hevc->m_BUF[i].alloc_addr;
+					hevc->pre_last_frame_alloc_size =
+						hevc->m_BUF[i].size;
 				} else {
 					codec_mm_free_for_dma(MEM_NAME,
-						m_BUF[i].alloc_addr);
+						hevc->m_BUF[i].alloc_addr);
 					pr_info("release cma buffer[%d] (%d %ld)\n",
-					i, m_BUF[i].cma_page_count,
-						m_BUF[i].alloc_addr);
+					i, hevc->m_BUF[i].cma_page_count,
+						hevc->m_BUF[i].alloc_addr);
 				}
-				m_BUF[i].alloc_addr = 0;
-				m_BUF[i].cma_page_count = 0;
+				hevc->m_BUF[i].alloc_addr = 0;
+				hevc->m_BUF[i].cma_page_count = 0;
 			}
-			if (m_BUF[i].alloc_addr == 0) {
+			if (hevc->m_BUF[i].alloc_addr == 0) {
 				if (!codec_mm_enough_for_size(buf_size)) {
 					/*
 					not enough mem for buffer.
 					*/
 					pr_info("not enought buffer for [%d],%d\n",
 						i, buf_size);
-					m_BUF[i].cma_page_count = 0;
+					hevc->m_BUF[i].cma_page_count = 0;
 					if (i <= 8) {
 						/*if alloced (i+1)>=9
 						don't send errors.*/
-						fatal_error |=
+						hevc->fatal_error |=
 						DECODER_FATAL_ERROR_NO_MEM;
 					}
 					break;
 				}
-				m_BUF[i].cma_page_count =
+				hevc->m_BUF[i].cma_page_count =
 					PAGE_ALIGN(buf_size) / PAGE_SIZE;
-				m_BUF[i].alloc_addr = codec_mm_alloc_for_dma(
-					MEM_NAME, m_BUF[i].cma_page_count,
+				hevc->m_BUF[i].alloc_addr =
+				    codec_mm_alloc_for_dma(
+					MEM_NAME, hevc->m_BUF[i].cma_page_count,
 					4 + PAGE_SHIFT,
 					CODEC_MM_FLAGS_FOR_VDECODER);
-				if (m_BUF[i].alloc_addr == 0) {
+				if (hevc->m_BUF[i].alloc_addr == 0) {
 					pr_info("alloc cma buffer[%d] fail\n",
 					i);
-					m_BUF[i].cma_page_count = 0;
+					hevc->m_BUF[i].cma_page_count = 0;
 					break;
 				}
-				pr_info("allocate cma buffer[%d] (%d,%ld,%ld)\n",
-						i, m_BUF[i].cma_page_count,
-						m_BUF[i].alloc_addr,
-						m_BUF[i].start_adr);
+				pr_debug("allocate cma buffer[%d] (%d,%ld,%ld)\n",
+						i,
+						hevc->m_BUF[i].cma_page_count,
+						hevc->m_BUF[i].alloc_addr,
+						hevc->m_BUF[i].start_adr);
 			} else {
 				pr_info("reuse cma buffer[%d] (%d,%ld,%ld)\n",
 						i,
-						m_BUF[i].cma_page_count,
-						m_BUF[i].alloc_addr,
-						m_BUF[i].start_adr);
+						hevc->m_BUF[i].cma_page_count,
+						hevc->m_BUF[i].alloc_addr,
+						hevc->m_BUF[i].start_adr);
 			}
-			m_BUF[i].start_adr =  m_BUF[i].alloc_addr;
+			hevc->m_BUF[i].start_adr =  hevc->m_BUF[i].alloc_addr;
 		} else {
-			m_BUF[i].cma_page_count = 0;
-			m_BUF[i].alloc_addr = 0;
-			m_BUF[i].start_adr =
+			hevc->m_BUF[i].cma_page_count = 0;
+			hevc->m_BUF[i].alloc_addr = 0;
+			hevc->m_BUF[i].start_adr =
 				hevc->mc_buf->buf_start + i * buf_size;
 		}
-		m_BUF[i].size = buf_size;
-		m_BUF[i].free_start_adr = m_BUF[i].start_adr;
+		hevc->m_BUF[i].size = buf_size;
+		hevc->m_BUF[i].free_start_adr = hevc->m_BUF[i].start_adr;
 
-		if (((m_BUF[i].start_adr + buf_size) > mc_buffer_end)
-			&& (m_BUF[i].alloc_addr == 0)) {
+		if (((hevc->m_BUF[i].start_adr + buf_size) > mc_buffer_end)
+			&& (hevc->m_BUF[i].alloc_addr == 0)) {
 			if (debug) {
 				pr_info
 				("Max mc buffer or mpred_mv buffer is used\n");
@@ -1543,9 +1658,12 @@ static void init_buf_list(struct hevc_state_s *hevc)
 
 		if (debug) {
 			pr_info("Buffer %d: start_adr %p size %x\n", i,
-				   (void *)m_BUF[i].start_adr, m_BUF[i].size);
+				   (void *)hevc->m_BUF[i].start_adr,
+				   hevc->m_BUF[i].size);
 		}
 	}
+	put_cma_alloc_ref();
+	pr_info("allocate end\n");
 
 	hevc->buf_num = i;
 
@@ -1586,7 +1704,21 @@ static int config_pic(struct hevc_state_s *hevc, struct PIC_s *pic)
 	int mc_buffer_size_u_v = 0;
 	int mc_buffer_size_u_v_h = 0;
 	if (double_write_mode) {
-		mc_buffer_size_u_v = lcu_total * lcu_size * lcu_size / 2;
+		int pic_width_dw = ((double_write_mode == 2) ||
+			(double_write_mode == 3)) ?
+			pic_width / 2 : pic_width;
+		int pic_height_dw = ((double_write_mode == 2) ||
+			(double_write_mode == 3)) ?
+			pic_height / 2 : pic_height;
+		int pic_width_lcu_dw = (pic_width_dw % lcu_size) ?
+			pic_width_dw / lcu_size + 1 :
+			pic_width_dw / lcu_size;
+		int pic_height_lcu_dw = (pic_height_dw % lcu_size) ?
+			pic_height_dw / lcu_size + 1 :
+			pic_height_dw / lcu_size;
+		int lcu_total_dw = pic_width_lcu_dw * pic_height_lcu_dw;
+
+		mc_buffer_size_u_v = lcu_total_dw * lcu_size * lcu_size / 2;
 		mc_buffer_size_u_v_h = (mc_buffer_size_u_v + 0xffff) >> 16;
 			/*64k alignment*/
 		buf_size = ((mc_buffer_size_u_v_h << 16) * 3);
@@ -1607,13 +1739,13 @@ static int config_pic(struct hevc_state_s *hevc, struct PIC_s *pic)
 					* lcu_total) * MV_MEM_UNIT))
 						<= mpred_mv_end) {
 		for (i = 0; i < hevc->buf_num; i++) {
-			y_adr = ((m_BUF[i].free_start_adr
+			y_adr = ((hevc->m_BUF[i].free_start_adr
 				+ 0xffff) >> 16) << 16;
 					/*64k alignment*/
 				if ((y_adr+buf_size) <=
-						(m_BUF[i].start_adr+
-						m_BUF[i].size)) {
-					m_BUF[i].free_start_adr =
+						(hevc->m_BUF[i].start_adr+
+						hevc->m_BUF[i].size)) {
+					hevc->m_BUF[i].free_start_adr =
 						y_adr + buf_size;
 					break;
 				}
@@ -1660,14 +1792,14 @@ static int config_pic(struct hevc_state_s *hevc, struct PIC_s *pic)
 						((pic->index * lcu_total)
 						* MV_MEM_UNIT);
 
-			if ((predisp_addr != 0) &&
-				(predisp_size != 0) &&
+			if ((hevc->predisp_addr != 0) &&
+				(hevc->predisp_size != 0) &&
 					(buffer_mode & 0x4) == 0) {
 				if ((pic->mc_y_adr >=
-						(predisp_addr +
-						predisp_size)) ||
+						(hevc->predisp_addr +
+						hevc->predisp_size)) ||
 					((pic->mc_y_adr + pic->buf_size) <=
-						predisp_addr)) {
+						hevc->predisp_addr)) {
 						pic->used_by_display = 0;
 				} else {
 					pic->used_by_display = 1;
@@ -1702,14 +1834,14 @@ static int config_pic(struct hevc_state_s *hevc, struct PIC_s *pic)
 }
 
 /*
-free m_BUF[..] for all free m_PIC[..]
+free hevc->m_BUF[..] for all free hevc->m_PIC[..]
  with the different size of hevc->pic_w,hevc->pic_h
 */
 static int recycle_buf(struct hevc_state_s *hevc)
 {
 	int i, j;
 	for (i = 0; i < MAX_REF_PIC_NUM; i++) {
-		struct PIC_s *pic = &m_PIC[i];
+		struct PIC_s *pic = &hevc->m_PIC[i];
 		if (pic->index == -1)
 			continue;
 		if (pic->width != hevc->pic_w || pic->height != hevc->pic_h) {
@@ -1725,16 +1857,17 @@ static int recycle_buf(struct hevc_state_s *hevc)
 	}
 
 	for (i = 0; i < hevc->buf_num; i++) {
-		if (m_BUF[i].free_start_adr != m_BUF[i].start_adr) {
+		if (hevc->m_BUF[i].free_start_adr != hevc->m_BUF[i].start_adr) {
 			for (j = 0; j < MAX_REF_PIC_NUM; j++) {
-				struct PIC_s *pic = &m_PIC[j];
+				struct PIC_s *pic = &hevc->m_PIC[j];
 				if (pic->index == -1)
 					continue;
 				if (pic->BUF_index == i)
 					break;
 			}
 			if (j == MAX_REF_PIC_NUM)
-				m_BUF[i].free_start_adr = m_BUF[i].start_adr;
+				hevc->m_BUF[i].free_start_adr =
+				    hevc->m_BUF[i].start_adr;
 		}
 	}
 	return 0;
@@ -1744,7 +1877,7 @@ static void init_pic_list(struct hevc_state_s *hevc)
 {
 	int i;
 	for (i = 0; i < MAX_REF_PIC_NUM; i++) {
-		struct PIC_s *pic = &m_PIC[i];
+		struct PIC_s *pic = &hevc->m_PIC[i];
 		memset(pic, 0, sizeof(struct PIC_s));
 		pic->index = i;
 		pic->BUF_index = -1;
@@ -1760,7 +1893,7 @@ static void init_pic_list(struct hevc_state_s *hevc)
 	}
 
 	for (; i < MAX_REF_PIC_NUM; i++) {
-		struct PIC_s *pic = &m_PIC[i];
+		struct PIC_s *pic = &hevc->m_PIC[i];
 		memset(pic, 0, sizeof(struct PIC_s));
 		pic->index = -1;
 		pic->BUF_index = -1;
@@ -1798,37 +1931,62 @@ static void init_decode_head_hw(struct hevc_state_s *hevc)
 
 }
 #endif
+#define HEVCD_MPP_ANC2AXI_TBL_DATA                 0x3464
 
 static void init_pic_list_hw(struct hevc_state_s *hevc)
 {
 	int i;
 	int cur_pic_num = MAX_REF_PIC_NUM;
-	WRITE_VREG(HEVCD_MPP_ANC2AXI_TBL_CONF_ADDR, 0x0);
+	if (get_cpu_type() >= MESON_CPU_MAJOR_ID_GXL)
+		WRITE_VREG(HEVCD_MPP_ANC2AXI_TBL_CONF_ADDR,
+			(0x1 << 1) | (0x1 << 2));
+	else
+		WRITE_VREG(HEVCD_MPP_ANC2AXI_TBL_CONF_ADDR, 0x0);
+
 	for (i = 0; i < MAX_REF_PIC_NUM; i++) {
-		if (m_PIC[i].index == -1) {
+		if (hevc->m_PIC[i].index == -1) {
 			cur_pic_num = i;
 			break;
 		}
-		WRITE_VREG(HEVCD_MPP_ANC2AXI_TBL_CMD_ADDR,
-				   m_PIC[i].mc_y_adr | (m_PIC[i].
-					   mc_canvas_y << 8) | 0x1);
-
-		if (double_write_mode & 0x10)
+		if (get_cpu_type() >= MESON_CPU_MAJOR_ID_GXL)
+			WRITE_VREG(HEVCD_MPP_ANC2AXI_TBL_DATA,
+				hevc->m_PIC[i].mc_y_adr >> 5);
+		else
 			WRITE_VREG(HEVCD_MPP_ANC2AXI_TBL_CMD_ADDR,
-				   m_PIC[i].mc_u_v_adr | (m_PIC[i].
-					   mc_canvas_u_v << 8) | 0x1);
-
+				hevc->m_PIC[i].mc_y_adr |
+				(hevc->m_PIC[i].mc_canvas_y << 8) | 0x1);
+		if (double_write_mode & 0x10) {
+			if (get_cpu_type() >= MESON_CPU_MAJOR_ID_GXL)
+				WRITE_VREG(HEVCD_MPP_ANC2AXI_TBL_DATA,
+					hevc->m_PIC[i].mc_u_v_adr >> 5);
+			else
+				WRITE_VREG(HEVCD_MPP_ANC2AXI_TBL_CMD_ADDR,
+					hevc->m_PIC[i].mc_u_v_adr |
+					(hevc->m_PIC[i].mc_canvas_u_v << 8)
+					| 0x1);
+		}
 	}
 
 	for (; i < MAX_REF_PIC_NUM; i++) {
-		WRITE_VREG(HEVCD_MPP_ANC2AXI_TBL_CMD_ADDR,
-			m_PIC[cur_pic_num-1].mc_y_adr|
-			(m_PIC[cur_pic_num-1].mc_canvas_y<<8)|0x1);
+		if (get_cpu_type() >= MESON_CPU_MAJOR_ID_GXL) {
+			WRITE_VREG(HEVCD_MPP_ANC2AXI_TBL_DATA,
+				hevc->m_PIC[cur_pic_num-1].mc_y_adr >> 5);
 #ifndef LOSLESS_COMPRESS_MODE
-		WRITE_VREG(HEVCD_MPP_ANC2AXI_TBL_CMD_ADDR,
-			m_PIC[cur_pic_num-1].mc_u_v_adr|
-			(m_PIC[cur_pic_num-1].mc_canvas_u_v<<8)|0x1);
+			WRITE_VREG(HEVCD_MPP_ANC2AXI_TBL_DATA,
+				hevc->m_PIC[cur_pic_num-1].mc_u_v_adr >> 5);
 #endif
+		} else {
+			WRITE_VREG(HEVCD_MPP_ANC2AXI_TBL_CMD_ADDR,
+				hevc->m_PIC[cur_pic_num-1].mc_y_adr|
+				(hevc->m_PIC[cur_pic_num-1].mc_canvas_y<<8)
+				| 0x1);
+#ifndef LOSLESS_COMPRESS_MODE
+			WRITE_VREG(HEVCD_MPP_ANC2AXI_TBL_CMD_ADDR,
+				hevc->m_PIC[cur_pic_num-1].mc_u_v_adr|
+				(hevc->m_PIC[cur_pic_num-1].mc_canvas_u_v<<8)
+				| 0x1);
+#endif
+		}
 	}
 
 	WRITE_VREG(HEVCD_MPP_ANC2AXI_TBL_CONF_ADDR, 0x1);
@@ -1853,7 +2011,7 @@ static void dump_pic_list(struct hevc_state_s *hevc)
 	struct PIC_s *pic;
 	pr_info("pic_list_init_flag is %d\r\n", hevc->pic_list_init_flag);
 	for (i = 0; i < MAX_REF_PIC_NUM; i++) {
-		pic = &m_PIC[i];
+		pic = &hevc->m_PIC[i];
 		if (pic->index == -1)
 			continue;
 		pr_info
@@ -1862,8 +2020,9 @@ static void dump_pic_list(struct hevc_state_s *hevc)
 		pr_info("num_reorder_pic:%d, output_mark:%d, w/h %d,%d",
 				pic->num_reorder_pic, pic->output_mark,
 				pic->width, pic->height);
-		pr_info("output_ready:%d, mv_wr_start %x\n",
-				pic->output_ready, pic->mpred_mv_wr_start_addr);
+		pr_info("output_ready:%d, mv_wr_start %x vf_ref %d\n",
+				pic->output_ready, pic->mpred_mv_wr_start_addr,
+				pic->vf_ref);
 	}
 }
 
@@ -1876,7 +2035,7 @@ static struct PIC_s *output_pic(struct hevc_state_s *hevc,
 	struct PIC_s *pic_display = NULL;
 	if (i_only_flag & 0x4) {
 		for (i = 0; i < MAX_REF_PIC_NUM; i++) {
-			pic = &m_PIC[i];
+			pic = &hevc->m_PIC[i];
 			if ((pic->index == -1) || (pic->POC == INVALID_POC))
 				continue;
 			if (pic->output_mark) {
@@ -1894,10 +2053,11 @@ static struct PIC_s *output_pic(struct hevc_state_s *hevc,
 			pic_display->output_mark = 0;
 			pic_display->recon_mark = 0;
 			pic_display->output_ready = 1;
+			pic_display->referenced = 0;
 		}
 	} else {
 		for (i = 0; i < MAX_REF_PIC_NUM; i++) {
-			pic = &m_PIC[i];
+			pic = &hevc->m_PIC[i];
 			if ((pic->index == -1) || (pic->POC == INVALID_POC))
 				continue;
 			if (pic->output_mark)
@@ -1905,7 +2065,7 @@ static struct PIC_s *output_pic(struct hevc_state_s *hevc,
 		}
 
 		for (i = 0; i < MAX_REF_PIC_NUM; i++) {
-			pic = &m_PIC[i];
+			pic = &hevc->m_PIC[i];
 			if ((pic->index == -1) || (pic->POC == INVALID_POC))
 				continue;
 			if (pic->output_mark) {
@@ -1930,7 +2090,7 @@ static struct PIC_s *output_pic(struct hevc_state_s *hevc,
 				pic_display->recon_mark = 0;
 				pic_display->output_ready = 1;
 			} else if (num_pic_not_yet_display >=
-				(MAX_BUF_NUM - 1)) {
+				(MAX_REF_PIC_NUM - 1)) {
 				pic_display->output_mark = 0;
 				pic_display->recon_mark = 0;
 				pic_display->output_ready = 1;
@@ -2041,7 +2201,7 @@ static void apply_ref_pic_set(struct hevc_state_s *hevc, int cur_poc,
 	unsigned char is_referenced;
 	/* pr_info("%s cur_poc %d\n", __func__, cur_poc); */
 	for (ii = 0; ii < MAX_REF_PIC_NUM; ii++) {
-		pic = &m_PIC[ii];
+		pic = &hevc->m_PIC[ii];
 		if (pic->index == -1)
 			continue;
 
@@ -2247,19 +2407,6 @@ static void set_ref_pic_list(struct PIC_s *pic, union param_u *params)
 	pic->RefNum_L1 = num_ref_idx_l1_active;
 }
 
-#define MAX_TILE_COL_NUM    5
-#define MAX_TILE_ROW_NUM    5
-struct tile_s {
-	int width;
-	int height;
-	int start_cu_x;
-	int start_cu_y;
-
-	unsigned int sao_vb_start_addr;
-	unsigned int sao_abv_start_addr;
-};
-struct tile_s m_tile[MAX_TILE_ROW_NUM][MAX_TILE_COL_NUM];
-
 static void update_tile_info(struct hevc_state_s *hevc, int pic_width_cu,
 		int pic_height_cu, int sao_mem_unit,
 		union param_u *params)
@@ -2302,47 +2449,49 @@ static void update_tile_info(struct hevc_state_s *hevc, int pic_width_cu,
 				start_cu_x = 0;
 				for (j = 0; j < hevc->num_tile_col; j++) {
 					if (j == (hevc->num_tile_col - 1)) {
-						m_tile[i][j].width =
+						hevc->m_tile[i][j].width =
 							pic_width_cu -
 							start_cu_x;
 					} else
-						m_tile[i][j].width = w;
+						hevc->m_tile[i][j].width = w;
 					if (i == (hevc->num_tile_row - 1)) {
-						m_tile[i][j].height =
+						hevc->m_tile[i][j].height =
 							pic_height_cu -
 							start_cu_y;
 					} else
-						m_tile[i][j].height = h;
-					m_tile[i][j].start_cu_x = start_cu_x;
-					m_tile[i][j].start_cu_y = start_cu_y;
-					m_tile[i][j].sao_vb_start_addr =
+						hevc->m_tile[i][j].height = h;
+					hevc->m_tile[i][j].start_cu_x
+					    = start_cu_x;
+					hevc->m_tile[i][j].start_cu_y
+					    = start_cu_y;
+					hevc->m_tile[i][j].sao_vb_start_addr =
 						hevc->work_space_buf->sao_vb.
 						buf_start + j * sao_vb_size;
-					m_tile[i][j].sao_abv_start_addr =
+					hevc->m_tile[i][j].sao_abv_start_addr =
 						hevc->work_space_buf->sao_abv.
 						buf_start + i * sao_abv_size;
 					if (debug & H265_DEBUG_BUFMGR) {
 						pr_info
 						("{y=%d, x=%d w %d h %d ",
-						 i, j, m_tile[i][j].width,
-						 m_tile[i][j].height);
+						 i, j, hevc->m_tile[i][j].width,
+						 hevc->m_tile[i][j].height);
 						pr_info
 						("start_x %d start_y %d ",
-						 m_tile[i][j].start_cu_x,
-						 m_tile[i][j].start_cu_y);
+						 hevc->m_tile[i][j].start_cu_x,
+						 hevc->m_tile[i][j].start_cu_y);
 						pr_info
 						("sao_vb_start 0x%x ",
-						 m_tile[i][j].
+						 hevc->m_tile[i][j].
 						 sao_vb_start_addr);
 						pr_info
 						("sao_abv_start 0x%x}\n",
-						 m_tile[i][j].
+						 hevc->m_tile[i][j].
 						 sao_abv_start_addr);
 					}
-					start_cu_x += m_tile[i][j].width;
+					start_cu_x += hevc->m_tile[i][j].width;
 
 				}
-				start_cu_y += m_tile[i][0].height;
+				start_cu_y += hevc->m_tile[i][0].height;
 			}
 		} else {
 			start_cu_y = 0;
@@ -2350,64 +2499,66 @@ static void update_tile_info(struct hevc_state_s *hevc, int pic_width_cu,
 				start_cu_x = 0;
 				for (j = 0; j < hevc->num_tile_col; j++) {
 					if (j == (hevc->num_tile_col - 1)) {
-						m_tile[i][j].width =
+						hevc->m_tile[i][j].width =
 							pic_width_cu -
 							start_cu_x;
 					} else {
-						m_tile[i][j].width =
+						hevc->m_tile[i][j].width =
 							params->p.tile_width[j];
 					}
 					if (i == (hevc->num_tile_row - 1)) {
-						m_tile[i][j].height =
+						hevc->m_tile[i][j].height =
 							pic_height_cu -
 							start_cu_y;
 					} else {
-						m_tile[i][j].height =
+						hevc->m_tile[i][j].height =
 							params->
 							p.tile_height[i];
 					}
-					m_tile[i][j].start_cu_x = start_cu_x;
-					m_tile[i][j].start_cu_y = start_cu_y;
-					m_tile[i][j].sao_vb_start_addr =
+					hevc->m_tile[i][j].start_cu_x
+					    = start_cu_x;
+					hevc->m_tile[i][j].start_cu_y
+					    = start_cu_y;
+					hevc->m_tile[i][j].sao_vb_start_addr =
 						hevc->work_space_buf->sao_vb.
 						buf_start + j * sao_vb_size;
-					m_tile[i][j].sao_abv_start_addr =
+					hevc->m_tile[i][j].sao_abv_start_addr =
 						hevc->work_space_buf->sao_abv.
 						buf_start + i * sao_abv_size;
 					if (debug & H265_DEBUG_BUFMGR) {
 						pr_info
 						("{y=%d, x=%d w %d h %d ",
-						 i, j, m_tile[i][j].width,
-						 m_tile[i][j].height);
+						 i, j, hevc->m_tile[i][j].width,
+						 hevc->m_tile[i][j].height);
 						pr_info
 						("start_x %d start_y %d ",
-						 m_tile[i][j].start_cu_x,
-						 m_tile[i][j].start_cu_y);
+						 hevc->m_tile[i][j].start_cu_x,
+						 hevc->m_tile[i][j].start_cu_y);
 						pr_info
 						("sao_vb_start 0x%x ",
-						 m_tile[i][j].
+						 hevc->m_tile[i][j].
 						 sao_vb_start_addr);
 						pr_info
 						("sao_abv_start 0x%x}\n",
-						 m_tile[i][j].
+						 hevc->m_tile[i][j].
 						 sao_abv_start_addr);
 
 					}
-					start_cu_x += m_tile[i][j].width;
+					start_cu_x += hevc->m_tile[i][j].width;
 				}
-				start_cu_y += m_tile[i][0].height;
+				start_cu_y += hevc->m_tile[i][0].height;
 			}
 		}
 	} else {
 		hevc->num_tile_col = 1;
 		hevc->num_tile_row = 1;
-		m_tile[0][0].width = pic_width_cu;
-		m_tile[0][0].height = pic_height_cu;
-		m_tile[0][0].start_cu_x = 0;
-		m_tile[0][0].start_cu_y = 0;
-		m_tile[0][0].sao_vb_start_addr =
+		hevc->m_tile[0][0].width = pic_width_cu;
+		hevc->m_tile[0][0].height = pic_height_cu;
+		hevc->m_tile[0][0].start_cu_x = 0;
+		hevc->m_tile[0][0].start_cu_y = 0;
+		hevc->m_tile[0][0].sao_vb_start_addr =
 			hevc->work_space_buf->sao_vb.buf_start;
-		m_tile[0][0].sao_abv_start_addr =
+		hevc->m_tile[0][0].sao_abv_start_addr =
 			hevc->work_space_buf->sao_abv.buf_start;
 	}
 }
@@ -2432,13 +2583,13 @@ static int get_tile_index(struct hevc_state_s *hevc, int cu_adr,
 	cu_y = cu_adr / pic_width_lcu;
 	if (hevc->tile_enabled) {
 		for (i = 0; i < hevc->num_tile_col; i++) {
-			if (cu_x >= m_tile[0][i].start_cu_x)
+			if (cu_x >= hevc->m_tile[0][i].start_cu_x)
 				tile_x = i;
 			else
 				break;
 		}
 		for (i = 0; i < hevc->num_tile_row; i++) {
-			if (cu_y >= m_tile[i][0].start_cu_y)
+			if (cu_y >= hevc->m_tile[i][0].start_cu_y)
 				tile_y = i;
 			else
 				break;
@@ -3322,7 +3473,7 @@ static void config_sao_hw(struct hevc_state_s *hevc, union param_u *params)
 	WRITE_VREG(HEVC_SAO_CTRL0, data32_2);
 }
 
-static void clear_used_by_display_flag(void)
+static void clear_used_by_display_flag(struct hevc_state_s *hevc)
 {
 	struct PIC_s *pic;
 	int i;
@@ -3330,7 +3481,7 @@ static void clear_used_by_display_flag(void)
 		return;
 
 	for (i = 0; i < MAX_REF_PIC_NUM; i++) {
-		pic = &m_PIC[i];
+		pic = &hevc->m_PIC[i];
 		pic->used_by_display = 0;
 	}
 }
@@ -3343,9 +3494,13 @@ static struct PIC_s *get_new_pic(struct hevc_state_s *hevc,
 	/* recycle un-used pic */
 	int i;
 	for (i = 0; i < MAX_REF_PIC_NUM; i++) {
-		pic = &m_PIC[i];
+		pic = &hevc->m_PIC[i];
 		if (pic->index == -1)
 			continue;
+		if ((pic->used_by_display)
+			&& ((READ_VCBUS_REG(AFBC_BODY_BADDR) << 4) !=
+				pic->mc_y_adr))
+			pic->used_by_display = 0;
 		if (pic->output_mark == 0 && pic->referenced == 0
 			&& pic->output_ready == 0
 			&& pic->used_by_display == 0) {
@@ -3361,11 +3516,11 @@ static struct PIC_s *get_new_pic(struct hevc_state_s *hevc,
 	if (re_config_pic_flag && new_pic == NULL) {
 		int ii;
 		for (ii = 0; ii < MAX_REF_PIC_NUM; ii++) {
-			if (m_PIC[ii].index == -1)
+			if (hevc->m_PIC[ii].index == -1)
 				break;
 		}
 		if (ii < MAX_REF_PIC_NUM) {
-			new_pic = &m_PIC[ii];
+			new_pic = &hevc->m_PIC[ii];
 			memset(new_pic, 0, sizeof(struct PIC_s));
 			new_pic->index = ii;
 			new_pic->BUF_index = -1;
@@ -3412,6 +3567,7 @@ static struct PIC_s *get_new_pic(struct hevc_state_s *hevc,
 		new_pic->num_reorder_pic = rpm_param->p.sps_num_reorder_pics_0;
 		new_pic->losless_comp_body_size = hevc->losless_comp_body_size;
 		new_pic->POC = hevc->curr_POC;
+		new_pic->pic_struct = hevc->curr_pic_struct;
 	}
 	return new_pic;
 }
@@ -3422,7 +3578,7 @@ static int get_display_pic_num(struct hevc_state_s *hevc)
 	struct PIC_s *pic;
 	int num = 0;
 	for (i = 0; i < MAX_REF_PIC_NUM; i++) {
-		pic = &m_PIC[i];
+		pic = &hevc->m_PIC[i];
 		if (pic->index == -1)
 			continue;
 
@@ -3484,7 +3640,7 @@ static void flush_output(struct hevc_state_s *hevc, struct PIC_s *pic)
 					prepare_display_buf(hevc, pic_display);
 					if (debug & H265_DEBUG_BUFMGR) {
 						pr_info
-						("[BM] Display: POC %d, ",
+						("[BM] flush Display: POC %d, ",
 						 pic_display->POC);
 						pr_info
 						("decoding index %d\n",
@@ -3501,7 +3657,10 @@ static inline void hevc_pre_pic(struct hevc_state_s *hevc,
 {
 
 	/* prev pic */
-	if (hevc->curr_POC != 0) {
+	/*if (hevc->curr_POC != 0) {*/
+	if (hevc->m_nalUnitType != NAL_UNIT_CODED_SLICE_IDR
+			&& hevc->m_nalUnitType !=
+			NAL_UNIT_CODED_SLICE_IDR_N_LP) {
 		struct PIC_s *pic_display;
 		pic = get_pic_by_POC(hevc, hevc->iPrevPOC);
 		if (pic && (pic->POC != INVALID_POC)) {
@@ -3555,6 +3714,15 @@ static inline void hevc_pre_pic(struct hevc_state_s *hevc,
 						prepare_display_buf
 							(hevc,
 							 pic_display);
+					if (debug & H265_DEBUG_BUFMGR) {
+						pr_info
+						("[BM] Display: POC %d, ",
+							 pic_display->POC);
+							pr_info
+							("decoding index %d\n",
+							 pic_display->
+							 decode_idx);
+						}
 					}
 				}
 			}
@@ -3581,17 +3749,24 @@ static void check_pic_decoded_lcu_count(struct hevc_state_s *hevc)
 		pr_info("cur lcu idx = %d, (total %d)\n",
 			current_lcu_idx, hevc->lcu_total);
 	}
+	if ((error_handle_policy & 0x20) == 0 && hevc->cur_pic != NULL) {
+		if (hevc->first_pic_after_recover) {
+			if (current_lcu_idx !=
+			 ((hevc->lcu_x_num_pre*hevc->lcu_y_num_pre) - 1))
+				hevc->cur_pic->error_mark = 1;
+		} else {
+			if (hevc->lcu_x_num_pre != 0
+			 && hevc->lcu_y_num_pre != 0
+			 && current_lcu_idx != 0
+			 && current_lcu_idx <
+			 ((hevc->lcu_x_num_pre*hevc->lcu_y_num_pre) - 1))
+				hevc->cur_pic->error_mark = 1;
+		}
+		if (hevc->cur_pic->error_mark)
+			pr_info("cur lcu idx = %d, (total %d), set error_mark\n",
+				current_lcu_idx,
+				hevc->lcu_x_num_pre*hevc->lcu_y_num_pre);
 
-	if ((error_handle_policy & 0x20) == 0 && hevc->cur_pic != NULL
-		&& hevc->lcu_x_num_pre != 0
-		&& hevc->lcu_y_num_pre != 0
-		&& current_lcu_idx != 0
-		&& current_lcu_idx <
-		((hevc->lcu_x_num_pre*hevc->lcu_y_num_pre) - 1)) {
-		pr_info("cur lcu idx = %d, (total %d), set error_mark\n",
-			current_lcu_idx,
-			hevc->lcu_x_num_pre*hevc->lcu_y_num_pre);
-		hevc->cur_pic->error_mark = 1;
 	}
 	hevc->lcu_x_num_pre = hevc->lcu_x_num;
 	hevc->lcu_y_num_pre = hevc->lcu_y_num;
@@ -3611,6 +3786,17 @@ static int hevc_slice_segment_header_process(struct hevc_state_s *hevc,
 			rpm_param->p.sps_num_reorder_pics_0;
 		hevc->m_temporalId = rpm_param->p.m_temporalId;
 		hevc->m_nalUnitType = rpm_param->p.m_nalUnitType;
+		hevc->interlace_flag =
+			(rpm_param->p.profile_etc >> 2) & 0x1;
+		hevc->curr_pic_struct =
+			(rpm_param->p.sei_frame_field_info >> 3) & 0xf;
+
+		if (interlace_enable == 0)
+			hevc->interlace_flag = 0;
+		if (interlace_enable & 0x100)
+			hevc->interlace_flag = interlace_enable & 0x1;
+		if (hevc->interlace_flag == 0)
+			hevc->curr_pic_struct = 0;
 		/* if(hevc->m_nalUnitType == NAL_UNIT_EOS){ */
 		/* hevc->m_pocRandomAccess = MAX_INT;
 		//add to fix RAP_B_Bossen_1 */
@@ -3638,15 +3824,16 @@ static int hevc_slice_segment_header_process(struct hevc_state_s *hevc,
 		if (hevc->pic_w != rpm_param->p.pic_width_in_luma_samples
 			|| hevc->pic_h !=
 			rpm_param->p.pic_height_in_luma_samples) {
-			pr_info("Pic Width/Height Change (%d,%d)=>(%d,%d)\n",
+			pr_info("Pic Width/Height Change (%d,%d)=>(%d,%d), interlace %d\n",
 				   hevc->pic_w, hevc->pic_h,
 				   rpm_param->p.pic_width_in_luma_samples,
-				   rpm_param->p.pic_height_in_luma_samples);
+				   rpm_param->p.pic_height_in_luma_samples,
+				   hevc->interlace_flag);
 
 			hevc->pic_w = rpm_param->p.pic_width_in_luma_samples;
 			hevc->pic_h = rpm_param->p.pic_height_in_luma_samples;
-			frame_width = hevc->pic_w;
-			frame_height = hevc->pic_h;
+			hevc->frame_width = hevc->pic_w;
+			hevc->frame_height = hevc->pic_h;
 #ifdef LOSLESS_COMPRESS_MODE
 			if (re_config_pic_flag == 0 &&
 				(double_write_mode & 0x10) == 0)
@@ -3803,7 +3990,7 @@ static int hevc_slice_segment_header_process(struct hevc_state_s *hevc,
 					hevc->pic_list_init_flag = 3;
 				}
 			}
-
+			hevc->first_pic_after_recover = 0;
 			if (debug & H265_DEBUG_BUFMGR_MORE)
 				dump_pic_list(hevc);
 			/* prev pic */
@@ -3871,8 +4058,11 @@ static int hevc_slice_segment_header_process(struct hevc_state_s *hevc,
 		int sao_vb_size = (sao_mem_unit + (2 << 4)) * pic_height_cu;
 		/* int sao_abv_size = sao_mem_unit*pic_width_cu; */
 		if (debug & H265_DEBUG_BUFMGR) {
-			pr_info("=========>%s decode index %d\n", __func__,
-				   hevc->decode_idx);
+			pr_info("==>%s dec idx %d, struct %d interlace %d\n",
+				__func__,
+				hevc->decode_idx,
+				hevc->curr_pic_struct,
+				hevc->interlace_flag);
 		}
 		if (dbg_skip_decode_index != 0 &&
 			hevc->decode_idx == dbg_skip_decode_index)
@@ -3921,12 +4111,13 @@ static int hevc_slice_segment_header_process(struct hevc_state_s *hevc,
 
 	if (hevc->new_tile) {
 		hevc->tile_start_lcu_x =
-			m_tile[hevc->tile_y][hevc->tile_x].start_cu_x;
+			hevc->m_tile[hevc->tile_y][hevc->tile_x].start_cu_x;
 		hevc->tile_start_lcu_y =
-			m_tile[hevc->tile_y][hevc->tile_x].start_cu_y;
-		hevc->tile_width_lcu = m_tile[hevc->tile_y][hevc->tile_x].width;
+			hevc->m_tile[hevc->tile_y][hevc->tile_x].start_cu_y;
+		hevc->tile_width_lcu =
+		    hevc->m_tile[hevc->tile_y][hevc->tile_x].width;
 		hevc->tile_height_lcu =
-			m_tile[hevc->tile_y][hevc->tile_x].height;
+			hevc->m_tile[hevc->tile_y][hevc->tile_x].height;
 	}
 
 	set_ref_pic_list(hevc->cur_pic, rpm_param);
@@ -4050,39 +4241,33 @@ static int hevc_slice_segment_header_process(struct hevc_state_s *hevc,
 h265 buffer management end
 
 ***************************************************/
-static struct buff_s mc_buf_spec;
-
 static struct hevc_state_s gHevc;
 
-static union param_u rpm_param;
-
-static void hevc_local_uninit(void)
+static void hevc_local_uninit(struct hevc_state_s *hevc)
 {
-	gHevc.rpm_ptr = NULL;
-	gHevc.lmem_ptr = NULL;
+	hevc->rpm_ptr = NULL;
+	hevc->lmem_ptr = NULL;
 
-	if (gHevc.rpm_addr) {
+	if (hevc->rpm_addr) {
 		dma_unmap_single(amports_get_dma_device(),
-			gHevc.rpm_phy_addr, RPM_BUF_SIZE, DMA_FROM_DEVICE);
-		kfree(gHevc.rpm_addr);
-		gHevc.rpm_addr = NULL;
+			hevc->rpm_phy_addr, RPM_BUF_SIZE, DMA_FROM_DEVICE);
+		kfree(hevc->rpm_addr);
+		hevc->rpm_addr = NULL;
 	}
-	if (gHevc.lmem_addr) {
+	if (hevc->lmem_addr) {
 		dma_unmap_single(amports_get_dma_device(),
-			gHevc.lmem_phy_addr, LMEM_BUF_SIZE, DMA_FROM_DEVICE);
-		kfree(gHevc.lmem_addr);
-		gHevc.lmem_addr = NULL;
+			hevc->lmem_phy_addr, LMEM_BUF_SIZE, DMA_FROM_DEVICE);
+		kfree(hevc->lmem_addr);
+		hevc->lmem_addr = NULL;
 	}
 
 }
 
-static int hevc_local_init(void)
+static int hevc_local_init(struct hevc_state_s *hevc)
 {
 	int ret = -1;
 	struct BuffInfo_s *cur_buf_info = NULL;
-	/* int pic_width = buf_alloc_width?buf_alloc_width:frame_width; */
-	/* int pic_height = buf_alloc_height?buf_alloc_height:frame_height; */
-	memset(&rpm_param, 0, sizeof(rpm_param));
+	memset(&hevc->param, 0, sizeof(union param_u));
 
 #ifdef SUPPORT_4K2K
 	cur_buf_info = &amvh265_workbuff_spec[1];	/* 4k2k work space */
@@ -4092,52 +4277,58 @@ static int hevc_local_init(void)
 
 	init_buff_spec(cur_buf_info);
 
-	mc_buf_spec.buf_start = (cur_buf_info->end_adr + 0xffff) & (~0xffff);
-	mc_buf_spec.buf_size = (mc_buf_spec.buf_end - mc_buf_spec.buf_start);
+	hevc->mc_buf_spec.buf_start = (cur_buf_info->end_adr + 0xffff)
+	    & (~0xffff);
+	hevc->mc_buf_spec.buf_size = (hevc->mc_buf_spec.buf_end
+	    - hevc->mc_buf_spec.buf_start);
 
-	hevc_init_stru(&gHevc, cur_buf_info, &mc_buf_spec, &rpm_param);
+	hevc_init_stru(hevc, cur_buf_info, &hevc->mc_buf_spec);
 
-	bit_depth_luma = 8;
-	bit_depth_chroma = 8;
+	hevc->bit_depth_luma = 8;
+	hevc->bit_depth_chroma = 8;
+	hevc->video_signal_type = 0;
+	bit_depth_luma = hevc->bit_depth_luma;
+	bit_depth_chroma = hevc->bit_depth_chroma;
+	video_signal_type = hevc->video_signal_type;
 
 	if ((debug & H265_DEBUG_SEND_PARAM_WITH_REG) == 0) {
-		gHevc.rpm_addr = kmalloc(RPM_BUF_SIZE, GFP_KERNEL);
-		if (gHevc.rpm_addr == NULL) {
+		hevc->rpm_addr = kmalloc(RPM_BUF_SIZE, GFP_KERNEL);
+		if (hevc->rpm_addr == NULL) {
 			pr_err("%s: failed to alloc rpm buffer\n", __func__);
 			return -1;
 		}
 
-		gHevc.rpm_phy_addr = dma_map_single(amports_get_dma_device(),
-			gHevc.rpm_addr, RPM_BUF_SIZE, DMA_FROM_DEVICE);
+		hevc->rpm_phy_addr = dma_map_single(amports_get_dma_device(),
+			hevc->rpm_addr, RPM_BUF_SIZE, DMA_FROM_DEVICE);
 		if (dma_mapping_error(amports_get_dma_device(),
-			gHevc.rpm_phy_addr)) {
+			hevc->rpm_phy_addr)) {
 			pr_err("%s: failed to map rpm buffer\n", __func__);
-			kfree(gHevc.rpm_addr);
-			gHevc.rpm_addr = NULL;
+			kfree(hevc->rpm_addr);
+			hevc->rpm_addr = NULL;
 			return -1;
 		}
 
-		gHevc.rpm_ptr = gHevc.rpm_addr;
+		hevc->rpm_ptr = hevc->rpm_addr;
 	}
 
 	if (debug & H265_DEBUG_UCODE) {
-		gHevc.lmem_addr = kmalloc(LMEM_BUF_SIZE, GFP_KERNEL);
-		if (gHevc.lmem_addr == NULL) {
+		hevc->lmem_addr = kmalloc(LMEM_BUF_SIZE, GFP_KERNEL);
+		if (hevc->lmem_addr == NULL) {
 			pr_err("%s: failed to alloc lmem buffer\n", __func__);
 			return -1;
 		}
 
-		gHevc.lmem_phy_addr = dma_map_single(amports_get_dma_device(),
-			gHevc.lmem_addr, LMEM_BUF_SIZE, DMA_FROM_DEVICE);
+		hevc->lmem_phy_addr = dma_map_single(amports_get_dma_device(),
+			hevc->lmem_addr, LMEM_BUF_SIZE, DMA_FROM_DEVICE);
 		if (dma_mapping_error(amports_get_dma_device(),
-			gHevc.lmem_phy_addr)) {
+			hevc->lmem_phy_addr)) {
 			pr_err("%s: failed to map lmem buffer\n", __func__);
-			kfree(gHevc.lmem_addr);
-			gHevc.lmem_addr = NULL;
+			kfree(hevc->lmem_addr);
+			hevc->lmem_addr = NULL;
 			return -1;
 		}
 
-		gHevc.lmem_ptr = gHevc.lmem_addr;
+		hevc->lmem_ptr = hevc->lmem_addr;
 	}
 	ret = 0;
 	return ret;
@@ -4151,7 +4342,6 @@ static int hevc_local_init(void)
 #define CMD_FRAME_DISPLAY          3
 #define CMD_DEBUG                  10
 
-static unsigned reserved_buffer;
 
 #define DECODE_BUFFER_NUM_MAX    32
 #define DISPLAY_BUFFER_NUM       6
@@ -4164,13 +4354,6 @@ static unsigned reserved_buffer;
 	 ((x)->uv_canvas_index << 8)  | \
 	 ((x)->y_canvas_index << 0))
 
-#define VF_POOL_SIZE        32
-
-static DECLARE_KFIFO(newframe_q, struct vframe_s *, VF_POOL_SIZE);
-static DECLARE_KFIFO(display_q, struct vframe_s *, VF_POOL_SIZE);
-
-static s32 vfbuf_use[DECODE_BUFFER_NUM_MAX];
-static struct vframe_s vfpool[VF_POOL_SIZE];
 
 static void set_canvas(struct PIC_s *pic)
 {
@@ -4182,7 +4365,8 @@ static void set_canvas(struct PIC_s *pic)
 	if	(double_write_mode) {
 		canvas_w = pic->width;
 		canvas_h = pic->height;
-		if (double_write_mode == 2) {
+		if ((double_write_mode == 2) ||
+			(double_write_mode == 3)) {
 			canvas_w >>= 2;
 			canvas_h >>= 2;
 		}
@@ -4238,44 +4422,69 @@ static int init_buf_spec(struct hevc_state_s *hevc)
 	/* pic_width = hevc->pic_w; */
 	/* pic_height = hevc->pic_h; */
 
-	if (frame_width == 0 || frame_height == 0) {
-		frame_width = pic_width;
-		frame_height = pic_height;
+	if (hevc->frame_width == 0 || hevc->frame_height == 0) {
+		hevc->frame_width = pic_width;
+		hevc->frame_height = pic_height;
 
 	}
 
 	return 0;
 }
 
-static void set_frame_info(struct vframe_s *vf)
+static void set_frame_info(struct hevc_state_s *hevc, struct vframe_s *vf)
 {
 	unsigned int ar;
+	int i, j;
 
-	if (double_write_mode == 2) {
-		vf->width = frame_width/4;
-		vf->height = frame_height/4;
+	if ((double_write_mode == 2) ||
+		(double_write_mode == 3)) {
+		vf->width = hevc->frame_width/4;
+		vf->height = hevc->frame_height/4;
 	} else {
-		vf->width = frame_width;
-		vf->height = frame_height;
+		vf->width = hevc->frame_width;
+		vf->height = hevc->frame_height;
 	}
-	vf->duration = frame_dur;
+	vf->duration = hevc->frame_dur;
 	vf->duration_pulldown = 0;
 	vf->flag = 0;
 
-	ar = min_t(u32, frame_ar, DISP_RATIO_ASPECT_RATIO_MAX);
+	ar = min_t(u32, hevc->frame_ar, DISP_RATIO_ASPECT_RATIO_MAX);
 	vf->ratio_control = (ar << DISP_RATIO_ASPECT_RATIO_BIT);
 
+	/* signal_type */
+	if (hevc->video_signal_type & VIDEO_SIGNAL_TYPE_AVAILABLE_MASK)
+		vf->signal_type = hevc->video_signal_type;
+	else
+		vf->signal_type = 0;
+
+	/* master_display_colour */
+	if (hevc->sei_present_flag & SEI_MASTER_DISPLAY_COLOR_MASK) {
+		for (i = 0; i < 3; i++)
+			for (j = 0; j < 2; j++)
+				vf->prop.master_display_colour.primaries[i][j]
+					= hevc->primaries[i][j];
+		for (i = 0; i < 2; i++) {
+			vf->prop.master_display_colour.white_point[i]
+				= hevc->white_point[i];
+			vf->prop.master_display_colour.luminance[i]
+				= hevc->luminance[i];
+		}
+		vf->prop.master_display_colour.present_flag = 1;
+	} else
+		vf->prop.master_display_colour.present_flag = 0;
+
 	return;
 }
 
 static int vh265_vf_states(struct vframe_states *states, void *op_arg)
 {
 	unsigned long flags;
+	struct hevc_state_s *hevc = (struct hevc_state_s *)op_arg;
 	spin_lock_irqsave(&lock, flags);
 
 	states->vf_pool_size = VF_POOL_SIZE;
-	states->buf_free_num = kfifo_len(&newframe_q);
-	states->buf_avail_num = kfifo_len(&display_q);
+	states->buf_free_num = kfifo_len(&hevc->newframe_q);
+	states->buf_avail_num = kfifo_len(&hevc->display_q);
 
 	if (step == 2)
 		states->buf_avail_num = 0;
@@ -4286,10 +4495,11 @@ static int vh265_vf_states(struct vframe_states *states, void *op_arg)
 static struct vframe_s *vh265_vf_peek(void *op_arg)
 {
 	struct vframe_s *vf;
+	struct hevc_state_s *hevc = (struct hevc_state_s *)op_arg;
 	if (step == 2)
 		return NULL;
 
-	if (kfifo_peek(&display_q, &vf))
+	if (kfifo_peek(&hevc->display_q, &vf))
 		return vf;
 
 	return NULL;
@@ -4298,14 +4508,14 @@ static struct vframe_s *vh265_vf_peek(void *op_arg)
 static struct vframe_s *vh265_vf_get(void *op_arg)
 {
 	struct vframe_s *vf;
-
+	struct hevc_state_s *hevc = (struct hevc_state_s *)op_arg;
 	if (step == 2)
 		return NULL;
 	else if (step == 1)
 		step = 2;
 
-	if (kfifo_get(&display_q, &vf)) {
-		show_frame_num++;
+	if (kfifo_get(&hevc->display_q, &vf)) {
+		hevc->show_frame_num++;
 		return vf;
 	}
 
@@ -4314,11 +4524,40 @@ static struct vframe_s *vh265_vf_get(void *op_arg)
 
 static void vh265_vf_put(struct vframe_s *vf, void *op_arg)
 {
-	clear_used_by_display_flag();
-	m_PIC[vf->index].output_ready = 0;
-	kfifo_put(&newframe_q, (const struct vframe_s *)vf);
-	if (gHevc.wait_buf != 0)
-		WRITE_VREG(HEVC_ASSIST_MBOX1_IRQ_REG, 0x1);
+	struct hevc_state_s *hevc = (struct hevc_state_s *)op_arg;
+	unsigned char index1 = vf->index & 0xff;
+	unsigned char index2 = (vf->index >> 8) & 0xff;
+
+	kfifo_put(&hevc->newframe_q, (const struct vframe_s *)vf);
+
+	if (index1 != 0xff && index1 >= 0
+		&& index1 < MAX_REF_PIC_NUM) {
+		if (hevc->m_PIC[index1].vf_ref > 0) {
+			hevc->m_PIC[index1].vf_ref--;
+
+			if (hevc->m_PIC[index1].vf_ref == 0) {
+				hevc->m_PIC[index1].output_ready = 0;
+				if (hevc->wait_buf != 0)
+					WRITE_VREG(HEVC_ASSIST_MBOX1_IRQ_REG,
+						0x1);
+			}
+		}
+	}
+
+	if (index2 != 0xff && index2 >= 0
+		&& index2 < MAX_REF_PIC_NUM) {
+		if (hevc->m_PIC[index2].vf_ref > 0) {
+			hevc->m_PIC[index2].vf_ref--;
+
+			if (hevc->m_PIC[index2].vf_ref == 0) {
+				clear_used_by_display_flag(hevc);
+					hevc->m_PIC[index2].output_ready = 0;
+				if (hevc->wait_buf != 0)
+					WRITE_VREG(HEVC_ASSIST_MBOX1_IRQ_REG,
+						0x1);
+			}
+		}
+	}
 }
 
 static int vh265_event_cb(int type, void *data, void *private_data)
@@ -4330,10 +4569,10 @@ static int vh265_event_cb(int type, void *data, void *private_data)
 #ifndef CONFIG_POST_PROCESS_MANAGER
 		vf_light_unreg_provider(&vh265_vf_prov);
 #endif
-		spin_lock_irqsave(&lock, flags);
+		spin_lock_irqsave(&hevc->lock, flags);
 		vh265_local_init();
 		vh265_prot_init();
-		spin_unlock_irqrestore(&lock, flags);
+		spin_unlock_irqrestore(&hevc->lock, flags);
 #ifndef CONFIG_POST_PROCESS_MANAGER
 		vf_reg_provider(&vh265_vf_prov);
 #endif
@@ -4344,13 +4583,74 @@ static int vh265_event_cb(int type, void *data, void *private_data)
 	return 0;
 }
 
+#ifdef HEVC_PIC_STRUCT_SUPPORT
+static int process_pending_vframe(struct hevc_state_s *hevc,
+	struct PIC_s *pair_pic, unsigned char pair_frame_top_flag)
+{
+	struct vframe_s *vf;
+	if (kfifo_len(&hevc->pending_q) > 1) {
+		/* do not pending more than 1 frame */
+		if (kfifo_get(&hevc->pending_q, &vf) == 0) {
+			pr_info("fatal error, no available buffer slot.");
+			return -1;
+		}
+		kfifo_put(&hevc->display_q, (const struct vframe_s *)vf);
+	}
+
+	if (kfifo_peek(&hevc->pending_q, &vf)) {
+		if (pair_pic == NULL || pair_pic->vf_ref <= 0) {
+			/* if pair_pic is recycled (pair_pic->vf_ref <= 0),
+			do not use it */
+			if (kfifo_get(&hevc->pending_q, &vf) == 0) {
+				pr_info("fatal error, no available buffer slot.");
+				return -1;
+			}
+			if (vf)
+				kfifo_put(&hevc->display_q,
+				(const struct vframe_s *)vf);
+		} else if ((!pair_frame_top_flag) &&
+			(((vf->index >> 8) & 0xff) == 0xff)) {
+			if (kfifo_get(&hevc->pending_q, &vf) == 0) {
+				pr_info("fatal error, no available buffer slot.");
+				return -1;
+			}
+			if (vf) {
+				vf->type = VIDTYPE_PROGRESSIVE
+				| VIDTYPE_VIU_NV21;
+				vf->index |= (pair_pic->index << 8);
+				vf->canvas1Addr = spec2canvas(pair_pic);
+				pair_pic->vf_ref++;
+				kfifo_put(&hevc->display_q,
+				(const struct vframe_s *)vf);
+			}
+		} else if (pair_frame_top_flag &&
+			((vf->index & 0xff) == 0xff)) {
+			if (kfifo_get(&hevc->pending_q, &vf) == 0) {
+				pr_info("fatal error, no available buffer slot.");
+				return -1;
+			}
+			if (vf) {
+				vf->type = VIDTYPE_PROGRESSIVE
+				| VIDTYPE_VIU_NV21;
+				vf->index |= pair_pic->index;
+				vf->canvas0Addr = spec2canvas(pair_pic);
+				pair_pic->vf_ref++;
+				kfifo_put(&hevc->display_q,
+				(const struct vframe_s *)vf);
+			}
+		}
+	}
+	return 0;
+}
+#endif
+
 static int prepare_display_buf(struct hevc_state_s *hevc, struct PIC_s *pic)
 {
 	struct vframe_s *vf = NULL;
 	int stream_offset = pic->stream_offset;
 	unsigned short slice_type = pic->slice_type;
 
-	if (kfifo_get(&newframe_q, &vf) == 0) {
+	if (kfifo_get(&hevc->newframe_q, &vf) == 0) {
 		pr_info("fatal error, no available buffer slot.");
 		return -1;
 	}
@@ -4362,18 +4662,21 @@ static int prepare_display_buf(struct hevc_state_s *hevc, struct PIC_s *pic)
 			(PTS_TYPE_VIDEO, stream_offset, &vf->pts, 0,
 			 &vf->pts_us64) != 0) {
 #ifdef DEBUG_PTS
-			pts_missed++;
+			hevc->pts_missed++;
 #endif
 			vf->pts = 0;
 			vf->pts_us64 = 0;
 		}
 #ifdef DEBUG_PTS
 		else
-			pts_hit++;
+			hevc->pts_hit++;
 #endif
+		if (pts_unstable && (hevc->frame_dur > 0)) {
+			hevc->pts_mode = PTS_NONE_REF_USE_DURATION;
+		}
 
 		if ((hevc->pts_mode == PTS_NORMAL) && (vf->pts != 0)
-			&& get_frame_dur) {
+			&& hevc->get_frame_dur) {
 			int pts_diff = (int)vf->pts - hevc->last_lookup_pts;
 
 			if (pts_diff < 0) {
@@ -4403,7 +4706,7 @@ static int prepare_display_buf(struct hevc_state_s *hevc, struct PIC_s *pic)
 
 		if ((hevc->pts_mode == PTS_NONE_REF_USE_DURATION)
 			&& (slice_type != 2))
-			vf->pts = hevc->last_pts + DUR2PTS(frame_dur);
+			vf->pts = hevc->last_pts + DUR2PTS(hevc->frame_dur);
 		hevc->last_pts = vf->pts;
 
 		if (vf->pts_us64 != 0)
@@ -4413,7 +4716,7 @@ static int prepare_display_buf(struct hevc_state_s *hevc, struct PIC_s *pic)
 			&& (slice_type != 2)) {
 			vf->pts_us64 =
 				hevc->last_pts_us64 +
-				(DUR2PTS(frame_dur) * 100 / 9);
+				(DUR2PTS(hevc->frame_dur) * 100 / 9);
 		}
 		hevc->last_pts_us64 = vf->pts_us64;
 		if ((debug & H265_DEBUG_OUT_PTS) != 0) {
@@ -4422,55 +4725,68 @@ static int prepare_display_buf(struct hevc_state_s *hevc, struct PIC_s *pic)
 			 vf->pts, vf->pts_us64);
 		}
 
-		vf->index = pic->index;
+		vf->index = 0xff00 | pic->index;
 #if 1
 /*SUPPORT_10BIT*/
+		if (double_write_mode & 0x10) {
+			/* double write only */
+			vf->compBodyAddr = 0;
+			vf->compHeadAddr = 0;
+		} else {
+			vf->compBodyAddr = pic->mc_y_adr; /*body adr*/
+			vf->compHeadAddr = pic->mc_y_adr +
+						pic->losless_comp_body_size;
+					/*head adr*/
+			vf->canvas0Addr = vf->canvas1Addr = 0;
+		}
 		if (double_write_mode) {
 			vf->type = VIDTYPE_PROGRESSIVE | VIDTYPE_VIU_FIELD;
 			vf->type |= VIDTYPE_VIU_NV21;
+			if (double_write_mode == 3)
+				vf->type |= VIDTYPE_COMPRESS;
 			vf->canvas0Addr = vf->canvas1Addr = spec2canvas(pic);
 		} else {
+			vf->canvas0Addr = vf->canvas1Addr = 0;
 			vf->type = VIDTYPE_COMPRESS | VIDTYPE_VIU_FIELD;
-			switch (bit_depth_luma) {
-			case 9:
-				vf->bitdepth = BITDEPTH_Y9;
-				break;
-			case 10:
-				vf->bitdepth = BITDEPTH_Y10;
-				break;
-			default:
-				vf->bitdepth = BITDEPTH_Y8;
-				break;
-			}
-			switch (bit_depth_chroma) {
-			case 9:
-				vf->bitdepth |= (BITDEPTH_U9 | BITDEPTH_V9);
-				break;
-			case 10:
-				vf->bitdepth |= (BITDEPTH_U10 | BITDEPTH_V10);
-				break;
-			default:
-				vf->bitdepth |= (BITDEPTH_U8 | BITDEPTH_V8);
-				break;
-			}
-			if (hevc->mem_saving_mode == 1)
-				vf->bitdepth |= BITDEPTH_SAVING_MODE;
+		}
+		vf->compWidth = pic->width;
+		vf->compHeight = pic->height;
 
-			vf->canvas1Addr = pic->mc_y_adr; /*body adr*/
-			vf->canvas0Addr = pic->mc_y_adr +
-						pic->losless_comp_body_size;
-						/*head adr*/
-	}
+		switch (hevc->bit_depth_luma) {
+		case 9:
+			vf->bitdepth = BITDEPTH_Y9;
+			break;
+		case 10:
+			vf->bitdepth = BITDEPTH_Y10;
+			break;
+		default:
+			vf->bitdepth = BITDEPTH_Y8;
+			break;
+		}
+		switch (hevc->bit_depth_chroma) {
+		case 9:
+			vf->bitdepth |= (BITDEPTH_U9 | BITDEPTH_V9);
+			break;
+		case 10:
+			vf->bitdepth |= (BITDEPTH_U10 | BITDEPTH_V10);
+			break;
+		default:
+			vf->bitdepth |= (BITDEPTH_U8 | BITDEPTH_V8);
+			break;
+		}
+		if (hevc->mem_saving_mode == 1)
+			vf->bitdepth |= BITDEPTH_SAVING_MODE;
 #else
 		vf->type = VIDTYPE_PROGRESSIVE | VIDTYPE_VIU_FIELD;
 		vf->type |= VIDTYPE_VIU_NV21;
 		vf->canvas0Addr = vf->canvas1Addr = spec2canvas(pic);
 #endif
-		set_frame_info(vf);
+		set_frame_info(hevc, vf);
 		/* if((vf->width!=pic->width)||(vf->height!=pic->height)) */
 		/* pr_info("aaa: %d/%d, %d/%d\n",
 		   vf->width,vf->height, pic->width, pic->height); */
-		if (double_write_mode == 2) {
+		if ((double_write_mode == 2) ||
+			(double_write_mode == 3)) {
 			vf->width = pic->width/4;
 			vf->height = pic->height/4;
 		}	else {
@@ -4494,10 +4810,10 @@ static int prepare_display_buf(struct hevc_state_s *hevc, struct PIC_s *pic)
 			need move below code to get_new_pic(),
 			hevc->xxx can only be used by current decoded pic
 		*/
-		if (hevc->params->p.conformance_window_flag &&
+		if (hevc->param.p.conformance_window_flag &&
 			(debug & H265_DEBUG_IGNORE_CONFORMANCE_WINDOW) == 0) {
 			unsigned SubWidthC, SubHeightC;
-			switch (hevc->params->p.chroma_format_idc) {
+			switch (hevc->param.p.chroma_format_idc) {
 			case 1:
 				SubWidthC = 2;
 				SubHeightC = 2;
@@ -4512,22 +4828,169 @@ static int prepare_display_buf(struct hevc_state_s *hevc, struct PIC_s *pic)
 				break;
 			}
 			vf->width -= SubWidthC *
-				(hevc->params->p.conf_win_left_offset +
-				hevc->params->p.conf_win_right_offset);
+				(hevc->param.p.conf_win_left_offset +
+				hevc->param.p.conf_win_right_offset);
 			vf->height -= SubHeightC *
-				(hevc->params->p.conf_win_top_offset +
-				hevc->params->p.conf_win_bottom_offset);
+				(hevc->param.p.conf_win_top_offset +
+				hevc->param.p.conf_win_bottom_offset);
 			if (debug & H265_DEBUG_BUFMGR)
 				pr_info("conformance_window %d, %d, %d, %d, %d => cropped width %d, height %d\n",
-					hevc->params->p.chroma_format_idc,
-					hevc->params->p.conf_win_left_offset,
-					hevc->params->p.conf_win_right_offset,
-					hevc->params->p.conf_win_top_offset,
-					hevc->params->p.conf_win_bottom_offset,
+					hevc->param.p.chroma_format_idc,
+					hevc->param.p.conf_win_left_offset,
+					hevc->param.p.conf_win_right_offset,
+					hevc->param.p.conf_win_top_offset,
+					hevc->param.p.conf_win_bottom_offset,
 					vf->width, vf->height);
 		}
 
-		kfifo_put(&display_q, (const struct vframe_s *)vf);
+#ifdef HEVC_PIC_STRUCT_SUPPORT
+		if (pic->pic_struct == 3 || pic->pic_struct == 4) {
+			struct vframe_s *vf2;
+			if (kfifo_get(&hevc->newframe_q, &vf2) == 0) {
+				pr_info("fatal error, no available buffer slot.");
+				return -1;
+			}
+			pic->vf_ref = 2;
+			vf->duration = vf->duration>>1;
+			memcpy(vf2, vf, sizeof(struct vframe_s));
+
+			if (pic->pic_struct == 3) {
+				vf->type = VIDTYPE_INTERLACE_TOP
+				| VIDTYPE_VIU_NV21;
+				vf2->type = VIDTYPE_INTERLACE_BOTTOM
+				| VIDTYPE_VIU_NV21;
+			} else {
+				vf->type = VIDTYPE_INTERLACE_BOTTOM
+				| VIDTYPE_VIU_NV21;
+				vf2->type = VIDTYPE_INTERLACE_TOP
+				| VIDTYPE_VIU_NV21;
+			}
+			kfifo_put(&hevc->display_q,
+			(const struct vframe_s *)vf);
+			kfifo_put(&hevc->display_q,
+			(const struct vframe_s *)vf2);
+		} else if (pic->pic_struct == 5
+			|| pic->pic_struct == 6) {
+			struct vframe_s *vf2, *vf3;
+			if (kfifo_get(&hevc->newframe_q, &vf2) == 0) {
+				pr_info("fatal error, no available buffer slot.");
+				return -1;
+			}
+			if (kfifo_get(&hevc->newframe_q, &vf3) == 0) {
+				pr_info("fatal error, no available buffer slot.");
+				return -1;
+			}
+			pic->vf_ref = 3;
+			vf->duration = vf->duration/3;
+			memcpy(vf2, vf, sizeof(struct vframe_s));
+			memcpy(vf3, vf, sizeof(struct vframe_s));
+
+			if (pic->pic_struct == 5) {
+				vf->type = VIDTYPE_INTERLACE_TOP
+				| VIDTYPE_VIU_NV21;
+				vf2->type = VIDTYPE_INTERLACE_BOTTOM
+				| VIDTYPE_VIU_NV21;
+				vf3->type = VIDTYPE_INTERLACE_TOP
+				| VIDTYPE_VIU_NV21;
+			} else {
+				vf->type = VIDTYPE_INTERLACE_BOTTOM
+				| VIDTYPE_VIU_NV21;
+				vf2->type = VIDTYPE_INTERLACE_TOP
+				| VIDTYPE_VIU_NV21;
+				vf3->type = VIDTYPE_INTERLACE_BOTTOM
+				| VIDTYPE_VIU_NV21;
+			}
+			kfifo_put(&hevc->display_q,
+			(const struct vframe_s *)vf);
+			kfifo_put(&hevc->display_q,
+			(const struct vframe_s *)vf2);
+			kfifo_put(&hevc->display_q,
+			(const struct vframe_s *)vf3);
+		} else if (pic->pic_struct == 9
+			|| pic->pic_struct == 10) {
+			/* process previous pending vf*/
+			process_pending_vframe(hevc,
+			pic, (pic->pic_struct == 9));
+
+			/* process current vf */
+			kfifo_put(&hevc->pending_q,
+			(const struct vframe_s *)vf);
+			vf->height <<= 1;
+			if (pic->pic_struct == 9) {
+				vf->type = VIDTYPE_INTERLACE_TOP
+				| VIDTYPE_VIU_NV21 | VIDTYPE_VIU_FIELD;
+				process_pending_vframe(hevc,
+				hevc->pre_bot_pic, 0);
+			} else {
+				vf->type = VIDTYPE_INTERLACE_BOTTOM |
+				VIDTYPE_VIU_NV21 | VIDTYPE_VIU_FIELD;
+				vf->index = (pic->index << 8) | 0xff;
+				process_pending_vframe(hevc,
+				hevc->pre_top_pic, 1);
+			}
+
+			/**/
+			if (pic->pic_struct == 9)
+				hevc->pre_top_pic = pic;
+			else
+				hevc->pre_bot_pic = pic;
+		} else if (pic->pic_struct == 11
+		    || pic->pic_struct == 12) {
+			/* process previous pending vf*/
+			process_pending_vframe(hevc, pic,
+			(pic->pic_struct == 11));
+
+			/* put current into pending q */
+			vf->height <<= 1;
+			if (pic->pic_struct == 11)
+				vf->type = VIDTYPE_INTERLACE_TOP |
+				VIDTYPE_VIU_NV21 | VIDTYPE_VIU_FIELD;
+			else {
+				vf->type = VIDTYPE_INTERLACE_BOTTOM |
+				VIDTYPE_VIU_NV21 | VIDTYPE_VIU_FIELD;
+				vf->index = (pic->index << 8) | 0xff;
+			}
+			kfifo_put(&hevc->pending_q,
+			(const struct vframe_s *)vf);
+
+			/**/
+			if (pic->pic_struct == 11)
+				hevc->pre_top_pic = pic;
+			else
+				hevc->pre_bot_pic = pic;
+		} else {
+			pic->vf_ref = 1;
+			switch (pic->pic_struct) {
+			case 7:
+				vf->duration <<= 1;
+				break;
+			case 8:
+				vf->duration = vf->duration * 3;
+				break;
+			case 1:
+				vf->height <<= 1;
+				vf->type = VIDTYPE_INTERLACE_TOP |
+				VIDTYPE_VIU_NV21 | VIDTYPE_VIU_FIELD;
+				process_pending_vframe(hevc, pic, 1);
+				hevc->pre_top_pic = pic;
+				break;
+			case 2:
+				vf->height <<= 1;
+				vf->type = VIDTYPE_INTERLACE_BOTTOM
+				| VIDTYPE_VIU_NV21
+				| VIDTYPE_VIU_FIELD;
+				process_pending_vframe(hevc, pic, 0);
+				hevc->pre_bot_pic = pic;
+				break;
+			}
+			kfifo_put(&hevc->display_q,
+			(const struct vframe_s *)vf);
+		}
+#else
+		vf->type_original = vf->type;
+		pic->vf_ref = 1;
+		kfifo_put(&hevc->display_q, (const struct vframe_s *)vf);
+#endif
 
 		vf_notify_receiver(PROVIDER_NAME,
 				VFRAME_EVENT_PROVIDER_VFRAME_READY, NULL);
@@ -4536,13 +4999,71 @@ static int prepare_display_buf(struct hevc_state_s *hevc, struct PIC_s *pic)
 	return 0;
 }
 
-static int vh265_stop(void);
-static s32 vh265_init(void);
+static void process_nal_sei(struct hevc_state_s *hevc,
+	int payload_type, int payload_size)
+{
+	unsigned short data;
+	if (debug & H265_DEBUG_PRINT_SEI)
+		pr_info("\tsei message: payload_type = 0x%02x, payload_size = 0x%02x\n",
+		payload_type, payload_size);
+
+	if (payload_type == 137) {
+		int i, j;
+		/* MASTERING_DISPLAY_COLOUR_VOLUME */
+		if (payload_size >= 24) {
+			if (debug & H265_DEBUG_PRINT_SEI)
+				pr_info("\tsei MASTERING_DISPLAY_COLOUR_VOLUME available\n");
+			for (i = 0; i < 3; i++) {
+				for (j = 0; j < 2; j++) {
+					data =
+					(READ_HREG(HEVC_SHIFTED_DATA) >> 16);
+					hevc->primaries[i][j] = data;
+					WRITE_HREG(HEVC_SHIFT_COMMAND,
+					(1<<7)|16);
+					if (debug & H265_DEBUG_PRINT_SEI)
+						pr_info("\t\tprimaries[%1d][%1d] = %04x\n",
+						i, j, hevc->primaries[i][j]);
+				}
+			}
+			for (i = 0; i < 2; i++) {
+				data = (READ_HREG(HEVC_SHIFTED_DATA) >> 16);
+				hevc->white_point[i] = data;
+				WRITE_HREG(HEVC_SHIFT_COMMAND, (1<<7)|16);
+				if (debug & H265_DEBUG_PRINT_SEI)
+					pr_info("\t\twhite_point[%1d] = %04x\n",
+					i, hevc->white_point[i]);
+			}
+			for (i = 0; i < 2; i++) {
+					data =
+					(READ_HREG(HEVC_SHIFTED_DATA) >> 16);
+					hevc->luminance[i] = data << 16;
+					WRITE_HREG(HEVC_SHIFT_COMMAND,
+					(1<<7)|16);
+					data =
+					(READ_HREG(HEVC_SHIFTED_DATA) >> 16);
+					hevc->luminance[i] |= data;
+					WRITE_HREG(HEVC_SHIFT_COMMAND,
+					(1<<7)|16);
+					if (debug & H265_DEBUG_PRINT_SEI)
+						pr_info("\t\tluminance[%1d] = %08x\n",
+						i, hevc->luminance[i]);
+			}
+			hevc->sei_present_flag |= SEI_MASTER_DISPLAY_COLOR_MASK;
+		}
+		payload_size -= 24;
+		while (payload_size > 0) {
+			data = (READ_HREG(HEVC_SHIFTED_DATA) >> 24);
+			payload_size--;
+			WRITE_HREG(HEVC_SHIFT_COMMAND, (1<<7)|8);
+			pr_info("\t\tskip byte %02x\n", data);
+		}
+	}
+}
 
 static void hevc_recover(struct hevc_state_s *hevc)
 {
-
 	u32 rem;
+	u64 shift_byte_count64;
 	unsigned hevc_shift_byte_count;
 	unsigned hevc_stream_start_addr;
 	unsigned hevc_stream_end_addr;
@@ -4582,13 +5103,20 @@ static void hevc_recover(struct hevc_state_s *hevc)
 	hevc_shift_byte_count = READ_VREG(HEVC_SHIFT_BYTE_COUNT);
 	if ((hevc->shift_byte_count_lo & (1 << 31))
 		&& ((hevc_shift_byte_count & (1 << 31)) == 0))
-		hevc->shift_byte_count += 0x100000000ULL;
-	div_u64_rem(hevc->shift_byte_count, hevc_stream_buf_size, &rem);
-	hevc->shift_byte_count -= rem;
-	hevc->shift_byte_count += hevc_stream_rd_ptr - hevc_stream_start_addr;
+		hevc->shift_byte_count_hi++;
+
+	hevc->shift_byte_count_lo = hevc_shift_byte_count;
+	shift_byte_count64 = ((u64)(hevc->shift_byte_count_hi) << 32) |
+				hevc->shift_byte_count_lo;
+	div_u64_rem(shift_byte_count64, hevc_stream_buf_size, &rem);
+	shift_byte_count64 -= rem;
+	shift_byte_count64 += hevc_stream_rd_ptr - hevc_stream_start_addr;
+
 	if (rem > (hevc_stream_rd_ptr - hevc_stream_start_addr))
-		hevc->shift_byte_count += hevc_stream_buf_size;
-	hevc->shift_byte_count_lo = (u32) hevc->shift_byte_count;
+		shift_byte_count64 += hevc_stream_buf_size;
+
+	hevc->shift_byte_count_lo = (u32)shift_byte_count64;
+	hevc->shift_byte_count_hi = (u32)(shift_byte_count64 >> 32);
 
 	WRITE_VREG(DOS_SW_RESET3,
 			   /* (1<<2)| */
@@ -4605,14 +5133,14 @@ static void hevc_recover(struct hevc_state_s *hevc)
 	WRITE_VREG(HEVC_SHIFT_BYTE_COUNT, hevc->shift_byte_count_lo);
 	WRITE_VREG(HEVC_STREAM_FIFO_CTL, hevc_stream_fifo_ctl);
 
-	hevc_config_work_space_hw(&gHevc);
+	hevc_config_work_space_hw(hevc);
 	decoder_hw_reset();
 
-	gHevc.have_vps = 0;
-	gHevc.have_sps = 0;
-	gHevc.have_pps = 0;
+	hevc->have_vps = 0;
+	hevc->have_sps = 0;
+	hevc->have_pps = 0;
 
-	gHevc.have_valid_start_slice = 0;
+	hevc->have_valid_start_slice = 0;
 
 	if (double_write_mode & 0x10)
 		WRITE_VREG(HEVCD_MPP_DECOMP_CTL1,
@@ -4648,6 +5176,9 @@ static void hevc_recover(struct hevc_state_s *hevc)
 
 	if (debug & H265_DEBUG_NO_EOS_SEARCH_DONE)
 		WRITE_VREG(NAL_SEARCH_CTL, READ_VREG(NAL_SEARCH_CTL) | 0x10000);
+	if (parser_sei_enable & 0x1)
+		WRITE_VREG(NAL_SEARCH_CTL,
+			READ_VREG(NAL_SEARCH_CTL) | 0x20000);
 	WRITE_VREG(DECODE_STOP_POS, decode_stop_pos);
 
 	/* if (amhevc_loadmc(vh265_mc) < 0) { */
@@ -4684,17 +5215,19 @@ static void hevc_recover(struct hevc_state_s *hevc)
 	WRITE_VREG(HEVC_DEC_STATUS_REG, HEVC_ACTION_DONE);
 	/* Interrupt Amrisc to excute */
 	WRITE_VREG(HEVC_MCPU_INTR_REQ, AMRISC_MAIN_REQ);
+
+	hevc->first_pic_after_recover = 1;
 }
 
 
-static irqreturn_t vh265_isr(int irq, void *dev_id)
+static irqreturn_t vh265_isr(int irq, void *data)
 {
 	int ret;
 	int i;
 	unsigned int dec_status;
-	struct hevc_state_s *hevc = &gHevc;
+	struct hevc_state_s *hevc = (struct hevc_state_s *)data;
 	dec_status = READ_VREG(HEVC_DEC_STATUS_REG);
-	if (init_flag == 0)
+	if (hevc->init_flag == 0)
 		return IRQ_HANDLED;
 
 	if (debug & H265_DEBUG_BUFMGR)
@@ -4704,7 +5237,7 @@ static irqreturn_t vh265_isr(int irq, void *dev_id)
 		if (READ_HREG(DEBUG_REG1) & 0x10000) {
 			dma_sync_single_for_cpu(
 				amports_get_dma_device(),
-				gHevc.lmem_phy_addr,
+				hevc->lmem_phy_addr,
 				LMEM_BUF_SIZE,
 				DMA_FROM_DEVICE);
 
@@ -4759,6 +5292,9 @@ static irqreturn_t vh265_isr(int irq, void *dev_id)
 			WRITE_VREG(NAL_SEARCH_CTL,
 					   READ_VREG(NAL_SEARCH_CTL) | 0x10000);
 		}
+		if (parser_sei_enable & 0x1)
+			WRITE_VREG(NAL_SEARCH_CTL,
+				READ_VREG(NAL_SEARCH_CTL) | 0x20000);
 		/* search new nal */
 		WRITE_VREG(HEVC_DEC_STATUS_REG, HEVC_ACTION_DONE);
 		/* Interrupt Amrisc to excute */
@@ -4808,11 +5344,18 @@ static irqreturn_t vh265_isr(int irq, void *dev_id)
 		hevc->shift_byte_count_hi++;
 	hevc->shift_byte_count_lo = i;
 
-	if (dec_status == HEVC_NAL_SEARCH_DONE) {
+	if (dec_status == HEVC_SEI_DAT) {
+		int payload_type = READ_HREG(CUR_NAL_UNIT_TYPE) & 0xffff;
+		int payload_size =
+		(READ_HREG(CUR_NAL_UNIT_TYPE) >> 16) & 0xffff;
+		process_nal_sei(hevc, payload_type, payload_size);
+
+		WRITE_VREG(HEVC_DEC_STATUS_REG, HEVC_SEI_DAT_DONE);
+	} else if (dec_status == HEVC_NAL_SEARCH_DONE) {
 		int naltype = READ_HREG(CUR_NAL_UNIT_TYPE);
 		int parse_type = HEVC_DISCARD_NAL;
-		error_watchdog_count = 0;
-		error_skip_nal_watchdog_count = 0;
+		hevc->error_watchdog_count = 0;
+		hevc->error_skip_nal_wt_cnt = 0;
 		if (slice_parse_begin > 0 && debug & H265_DEBUG_DISCARD_NAL) {
 			pr_info("nal type %d, discard %d\n", naltype,
 				   slice_parse_begin);
@@ -4827,6 +5370,9 @@ static irqreturn_t vh265_isr(int irq, void *dev_id)
 			/* add to fix RAP_B_Bossen_1 */
 			hevc->m_pocRandomAccess = MAX_INT;
 			flush_output(hevc, pic);
+			WRITE_VREG(HEVC_DEC_STATUS_REG, HEVC_DISCARD_NAL);
+			/* Interrupt Amrisc to excute */
+			WRITE_VREG(HEVC_MCPU_INTR_REQ, AMRISC_MAIN_REQ);
 			return IRQ_HANDLED;
 		}
 
@@ -4918,6 +5464,9 @@ static irqreturn_t vh265_isr(int irq, void *dev_id)
 						   READ_VREG(NAL_SEARCH_CTL) |
 						   0x10000);
 			}
+			if (parser_sei_enable & 0x1)
+				WRITE_VREG(NAL_SEARCH_CTL,
+					READ_VREG(NAL_SEARCH_CTL) | 0x20000);
 		}
 
 		if (debug & H265_DEBUG_BUFMGR) {
@@ -4932,14 +5481,14 @@ static irqreturn_t vh265_isr(int irq, void *dev_id)
 		WRITE_VREG(HEVC_MCPU_INTR_REQ, AMRISC_MAIN_REQ);
 
 	} else if (dec_status == HEVC_SLICE_SEGMENT_DONE) {
-		if (start_decoding_time > 0) {
+		if (hevc->start_decoding_time > 0) {
 			u32 process_time = 1000*
-			    (jiffies - start_decoding_time)/HZ;
+			    (jiffies - hevc->start_decoding_time)/HZ;
 			if (process_time > max_decoding_time)
 				max_decoding_time = process_time;
 		}
 
-		error_watchdog_count = 0;
+		hevc->error_watchdog_count = 0;
 		if (hevc->pic_list_init_flag == 2) {
 			hevc->pic_list_init_flag = 3;
 			pr_info("set pic_list_init_flag to 3\n");
@@ -4948,18 +5497,18 @@ static irqreturn_t vh265_isr(int irq, void *dev_id)
 			u32 vui_num_units_in_tick;
 
 			if (debug & H265_DEBUG_SEND_PARAM_WITH_REG)
-				get_rpm_param(&rpm_param);
+				get_rpm_param(&hevc->param);
 			else {
 				dma_sync_single_for_cpu(
 					amports_get_dma_device(),
-					gHevc.rpm_phy_addr,
+					hevc->rpm_phy_addr,
 					RPM_BUF_SIZE,
 					DMA_FROM_DEVICE);
 
 				for (i = 0; i < (RPM_END - RPM_BEGIN); i += 4) {
 					int ii;
 					for (ii = 0; ii < 4; ii++) {
-						rpm_param.l.data[i + ii] =
+						hevc->param.l.data[i + ii] =
 							hevc->rpm_ptr[i + 3
 							- ii];
 					}
@@ -4969,68 +5518,103 @@ static irqreturn_t vh265_isr(int irq, void *dev_id)
 				pr_info("rpm_param: (%d)\n", hevc->slice_idx);
 				hevc->slice_idx++;
 				for (i = 0; i < (RPM_END - RPM_BEGIN); i++) {
-					pr_info("%04x ", rpm_param.l.data[i]);
+					pr_info("%04x ", hevc->param.l.data[i]);
 					if (((i + 1) & 0xf) == 0)
 						pr_info("\n");
 				}
 
 				pr_info("vui_timing_info: %x, %x, %x, %x\n",
-					   rpm_param.p.vui_num_units_in_tick_hi,
-					   rpm_param.p.vui_num_units_in_tick_lo,
-					   rpm_param.p.vui_time_scale_hi,
-					   rpm_param.p.vui_time_scale_lo);
+					   hevc->
+					   param.p.vui_num_units_in_tick_hi,
+					   hevc->
+					   param.p.vui_num_units_in_tick_lo,
+					   hevc->param.p.vui_time_scale_hi,
+					   hevc->param.p.vui_time_scale_lo);
 			}
 
 			vui_time_scale =
-				(u32)(rpm_param.p.
+				(u32)(hevc->param.p.
 					  vui_time_scale_hi << 16) |
-				rpm_param.p.vui_time_scale_lo;
+				hevc->param.p.vui_time_scale_lo;
 			vui_num_units_in_tick =
-				(u32)(rpm_param.p.
+				(u32)(hevc->param.p.
 					  vui_num_units_in_tick_hi << 16) |
-				rpm_param.
+				hevc->param.
 				p.vui_num_units_in_tick_lo;
-			if (bit_depth_luma !=
-				((rpm_param.p.bit_depth & 0xf) + 8)) {
+			if (hevc->bit_depth_luma !=
+				((hevc->param.p.bit_depth & 0xf) + 8)) {
 				pr_info("Bit depth luma = %d\n",
-					   (rpm_param.p.bit_depth & 0xf) + 8);
+					   (hevc->param.p.bit_depth & 0xf) + 8);
 			}
-			if (bit_depth_chroma !=
-				(((rpm_param.p.bit_depth >> 4) & 0xf) + 8)) {
+			if (hevc->bit_depth_chroma !=
+				(((hevc->param.p.bit_depth >> 4) & 0xf) + 8)) {
 				pr_info("Bit depth chroma = %d\n",
-					   ((rpm_param.p.bit_depth >> 4) &
+					   ((hevc->param.p.bit_depth >> 4) &
 					    0xf) + 8);
 			}
-			bit_depth_luma = (rpm_param.p.bit_depth & 0xf) + 8;
-			bit_depth_chroma =
-				((rpm_param.p.bit_depth >> 4) & 0xf) + 8;
-
+			hevc->bit_depth_luma =
+			    (hevc->param.p.bit_depth & 0xf) + 8;
+			hevc->bit_depth_chroma =
+				((hevc->param.p.bit_depth >> 4) & 0xf) + 8;
+			bit_depth_luma = hevc->bit_depth_luma;
+			bit_depth_chroma = hevc->bit_depth_chroma;
 #ifdef SUPPORT_10BIT
-			if (bit_depth_luma == 8 &&
-				bit_depth_chroma == 8 && enable_mem_saving)
+			if (hevc->bit_depth_luma == 8 &&
+				hevc->bit_depth_chroma == 8 &&
+				enable_mem_saving)
 				hevc->mem_saving_mode = 1;
 			else
 				hevc->mem_saving_mode = 0;
 #endif
 			if ((vui_time_scale != 0)
 				&& (vui_num_units_in_tick != 0)) {
-				frame_dur =
+				hevc->frame_dur =
 					div_u64(96000ULL *
 							vui_num_units_in_tick,
 							vui_time_scale);
-				get_frame_dur = true;
+				hevc->get_frame_dur = true;
+			}
+
+			if (hevc->video_signal_type !=
+				((hevc->param.p.video_signal_type << 16)
+				| hevc->param.p.color_description)) {
+				u32 v = hevc->param.p.video_signal_type;
+				u32 c = hevc->param.p.color_description;
+#if 0
+				if (v & 0x2000) {
+					pr_info("video_signal_type present:\n");
+					pr_info(" %s %s\n",
+					video_format_names[(v >> 10) & 7],
+						((v >> 9) & 1) ?
+						"full_range" : "limited");
+					if (v & 0x100) {
+						pr_info(" color_description present:\n");
+						pr_info("  color_primarie = %s\n",
+						color_primaries_names
+						[v & 0xff]);
+						pr_info("  transfer_characteristic = %s\n",
+						transfer_characteristics_names
+						[(c >> 8) & 0xff]);
+						pr_info("  matrix_coefficient = %s\n",
+						matrix_coeffs_names[c & 0xff]);
+					}
+				}
+#endif
+				hevc->video_signal_type = (v << 16) | c;
+				video_signal_type = hevc->video_signal_type;
 			}
 
-			if (use_cma && (rpm_param.p.slice_segment_address == 0)
+			if (use_cma &&
+			    (hevc->param.p.slice_segment_address == 0)
 				&& (hevc->pic_list_init_flag == 0)) {
-				int log = rpm_param.p.
+				int log = hevc->param.p.
 					log2_min_coding_block_size_minus3;
-				int log_s = rpm_param.p.
+				int log_s = hevc->param.p.
 					log2_diff_max_min_coding_block_size;
 				hevc->pic_w =
-					rpm_param.p.pic_width_in_luma_samples;
+					hevc->param.p.pic_width_in_luma_samples;
 				hevc->pic_h =
-					rpm_param.p.pic_height_in_luma_samples;
+				hevc->param.p.pic_height_in_luma_samples;
 				hevc->lcu_size =
 					1 << (log + 3 + log_s);
 				hevc->lcu_size_log2 = log2i(hevc->lcu_size);
@@ -5049,9 +5633,9 @@ static irqreturn_t vh265_isr(int irq, void *dev_id)
 
 				} else {
 					hevc->sps_num_reorder_pics_0 =
-					rpm_param.p.sps_num_reorder_pics_0;
+					hevc->param.p.sps_num_reorder_pics_0;
 					hevc->pic_list_init_flag = 1;
-					up(&h265_sema);
+					up(&hevc->h265_sema);
 					pr_info("set pic_list_init_flag 1\n");
 				}
 				return IRQ_HANDLED;
@@ -5059,7 +5643,7 @@ static irqreturn_t vh265_isr(int irq, void *dev_id)
 
 		}
 		ret =
-			hevc_slice_segment_header_process(hevc, &rpm_param,
+			hevc_slice_segment_header_process(hevc, &hevc->param,
 					decode_pic_begin);
 		if (ret < 0)
 			;
@@ -5074,7 +5658,7 @@ static irqreturn_t vh265_isr(int irq, void *dev_id)
 			/* Interrupt Amrisc to excute */
 			WRITE_VREG(HEVC_MCPU_INTR_REQ, AMRISC_MAIN_REQ);
 
-			start_decoding_time = jiffies;
+			hevc->start_decoding_time = jiffies;
 		} else {
 			/* skip, search next start code */
 			WRITE_VREG(HEVC_WAIT_FLAG,
@@ -5092,14 +5676,19 @@ static irqreturn_t vh265_isr(int irq, void *dev_id)
 
 static void vh265_put_timer_func(unsigned long arg)
 {
-	struct timer_list *timer = (struct timer_list *)arg;
+	struct hevc_state_s *hevc = (struct hevc_state_s *)arg;
+	struct timer_list *timer = &hevc->timer;
 	unsigned char empty_flag;
 	unsigned int buf_level;
 
 	enum receviver_start_e state = RECEIVER_INACTIVE;
-
-	if (init_flag == 0)
+	if (hevc->init_flag == 0) {
+		if (hevc->stat & STAT_TIMER_ARM) {
+			timer->expires = jiffies + PUT_INTERVAL;
+			add_timer(&hevc->timer);
+		}
 		return;
+	}
 
 	if (vf_get_receiver(PROVIDER_NAME)) {
 		state =
@@ -5114,42 +5703,42 @@ static void vh265_put_timer_func(unsigned long arg)
 	empty_flag = (READ_VREG(HEVC_PARSER_INT_STATUS) >> 6) & 0x1;
 	/* error watchdog */
 	if ((empty_flag == 0)
-		&& (gHevc.pic_list_init_flag == 0
-			|| gHevc.pic_list_init_flag == 3)) {
+		&& (hevc->pic_list_init_flag == 0
+			|| hevc->pic_list_init_flag == 3)) {
 		/* decoder has input */
 		if ((debug & H265_DEBUG_DIS_LOC_ERROR_PROC) == 0) {
 
 			buf_level = READ_VREG(HEVC_STREAM_LEVEL);
 			/* receiver has no buffer to recycle */
 			if ((state == RECEIVER_INACTIVE) &&
-				(kfifo_is_empty(&display_q) &&
+				(kfifo_is_empty(&hevc->display_q) &&
 				 buf_level > 0x200)
 			   ) {
-				if (gHevc.error_flag == 0) {
-					error_watchdog_count++;
-					if (error_watchdog_count ==
+				if (hevc->error_flag == 0) {
+					hevc->error_watchdog_count++;
+					if (hevc->error_watchdog_count ==
 						error_handle_threshold) {
 						pr_info
 						("H265 dec err local reset.\n");
-						gHevc.error_flag = 1;
-						error_watchdog_count = 0;
-						error_skip_nal_watchdog_count =
-							0;
+						hevc->error_flag = 1;
+						hevc->error_watchdog_count = 0;
+						hevc->error_skip_nal_wt_cnt = 0;
+						hevc->
 						error_system_watchdog_count++;
 						WRITE_VREG
 						(HEVC_ASSIST_MBOX1_IRQ_REG,
 						 0x1);
 					}
-				} else if (gHevc.error_flag == 2) {
+				} else if (hevc->error_flag == 2) {
 					int th =
 						error_handle_nal_skip_threshold;
-					error_skip_nal_watchdog_count++;
-					if (error_skip_nal_watchdog_count ==
-						th) {
-						gHevc.error_flag = 3;
-						error_watchdog_count = 0;
-						error_skip_nal_watchdog_count =
-							0;
+					hevc->error_skip_nal_wt_cnt++;
+					if (hevc->error_skip_nal_wt_cnt
+					== th) {
+						hevc->error_flag = 3;
+						hevc->error_watchdog_count = 0;
+						hevc->
+						error_skip_nal_wt_cnt =	0;
 						WRITE_VREG
 						(HEVC_ASSIST_MBOX1_IRQ_REG,
 						 0x1);
@@ -5161,35 +5750,33 @@ static void vh265_put_timer_func(unsigned long arg)
 		if ((debug & H265_DEBUG_DIS_SYS_ERROR_PROC) == 0)
 			/* receiver has no buffer to recycle */
 			if ((state == RECEIVER_INACTIVE) &&
-				(kfifo_is_empty(&display_q))
+				(kfifo_is_empty(&hevc->display_q))
 			   ) {	/* no buffer to recycle */
 				if ((debug & H265_DEBUG_DIS_LOC_ERROR_PROC) !=
 					0)
-					error_system_watchdog_count++;
-				if (error_system_watchdog_count ==
+					hevc->error_system_watchdog_count++;
+				if (hevc->error_system_watchdog_count ==
 					error_handle_system_threshold) {
 					/* and it lasts for a while */
 					pr_info
 					("H265 dec fatal error watchdog.\n");
-					error_system_watchdog_count = 0;
-					fatal_error =
+					hevc->error_system_watchdog_count = 0;
+					hevc->fatal_error =
 						DECODER_FATAL_ERROR_UNKNOW;
 				}
 			}
 	} else {
-		error_watchdog_count = 0;
-		error_system_watchdog_count = 0;
+		hevc->error_watchdog_count = 0;
+		hevc->error_system_watchdog_count = 0;
 	}
 
-	timer->expires = jiffies + PUT_INTERVAL;
-
 	if (decode_stop_pos != decode_stop_pos_pre) {
 		WRITE_VREG(DECODE_STOP_POS, decode_stop_pos);
 		decode_stop_pos_pre = decode_stop_pos;
 	}
 
 	if (debug & H265_DEBUG_DUMP_PIC_LIST) {
-		dump_pic_list(&gHevc);
+		dump_pic_list(hevc);
 		debug &= ~H265_DEBUG_DUMP_PIC_LIST;
 	}
 	if (debug & H265_DEBUG_TRIG_SLICE_SEGMENT_PROC) {
@@ -5197,7 +5784,7 @@ static void vh265_put_timer_func(unsigned long arg)
 		debug &= ~H265_DEBUG_TRIG_SLICE_SEGMENT_PROC;
 	}
 	if (debug & H265_DEBUG_HW_RESET) {
-		gHevc.error_skip_nal_count = error_skip_nal_count;
+		hevc->error_skip_nal_count = error_skip_nal_count;
 		WRITE_VREG(HEVC_DEC_STATUS_REG, HEVC_ACTION_DONE);
 
 		debug &= ~H265_DEBUG_HW_RESET;
@@ -5208,7 +5795,7 @@ static void vh265_put_timer_func(unsigned long arg)
 	}
 #ifdef ERROR_HANDLE_DEBUG
 	if ((dbg_nal_skip_count > 0) && ((dbg_nal_skip_count & 0x10000) != 0)) {
-		gHevc.error_skip_nal_count = dbg_nal_skip_count & 0xffff;
+		hevc->error_skip_nal_count = dbg_nal_skip_count & 0xffff;
 		dbg_nal_skip_count &= ~0x10000;
 		WRITE_VREG(HEVC_DEC_STATUS_REG, HEVC_ACTION_DONE);
 	}
@@ -5241,46 +5828,53 @@ static void vh265_put_timer_func(unsigned long arg)
 		}
 		dbg_cmd = 0;
 	}
-	if (show_frame_num > 60 && /*don't changed at start.*/
-		frame_dur > 0 && saved_resolution !=
-		frame_width * frame_height * (96000 / frame_dur)) {
-		int fps = 96000 / frame_dur;
+	/*don't changed at start.*/
+	if (hevc->get_frame_dur && hevc->show_frame_num > 60 &&
+		hevc->frame_dur > 0 && hevc->saved_resolution !=
+		hevc->frame_width * hevc->frame_height *
+			(96000 / hevc->frame_dur)) {
+		int fps = 96000 / hevc->frame_dur;
 		if (hevc_source_changed(VFORMAT_HEVC,
-			frame_width, frame_height, fps) > 0) /*changed clk ok*/
-			saved_resolution = frame_width * frame_height * fps;
+			hevc->frame_width, hevc->frame_height, fps) > 0)
+			hevc->saved_resolution = hevc->frame_width *
+			hevc->frame_height * fps;
 	}
 
+
+	timer->expires = jiffies + PUT_INTERVAL;
 	add_timer(timer);
 }
 
 static int h265_task_handle(void *data)
 {
 	int ret = 0;
+	struct hevc_state_s *hevc = (struct hevc_state_s *)data;
+	set_user_nice(current, -10);
 	while (1) {
 		if (use_cma == 0) {
 			pr_info
 			("ERROR: use_cma can not be changed dynamically\n");
 		}
-		ret = down_interruptible(&h265_sema);
-		if ((init_flag != 0) && (gHevc.pic_list_init_flag == 1)) {
+		ret = down_interruptible(&hevc->h265_sema);
+		if ((hevc->init_flag != 0) && (hevc->pic_list_init_flag == 1)) {
 			/*USE_BUF_BLOCK*/
-			init_buf_list(&gHevc);
+			init_buf_list(hevc);
 			/**/
-			init_pic_list(&gHevc);
-			init_pic_list_hw(&gHevc);
-			init_buf_spec(&gHevc);
-			gHevc.pic_list_init_flag = 2;
+			init_pic_list(hevc);
+			init_pic_list_hw(hevc);
+			init_buf_spec(hevc);
+			hevc->pic_list_init_flag = 2;
 			pr_info("set pic_list_init_flag to 2\n");
 
 			WRITE_VREG(HEVC_ASSIST_MBOX1_IRQ_REG, 0x1);
 
 		}
 
-		if (uninit_list) {
+		if (hevc->uninit_list) {
 			/*USE_BUF_BLOCK*/
-			uninit_buf_list(&gHevc);
+			uninit_buf_list(hevc, false);
 			pr_info("uninit list\n");
-			uninit_list = 0;
+			hevc->uninit_list = 0;
 		}
 
 	}
@@ -5289,16 +5883,36 @@ static int h265_task_handle(void *data)
 
 }
 
+void vh265_free_cmabuf(void)
+{
+	struct hevc_state_s *hevc = &gHevc;
+
+	mutex_lock(&vh265_mutex);
+
+	if (hevc->init_flag) {
+		mutex_unlock(&vh265_mutex);
+		return;
+	}
+
+	if (use_cma) {
+		pr_info("force uninit_buf_list\n");
+		uninit_buf_list(hevc, true);
+	}
+
+	mutex_unlock(&vh265_mutex);
+}
+
 int vh265_dec_status(struct vdec_status *vstatus)
 {
-	vstatus->width = frame_width;
-	vstatus->height = frame_height;
-	if (frame_dur != 0)
-		vstatus->fps = 96000 / frame_dur;
+	struct hevc_state_s *hevc = &gHevc;
+	vstatus->width = hevc->frame_width;
+	vstatus->height = hevc->frame_height;
+	if (hevc->frame_dur != 0)
+		vstatus->fps = 96000 / hevc->frame_dur;
 	else
 		vstatus->fps = -1;
 	vstatus->error_count = 0;
-	vstatus->status = stat | fatal_error;
+	vstatus->status = hevc->stat | hevc->fatal_error;
 	return 0;
 }
 
@@ -5323,11 +5937,11 @@ static void H265_DECODE_INIT(void)
 }
 #endif
 
-static void vh265_prot_init(void)
+static void vh265_prot_init(struct hevc_state_s *hevc)
 {
 	/* H265_DECODE_INIT(); */
 
-	hevc_config_work_space_hw(&gHevc);
+	hevc_config_work_space_hw(hevc);
 
 	hevc_init_decoder_hw(0, 0xffffffff);
 
@@ -5353,72 +5967,75 @@ static void vh265_prot_init(void)
 		WRITE_VREG(NAL_SEARCH_CTL, 0x1);	/* manual parser NAL */
 	} else {
 		unsigned ctl_val = 0x8;	/* check vps/sps/pps/i-slice in ucode */
-		if (gHevc.PB_skip_mode == 0)
+		if (hevc->PB_skip_mode == 0)
 			ctl_val = 0x4;	/* check vps/sps/pps only in ucode */
-		else if (gHevc.PB_skip_mode == 3)
+		else if (hevc->PB_skip_mode == 3)
 			ctl_val = 0x0;	/* check vps/sps/pps/idr in ucode */
 		WRITE_VREG(NAL_SEARCH_CTL, ctl_val);
 	}
 	if (debug & H265_DEBUG_NO_EOS_SEARCH_DONE)
 		WRITE_VREG(NAL_SEARCH_CTL, READ_VREG(NAL_SEARCH_CTL) | 0x10000);
 
+	if (parser_sei_enable & 0x1)
+		WRITE_VREG(NAL_SEARCH_CTL, READ_VREG(NAL_SEARCH_CTL) | 0x20000);
 	WRITE_VREG(DECODE_STOP_POS, decode_stop_pos);
 
 }
 
-static int vh265_local_init(void)
+static int vh265_local_init(struct hevc_state_s *hevc)
 {
 	int i;
 	int ret;
 #ifdef DEBUG_PTS
-	pts_missed = 0;
-	pts_hit = 0;
+	hevc->pts_missed = 0;
+	hevc->pts_hit = 0;
 #endif
-	saved_resolution = 0;
-	get_frame_dur = false;
-	frame_width = vh265_amstream_dec_info.width;
-	frame_height = vh265_amstream_dec_info.height;
-	frame_dur =
-		(vh265_amstream_dec_info.rate ==
-		 0) ? 3600 : vh265_amstream_dec_info.rate;
-	if (frame_width && frame_height)
-		frame_ar = frame_height * 0x100 / frame_width;
-	error_watchdog_count = 0;
+	hevc->saved_resolution = 0;
+	hevc->get_frame_dur = false;
+	hevc->frame_width = hevc->vh265_amstream_dec_info.width;
+	hevc->frame_height = hevc->vh265_amstream_dec_info.height;
+	hevc->frame_dur =
+		(hevc->vh265_amstream_dec_info.rate ==
+		 0) ? 3600 : hevc->vh265_amstream_dec_info.rate;
+	if (hevc->frame_width && hevc->frame_height)
+		hevc->frame_ar = hevc->frame_height * 0x100 / hevc->frame_width;
+	hevc->error_watchdog_count = 0;
+	hevc->sei_present_flag = 0;
+	pts_unstable = ((unsigned long)hevc->vh265_amstream_dec_info.param
+		& 0x40) >> 6;
+	pr_info("h265:pts_unstable=%d\n", pts_unstable);
 /*
 TODO:FOR VERSION
 */
 	pr_info("h265: ver (%d,%d) decinfo: %dx%d rate=%d\n", h265_version,
-		   0, frame_width, frame_height, frame_dur);
+		   0, hevc->frame_width, hevc->frame_height, hevc->frame_dur);
 
-	if (frame_dur == 0)
-		frame_dur = 96000 / 24;
+	if (hevc->frame_dur == 0)
+		hevc->frame_dur = 96000 / 24;
 
-	INIT_KFIFO(display_q);
-	INIT_KFIFO(newframe_q);
+	INIT_KFIFO(hevc->display_q);
+	INIT_KFIFO(hevc->newframe_q);
 
-	for (i = 0; i < DECODE_BUFFER_NUM_MAX; i++)
-		vfbuf_use[i] = 0;
 
 	for (i = 0; i < VF_POOL_SIZE; i++) {
-		const struct vframe_s *vf = &vfpool[i];
-		vfpool[i].index = -1;
-		kfifo_put(&newframe_q, vf);
+		const struct vframe_s *vf = &hevc->vfpool[i];
+		hevc->vfpool[i].index = -1;
+		kfifo_put(&hevc->newframe_q, vf);
 	}
 
-	reserved_buffer = 0;
 
-	ret = hevc_local_init();
+	ret = hevc_local_init(hevc);
 
 	return ret;
 }
 
-static s32 vh265_init(void)
+static s32 vh265_init(struct hevc_state_s *hevc)
 {
-	init_timer(&recycle_timer);
+	init_timer(&hevc->timer);
 
-	stat |= STAT_TIMER_INIT;
+	hevc->stat |= STAT_TIMER_INIT;
 
-	if (vh265_local_init() < 0)
+	if (vh265_local_init(hevc) < 0)
 		return -EBUSY;
 
 	amhevc_enable();
@@ -5442,47 +6059,47 @@ static s32 vh265_init(void)
 		amhevc_disable();
 		return -EBUSY;
 	}
-	stat |= STAT_MC_LOAD;
+	hevc->stat |= STAT_MC_LOAD;
 
 	/* enable AMRISC side protocol */
-	vh265_prot_init();
+	vh265_prot_init(hevc);
 
 	if (vdec_request_irq(VDEC_IRQ_1, vh265_isr,
-				"vh265-irq", (void *)vh265_dec_id)) {
+				"vh265-irq", (void *)hevc)) {
 		pr_info("vh265 irq register error.\n");
 		amhevc_disable();
 		return -ENOENT;
 	}
 
-	stat |= STAT_ISR_REG;
+	hevc->stat |= STAT_ISR_REG;
 
 	vf_provider_init(&vh265_vf_prov, PROVIDER_NAME, &vh265_vf_provider,
-					 NULL);
+					 hevc);
 	vf_reg_provider(&vh265_vf_prov);
 	vf_notify_receiver(PROVIDER_NAME, VFRAME_EVENT_PROVIDER_START, NULL);
 
 	vf_notify_receiver(PROVIDER_NAME, VFRAME_EVENT_PROVIDER_FR_HINT,
-					   (void *)((unsigned long)frame_dur));
+				(void *)((unsigned long)hevc->frame_dur));
 
-	stat |= STAT_VF_HOOK;
+	hevc->stat |= STAT_VF_HOOK;
 
-	recycle_timer.data = (ulong) (&recycle_timer);
-	recycle_timer.function = vh265_put_timer_func;
-	recycle_timer.expires = jiffies + PUT_INTERVAL;
+	hevc->timer.data = (ulong) hevc;
+	hevc->timer.function = vh265_put_timer_func;
+	hevc->timer.expires = jiffies + PUT_INTERVAL;
 
-	add_timer(&recycle_timer);
+	add_timer(&hevc->timer);
 
-	stat |= STAT_TIMER_ARM;
+	hevc->stat |= STAT_TIMER_ARM;
 
 	if (use_cma) {
 		if (h265_task == NULL) {
-			sema_init(&h265_sema, 1);
+			sema_init(&hevc->h265_sema, 1);
 			h265_task =
-				kthread_run(h265_task_handle, NULL,
+				kthread_run(h265_task_handle, hevc,
 						"kthread_h265");
 		}
 	}
-	/* stat |= STAT_KTHREAD; */
+	/* hevc->stat |= STAT_KTHREAD; */
 
 	if (debug & H265_DEBUG_FORCE_CLK) {
 		pr_info("%s force clk\n", __func__);
@@ -5519,11 +6136,11 @@ static s32 vh265_init(void)
 
 	amhevc_start();
 
-	stat |= STAT_VDEC_RUN;
+	hevc->stat |= STAT_VDEC_RUN;
 
 	set_vdec_func(&vh265_dec_status);
 
-	init_flag = 1;
+	hevc->init_flag = 1;
 
 	/* pr_info("%d, vh265_init, RP=0x%x\n",
 	   __LINE__, READ_VREG(HEVC_STREAM_RD_PTR)); */
@@ -5531,10 +6148,10 @@ static s32 vh265_init(void)
 	return 0;
 }
 
-static int vh265_stop(void)
+static int vh265_stop(struct hevc_state_s *hevc)
 {
 
-	init_flag = 0;
+	hevc->init_flag = 0;
 
 	if ((debug & H265_DEBUG_NOWAIT_DECODE_DONE_WHEN_STOP) == 0) {
 		int wait_timeout_count = 0;
@@ -5546,36 +6163,37 @@ static int vh265_stop(void)
 		}
 	}
 
-	if (stat & STAT_VDEC_RUN) {
+	if (hevc->stat & STAT_VDEC_RUN) {
 		amhevc_stop();
-		stat &= ~STAT_VDEC_RUN;
+		hevc->stat &= ~STAT_VDEC_RUN;
 	}
 
-	if (stat & STAT_ISR_REG) {
+	if (hevc->stat & STAT_ISR_REG) {
 		WRITE_VREG(HEVC_ASSIST_MBOX1_MASK, 0);
-		vdec_free_irq(VDEC_IRQ_1, (void *)vh265_dec_id);
-		stat &= ~STAT_ISR_REG;
+		vdec_free_irq(VDEC_IRQ_1, (void *)hevc);
+		hevc->stat &= ~STAT_ISR_REG;
 	}
 
-	if (stat & STAT_TIMER_ARM) {
-		del_timer_sync(&recycle_timer);
-		stat &= ~STAT_TIMER_ARM;
+	hevc->stat &= ~STAT_TIMER_INIT;
+	if (hevc->stat & STAT_TIMER_ARM) {
+		del_timer_sync(&hevc->timer);
+		hevc->stat &= ~STAT_TIMER_ARM;
 	}
 
-	if (stat & STAT_VF_HOOK) {
+	if (hevc->stat & STAT_VF_HOOK) {
 		vf_notify_receiver(PROVIDER_NAME,
 				VFRAME_EVENT_PROVIDER_FR_END_HINT, NULL);
 
 		vf_unreg_provider(&vh265_vf_prov);
-		stat &= ~STAT_VF_HOOK;
+		hevc->stat &= ~STAT_VF_HOOK;
 	}
 
-	hevc_local_uninit();
+	hevc_local_uninit(hevc);
 
 	if (use_cma) {
-		uninit_list = 1;
-		up(&h265_sema);
-		while (uninit_list)	/* wait uninit complete */
+		hevc->uninit_list = 1;
+		up(&hevc->h265_sema);
+		while (hevc->uninit_list)	/* wait uninit complete */
 			msleep(20);
 	}
 #if 0
@@ -5593,18 +6211,23 @@ static int amvdec_h265_probe(struct platform_device *pdev)
 	struct vdec_dev_reg_s *pdata =
 		(struct vdec_dev_reg_s *)pdev->dev.platform_data;
 	int i;
-
+	struct hevc_state_s *hevc = &gHevc;
 	mutex_lock(&vh265_mutex);
 
-	fatal_error = 0;
-	show_frame_num = 0;
+	if ((get_cpu_type() >= MESON_CPU_MAJOR_ID_GXTVBB) &&
+		(parser_sei_enable & 0x100) == 0)
+		parser_sei_enable = 1;
+	hevc->init_flag = 0;
+	hevc->uninit_list = 0;
+	hevc->fatal_error = 0;
+	hevc->show_frame_num = 0;
 	if (pdata == NULL) {
 		pr_info("\namvdec_h265 memory resource undefined.\n");
 		mutex_unlock(&vh265_mutex);
 		return -EFAULT;
 	}
 
-	mc_buf_spec.buf_end = pdata->mem_end + 1;
+	hevc->mc_buf_spec.buf_end = pdata->mem_end + 1;
 	for (i = 0; i < WORK_BUF_SPEC_NUM; i++)
 		amvh265_workbuff_spec[i].start_adr = pdata->mem_start;
 
@@ -5614,11 +6237,11 @@ static int amvdec_h265_probe(struct platform_device *pdev)
 	}
 
 	if (pdata->sys_info)
-		vh265_amstream_dec_info = *pdata->sys_info;
+		hevc->vh265_amstream_dec_info = *pdata->sys_info;
 	else {
-		vh265_amstream_dec_info.width = 0;
-		vh265_amstream_dec_info.height = 0;
-		vh265_amstream_dec_info.rate = 30;
+		hevc->vh265_amstream_dec_info.width = 0;
+		hevc->vh265_amstream_dec_info.height = 0;
+		hevc->vh265_amstream_dec_info.rate = 30;
 	}
 
 	if (pdata->flag & DEC_FLAG_HEVC_WORKAROUND) {
@@ -5629,9 +6252,9 @@ static int amvdec_h265_probe(struct platform_device *pdev)
 
 	cma_dev = pdata->cma_dev;
 
-	if (vh265_init() < 0) {
+	if (vh265_init(hevc) < 0) {
 		pr_info("\namvdec_h265 init failed.\n");
-		hevc_local_uninit();
+		hevc_local_uninit(hevc);
 		mutex_unlock(&vh265_mutex);
 		return -ENODEV;
 	}
@@ -5645,12 +6268,13 @@ static int amvdec_h265_probe(struct platform_device *pdev)
 
 static int amvdec_h265_remove(struct platform_device *pdev)
 {
+	struct hevc_state_s *hevc = &gHevc;
 	if (debug)
 		pr_info("amvdec_h265_remove\n");
 
 	mutex_lock(&vh265_mutex);
 
-	vh265_stop();
+	vh265_stop(hevc);
 
 
 	hevc_source_changed(VFORMAT_HEVC, 0, 0, 0);
@@ -5658,7 +6282,7 @@ static int amvdec_h265_remove(struct platform_device *pdev)
 
 #ifdef DEBUG_PTS
 	pr_info("pts missed %ld, pts hit %ld, duration %d\n",
-		   pts_missed, pts_hit, frame_dur);
+		   hevc->pts_missed, hevc->pts_hit, hevc->frame_dur);
 #endif
 
 	mutex_unlock(&vh265_mutex);
@@ -5687,9 +6311,7 @@ static struct codec_profile_t amvdec_h265_profile = {
 
 static int __init amvdec_h265_driver_init_module(void)
 {
-	pr_info("amvdec_h265 module init\n");
-	init_flag = 0;
-	uninit_list = 0;
+	pr_debug("amvdec_h265 module init\n");
 	error_handle_policy = 0;
 
 #ifdef ERROR_HANDLE_DEBUG
@@ -5704,7 +6326,7 @@ static int __init amvdec_h265_driver_init_module(void)
 	buf_alloc_size = 0;
 
 	if (platform_driver_register(&amvdec_h265_driver)) {
-		pr_info("failed to register amvdec_h265 driver\n");
+		pr_err("failed to register amvdec_h265 driver\n");
 		return -ENODEV;
 	}
 
@@ -5730,16 +6352,16 @@ static int __init amvdec_h265_driver_init_module(void)
 
 static void __exit amvdec_h265_driver_remove_module(void)
 {
-	pr_info("amvdec_h265 module remove.\n");
+	pr_debug("amvdec_h265 module remove.\n");
 
 	platform_driver_unregister(&amvdec_h265_driver);
 }
 
 /****************************************/
-
+/*
 module_param(stat, uint, 0664);
 MODULE_PARM_DESC(stat, "\n amvdec_h265 stat\n");
-
+*/
 module_param(use_cma, uint, 0664);
 MODULE_PARM_DESC(use_cma, "\n amvdec_h265 use_cma\n");
 
@@ -5749,6 +6371,9 @@ MODULE_PARM_DESC(bit_depth_luma, "\n amvdec_h265 bit_depth_luma\n");
 module_param(bit_depth_chroma, uint, 0664);
 MODULE_PARM_DESC(bit_depth_chroma, "\n amvdec_h265 bit_depth_chroma\n");
 
+module_param(video_signal_type, uint, 0664);
+MODULE_PARM_DESC(video_signal_type, "\n amvdec_h265 video_signal_type\n");
+
 module_param(debug, uint, 0664);
 MODULE_PARM_DESC(debug, "\n amvdec_h265 debug\n");
 
@@ -5857,6 +6482,13 @@ MODULE_PARM_DESC(force_fps, "\n force_fps\n");
 module_param(max_decoding_time, uint, 0664);
 MODULE_PARM_DESC(max_decoding_time, "\n max_decoding_time\n");
 
+module_param(interlace_enable, uint, 0664);
+MODULE_PARM_DESC(interlace_enable, "\n interlace_enable\n");
+module_param(pts_unstable, uint, 0664);
+MODULE_PARM_DESC(pts_unstable, "\n amvdec_h265 pts_unstable\n");
+module_param(parser_sei_enable, uint, 0664);
+MODULE_PARM_DESC(parser_sei_enable, "\n parser_sei_enable\n");
+
 module_init(amvdec_h265_driver_init_module);
 module_exit(amvdec_h265_driver_remove_module);
 
-- 
1.9.1

From e495551e1b59c626b896843a07475580b3544459 Mon Sep 17 00:00:00 2001
From: Jamie Coldhill <wrxtasy@amnet.net.au>
Date: Sun, 2 Oct 2016 19:32:49 +0800
Subject: [PATCH 11/13] Update: ppmgr

---
 drivers/amlogic/ppmgr/ppmgr_drv.c | 213 ++++++++++++++++++++-------------
 drivers/amlogic/ppmgr/ppmgr_vpp.c | 245 +++++++++++++++++++++++++++++---------
 2 files changed, 322 insertions(+), 136 deletions(-)

diff --git a/drivers/amlogic/ppmgr/ppmgr_drv.c b/drivers/amlogic/ppmgr/ppmgr_drv.c
index 09ef05d..252fc60 100644
--- a/drivers/amlogic/ppmgr/ppmgr_drv.c
+++ b/drivers/amlogic/ppmgr/ppmgr_drv.c
@@ -37,6 +37,10 @@
 #include <linux/amlogic/ppmgr/ppmgr_status.h>
 #include <linux/amlogic/amports/video_prot.h>
 
+#define PPMGRDRV_INFO(fmt, args...) pr_info("PPMGRDRV: info: "fmt"", ## args)
+#define PPMGRDRV_DBG(fmt, args...) pr_debug("PPMGRDRV: dbg: "fmt"", ## args)
+#define PPMGRDRV_WARN(fmt, args...) pr_warn("PPMGRDRV: warn: "fmt"", ## args)
+#define PPMGRDRV_ERR(fmt, args...) pr_err("PPMGRDRV: err: "fmt"", ## args)
 
 /***********************************************************************
  *
@@ -200,10 +204,11 @@ static ssize_t _ppmgr_angle_write(unsigned long val)
 		else if (angle == 270)
 			angle = 3;
 		else {
-			pr_err("invalid orientation value\n");
-			pr_err("you should set 0 or 0 for 0 clock wise,");
-			pr_err("1 or 90 for 90 clockwise,2 or 180 for 180 clockwise");
-			pr_err("3 or 270 for 270 clockwise\n");
+			PPMGRDRV_ERR("invalid orientation value\n");
+			PPMGRDRV_ERR("you should set 0 or 0 for 0 clockwise\n");
+			PPMGRDRV_ERR("1 or 90 for 90 clockwise\n");
+			PPMGRDRV_ERR("2 or 180 for 180 clockwise\n");
+			PPMGRDRV_ERR("3 or 270 for 270 clockwise\n");
 			return -EINVAL;
 		}
 	}
@@ -211,14 +216,17 @@ static ssize_t _ppmgr_angle_write(unsigned long val)
 	ppmgr_device.global_angle = angle;
 	ppmgr_device.videoangle = (angle + ppmgr_device.orientation) % 4;
 	if (!ppmgr_device.use_prot) {
-		if (angle != ppmgr_device.angle)
+		if (angle != ppmgr_device.angle) {
 			property_change = 1;
-			pr_info("ppmgr angle:%x,orientation:%x,videoangle:%x\n",
-			ppmgr_device.angle, ppmgr_device.orientation,
-			ppmgr_device.videoangle);
+			PPMGRDRV_INFO("ppmgr angle:%x\n", ppmgr_device.angle);
+			PPMGRDRV_INFO("orient:%x\n", ppmgr_device.orientation);
+			PPMGRDRV_INFO("vidangl:%x\n", ppmgr_device.videoangle);
+		}
 	} else {
-		set_video_angle(angle);
-		pr_info("prot angle:%ld\n", angle);
+		if (angle != ppmgr_device.angle) {
+			set_video_angle(angle);
+			PPMGRDRV_INFO("prot angle:%ld\n", angle);
+		}
 	}
 	ppmgr_device.angle = angle;
 	return 0;
@@ -260,7 +268,7 @@ static int parse_para(const char *para, int para_num, int *result)
 
 		ret = kstrtol(startp, 0, &tmp);
 		if (ret != 0) {
-			pr_err("ERROR converting %s to long int!\n", startp);
+			PPMGRDRV_ERR("ERR convert %s to long int!\n", startp);
 			return ret;
 		}
 		*out++ = tmp;
@@ -277,12 +285,12 @@ static int parse_para(const char *para, int para_num, int *result)
 static ssize_t show_ppmgr_info(struct class *cla, struct class_attribute *attr,
 				char *buf)
 {
-	char *bstart;
+	unsigned int bstart;
 	unsigned int bsize;
 	get_ppmgr_buf_info(&bstart, &bsize);
 /* return snprintf(buf, 80, "buffer:\n start:%x.\tsize:%d\n", */
 /* (unsigned int)bstart, bsize / (1024 * 1024)); */
-	return snprintf(buf, 80, "buffer:\n start:%p.\tsize:%d\n",
+	return snprintf(buf, 80, "buffer:\n start:%x.\tsize:%d\n",
 		    bstart, bsize / (1024 * 1024));
 }
 
@@ -303,10 +311,9 @@ static ssize_t angle_write(struct class *cla, struct class_attribute *attr,
 	unsigned long angle;
 	int ret = kstrtoul(buf, 0, &angle);
 	if (ret != 0) {
-		pr_err("ERROR converting %s to long int!\n", buf);
+		PPMGRDRV_ERR("ERROR converting %s to long int!\n", buf);
 		return ret;
 	}
-
 	if (angle > 3 || angle < 0) {
 		size = endp - buf;
 		return count;
@@ -366,7 +373,7 @@ static ssize_t orientation_write(struct class *cla,
 	unsigned angle;
 	ret = kstrtoul(buf, 0, &tmp);
 	if (ret != 0) {
-		pr_err("ERROR converting %s to long int!\n", buf);
+		PPMGRDRV_ERR("ERROR converting %s to long int!\n", buf);
 		return ret;
 	}
 	angle = tmp;
@@ -379,17 +386,18 @@ static ssize_t orientation_write(struct class *cla,
 		else if (angle == 270)
 			angle = 3;
 		else {
-			pr_err("invalid orientation value\n");
-			pr_err("you should set 0 or 0 for 0 clock wise,");
-			pr_err("1 or 90 for 90 clockwise,2 or 180 for 180 clockwise");
-			pr_err("3 or 270 for 270 clockwise\n");
+			PPMGRDRV_ERR("invalid orientation value\n");
+			PPMGRDRV_ERR("you should set 0 or 0 for 0 clockwise\n");
+			PPMGRDRV_ERR("1 or 90 for 90 clockwise\n");
+			PPMGRDRV_ERR("2 or 180 for 180 clockwise\n");
+			PPMGRDRV_ERR("3 or 270 for 270 clockwise\n");
 			return ret;
 		}
 	}
 	ppmgr_device.orientation = angle;
 	ppmgr_device.videoangle =
 		(ppmgr_device.angle + ppmgr_device.orientation) % 4;
-	pr_info("angle:%d,orientation:%d,videoangle:%d\n",
+	PPMGRDRV_INFO("angle:%d,orientation:%d,videoangle:%d\n",
 		ppmgr_device.angle, ppmgr_device.orientation,
 		ppmgr_device.videoangle);
 	size = endp - buf;
@@ -413,7 +421,7 @@ static ssize_t bypass_write(struct class *cla, struct class_attribute *attr,
 	/* ppmgr_device.bypass = simple_strtoul(buf, &endp, 0); */
 	int ret = kstrtol(buf, 0, &tmp);
 	if (ret != 0) {
-		pr_err("ERROR converting %s to long int!\n", buf);
+		PPMGRDRV_ERR("ERROR converting %s to long int!\n", buf);
 		return ret;
 	}
 	ppmgr_device.bypass = tmp;
@@ -447,7 +455,7 @@ static ssize_t rect_write(struct class *cla, struct class_attribute *attr,
 
 	for (i = 0; i < 4; i++) {
 		if (buflen == 0) {
-			pr_err("%s\n", errstr);
+			PPMGRDRV_ERR("%s\n", errstr);
 			return -EINVAL;
 		}
 		tokenlen = strnchr(strp, buflen, ',');
@@ -456,7 +464,7 @@ static ssize_t rect_write(struct class *cla, struct class_attribute *attr,
 		/* value_array[i] = simple_strtoul(strp, &endp, 0); */
 		ret = kstrtol(strp, 0, &tmp);
 		if (ret != 0) {
-			pr_err("ERROR converting %s to long int!\n", strp);
+			PPMGRDRV_ERR("ERROR convert %s to long int!\n", strp);
 			return ret;
 		}
 		value_array[i] = tmp;
@@ -532,7 +540,7 @@ static ssize_t ppscaler_write(struct class *cla, struct class_attribute *attr,
 	int flag;
 	int ret = kstrtol(buf, 0, &tmp);
 	if (ret != 0) {
-		pr_err("ERROR converting %s to long int!\n", buf);
+		PPMGRDRV_ERR("ERROR converting %s to long int!\n", buf);
 		return ret;
 	}
 	flag = tmp;
@@ -607,15 +615,15 @@ static ssize_t receiver_write(struct class *cla, struct class_attribute *attr,
 	long tmp;
 	int ret;
 	if (buf[0] != '0' && buf[0] != '1') {
-		pr_err("device to whitch the video stream decoded\n");
-		pr_err("0: to video layer\n");
-		pr_err("1: to amlogic video4linux /dev/video10\n");
+		PPMGRDRV_ERR("device to whitch the video stream decoded\n");
+		PPMGRDRV_ERR("0: to video layer\n");
+		PPMGRDRV_ERR("1: to amlogic video4linux /dev/video10\n");
 		return 0;
 	}
 	/* ppmgr_device.receiver = simple_strtoul(buf, &endp, 0); */
 	ret = kstrtoul(buf, 0, &tmp);
 	if (ret != 0) {
-		pr_err("ERROR converting %s to long int!\n", buf);
+		PPMGRDRV_ERR("ERROR converting %s to long int!\n", buf);
 		return ret;
 	}
 	ppmgr_device.receiver = tmp;
@@ -647,7 +655,7 @@ static ssize_t platform_type_write(struct class *cla,
 	/* platform_type = simple_strtoul(buf, &endp, 0); */
 	int ret = kstrtoul(buf, 0, &tmp);
 	if (ret != 0) {
-		pr_err("ERROR converting %s to long int!\n", buf);
+		PPMGRDRV_ERR("ERROR converting %s to long int!\n", buf);
 		return ret;
 	}
 	platform_type = tmp;
@@ -669,9 +677,13 @@ static ssize_t _3dmode_write(struct class *cla,
 {
 	ssize_t size;
 	char *endp;
-	unsigned mode;
+	unsigned long mode;
 	/* unsigned mode = simple_strtoul(buf, &endp, 0); */
-	kstrtoul(buf, 0, &mode);
+	int ret = kstrtoul(buf, 0, &mode);
+	if (ret != 0) {
+		PPMGRDRV_ERR("ERROR converting %s to long int!\n", buf);
+		return ret;
+	}
 	set_ppmgr_3dmode(mode);
 	size = endp - buf;
 	return count;
@@ -693,9 +705,13 @@ static ssize_t viewmode_write(struct class *cla,
 {
 	ssize_t size;
 	char *endp;
-	unsigned mode;
+	unsigned long mode;
 	/* unsigned mode = simple_strtoul(buf, &endp, 0); */
-	kstrtoul(buf, 0, &mode);
+	int ret = kstrtoul(buf, 0, &mode);
+	if (ret != 0) {
+		PPMGRDRV_ERR("ERROR converting %s to long int!\n", buf);
+		return ret;
+	}
 	set_ppmgr_viewmode(mode);
 	size = endp - buf;
 	return count;
@@ -719,10 +735,15 @@ static ssize_t doublemode_write(struct class *cla,
 {
 	ssize_t size;
 	char *endp;
-	int flag;
+	unsigned long flag;
+	unsigned mode;
 	/* unsigned flag = simple_strtoul(buf, &endp, 0); */
-	kstrtoul(buf, 0, &flag);
-	unsigned mode = get_ppmgr_3dmode();
+	int ret = kstrtoul(buf, 0, &flag);
+	if (ret != 0) {
+		PPMGRDRV_ERR("ERROR converting %s to long int!\n", buf);
+		return ret;
+	}
+	mode = get_ppmgr_3dmode();
 	mode = (mode & (~PPMGR_3D_PROCESS_DOUBLE_TYPE)) |
 		((flag << PPMGR_3D_PROCESS_DOUBLE_TYPE_SHIFT) &
 		(PPMGR_3D_PROCESS_DOUBLE_TYPE));
@@ -747,10 +768,15 @@ static ssize_t switchmode_write(struct class *cla,
 {
 	ssize_t size;
 	char *endp;
-	int flag;
+	unsigned long flag;
+	unsigned mode;
 	/* int flag = simple_strtoul(buf, &endp, 0); */
-	kstrtoul(buf, 0, &flag);
-	unsigned mode = get_ppmgr_3dmode();
+	int ret = kstrtoul(buf, 0, &flag);
+	if (ret != 0) {
+		PPMGRDRV_ERR("ERROR converting %s to long int!\n", buf);
+		return ret;
+	}
+	mode = get_ppmgr_3dmode();
 	if (!flag)
 		mode = mode & (~PPMGR_3D_PROCESS_SWITCH_FLAG);
 	else
@@ -782,8 +808,12 @@ static ssize_t direction_3d_write(struct class *cla,
 	ssize_t size;
 	char *endp;
 	/* int flag = simple_strtoul(buf, &endp, 0); */
-	int flag;
-	kstrtoul(buf, 0, &flag);
+	unsigned long flag;
+	int ret = kstrtoul(buf, 0, &flag);
+	if (ret != 0) {
+		PPMGRDRV_ERR("ERROR converting %s to long int!\n", buf);
+		return ret;
+	}
 /*unsigned mode = get_ppmgr_3dmode();*/
 /*mode = (mode & (~PPMGR_3D_PROCESS_3D_ROTATE_DIRECTION_MASK))
  * |((flag<<PPMGR_3D_PROCESS_3D_ROTATE_DIRECTION_VAULE_SHIFT)&
@@ -810,8 +840,12 @@ static ssize_t scale_down_write(struct class *cla,
 	ssize_t size;
 	char *endp;
 	/* unsigned mode = simple_strtoul(buf, &endp, 0); */
-	unsigned mode;
-	kstrtoul(buf, 0, &mode);
+	unsigned long mode;
+	int ret = kstrtoul(buf, 0, &mode);
+	if (ret != 0) {
+		PPMGRDRV_ERR("ERROR converting %s to long int!\n", buf);
+		return ret;
+	}
 	set_ppmgr_scaledown(mode);
 	size = endp - buf;
 	return count;
@@ -869,12 +903,14 @@ static ssize_t write_depth(
 	struct class *cla, struct class_attribute *attr, const char *buf,
 	size_t count)
 {
-	int r;
-	char *endp;
+	unsigned long r;
 
 	/* r = simple_strtoul(buf, &endp, 0); */
-	kstrtoul(buf, 0, &r);
-	pr_warn("r is %d\n", r);
+	int ret = kstrtoul(buf, 0, &r);
+	if (ret != 0) {
+		PPMGRDRV_ERR("ERROR converting %s to long int!\n", buf);
+		return ret;
+	}
 	set_depth(r);
 	return count;
 }
@@ -887,11 +923,14 @@ static ssize_t write_view_mode(
 	struct class *cla, struct class_attribute *attr, const char *buf,
 	size_t count)
 {
-	int r;
-	char *endp;
+	unsigned long r;
 
 	/* r = simple_strtoul(buf, &endp, 0); */
-	kstrtoul(buf, 0, &r);
+	int ret = kstrtoul(buf, 0, &r);
+	if (ret != 0) {
+		PPMGRDRV_ERR("ERROR converting %s to long int!\n", buf);
+		return ret;
+	}
 	ppmgr_view_mode = r;
 	return count;
 }
@@ -906,11 +945,14 @@ static ssize_t write_vertical_sample(
 	struct class *cla, struct class_attribute *attr, const char *buf,
 	size_t count)
 {
-	int r;
-	char *endp;
+	unsigned long r;
 
 	/* r = simple_strtoul(buf, &endp, 0); */
-	kstrtoul(buf, 0, &r);
+	int ret = kstrtoul(buf, 0, &r);
+	if (ret != 0) {
+		PPMGRDRV_ERR("ERROR converting %s to long int!\n", buf);
+		return ret;
+	}
 	ppmgr_vertical_sample = r;
 	return count;
 }
@@ -923,11 +965,14 @@ static ssize_t read_scale_width(
 static ssize_t write_scale_width(struct class *cla,
 	struct class_attribute *attr, const char *buf, size_t count)
 {
-	int r;
-	char *endp;
+	unsigned long r;
 
 	/* r = simple_strtoul(buf, &endp, 0); */
-	kstrtoul(buf, 0, &r);
+	int ret = kstrtoul(buf, 0, &r);
+	if (ret != 0) {
+		PPMGRDRV_ERR("ERROR converting %s to long int!\n", buf);
+		return ret;
+	}
 	ppmgr_scale_width = r;
 	return count;
 }
@@ -992,7 +1037,7 @@ static ssize_t mirror_write(struct class *cla, struct class_attribute *attr,
 	int ret = kstrtol(buf, 0, &tmp);
 	/* ppmgr_device.mirror_flag = simple_strtoul(buf, &endp, 0); */
 	if (ret != 0) {
-		pr_err("ERROR converting %s to long int!\n", buf);
+		PPMGRDRV_ERR("ERROR converting %s to long int!\n", buf);
 		return ret;
 	}
 	ppmgr_device.mirror_flag = tmp;
@@ -1142,7 +1187,7 @@ struct class *init_ppmgr_cls(void)
 	int ret = 0;
 	ret = class_register(&ppmgr_class);
 	if (ret < 0) {
-		amlog_level(LOG_LEVEL_HIGH, "error create ppmgr class\n");
+		PPMGRDRV_ERR("error create ppmgr class\n");
 		return NULL;
 	}
 	return &ppmgr_class;
@@ -1154,21 +1199,21 @@ struct class *init_ppmgr_cls(void)
  *
  ************************************************************************/
 
-void set_ppmgr_buf_info(char *start, unsigned int size)
+void set_ppmgr_buf_info(unsigned int start, unsigned int size)
 {
-	ppmgr_device.buffer_start = (char *)start;
+	ppmgr_device.buffer_start = start;
 	ppmgr_device.buffer_size = size;
 }
 
 int ppmgr_set_resource(unsigned long start, unsigned long end, struct device *p)
 {
 	if (inited_ppmgr_num != 0) {
-		pr_err(
+		PPMGRDRV_ERR(
 		"We can't support the change resource at code running\n");
 		return -1;
 	}
 
-	set_ppmgr_buf_info((void *)start, end - start + 1);
+	set_ppmgr_buf_info(start, end - start + 1);
 	ppmgr_dev_reg.mem_start = start;
 	ppmgr_dev_reg.mem_end = end;
 	ppmgr_dev_reg.cma_dev = p;
@@ -1176,7 +1221,7 @@ int ppmgr_set_resource(unsigned long start, unsigned long end, struct device *p)
 	return 0;
 }
 
-void get_ppmgr_buf_info(char **start, unsigned int *size)
+void get_ppmgr_buf_info(unsigned int *start, unsigned int *size)
 {
 	*start = ppmgr_device.buffer_start;
 	*size = ppmgr_device.buffer_size;
@@ -1200,10 +1245,6 @@ static long ppmgr_ioctl(struct file *file, unsigned int cmd, ulong args)
 	int flag;
 	struct frame_info_t frame_info;
 #endif
-#ifdef CONFIG_POST_PROCESS_MANAGER_3D_PROCESS
-	unsigned mode = 0;
-	int flag = 0;
-#endif
 	switch (cmd) {
 #if 0
 	case PPMGR_IOC_CONFIG_FRAME:
@@ -1216,7 +1257,7 @@ static long ppmgr_ioctl(struct file *file, unsigned int cmd, ulong args)
 	case PPMGR_IOC_SET_ANGLE:
 		ret = _ppmgr_angle_write(args);
 		break;
-#ifdef CONFIG_POST_PROCESS_MANAGER_3D_PROCESS
+#if 0
 	case PPMGR_IOC_ENABLE_PP:
 		mode = (int)argp;
 		enum platform_type_t plarform_type;
@@ -1225,7 +1266,6 @@ static long ppmgr_ioctl(struct file *file, unsigned int cmd, ulong args)
 			set_ppmgr_status(mode);
 		else
 			set_ppmgr_3dmode(mode);
-
 		break;
 	case PPMGR_IOC_VIEW_MODE:
 		mode = (int)argp;
@@ -1290,7 +1330,8 @@ static int ppmgr_release(struct inode *inode, struct file *file)
 	if (context && (0 == destroy_ge2d_work_queue(context))) {
 		ppmgr_device.open_count--;
 		return 0;
-	} amlog_level(LOG_LEVEL_LOW, "release one ppmgr device\n");
+	}
+	PPMGRDRV_INFO("release one ppmgr device\n");
 	return -1;
 #else
 	return 0;
@@ -1324,7 +1365,7 @@ int init_ppmgr_device(void)
 	strcpy(ppmgr_device.name, "ppmgr");
 	ret = register_chrdev(0, ppmgr_device.name, &ppmgr_fops);
 	if (ret <= 0) {
-		amlog_level(LOG_LEVEL_HIGH, "register ppmgr device error\n");
+		PPMGRDRV_ERR("register ppmgr device error\n");
 		return ret;
 	}
 	ppmgr_device.major = ret;
@@ -1354,7 +1395,7 @@ int init_ppmgr_device(void)
 #endif
 	ppmgr_device.mirror_flag = 0;
 	ppmgr_device.canvas_width = ppmgr_device.canvas_height = 0;
-	amlog_level(LOG_LEVEL_LOW, "ppmgr_dev major:%d\n", ret);
+	PPMGRDRV_INFO("ppmgr_dev major:%d\n", ret);
 
 	ppmgr_device.cla = init_ppmgr_cls();
 	if (ppmgr_device.cla == NULL)
@@ -1363,13 +1404,16 @@ int init_ppmgr_device(void)
 						MKDEV(ppmgr_device.major, 0),
 						NULL, ppmgr_device.name);
 	if (IS_ERR(ppmgr_device.dev)) {
-		amlog_level(LOG_LEVEL_HIGH, "create ppmgr device error\n");
+		PPMGRDRV_ERR("create ppmgr device error\n");
 		goto unregister_dev;
 	}
 	buff_change = 0;
 	ppmgr_register();
+#if 0
 	if (ppmgr_buffer_init(0) < 0)
 		goto unregister_dev;
+	ppmgr_buffer_uninit();
+#endif
 	/*if (start_vpp_task()<0) return -1;*/
 	ppmgr_device.use_prot = 1;
 #if HAS_VPU_PROT
@@ -1414,13 +1458,13 @@ static struct platform_device *ppmgr_dev0;
 static int ppmgr_driver_probe(struct platform_device *pdev)
 {
 	s32 r;
-	pr_err("ppmgr_driver_probe called\n");
+	PPMGRDRV_ERR("ppmgr_driver_probe called\n");
 	r = of_reserved_mem_device_init(&pdev->dev);
-
+	ppmgr_device.pdev = pdev;
 	init_ppmgr_device();
 
 	if (r == 0)
-		pr_info("ppmgr_probe done\n");
+		PPMGRDRV_INFO("ppmgr_probe done\n");
 
 	return r;
 }
@@ -1430,7 +1474,7 @@ static int ppmgr_mem_device_init(struct reserved_mem *rmem, struct device *dev)
 	unsigned long start, end;
 	start = rmem->base;
 	end = rmem->base + rmem->size - 1;
-	pr_info("init ppmgr memsource %lx->%lx\n", start, end);
+	PPMGRDRV_INFO("init ppmgr memsource %lx->%lx\n", start, end);
 
 	ppmgr_set_resource(start, end, dev);
 	return 0;
@@ -1453,9 +1497,15 @@ static struct rmem_multi_user rmem_ppmgr_muser = {
 
 static int __init ppmgr_mem_setup(struct reserved_mem *rmem)
 {
-	pr_warn("ppmgr share mem setup\n");
+	PPMGRDRV_DBG("ppmgr share mem setup\n");
+	ppmgr_device.use_reserved = 0;
+	ppmgr_device.buffer_size = 0;
 	of_add_rmem_multi_user(rmem, &rmem_ppmgr_muser);
-
+	if (ppmgr_device.buffer_size > 0) {
+		ppmgr_device.use_reserved = 1;
+		pr_warn("ppmgr use reserved memory\n");
+	}
+	/* ppmgr_device.buffer_size = 0; */
 	return 0;
 }
 
@@ -1478,14 +1528,13 @@ static int __init
 ppmgr_init_module(void)
 {
 	int err;
-	pr_warn("ppmgr module init func called\n");
+	PPMGRDRV_WARN("ppmgr module init func called\n");
 	amlog_level(LOG_LEVEL_HIGH, "ppmgr_init\n");
 	err = platform_driver_register(&ppmgr_drv);
 	if (err)
 		return err;
 
 	return err;
-
 }
 
 static void __exit
diff --git a/drivers/amlogic/ppmgr/ppmgr_vpp.c b/drivers/amlogic/ppmgr/ppmgr_vpp.c
index 61c3629..71da4d7 100644
--- a/drivers/amlogic/ppmgr/ppmgr_vpp.c
+++ b/drivers/amlogic/ppmgr/ppmgr_vpp.c
@@ -50,10 +50,19 @@
 #include "../amports/vdec_reg.h"
 #include "../display/osd/osd_reg.h"
 #include "ppmgr_vpp.h"
+#include <linux/amlogic/codec_mm/codec_mm.h>
+#include <linux/dma-mapping.h>
+#include <linux/dma-contiguous.h>
 /*#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6*/
 /*#include <mach/mod_gate.h>*/
 /*#endif*/
 
+
+#define PPMGRVPP_INFO(fmt, args...) pr_info("PPMGRVPP: info: "fmt"", ## args)
+#define PPMGRVPP_DBG(fmt, args...) pr_debug("PPMGRVPP: dbg: "fmt"", ## args)
+#define PPMGRVPP_WARN(fmt, args...) pr_warn("PPMGRVPP: warn: "fmt"", ## args)
+#define PPMGRVPP_ERR(fmt, args...) pr_err("PPMGRVPP: err: "fmt"", ## args)
+
 #define VF_POOL_SIZE 7
 #ifdef CONFIG_POST_PROCESS_MANAGER_PPSCALER
 #define ASS_POOL_SIZE 2
@@ -70,6 +79,9 @@
 #define RECEIVER_NAME "ppmgr"
 #define PROVIDER_NAME   "ppmgr"
 
+#define MM_ALLOC_SIZE SZ_16M
+#define MAX_WIDTH  960
+#define MAX_HEIGHT 736
 #define THREAD_INTERRUPT 0
 #define THREAD_RUNNING 1
 #define INTERLACE_DROP_MODE 1
@@ -104,7 +116,7 @@ static DEFINE_SPINLOCK(lock);
 static bool ppmgr_blocking;
 static bool ppmgr_inited;
 static int ppmgr_reset_type;
-
+static int ppmgr_buffer_status;
 static struct ppframe_s vfp_pool[VF_POOL_SIZE];
 static struct vframe_s *vfp_pool_free[VF_POOL_SIZE + 1];
 static struct vframe_s *vfp_pool_ready[VF_POOL_SIZE + 1];
@@ -315,6 +327,14 @@ static int get_input_format(struct vframe_s *vf)
 	return format;
 }
 
+static void dma_flush(u32 buf_start , u32 buf_size)
+{
+	return;
+	dma_sync_single_for_device(
+		&ppmgr_device.pdev->dev, buf_start,
+		buf_size, DMA_TO_DEVICE);
+}
+
 /* extern int get_property_change(void); */
 /* extern void set_property_change(int flag); */
 /* extern int get_buff_change(void); */
@@ -324,7 +344,7 @@ static int ppmgr_event_cb(int type, void *data, void *private_data)
 {
 	if (type & VFRAME_EVENT_RECEIVER_PUT) {
 #ifdef DDD
-		pr_warn("video put, avail=%d, free=%d\n",
+		PPMGRVPP_WARN("video put, avail=%d, free=%d\n",
 			vfq_level(&q_ready), vfq_level(&q_free));
 #endif
 		up(&thread_sem);
@@ -367,7 +387,7 @@ static int ppmgr_event_cb(int type, void *data, void *private_data)
 		ppmgr_device.canvas_width = eventparam[0];
 		ppmgr_device.canvas_height = eventparam[1];
 		ppmgr_device.receiver_format = eventparam[2];
-		ppmgr_buffer_init(0);
+		/* ppmgr_buffer_init(0); */
 	}
 #endif
 	return 0;
@@ -414,7 +434,7 @@ static int ppmgr_receiver_event_fun(int type, void *data, void *private_data)
 	switch (type) {
 	case VFRAME_EVENT_PROVIDER_VFRAME_READY:
 #ifdef DDD
-		pr_warn("dec put, avail=%d, free=%d\n",
+		PPMGRVPP_WARN("dec put, avail=%d, free=%d\n",
 			vfq_level(&q_ready), vfq_level(&q_free));
 #endif
 		up(&thread_sem);
@@ -435,13 +455,17 @@ static int ppmgr_receiver_event_fun(int type, void *data, void *private_data)
 		break;
 	case VFRAME_EVENT_PROVIDER_START:
 #ifdef DDD
-		pr_warn("register now\n");
+		PPMGRVPP_WARN("register now\n");
 #endif
 		vf_ppmgr_reg_provider();
+		vf_notify_receiver(
+				PROVIDER_NAME,
+				VFRAME_EVENT_PROVIDER_START,
+				NULL);
 		break;
 	case VFRAME_EVENT_PROVIDER_UNREG:
 #ifdef DDD
-		pr_warn("unregister now\n");
+		PPMGRVPP_WARN("unregister now\n");
 #endif
 		vf_ppmgr_unreg_provider();
 		break;
@@ -567,6 +591,7 @@ void vf_ppmgr_init_provider(void)
 
 static inline struct vframe_s *ppmgr_vf_peek_dec(void)
 {
+#if 0
 	struct vframe_provider_s *vfp;
 	struct vframe_s *vf;
 	vfp = vf_get_provider(RECEIVER_NAME);
@@ -575,10 +600,15 @@ static inline struct vframe_s *ppmgr_vf_peek_dec(void)
 
 	vf = vfp->ops->peek(vfp->op_arg);
 	return vf;
+#else
+	return vf_peek(RECEIVER_NAME);
+#endif
 }
 
 static inline struct vframe_s *ppmgr_vf_get_dec(void)
 {
+#if 0
+
 	struct vframe_provider_s *vfp;
 	struct vframe_s *vf;
 	vfp = vf_get_provider(RECEIVER_NAME);
@@ -586,15 +616,24 @@ static inline struct vframe_s *ppmgr_vf_get_dec(void)
 		return NULL;
 	vf = vfp->ops->get(vfp->op_arg);
 	return vf;
+#else
+	return vf_get(RECEIVER_NAME);
+#endif
+
 }
 
 void ppmgr_vf_put_dec(struct vframe_s *vf)
 {
+#if 0
+
 	struct vframe_provider_s *vfp;
 	vfp = vf_get_provider(RECEIVER_NAME);
 	if (!(vfp && vfp->ops && vfp->ops->peek))
 		return;
 	vfp->ops->put(vf, vfp->op_arg);
+#else
+	vf_put(vf, RECEIVER_NAME);
+#endif
 }
 
 /************************************************
@@ -659,7 +698,7 @@ static void vf_rotate_adjust(struct vframe_s *vf, struct vframe_s *new_vf,
 	new_vf->width = w;
 	new_vf->height = h;
 }
-
+#ifdef CONFIG_POST_PROCESS_MANAGER_PPSCALER
 static void display_mode_adjust(struct ge2d_context_s *context,
 		struct vframe_s *new_vf, int pic_struct)
 {
@@ -726,7 +765,7 @@ static void display_mode_adjust(struct ge2d_context_s *context,
 		}
 	}
 }
-
+#endif
 static int process_vf_deinterlace_nv21(struct vframe_s *vf,
 		struct ge2d_context_s *context,
 		struct config_para_ex_s *ge2d_config)
@@ -808,7 +847,7 @@ static int process_vf_deinterlace_nv21(struct vframe_s *vf,
 	ge2d_config->dst_para.height = vf->height / 2;
 
 	if (ge2d_context_config_ex(context, ge2d_config) < 0) {
-		pr_err("++ge2d configing error.\n");
+		PPMGRVPP_ERR("++ge2d configing error.\n");
 		return -1;
 	}
 	stretchblt_noalpha(context, 0, 0, vf->width, vf->height / 2, 0, 0,
@@ -878,7 +917,7 @@ static int process_vf_deinterlace_nv21(struct vframe_s *vf,
 	ge2d_config->dst_para.height = vf->height / 2;
 
 	if (ge2d_context_config_ex(context, ge2d_config) < 0) {
-		pr_err("++ge2d configing error.\n");
+		PPMGRVPP_ERR("++ge2d configing error.\n");
 		return -1;
 	}
 	stretchblt_noalpha(context, 0, 0, vf->width, vf->height / 2, 0, 0,
@@ -974,7 +1013,7 @@ static int process_vf_deinterlace(struct vframe_s *vf,
 	ge2d_config->dst_para.height = vf->height / 2;
 
 	if (ge2d_context_config_ex(context, ge2d_config) < 0) {
-		pr_err("++ge2d configing error.\n");
+		PPMGRVPP_ERR("++ge2d configing error.\n");
 		return -1;
 	}
 	stretchblt_noalpha(context, 0, 0, vf->width, vf->height / 2, 0, 0,
@@ -1042,7 +1081,7 @@ static int process_vf_deinterlace(struct vframe_s *vf,
 	ge2d_config->dst_para.height = vf->height / 4;
 
 	if (ge2d_context_config_ex(context, ge2d_config) < 0) {
-		pr_err("++ge2d configing error.\n");
+		PPMGRVPP_ERR("++ge2d configing error.\n");
 		return -1;
 	}
 	stretchblt_noalpha(context, 0, 0, vf->width / 2, vf->height / 4, 0, 0,
@@ -1110,7 +1149,7 @@ static int process_vf_deinterlace(struct vframe_s *vf,
 	ge2d_config->dst_para.height = vf->height / 4;
 
 	if (ge2d_context_config_ex(context, ge2d_config) < 0) {
-		pr_err("++ge2d configing error.\n");
+		PPMGRVPP_ERR("++ge2d configing error.\n");
 		return -1;
 	}
 	stretchblt_noalpha(context, 0, 0, vf->width / 2, vf->height / 4, 0, 0,
@@ -1179,7 +1218,7 @@ static int process_vf_deinterlace(struct vframe_s *vf,
 	ge2d_config->dst_para.height = vf->height / 2;
 
 	if (ge2d_context_config_ex(context, ge2d_config) < 0) {
-		pr_err("++ge2d configing error.\n");
+		PPMGRVPP_ERR("++ge2d configing error.\n");
 		return -1;
 	}
 	stretchblt_noalpha(context, 0, 0, vf->width, vf->height / 2, 0, 0,
@@ -1247,7 +1286,7 @@ static int process_vf_deinterlace(struct vframe_s *vf,
 	ge2d_config->dst_para.height = vf->height / 4;
 
 	if (ge2d_context_config_ex(context, ge2d_config) < 0) {
-		pr_err("++ge2d configing error.\n");
+		PPMGRVPP_ERR("++ge2d configing error.\n");
 		return -1;
 	}
 	stretchblt_noalpha(context, 0, 0, vf->width / 2, vf->height / 4, 0, 0,
@@ -1315,7 +1354,7 @@ static int process_vf_deinterlace(struct vframe_s *vf,
 	ge2d_config->dst_para.height = vf->height / 4;
 
 	if (ge2d_context_config_ex(context, ge2d_config) < 0) {
-		pr_err("++ge2d configing error.\n");
+		PPMGRVPP_ERR("++ge2d configing error.\n");
 		return -1;
 	}
 	stretchblt_noalpha(context, 0, 0, vf->width / 2, vf->height / 4, 0, 0,
@@ -1333,11 +1372,15 @@ static void process_vf_rotate(struct vframe_s *vf,
 	struct vframe_s *new_vf;
 	struct ppframe_s *pp_vf;
 	struct canvas_s cs0, cs1, cs2, cd;
-	int i;
-	u32 mode = 0;
+	int ret = 0;
 	unsigned cur_angle = 0;
 	int pic_struct = 0, interlace_mode;
+#ifdef CONFIG_POST_PROCESS_MANAGER_3D_PROCESS
+	enum platform_type_t platform_type;
+#endif
 #ifdef CONFIG_POST_PROCESS_MANAGER_PPSCALER
+	int i;
+	u32 mode = 0;
 	int rect_x = 0, rect_y = 0, rect_w = 0, rect_h = 0;
 	u32 ratio = 100;
 	mode = amvideo_get_scaler_para(
@@ -1405,7 +1448,21 @@ static void process_vf_rotate(struct vframe_s *vf,
 		vfq_push(&q_ready, new_vf);
 		return;
 	}
-
+#ifdef CONFIG_POST_PROCESS_MANAGER_3D_PROCESS
+	platform_type = get_platform_type();
+	if (platform_type == PLATFORM_TV)
+		ret = ppmgr_buffer_init(1);
+	else
+		ret = ppmgr_buffer_init(0);
+#else
+	ret = ppmgr_buffer_init(0);
+#endif
+	if (ret < 0) {
+		pp_vf->dec_frame = vf;
+		*new_vf = *vf;
+		vfq_push(&q_ready, new_vf);
+		return;
+	}
 #ifdef INTERLACE_DROP_MODE
 	if (interlace_mode) {
 		mycount++;
@@ -1555,7 +1612,7 @@ static void process_vf_rotate(struct vframe_s *vf,
 		ge2d_config->dst_para.height = new_vf->height;
 
 		if (ge2d_context_config_ex(context, ge2d_config) < 0) {
-			pr_err("++ge2d configing error.\n");
+			PPMGRVPP_ERR("++ge2d configing error.\n");
 			ppmgr_vf_put_dec(vf);
 			vfq_push(&q_free, new_vf);
 			return;
@@ -1642,7 +1699,7 @@ static void process_vf_rotate(struct vframe_s *vf,
 		ge2d_config->dst_para.height = new_vf->height;
 
 		if (ge2d_context_config_ex(context, ge2d_config) < 0) {
-			pr_err("++ge2d configing error.\n");
+			PPMGRVPP_ERR("++ge2d configing error.\n");
 			ppmgr_vf_put_dec(vf);
 			vfq_push(&q_free, new_vf);
 			return;
@@ -1810,7 +1867,7 @@ static void process_vf_rotate(struct vframe_s *vf,
 		ge2d_config->dst_xy_swap = 0;
 	}
 	if (ge2d_context_config_ex(context, ge2d_config) < 0) {
-		pr_err("++ge2d configing error.\n");
+		PPMGRVPP_ERR("++ge2d configing error.\n");
 		vfq_push(&q_free, new_vf);
 		return;
 	}
@@ -1898,9 +1955,13 @@ static void process_vf_rotate(struct vframe_s *vf,
 	vfq_push(&q_ready, new_vf);
 
 #ifdef DDD
-	pr_warn("rotate avail=%d, free=%d\n",
+	PPMGRVPP_WARN("rotate avail=%d, free=%d\n",
 		vfq_level(&q_ready), vfq_level(&q_free));
 #endif
+	if ((!ppmgr_device.use_reserved) &&
+	    (ppmgr_device.buffer_start)) {
+		dma_flush(ppmgr_device.buffer_start, ppmgr_device.buffer_size);
+	}
 }
 
 static void process_vf_change(struct vframe_s *vf,
@@ -1913,6 +1974,17 @@ static void process_vf_change(struct vframe_s *vf,
 	int pic_struct = 0, interlace_mode;
 	unsigned temp_angle = 0;
 	unsigned cur_angle = 0;
+	int ret = 0;
+#ifdef CONFIG_POST_PROCESS_MANAGER_3D_PROCESS
+	if (platform_type == PLATFORM_TV)
+		ret = ppmgr_buffer_init(1);
+	else
+		ret = ppmgr_buffer_init(0);
+#else
+	ret = ppmgr_buffer_init(0);
+#endif
+	if (ret < 0)
+		return;
 	temp_vf.duration = vf->duration;
 	temp_vf.duration_pulldown = vf->duration_pulldown;
 	temp_vf.pts = vf->pts;
@@ -2037,7 +2109,7 @@ static void process_vf_change(struct vframe_s *vf,
 		ge2d_config->dst_para.y_rev = 1;
 	}
 	if (ge2d_context_config_ex(context, ge2d_config) < 0) {
-		pr_err("++ge2d configing error.\n");
+		PPMGRVPP_ERR("++ge2d configing error.\n");
 		/*vfq_push(&q_free, new_vf);*/
 		return;
 	}
@@ -2107,7 +2179,7 @@ static void process_vf_change(struct vframe_s *vf,
 	ge2d_config->dst_para.height = vf->height;
 
 	if (ge2d_context_config_ex(context, ge2d_config) < 0) {
-		pr_err("++ge2d configing error.\n");
+		PPMGRVPP_ERR("++ge2d configing error.\n");
 		/*vfq_push(&q_free, new_vf);*/
 		return;
 	}
@@ -2132,12 +2204,22 @@ static int process_vf_adjust(struct vframe_s *vf,
 	int sx, sy, sw, sh, dx, dy, dw, dh;
 	unsigned ratio_x;
 	unsigned ratio_y;
+	int ret = 0;
 	int i;
 	struct ppframe_s *pp_vf = to_ppframe(vf);
 	u32 mode = amvideo_get_scaler_para(&rect_x, &rect_y, &rect_w, &rect_h,
 			&ratio);
 	unsigned cur_angle = pp_vf->angle;
-
+#ifdef CONFIG_POST_PROCESS_MANAGER_3D_PROCESS
+	if (platform_type == PLATFORM_TV)
+		ret = ppmgr_buffer_init(1);
+	else
+		ret = ppmgr_buffer_init(0);
+#else
+	ret = ppmgr_buffer_init(0);
+#endif
+	if (ret < 0)
+		return -1;
 	rect_w = max(rect_w, 64);
 	rect_h = max(rect_h, 64);
 
@@ -2228,7 +2310,7 @@ static int process_vf_adjust(struct vframe_s *vf,
 	ge2d_config->dst_para.height = ppmgr_device.disp_height;
 
 	if (ge2d_context_config_ex(context, ge2d_config) < 0) {
-		pr_err("++ge2d configing error.\n");
+		PPMGRVPP_ERR("++ge2d configing error.\n");
 		return -2;
 	}
 	fillrect(context, 0, 0,
@@ -2287,7 +2369,7 @@ static int process_vf_adjust(struct vframe_s *vf,
 	ge2d_config->dst_para.height = ppmgr_device.disp_height;
 
 	if (ge2d_context_config_ex(context, ge2d_config) < 0) {
-		pr_err("++ge2d configing error.\n");
+		PPMGRVPP_ERR("++ge2d configing error.\n");
 		return -2;
 	}
 
@@ -2413,7 +2495,7 @@ static int process_vf_adjust(struct vframe_s *vf,
 	ge2d_config->dst_para.height = vf->height;
 
 	if (ge2d_context_config_ex(context, ge2d_config) < 0) {
-		pr_err("++ge2d configing error.\n");
+		PPMGRVPP_ERR("++ge2d configing error.\n");
 		return -2;
 	}
 	stretchblt_noalpha(context, 0, 0, ppmgr_device.disp_width,
@@ -2535,7 +2617,7 @@ static int ppmgr_task(void *data)
 				&& (!ppmgr_blocking)) {
 #ifdef CONFIG_POST_PROCESS_MANAGER_3D_PROCESS
 			int process_type = TYPE_NONE;
-			enum platform_type_t plarform_type;
+			enum platform_type_t platform_type;
 			vf = ppmgr_vf_get_dec();
 			if (!vf)
 				break;
@@ -2579,15 +2661,15 @@ static int ppmgr_task(void *data)
 					+ ppmgr_device.orientation
 					+ vf->orientation)%4;
 
-			plarform_type = get_platform_type();
-			if (plarform_type == PLATFORM_TV)
+			platform_type = get_platform_type();
+			if (platform_type == PLATFORM_TV)
 				process_type = get_tv_process_type(vf);
 			else
 				process_type = get_mid_process_type(vf);
 
 			if (process_type == TYPE_NONE) {
 				int ret = 0;
-				if (plarform_type != PLATFORM_TV)
+				if (platform_type != PLATFORM_TV)
 					ret = process_vf_deinterlace(vf,
 							context,
 							&ge2d_config);
@@ -2598,7 +2680,7 @@ static int ppmgr_task(void *data)
 						(ret > 0)?ret:0);
 
 			} else {
-				if (plarform_type == PLATFORM_TV)
+				if (platform_type == PLATFORM_TV)
 					ppmgr_vf_3d_tv(vf,
 							context, &ge2d_config);
 				else
@@ -2653,6 +2735,10 @@ static int ppmgr_task(void *data)
 					&ge2d_config,
 					(ret > 0) ? ret : 0);
 #endif
+			vf_notify_receiver(
+				PROVIDER_NAME,
+				VFRAME_EVENT_PROVIDER_VFRAME_READY,
+				NULL);
 		}
 
 		if (ppmgr_blocking) {
@@ -2694,11 +2780,11 @@ static int ppmgr_task(void *data)
 			vf_reg_provider(&ppmgr_vf_prov);
 			ppmgr_blocking = false;
 			up(&thread_sem);
-			pr_warn("ppmgr rebuild from light-unregister\n");
+			PPMGRVPP_WARN("ppmgr rebuild from light-unregister\n");
 		}
 
 #ifdef DDD
-		pr_warn("process paused, dec %p, free %d, avail %d\n",
+		PPMGRVPP_WARN("process paused, dec %p, free %d, avail %d\n",
 			ppmgr_vf_peek_dec(),
 			vfq_level(&q_free),
 			vfq_level(&q_ready));
@@ -2706,6 +2792,7 @@ static int ppmgr_task(void *data)
 	}
 
 	destroy_ge2d_work_queue(context);
+	ppmgr_buffer_uninit();
 	while (!kthread_should_stop()) {
 		/*	   may not call stop, wait..
 		 it is killed by SIGTERM,eixt on down_interruptible
@@ -2744,17 +2831,69 @@ int ppmgr_register(void)
 	return 0;
 }
 
+int ppmgr_buffer_uninit(void)
+{
+	if ((!ppmgr_device.use_reserved) &&
+	    (ppmgr_device.buffer_start)) {
+		PPMGRVPP_INFO("cma free addr is %x , size is  %x\n",
+		(unsigned)ppmgr_device.buffer_start ,
+		(unsigned)ppmgr_device.buffer_size);
+		codec_mm_free_for_dma(
+		"ppmgr",
+		ppmgr_device.buffer_start);
+		ppmgr_device.buffer_start = 0;
+		ppmgr_device.buffer_size = 0;
+	}
+	ppmgr_buffer_status = 0;
+	return 0;
+}
+
 int ppmgr_buffer_init(int vout_mode)
 {
 	int i, j;
 	u32 canvas_width, canvas_height;
 	u32 decbuf_size;
-	char *buf_start;
+	unsigned int buf_start;
 	int buf_size;
 	struct vinfo_s vinfo = {.width = 1280, .height = 720, };
+	/* int flags = CODEC_MM_FLAGS_DMA; */
+	int flags = CODEC_MM_FLAGS_DMA_CPU|CODEC_MM_FLAGS_CMA_CLEAR;
 #ifdef INTERLACE_DROP_MODE
 	mycount = 0;
 #endif
+	switch (ppmgr_buffer_status) {
+	case 0:/*not config*/
+		break;
+	case 1:/*config before , return ok*/
+		return 0;
+	case 2:/*config fail, won't retry , return failure*/
+		return -1;
+	default:
+		return -1;
+	}
+	if (ppmgr_device.mirror_flag) {
+		PPMGRVPP_INFO("CMA memory force config fail\n");
+		ppmgr_buffer_status = 2;
+		return -1;
+	}
+	if ((!ppmgr_device.use_reserved) &&
+	    (ppmgr_device.buffer_start == 0)) {
+		PPMGRVPP_INFO("reserved memory config fail,use CMA.\n");
+
+		ppmgr_device.buffer_start = codec_mm_alloc_for_dma(
+				"ppmgr",
+				MM_ALLOC_SIZE/PAGE_SIZE, 0, flags);
+		ppmgr_device.buffer_size = MM_ALLOC_SIZE;
+		PPMGRVPP_INFO("cma memory is %x , size is  %x\n" ,
+		(unsigned)ppmgr_device.buffer_start ,
+		(unsigned)ppmgr_device.buffer_size);
+		if (ppmgr_device.buffer_start == 0) {
+			ppmgr_buffer_status = 2;
+			PPMGRVPP_ERR("cma memory config fail\n");
+			return -1;
+		}
+	}
+	ppmgr_buffer_status = 1;
 	get_ppmgr_buf_info(&buf_start, &buf_size);
 #ifdef CONFIG_V4L_AMLOGIC_VIDEO
 	if (ppmgr_device.receiver != 0) {
@@ -2813,24 +2952,26 @@ int ppmgr_buffer_init(int vout_mode)
 	if (vout_mode == 0) {
 		ppmgr_device.vinfo = get_current_vinfo();
 		if (ppmgr_device.vinfo == NULL) {
-			pr_err("ppmgr failed to get_currnt_vinfo! Try to MAKE one!\n");
+			PPMGRVPP_ERR(
+			"failed to get_currnt_vinfo! Try to MAKE one!");
+
 			ppmgr_device.vinfo = &vinfo;
 		}
 
 		if (ppmgr_device.disp_width == 0) {
-			if (ppmgr_device.vinfo->width <= 1280)
+			if (ppmgr_device.vinfo->width <= MAX_WIDTH)
 				ppmgr_device.disp_width =
 					ppmgr_device.vinfo->width;
 			else
-				ppmgr_device.disp_width = 1280;
+				ppmgr_device.disp_width = MAX_WIDTH;
 		}
 
 		if (ppmgr_device.disp_height == 0) {
-			if (ppmgr_device.vinfo->height <= 736)
+			if (ppmgr_device.vinfo->height <= MAX_HEIGHT)
 				ppmgr_device.disp_height =
 						ppmgr_device.vinfo->height;
 			else
-				ppmgr_device.disp_height = 736;
+				ppmgr_device.disp_height = MAX_HEIGHT;
 		}
 		if (get_platform_type() == PLATFORM_MID_VERTICAL) {
 			int DISP_SIZE =
@@ -2924,7 +3065,7 @@ int ppmgr_buffer_init(int vout_mode)
 		decbuf_size = 0x600000;
 
 		if (decbuf_size * VF_POOL_SIZE > buf_size) {
-			amlog_level(LOG_LEVEL_HIGH,
+			PPMGRVPP_ERR(
 					"size of ppmgr memory resource too small.\n");
 			return -1;
 		}
@@ -2965,23 +3106,19 @@ int ppmgr_buffer_init(int vout_mode)
 
 int start_ppmgr_task(void)
 {
-	enum platform_type_t plarform_type;
-	plarform_type = get_platform_type();
+	enum platform_type_t platform_type;
+	platform_type = get_platform_type();
 
 	/*    if (get_cpu_type()>= MESON_CPU_TYPE_MESON6)*/
 	/*	    switch_mod_gate_by_name("ge2d", 1);*/
 	/*#endif*/
 	if (!task) {
 		vf_local_init();
-		/*if (get_buff_change())*/
-#ifdef CONFIG_POST_PROCESS_MANAGER_3D_PROCESS
-		if (plarform_type == PLATFORM_TV)
-			ppmgr_buffer_init(1);
-		else
-			ppmgr_buffer_init(0);
-#else
-		ppmgr_buffer_init(0);
-#endif
+		ppmgr_blocking = false;
+		ppmgr_inited = true;
+		ppmgr_reset_type = 0;
+		set_buff_change(0);
+		ppmgr_buffer_status = 0;
 		task = kthread_run(ppmgr_task, 0, "ppmgr");
 	}
 	task_running = 1;
-- 
1.9.1

From 426853031426138edec2616bfa8080f5affeb8d0 Mon Sep 17 00:00:00 2001
From: Jamie Coldhill <wrxtasy@amnet.net.au>
Date: Sun, 2 Oct 2016 19:34:29 +0800
Subject: [PATCH 12/13] Update: deinterlace

---
 drivers/amlogic/deinterlace/deinterlace.c | 8862 ++++++++++++++++++-----------
 1 file changed, 5548 insertions(+), 3314 deletions(-)

diff --git a/drivers/amlogic/deinterlace/deinterlace.c b/drivers/amlogic/deinterlace/deinterlace.c
index 3bab6ed..85baec5 100644
--- a/drivers/amlogic/deinterlace/deinterlace.c
+++ b/drivers/amlogic/deinterlace/deinterlace.c
@@ -1,5 +1,4 @@
-/*
- * Amlogic M2
+/* * Amlogic M2
  * frame buffer driver-----------Deinterlace
  * Author: Rain Zhang <rain.zhang@amlogic.com>
  * Copyright (C) 2010 Amlogic, Inc.
@@ -16,7 +15,6 @@
  *
  */
 
-
 #include <linux/version.h>
 #include <linux/module.h>
 #include <linux/types.h>
@@ -43,6 +41,8 @@
 #include <linux/uaccess.h>
 #include <linux/of_fdt.h>
 #include <linux/cma.h>
+#include <linux/ctype.h>
+#include <linux/string.h>
 #include <linux/amlogic/iomap.h>
 #include <linux/amlogic/cpu_version.h>
 #include <linux/amlogic/amports/vframe.h>
@@ -74,32 +74,26 @@
 #endif
 
 #define RUN_DI_PROCESS_IN_IRQ
-#define RUN_REG_IN_IRQ
-
-/* #define RUN_DI_PROCESS_IN_TIMER_IRQ */
-/* #define RUN_DI_PROCESS_IN_TIMER */
-
-/* !FIQ_VSYNC */
 
 #ifdef ENABLE_SPIN_LOCK_ALWAYS
 static DEFINE_SPINLOCK(di_lock2);
 #define di_lock_irqfiq_save(irq_flag, fiq_flag) \
-	do {fiq_flag = 0; \
-		spin_lock_irqsave(&di_lock2, irq_flag); \
+	do { fiq_flag = 0; flags = flags; \
+	     spin_lock_irqsave(&di_lock2, irq_flag); \
 	} while (0)
 
 #define di_unlock_irqfiq_restore(irq_flag, fiq_flag) \
-				spin_unlock_irqrestore(&di_lock2, irq_flag);
+	spin_unlock_irqrestore(&di_lock2, irq_flag);
 
 #else
 #define di_lock_irqfiq_save(irq_flag, fiq_flag) \
-		do {flags = irq_flag; \
-			irq_flag = fiq_flag; \
-		} while (0)
+	do { flags = irq_flag; \
+	     irq_flag = fiq_flag; \
+	} while (0)
 #define di_unlock_irqfiq_restore(irq_flag, fiq_flag) \
-		do {flags = irq_flag; \
-			irq_flag = fiq_flag; \
-		} while (0)
+	do { flags = irq_flag; \
+	     irq_flag = fiq_flag; \
+	} while (0)
 #endif
 
 int mpeg2vdin_flag = 0;
@@ -110,6 +104,19 @@ int mpeg2vdin_en = 0;
 module_param(mpeg2vdin_en, int, 0664);
 MODULE_PARM_DESC(mpeg2vdin_en, "mpeg2vdin_en");
 
+static int wr_print_flag;
+module_param(wr_print_flag, int, 0664);
+MODULE_PARM_DESC(wr_print_flag, "wr_print_flag");
+
+static int queue_print_flag = -1;
+module_param(queue_print_flag, int, 0664);
+MODULE_PARM_DESC(queue_print_flag, "queue_print_flag");
+
+static int rdma_en;
+module_param(rdma_en, int, 0664);
+MODULE_PARM_DESC(rdma_en, "rdma_en");
+
+
 static bool overturn;
 module_param(overturn, bool, 0664);
 MODULE_PARM_DESC(overturn, "overturn /disable reverse");
@@ -117,31 +124,41 @@ MODULE_PARM_DESC(overturn, "overturn /disable reverse");
 static bool check_start_drop_prog;
 module_param(check_start_drop_prog, bool, 0664);
 MODULE_PARM_DESC(check_start_drop_prog,
-			"enable/disable progress start drop function");
-#ifdef MCDI_SUPPORT
-static bool mcpre_en = true;
+	"enable/disable progress start drop function");
+bool mcpre_en = true;
 module_param(mcpre_en, bool, 0664);
 MODULE_PARM_DESC(mcpre_en, "enable/disable me in pre");
-#endif
+
+static unsigned int dump_vf_start_flag;
+module_param(dump_vf_start_flag, uint, 0664);
+MODULE_PARM_DESC(dump_vf_start_flag, "dump_vf_start_flag");
+static unsigned int dump_vf_num = 5;
+module_param(dump_vf_num, uint, 0664);
+MODULE_PARM_DESC(dump_vf_num, "dump_vf_num");
+static unsigned int dump_vf_num_inner;
+static unsigned int dump_one_frame_size;
+static unsigned int dump_vf_in_width = 768;
+module_param(dump_vf_in_width, uint, 0664);
+MODULE_PARM_DESC(dump_vf_in_width, "dump_vf_in_width");
+static unsigned int dump_vf_in_height = 576;
+module_param(dump_vf_in_height, uint, 0664);
+MODULE_PARM_DESC(dump_vf_in_height, "dump_vf_in_height");
 #ifdef NEW_DI_V4
-static bool dnr_en;
+static bool dnr_en = 1;
 module_param(dnr_en, bool, 0664);
 MODULE_PARM_DESC(dnr_en, "enable/disable dnr in pre");
+
+
 #endif
 static unsigned int di_pre_rdma_enable;
-module_param(di_pre_rdma_enable, uint, 0664);
-MODULE_PARM_DESC(di_pre_rdma_enable, "enable/disable rdma in pre");
+
+static bool full_422_pack;
+static bool tff_bff_enable;
+
 #define CHECK_VDIN_BUF_ERROR
 
 #define DEVICE_NAME "deinterlace"
-#define CLASS_NAME	"deinterlace"
-
-/* #ifdef DEBUG */
-#define pr_dbg(fmt, args...) pr_info("DI: " fmt, ## args)
-/* #else */
-/* #define pr_dbg(fmt, args...) */
-/* #endif */
-#define pr_error(fmt, args...) pr_err("DI: " fmt, ## args)
+#define CLASS_NAME      "deinterlace"
 
 char *vf_get_receiver_name(const char *provider_name);
 
@@ -152,8 +169,7 @@ static dev_t di_devno;
 static struct class *di_clsp;
 
 #define INIT_FLAG_NOT_LOAD 0x80
-/* enable nr clock when di enabled */
-static const char version_s[] = "2015-8-03a";
+static const char version_s[] = "2016-06-17a";
 static unsigned char boot_init_flag;
 static int receiver_is_amvideo = 1;
 
@@ -170,28 +186,30 @@ static int bypass_hd;
 static int bypass_superd = 1;
 static int bypass_all;
 /*1:enable bypass pre,ei only;
-2:debug force bypass pre,ei for post
-*/
+ * 2:debug force bypass pre,ei for post
+ */
 static int bypass_pre;
 static int bypass_trick_mode = 1;
 static int bypass_1080p;
 static int bypass_3d = 1;
 static int invert_top_bot;
-static int skip_top_bot;
+static int skip_top_bot;/*1or2: may affect atv when bypass di*/
 static char interlace_output_flag;
 static int bypass_get_buf_threshold = 4;
 
 static int post_hold_line = 17;/* for m8 1080i/50 output */
 static int force_update_post_reg = 0x10;
 /*
-bit[4]
-	1 call process_fun every vsync;
-	0 call process_fun when toggle frame (early_process_fun is called)
-bit[3:0] set force_update_post_reg = 1: only update post reg in
-		vsync for one time
-		set force_update_post_reg = 2: always update post reg in vsync
-*/
+ * bit[4]
+ * 1 call process_fun every vsync;
+ * 0 call process_fun when toggle frame (early_process_fun is called)
+ * bit[3:0] set force_update_post_reg = 1: only update post reg in
+ * vsync for one time
+ * set force_update_post_reg = 2: always update post reg in vsync
+ */
 static int bypass_post;
+bool post_wr_en;
+unsigned int post_wr_surpport;
 static int bypass_post_state;
 static int bypass_dynamic;
 static int bypass_dynamic_flag;
@@ -199,8 +217,8 @@ static int vdin_source_flag;
 static int update_post_reg_count = 1;
 static int timeout_miss_policy;
 /* 0, use di_wr_buf still;
-1, call pre_de_done_buf_clear to clear di_wr_buf;
-2, do nothing*/
+ * 1, call pre_de_done_buf_clear to clear di_wr_buf;
+ * 2, do nothing*/
 
 static int post_ready_empty_count;
 
@@ -208,31 +226,28 @@ static int force_width;
 static int force_height;
 /* add avoid vframe put/get error */
 static int di_blocking;
-#ifdef NEW_DI_TV
-static int di_vscale_skip_enable = 3;
 /*
-bit[2]: enable bypass all when skip
-bit[1:0]: enable bypass post when skip
-*/
-#else
-static int di_vscale_skip_enable = 4;
-#endif
+ * bit[2]: enable bypass all when skip
+ * bit[1:0]: enable bypass post when skip
+ */
+static int di_vscale_skip_enable;
+
+/* 0: not surpport nr10bit, 1: surpport nr10bit */
+static unsigned int nr10bit_surpport;
 
 #ifdef RUN_DI_PROCESS_IN_IRQ
 /*
-	di_process() run in irq,
-	di_reg_process(), di_unreg_process() run in kernel thread
-	di_vf_put(), di_vf_peek(), di_vf_get()
-	run in irq if FIQ_VSYNC is not defined,
-	run in fiq if FIQ_VSYNC is defined.
-	di_receiver_event_fun() run in task or irq
-
-*/
+ * di_process() run in irq,
+ * di_reg_process(), di_unreg_process() run in kernel thread
+ * di_reg_process_irq(), di_unreg_process_irq() run in irq
+ * di_vf_put(), di_vf_peek(), di_vf_get() run in irq
+ * di_receiver_event_fun() run in task or irq
+ */
 /*
-	important:
-	to set input2pre, VFRAME_EVENT_PROVIDER_VFRAME_READY of
-	vdin should be sent in irq
-*/
+ * important:
+ * to set input2pre, VFRAME_EVENT_PROVIDER_VFRAME_READY of
+ * vdin should be sent in irq
+ */
 #ifdef NEW_DI_V1
 #undef CHECK_DI_DONE
 #else
@@ -241,14 +256,13 @@ static int di_vscale_skip_enable = 4;
 
 #ifdef NEW_DI_TV
 static int input2pre = 1;
-static bool use_2_interlace_buff = true;
 /*false:process progress by field;
-true: process progress by frame with 2 interlace buffer
-*/
+ * true: process progress by frame with 2 interlace buffer
+ */
 #else
 static int input2pre;
-static bool use_2_interlace_buff;
 #endif
+static int use_2_interlace_buff;
 static int input2pre_buf_miss_count;
 static int input2pre_proc_miss_count;
 static int input2pre_throw_count;
@@ -256,51 +270,52 @@ static int static_pic_threshold = 10;
 #ifdef NEW_DI_V1
 static int input2pre_miss_policy;
 /* 0, do not force pre_de_busy to 0, use di_wr_buf after de_irq happen;
-1, force pre_de_busy to 0 and call pre_de_done_buf_clear to clear di_wr_buf
-*/
+ * 1, force pre_de_busy to 0 and call pre_de_done_buf_clear to clear di_wr_buf
+ */
 #else
 static int input2pre_miss_policy;
 /* 0, do not force pre_de_busy to 0, use di_wr_buf after de_irq happen;
-1, force pre_de_busy to 0 and call pre_de_done_buf_clear to clear di_wr_buf
-*/
+ * 1, force pre_de_busy to 0 and call pre_de_done_buf_clear to clear di_wr_buf
+ */
 #endif
 #else
 #ifdef NEW_DI_TV
-static bool use_2_interlace_buff = true;
+static int use_2_interlace_buff = 1;
 /*false:process progress by field;
-true: process progress by frame with 2 interlace buffer
-*/
+ * bit0: process progress by frame with 2 interlace buffer
+ * bit1: temp add debug for 3d process FA,1:bit0 force to 1;
+ */
 #else
-static bool use_2_interlace_buff;
+static int use_2_interlace_buff;
 #endif
 #endif
 /* prog_proc_config,
-	bit[2:1]: when two field buffers are used,
-		0 use vpp for blending ,
-		1 use post_di module for blending
-		2 debug mode, bob with top field
-		3 debug mode, bot with bot field
-	bit[0]:
-		0 "prog vdin" use two field buffers,
-		1 "prog vdin" use single frame buffer
-	bit[4]:
-		0 "prog frame from decoder" use two field buffers,
-		1 use single frame buffer
-	bit[5]:
-		when two field buffers are used for decoder (bit[4] is 0):
-		0, use process_count; 1, handle prog frame
-		as two interlace frames
-	bit[6]:(bit[4] is 0,bit[5] is 0,use_2_interlace_buff is 0): 0,
-		process progress frame as field,blend by post;
-		1, process progress frame as field,process by normal di
-*/
-static int prog_proc_config = (1<<5)|(1<<1)|1;
+ * bit[2:1]: when two field buffers are used,
+ * 0 use vpp for blending ,
+ * 1 use post_di module for blending
+ * 2 debug mode, bob with top field
+ * 3 debug mode, bot with bot field
+ * bit[0]:
+ * 0 "prog vdin" use two field buffers,
+ * 1 "prog vdin" use single frame buffer
+ * bit[4]:
+ * 0 "prog frame from decoder/vdin" use two field buffers,
+ * 1 use single frame buffer
+ * bit[5]:
+ * when two field buffers are used for decoder (bit[4] is 0):
+ * 1,handle prog frame as two interlace frames
+ * bit[6]:(bit[4] is 0,bit[5] is 0,use_2_interlace_buff is 0): 0,
+ * process progress frame as field,blend by post;
+ * 1, process progress frame as field,process by normal di
+ */
+static int prog_proc_config = (1 << 5) | (1 << 1) | 1;
 /*
-for source include both progressive and interlace pictures,
-always use post_di module for blending
-*/
+ * for source include both progressive and interlace pictures,
+ * always use post_di module for blending
+ */
 #define is_handle_prog_frame_as_interlace(vframe) \
-(((prog_proc_config&0x30) == 0x20) && ((vframe->type & VIDTYPE_VIU_422) == 0))
+	(((prog_proc_config & 0x30) == 0x20) && \
+	 ((vframe->type & VIDTYPE_VIU_422) == 0))
 
 static int pulldown_detect = 0x10;
 static int skip_wrong_field = 1;
@@ -316,29 +331,32 @@ static int video_peek_cnt;
 static int force_bob_flag;
 int di_vscale_skip_count = 0;
 int di_vscale_skip_count_real = 0;
-#ifdef D2D3_SUPPORT
-static int d2d3_enable = 1;
-#endif
-
+static int vpp_3d_mode;
 #ifdef DET3D
 bool det3d_en = false;
 static unsigned int det3d_mode;
+static void set3d_view(enum tvin_trans_fmt trans_fmt, struct vframe_s *vf);
 #endif
 
-
 static int force_duration_0;
 
 static int use_reg_cfg = 1;
 
-static uint init_flag;
+static uint init_flag;/*flag for di buferr*/
+static unsigned int reg_flag;/*flag for vframe reg/unreg*/
+static unsigned int unreg_cnt;/*cnt for vframe unreg*/
+static unsigned int reg_cnt;/*cnt for vframe reg*/
 static unsigned char active_flag;
 static unsigned char recovery_flag;
 static unsigned int force_recovery = 1;
 static unsigned int force_recovery_count;
-static unsigned int  recovery_log_reason;
-static unsigned int  recovery_log_queue_idx;
-static di_buf_t *recovery_log_di_buf;
+static unsigned int recovery_log_reason;
+static unsigned int recovery_log_queue_idx;
+static struct di_buf_s *recovery_log_di_buf;
 
+static void *vf_input_buff;
+static unsigned int vf_input_size;
+static unsigned int dump_buff_offset;
 
 #define VFM_NAME "deinterlace"
 
@@ -348,9 +366,9 @@ static long same_w_r_canvas_count;
 static long pulldown_count;
 static long pulldown_buffer_mode = 1;
 /* bit 0:
-	0, keep 3 buffers in pre_ready_list for checking;
-	1, keep 4 buffers in pre_ready_list for checking;
-*/
+ * 0, keep 3 buffers in pre_ready_list for checking;
+ * 1, keep 4 buffers in pre_ready_list for checking;
+ */
 static long pulldown_win_mode = 0x11111;
 static int same_field_source_flag_th = 60;
 int nr_hfilt_en = 0;
@@ -369,8 +387,8 @@ static int used_post_buf_index = -1;
 
 #define DisableVideoLayer() \
 	CLEAR_MPEG_REG_MASK(VPP_MISC, \
-	VPP_VD1_PREBLEND|VPP_VD2_PREBLEND| \
-	VPP_VD2_POSTBLEND|VPP_VD1_POSTBLEND); \
+	VPP_VD1_PREBLEND | VPP_VD2_PREBLEND | \
+	VPP_VD2_POSTBLEND | VPP_VD1_POSTBLEND); \
 
 static int di_receiver_event_fun(int type, void *data, void *arg);
 static void di_uninit_buf(void);
@@ -380,7 +398,7 @@ static void log_buffer_state(unsigned char *tag);
 
 static const
 struct vframe_receiver_op_s di_vf_receiver = {
-	.event_cb = di_receiver_event_fun
+	.event_cb	= di_receiver_event_fun
 };
 
 static struct vframe_receiver_s di_vf_recv;
@@ -392,86 +410,42 @@ static int di_event_cb(int type, void *data, void *private_data);
 static int di_vf_states(struct vframe_states *states, void *arg);
 static void di_process(void);
 static void di_reg_process(void);
+static void di_reg_process_irq(void);
 static void di_unreg_process(void);
-#ifdef RUN_REG_IN_IRQ
 static void di_unreg_process_irq(void);
-#endif
 
 static const
 struct vframe_operations_s deinterlace_vf_provider = {
-	.peek = di_vf_peek,
-	.get  = di_vf_get,
-	.put  = di_vf_put,
-	.event_cb = di_event_cb,
-	.vf_states = di_vf_states,
+	.peek		= di_vf_peek,
+	.get		= di_vf_get,
+	.put		= di_vf_put,
+	.event_cb	= di_event_cb,
+	.vf_states	= di_vf_states,
 };
 
 static struct vframe_provider_s di_vf_prov;
 
 int di_sema_init_flag = 0;
-static struct semaphore  di_sema;
-
-#ifdef FIQ_VSYNC
-static bridge_item_t fiq_handle_item;
-static irqreturn_t di_vf_put_isr(int irq, void *dev_id)
-{
-#ifdef RUN_DI_PROCESS_IN_IRQ
-	int i;
-#ifdef RUN_REG_IN_IRQ
-	if (active_flag) {
-		di_unreg_process_irq();
-		di_reg_process();
-	}
-#endif
-	for (i = 0; i < 2; i++) {
-		if (active_flag)
-			di_process();
-
-	}
-	log_buffer_state("pro");
-#else
-	up(&di_sema);
-#endif
-	return IRQ_HANDLED;
-}
-#endif
+static struct semaphore di_sema;
 
 void trigger_pre_di_process(char idx)
 {
 	if (di_sema_init_flag == 0)
 		return;
 
-	if (idx != 'p') {
-		log_buffer_state((idx == 'i') ? "irq":((idx == 'p') ?
-"put":((idx == 'r')?"rdy":"oth")));
-	}
+	if (idx != 'p')
+		log_buffer_state((idx == 'i') ? "irq" : ((idx == 'p') ?
+			"put" : ((idx == 'r') ? "rdy" : "oth")));
 
 #if (defined RUN_DI_PROCESS_IN_IRQ)
-#ifdef FIQ_VSYNC
-	fiq_bridge_pulse_trigger(&fiq_handle_item);
-#else
 	aml_write_cbus(ISA_TIMERC, 1);
-#endif
-/* #ifndef RUN_REG_IN_IRQ */
-	if ((idx != 'p') && (idx != 'i'))
-		/* trigger di_reg_process and di_unreg_process */
-		up(&di_sema);
-/* #endif */
-#elif (defined RUN_DI_PROCESS_IN_TIMER_IRQ)
+	/* trigger di_reg_process and di_unreg_process */
 	if ((idx != 'p') && (idx != 'i'))
-		/* trigger di_reg_process and di_unreg_process */
-		up(&di_sema);
-#elif (!(defined RUN_DI_PROCESS_IN_TIMER))
-#ifdef FIQ_VSYNC
-	if (idx == 'p')
-		fiq_bridge_pulse_trigger(&fiq_handle_item);
-	else
-#endif
 		up(&di_sema);
 #endif
 }
 
-#define DI_PRE_INTERVAL		(HZ/100)
+#define DI_PRE_INTERVAL         (HZ / 100)
 
 static struct timer_list di_pre_timer;
 static struct work_struct di_pre_work;
@@ -491,24 +465,24 @@ static void di_pre_timer_cb(unsigned long arg)
 static void set_output_mode_info(void)
 {
 	const struct vinfo_s *info;
+
 	info = get_current_vinfo();
 
 	if (info) {
 		if ((strncmp(info->name, "480cvbs", 7) == 0) ||
-			(strncmp(info->name, "576cvbs", 7) == 0) ||
-			(strncmp(info->name, "480i", 4) == 0) ||
-			(strncmp(info->name, "576i", 4) == 0) ||
-			(strncmp(info->name, "1080i", 5) == 0))
+		    (strncmp(info->name, "576cvbs", 7) == 0) ||
+		    (strncmp(info->name, "480i", 4) == 0) ||
+		    (strncmp(info->name, "576i", 4) == 0) ||
+		    (strncmp(info->name, "1080i", 5) == 0))
 			interlace_output_flag = 1;
 		else
 			interlace_output_flag = 0;
-
 	}
 }
 
 static int
 display_notify_callback_v(struct notifier_block *block,
-						 unsigned long cmd , void *para)
+			  unsigned long cmd, void *para)
 {
 	if (cmd != VOUT_EVENT_MODE_CHANGE)
 		return 0;
@@ -519,39 +493,100 @@ display_notify_callback_v(struct notifier_block *block,
 
 static struct
 notifier_block display_mode_notifier_nb_v = {
-	.notifier_call	  = display_notify_callback_v,
+	.notifier_call	= display_notify_callback_v,
 };
 
+/************For Write register**********************/
+static unsigned int di_stop_reg_flag;
+static unsigned int num_di_stop_reg_addr = 4;
+static unsigned int di_stop_reg_addr[4] = {0};
+
+unsigned int is_need_stop_reg(unsigned int addr)
+{
+	int idx = 0;
+
+	if (di_stop_reg_flag) {
+		for (idx = 0; idx < num_di_stop_reg_addr; idx++) {
+			if (addr == di_stop_reg_addr[idx]) {
+				pr_dbg("stop write addr: %x\n", addr);
+				return 1;
+			}
+		}
+	}
+
+	return 0;
+}
+
+void DI_Wr(unsigned int addr, unsigned int val)
+{
+	if (is_need_stop_reg(addr))
+		return;
+
+	Wr(addr, val);
+	return;
+}
+
+void DI_Wr_reg_bits(unsigned int adr, unsigned int val,
+		unsigned int start, unsigned int len)
+{
+	if (is_need_stop_reg(adr))
+		return;
+
+	Wr_reg_bits(adr, val, start, len);
+	return;
+}
+
+void DI_VSYNC_WR_MPEG_REG(unsigned int addr, unsigned int val)
+{
+	if (is_need_stop_reg(addr))
+		return;
+
+	VSYNC_WR_MPEG_REG(addr, val);
+	return;
+}
+
+void DI_VSYNC_WR_MPEG_REG_BITS(unsigned int addr, unsigned int val,
+	unsigned int start, unsigned int len)
+{
+	if (is_need_stop_reg(addr))
+		return;
+
+	VSYNC_WR_MPEG_REG_BITS(addr, val, start, len);
+	return;
+}
+
+/**********************************/
+
 /*****************************
-*	 di attr management :
-*	 enable
-*	 mode
-*	 reg
-******************************/
+ *	 di attr management :
+ *	 enable
+ *	 mode
+ *	 reg
+ ******************************/
 /*config attr*/
 static ssize_t
 show_config(struct device *dev,
-			struct device_attribute *attr, char *buf)
+	    struct device_attribute *attr, char *buf)
 {
 	int pos = 0;
+
 	return pos;
 }
 
 static ssize_t
-store_config(struct device *dev,
-			struct device_attribute *attr,
-			const char *buf, size_t count);
+store_config(struct device *dev, struct device_attribute *attr, const char *buf,
+	     size_t count);
 
 static void dump_state(void);
-static void dump_di_buf(di_buf_t *di_buf);
+static void dump_di_buf(struct di_buf_s *di_buf);
 static void dump_pool(int index);
 static void dump_vframe(vframe_t *vf);
 static void force_source_change(void);
 
-#define DI_RUN_FLAG_RUN				0
-#define DI_RUN_FLAG_PAUSE			1
-#define DI_RUN_FLAG_STEP			2
-#define DI_RUN_FLAG_STEP_DONE		3
+#define DI_RUN_FLAG_RUN                         0
+#define DI_RUN_FLAG_PAUSE                       1
+#define DI_RUN_FLAG_STEP                        2
+#define DI_RUN_FLAG_STEP_DONE           3
 
 static int run_flag = DI_RUN_FLAG_RUN;
 static int pre_run_flag = DI_RUN_FLAG_RUN;
@@ -559,22 +594,22 @@ static int dump_state_flag;
 
 static ssize_t
 store_dbg(struct device *dev,
-		struct device_attribute *attr,
-		const char *buf, size_t count)
+	  struct device_attribute *attr,
+	  const char *buf, size_t count)
 {
 	if (strncmp(buf, "buf", 3) == 0) {
-		di_buf_t *di_buf_tmp = 0;
-		if (kstrtoul(buf+3, 16, (unsigned long *)&di_buf_tmp))
+		struct di_buf_s *di_buf_tmp = 0;
+		if (kstrtoul(buf + 3, 16, (unsigned long *)&di_buf_tmp))
 			return count;
 		dump_di_buf(di_buf_tmp);
 	} else if (strncmp(buf, "vframe", 6) == 0) {
 		vframe_t *vf = 0;
-		if (kstrtoul(buf+6, 16, (unsigned long *)&vf))
+		if (kstrtoul(buf + 6, 16, (unsigned long *)&vf))
 			return count;
 		dump_vframe(vf);
 	} else if (strncmp(buf, "pool", 4) == 0) {
 		unsigned long idx = 0;
-		if (kstrtoul(buf+4, 10, &idx))
+		if (kstrtoul(buf + 4, 10, &idx))
 			return count;
 		dump_pool(idx);
 	} else if (strncmp(buf, "state", 4) == 0) {
@@ -590,9 +625,14 @@ store_dbg(struct device *dev,
 			prog_proc_config = 1;
 		else
 			prog_proc_config = 0;
-	} /*else if (strncmp(buf, "time_div", 8) == 0) {
-}*/	else if (strncmp(buf, "show_osd", 8) == 0) {
-		Wr(VIU_OSD1_CTRL_STAT, Rd(VIU_OSD1_CTRL_STAT)|(0xff<<12));
+	} else if (strncmp(buf, "init_flag", 9) == 0) {
+		if (buf[9] == '1')
+			init_flag = 1;
+		else
+			init_flag = 0;
+	}	else if (strncmp(buf, "show_osd", 8) == 0) {
+		DI_Wr(VIU_OSD1_CTRL_STAT,
+			Rd(VIU_OSD1_CTRL_STAT) | (0xff << 12));
 	} else if (strncmp(buf, "run", 3) == 0) {
 		/* timestamp_pcrscr_enable(1); */
 		run_flag = DI_RUN_FLAG_RUN;
@@ -609,12 +649,52 @@ store_dbg(struct device *dev,
 		pre_run_flag = DI_RUN_FLAG_STEP;
 	} else if (strncmp(buf, "dumpreg", 7) == 0) {
 		unsigned int i = 0;
-		for (i = 0; i < 255; i++)
+		pr_info("----dump di reg----\n");
+		for (i = 0; i < 255; i++) {
+			if (i == 0x45)
+				pr_info("----nr reg----");
+			if (i == 0x80)
+				pr_info("----3d reg----");
+			if (i == 0x9e)
+				pr_info("---nr reg done---");
+			if (i == 0x9c)
+				pr_info("---3d reg done---");
+			pr_info("[0x%x][0x%x]=0x%x\n",
+				0xd0100000 + ((0x1700 + i) << 2),
+				0x1700 + i, Rd(0x1700 + i));
+		}
+		pr_info("----dump mcdi reg----\n");
+		for (i = 0; i < 201; i++)
+			pr_info("[0x%x][0x%x]=0x%x\n",
+				0xd0100000 + ((0x2f00 + i) << 2),
+				0x2f00 + i, Rd(0x2f00 + i));
+		pr_info("----dump pulldown reg----\n");
+		for (i = 0; i < 26; i++)
 			pr_info("[0x%x][0x%x]=0x%x\n",
-				0xd0100000 + ((0x1700+i)<<2),
-				0x1700+i, Rd(0x1700+i));
+				0xd0100000 + ((0x2fd0 + i) << 2),
+				0x2fd0 + i, Rd(0x2fd0 + i));
+		pr_info("----dump bit mode reg----\n");
+		for (i = 0; i < 4; i++)
+			pr_info("[0x%x][0x%x]=0x%x\n",
+				0xd0100000 + ((0x20a7 + i) << 2),
+				0x20a7 + i, Rd(0x20a7 + i));
+		pr_info("[0x%x][0x%x]=0x%x\n",
+			0xd0100000 + (0x2022 << 2),
+			0x2022, Rd(0x2022));
+		pr_info("[0x%x][0x%x]=0x%x\n",
+			0xd0100000 + (0x17c1 << 2),
+			0x17c1, Rd(0x17c1));
+		pr_info("[0x%x][0x%x]=0x%x\n",
+			0xd0100000 + (0x17c2 << 2),
+			0x17c2, Rd(0x17c2));
+		pr_info("[0x%x][0x%x]=0x%x\n",
+			0xd0100000 + (0x1aa7 << 2),
+			0x1aa7, Rd(0x1aa7));
+		pr_info("----dump reg done----\n");
 	} else if (strncmp(buf, "robust_test", 11) == 0) {
 		recovery_flag = 1;
+	} else if (strncmp(buf, "recycle_buf", 11) == 0) {
+		recycle_keep_buffer();
 	}
 
 	return count;
@@ -623,7 +703,8 @@ store_dbg(struct device *dev,
 static int __init di_read_canvas_reverse(char *str)
 {
 	unsigned char *ptr = str;
-	pr_info("%s: bootargs is %s.\n", __func__, str);
+
+	pr_dbg("%s: bootargs is %s.\n", __func__, str);
 	if (strstr(ptr, "1")) {
 		invert_top_bot |= 0x1;
 		overturn = true;
@@ -634,7 +715,7 @@ static int __init di_read_canvas_reverse(char *str)
 
 	return 0;
 }
-__setup("panel_reverse=", di_read_canvas_reverse);
+__setup("video_reverse=", di_read_canvas_reverse);
 #endif
 unsigned int di_debug_flag = 0x10;/* enable rdma even di bypassed */
 static unsigned char *di_log_buf;
@@ -646,7 +727,7 @@ unsigned int di_log_flag = 0;
 unsigned int buf_state_log_threshold = 16;
 unsigned int buf_state_log_start = 0;
 /*  set to 1 by condition of "post_ready count < buf_state_log_threshold",
-reset to 0 by set buf_state_log_threshold as 0 */
+ * reset to 0 by set buf_state_log_threshold as 0 */
 
 static DEFINE_SPINLOCK(di_print_lock);
 
@@ -657,6 +738,7 @@ int di_print_buf(char *buf, int len)
 	unsigned long flags;
 	int pos;
 	int di_log_rd_pos_;
+
 	if (di_log_buf_size == 0)
 		return 0;
 
@@ -665,10 +747,10 @@ int di_print_buf(char *buf, int len)
 	if (di_log_wr_pos >= di_log_rd_pos)
 		di_log_rd_pos_ += di_log_buf_size;
 
-	for (pos = 0; pos < len && di_log_wr_pos < (di_log_rd_pos_-1);
-		pos++, di_log_wr_pos++) {
+	for (pos = 0; pos < len && di_log_wr_pos < (di_log_rd_pos_ - 1);
+	     pos++, di_log_wr_pos++) {
 		if (di_log_wr_pos >= di_log_buf_size)
-			di_log_buf[di_log_wr_pos-di_log_buf_size] = buf[pos];
+			di_log_buf[di_log_wr_pos - di_log_buf_size] = buf[pos];
 		else
 			di_log_buf[di_log_wr_pos] = buf[pos];
 	}
@@ -676,7 +758,6 @@ int di_print_buf(char *buf, int len)
 		di_log_wr_pos -= di_log_buf_size;
 	spin_unlock_irqrestore(&di_print_lock, flags);
 	return pos;
-
 }
 
 /* static int log_seq = 0; */
@@ -690,9 +771,9 @@ int di_print(const char *fmt, ...)
 	char buf[PRINT_TEMP_BUF_SIZE];
 	int pos, len = 0;
 
-	if (di_printk_flag&1) {
-		if (di_log_flag&DI_LOG_PRECISE_TIMESTAMP)
-			pr_info("%u:", aml_read_cbus(ISA_TIMERE));
+	if (di_printk_flag & 1) {
+		if (di_log_flag & DI_LOG_PRECISE_TIMESTAMP)
+			pr_dbg("%u:", aml_read_cbus(ISA_TIMERE));
 		va_start(args, fmt);
 		vprintk(fmt, args);
 		va_end(args);
@@ -702,23 +783,23 @@ int di_print(const char *fmt, ...)
 	if (di_log_buf_size == 0)
 		return 0;
 
-	/* len += snprintf(buf+len, avail-len, "%d:",log_seq++); */
-	if (di_log_flag&DI_LOG_TIMESTAMP)
-		len += snprintf(buf+len, avail-len, "%u:",
-(unsigned int)jiffies);
-	else if (di_log_flag&DI_LOG_PRECISE_TIMESTAMP)
-		len += snprintf(buf+len, avail-len, "%u:",
-				(unsigned int)aml_read_cbus(ISA_TIMERE));
+/* len += snprintf(buf+len, avail-len, "%d:",log_seq++); */
+	if (di_log_flag & DI_LOG_TIMESTAMP)
+		len += snprintf(buf + len, avail - len, "%u:",
+			(unsigned int)jiffies);
+	else if (di_log_flag & DI_LOG_PRECISE_TIMESTAMP)
+		len += snprintf(buf + len, avail - len, "%u:",
+			(unsigned int)aml_read_cbus(ISA_TIMERE));
 
 	va_start(args, fmt);
-	len += vsnprintf(buf+len, avail-len, fmt, args);
+	len += vsnprintf(buf + len, avail - len, fmt, args);
 	va_end(args);
 
-	if ((avail-len) <= 0)
+	if ((avail - len) <= 0)
 		buf[PRINT_TEMP_BUF_SIZE - 1] = '\0';
 
 	pos = di_print_buf(buf, len);
-	/* pr_info("di_print:%d %d\n", di_log_wr_pos, di_log_rd_pos); */
+/* pr_dbg("di_print:%d %d\n", di_log_wr_pos, di_log_rd_pos); */
 	return pos;
 }
 #endif
@@ -727,20 +808,21 @@ static ssize_t read_log(char *buf)
 {
 	unsigned long flags;
 	ssize_t read_size = 0;
+
 	if (di_log_buf_size == 0)
 		return 0;
-	/* pr_info("show_log:%d %d\n", di_log_wr_pos, di_log_rd_pos); */
+/* pr_dbg("show_log:%d %d\n", di_log_wr_pos, di_log_rd_pos); */
 	spin_lock_irqsave(&di_print_lock, flags);
 	if (di_log_rd_pos < di_log_wr_pos)
-		read_size = di_log_wr_pos-di_log_rd_pos;
+		read_size = di_log_wr_pos - di_log_rd_pos;
 
 	else if (di_log_rd_pos > di_log_wr_pos)
-		read_size = di_log_buf_size-di_log_rd_pos;
+		read_size = di_log_buf_size - di_log_rd_pos;
 
 	if (read_size > PAGE_SIZE)
 		read_size = PAGE_SIZE;
 	if (read_size > 0)
-		memcpy(buf, di_log_buf+di_log_rd_pos, read_size);
+		memcpy(buf, di_log_buf + di_log_rd_pos, read_size);
 
 	di_log_rd_pos += read_size;
 	if (di_log_rd_pos >= di_log_buf_size)
@@ -755,24 +837,15 @@ show_log(struct device *dev, struct device_attribute *attr, char *buf)
 	return read_log(buf);
 }
 
-#ifdef DI_DEBUG
-char log_tmp_buf[PAGE_SIZE];
-static void dump_log(void)
-{
-	while (read_log(log_tmp_buf) > 0)
-		pr_info("%s", log_tmp_buf);
-
-}
-#endif
-
 static ssize_t
 store_log(struct device *dev,
-	struct device_attribute *attr,
-	const char *buf, size_t count)
+	  struct device_attribute *attr,
+	  const char *buf, size_t count)
 {
 	unsigned long flags, tmp;
+
 	if (strncmp(buf, "bufsize", 7) == 0) {
-		if (kstrtoul(buf+7, 10, &tmp))
+		if (kstrtoul(buf + 7, 10, &tmp))
 			return count;
 		spin_lock_irqsave(&di_print_lock, flags);
 		kfree(di_log_buf);
@@ -787,17 +860,16 @@ store_log(struct device *dev,
 			di_log_buf = kmalloc(tmp, GFP_KERNEL);
 			if (di_log_buf)
 				di_log_buf_size = tmp;
-
 		}
 		spin_unlock_irqrestore(&di_print_lock, flags);
-		pr_info("di_store:set bufsize tmp %lu %u\n",
-tmp, di_log_buf_size);
+		pr_dbg("di_store:set bufsize tmp %lu %u\n",
+			tmp, di_log_buf_size);
 	} else if (strncmp(buf, "printk", 6) == 0) {
-		if (kstrtoul(buf+6, 10, &tmp))
+		if (kstrtoul(buf + 6, 10, &tmp))
 			return count;
 		di_printk_flag = tmp;
 	} else {
-		di_print(0, "%s", buf);
+		di_print("%s", buf);
 	}
 	return 16;
 }
@@ -810,112 +882,112 @@ struct di_param_s {
 #define di_param_t struct di_param_s
 
 di_param_t di_params[] = {
-
 	{"di_mtn_1_ctrl1", &di_mtn_1_ctrl1, NULL},
 	{"win0_pd_frame_diff_chg_th", &(win_pd_th[0].frame_diff_chg_th), NULL},
-	{"win0_pd_frame_diff_num_chg_th",
-&(win_pd_th[0].frame_diff_num_chg_th), NULL},
+	{ "win0_pd_frame_diff_num_chg_th",
+	  &(win_pd_th[0].frame_diff_num_chg_th), NULL },
 	{"win0_pd_field_diff_chg_th", &(win_pd_th[0].field_diff_chg_th), NULL},
-	{"win0_pd_field_diff_num_chg_th",
-&(win_pd_th[0].field_diff_num_chg_th), NULL},
-	{"win0_pd_frame_diff_skew_th",
-&(win_pd_th[0].frame_diff_skew_th), NULL},
-	{"win0_pd_frame_diff_num_skew_th",
-&(win_pd_th[0].frame_diff_num_skew_th), NULL},
-	{"win0_pd_field_diff_num_th",
-&(win_pd_th[0].field_diff_num_th), NULL},
+	{ "win0_pd_field_diff_num_chg_th",
+	  &(win_pd_th[0].field_diff_num_chg_th), NULL },
+	{ "win0_pd_frame_diff_skew_th",
+	  &(win_pd_th[0].frame_diff_skew_th), NULL },
+	{ "win0_pd_frame_diff_num_skew_th",
+	  &(win_pd_th[0].frame_diff_num_skew_th), NULL },
+	{ "win0_pd_field_diff_num_th",
+	  &(win_pd_th[0].field_diff_num_th), NULL },
 	{"win1_pd_frame_diff_chg_th", &(win_pd_th[1].frame_diff_chg_th), NULL},
-	{"win1_pd_frame_diff_num_chg_th",
-&(win_pd_th[1].frame_diff_num_chg_th), NULL},
+	{ "win1_pd_frame_diff_num_chg_th",
+	  &(win_pd_th[1].frame_diff_num_chg_th), NULL },
 	{"win1_pd_field_diff_chg_th", &(win_pd_th[1].field_diff_chg_th), NULL},
-	{"win1_pd_field_diff_num_chg_th",
-&(win_pd_th[1].field_diff_num_chg_th), NULL},
-	{"win1_pd_frame_diff_skew_th",
-&(win_pd_th[1].frame_diff_skew_th), NULL},
-	{"win1_pd_frame_diff_num_skew_th",
-&(win_pd_th[1].frame_diff_num_skew_th), NULL},
+	{ "win1_pd_field_diff_num_chg_th",
+	  &(win_pd_th[1].field_diff_num_chg_th), NULL },
+	{ "win1_pd_frame_diff_skew_th",
+	  &(win_pd_th[1].frame_diff_skew_th), NULL },
+	{ "win1_pd_frame_diff_num_skew_th",
+	  &(win_pd_th[1].frame_diff_num_skew_th), NULL },
 	{"win1_pd_field_diff_num_th", &(win_pd_th[1].field_diff_num_th), NULL},
 
 	{"win2_pd_frame_diff_chg_th", &(win_pd_th[2].frame_diff_chg_th), NULL},
-	{"win2_pd_frame_diff_num_chg_th",
-&(win_pd_th[2].frame_diff_num_chg_th), NULL},
+	{ "win2_pd_frame_diff_num_chg_th",
+	  &(win_pd_th[2].frame_diff_num_chg_th), NULL },
 	{"win2_pd_field_diff_chg_th", &(win_pd_th[2].field_diff_chg_th), NULL},
-	{"win2_pd_field_diff_num_chg_th",
-&(win_pd_th[2].field_diff_num_chg_th), NULL},
-	{"win2_pd_frame_diff_skew_th",
-&(win_pd_th[2].frame_diff_skew_th), NULL},
-	{"win2_pd_frame_diff_num_skew_th",
-&(win_pd_th[2].frame_diff_num_skew_th), NULL},
+	{ "win2_pd_field_diff_num_chg_th",
+	  &(win_pd_th[2].field_diff_num_chg_th), NULL },
+	{ "win2_pd_frame_diff_skew_th",
+	  &(win_pd_th[2].frame_diff_skew_th), NULL },
+	{ "win2_pd_frame_diff_num_skew_th",
+	  &(win_pd_th[2].frame_diff_num_skew_th), NULL },
 	{"win2_pd_field_diff_num_th", &(win_pd_th[2].field_diff_num_th), NULL},
 
 	{"win3_pd_frame_diff_chg_th", &(win_pd_th[3].frame_diff_chg_th), NULL},
-	{"win3_pd_frame_diff_num_chg_th",
-&(win_pd_th[3].frame_diff_num_chg_th), NULL},
+	{ "win3_pd_frame_diff_num_chg_th",
+	  &(win_pd_th[3].frame_diff_num_chg_th), NULL },
 	{"win3_pd_field_diff_chg_th", &(win_pd_th[3].field_diff_chg_th), NULL},
-	{"win3_pd_field_diff_num_chg_th",
-&(win_pd_th[3].field_diff_num_chg_th), NULL},
-	{"win3_pd_frame_diff_skew_th",
-&(win_pd_th[3].frame_diff_skew_th), NULL},
-	{"win3_pd_frame_diff_num_skew_th",
-&(win_pd_th[3].frame_diff_num_skew_th), NULL},
-	{"win3_pd_field_diff_num_th",
-&(win_pd_th[3].field_diff_num_th), NULL},
+	{ "win3_pd_field_diff_num_chg_th",
+	  &(win_pd_th[3].field_diff_num_chg_th), NULL },
+	{ "win3_pd_frame_diff_skew_th",
+	  &(win_pd_th[3].frame_diff_skew_th), NULL },
+	{ "win3_pd_frame_diff_num_skew_th",
+	  &(win_pd_th[3].frame_diff_num_skew_th), NULL },
+	{ "win3_pd_field_diff_num_th",
+	  &(win_pd_th[3].field_diff_num_th), NULL },
 
 	{"win4_pd_frame_diff_chg_th", &(win_pd_th[4].frame_diff_chg_th), NULL},
-	{"win4_pd_frame_diff_num_chg_th",
-&(win_pd_th[4].frame_diff_num_chg_th), NULL},
-	{"win4_pd_field_diff_chg_th",
-&(win_pd_th[4].field_diff_chg_th), NULL},
-	{"win4_pd_field_diff_num_chg_th",
-&(win_pd_th[4].field_diff_num_chg_th), NULL},
-	{"win4_pd_frame_diff_skew_th",
-&(win_pd_th[4].frame_diff_skew_th), NULL},
-	{"win4_pd_frame_diff_num_skew_th",
-&(win_pd_th[4].frame_diff_num_skew_th), NULL},
-	{"", NULL},
+	{ "win4_pd_frame_diff_num_chg_th",
+	  &(win_pd_th[4].frame_diff_num_chg_th), NULL },
+	{ "win4_pd_field_diff_chg_th",
+	  &(win_pd_th[4].field_diff_chg_th), NULL },
+	{ "win4_pd_field_diff_num_chg_th",
+	  &(win_pd_th[4].field_diff_num_chg_th), NULL },
+	{ "win4_pd_frame_diff_skew_th",
+	  &(win_pd_th[4].frame_diff_skew_th), NULL },
+	{ "win4_pd_frame_diff_num_skew_th",
+	  &(win_pd_th[4].frame_diff_num_skew_th), NULL },
+	{ "",				    NULL },
 };
 
 static ssize_t
 show_parameters(struct device *dev,
-struct device_attribute *attr, char *buf)
+		struct device_attribute *attr, char *buf)
 {
 	int i = 0;
 	int len = 0;
-	for (i = 0; di_params[i].param; i++) {
-		len += sprintf(buf+len, "%s=%08x\n", di_params[i].name,
-*(di_params[i].param));
-	}
+
+	for (i = 0; di_params[i].param; i++)
+		len += sprintf(buf + len, "%s=%08x\n", di_params[i].name,
+			*(di_params[i].param));
 	return len;
 }
 
 static char tmpbuf[128];
 static ssize_t
 store_parameters(struct device *dev,
-				struct device_attribute *attr,
-				const char *buf, size_t count)
+		 struct device_attribute *attr,
+		 const char *buf, size_t count)
 {
 	int i = 0, j;
 	unsigned long tmp = 0;
+
 	while ((buf[i]) && (buf[i] != '=') && (buf[i] != ' ')) {
 		tmpbuf[i] = buf[i];
 		i++;
 	}
 	tmpbuf[i] = 0;
-	/* pr_info("%s\n", tmpbuf); */
+	/* pr_dbg("%s\n", tmpbuf); */
 	if (strcmp("reset", tmpbuf) == 0) {
 		/* reset_di_para(); */
 		di_print("reset param\n");
 	} else {
 		for (j = 0; di_params[j].param; j++) {
 			if (strcmp(di_params[j].name, tmpbuf) == 0) {
-				if (kstrtoul(buf+i+1, 16, &tmp))
+				if (kstrtoul(buf + i + 1, 16, &tmp))
 					return count;
 				*(di_params[j].param) = tmp;
 				if (di_params[j].proc_fun)
 					di_params[j].proc_fun();
 
-				di_print("set %s=%x\n",
-di_params[j].name, tmp);
+				di_print("set %s=%lx\n",
+					di_params[j].name, tmp);
 				break;
 			}
 		}
@@ -929,47 +1001,47 @@ struct di_status_s {
 };
 #define di_status_t struct di_status_s
 di_status_t di_status[] = {
-	{"active",	&init_flag},
-	{"",		NULL}
+	{ "active", &init_flag			 },
+	{ "",	    NULL			 }
 };
 
 static ssize_t
 show_status(struct device *dev,
-			struct device_attribute *attr,
-			char *buf)
+	    struct device_attribute *attr,
+	    char *buf)
 {
 	int i = 0;
 	int len = 0;
+
 	di_print("%s\n", __func__);
-	for (i = 0; di_status[i].status; i++) {
-		len += sprintf(buf+len, "%s=%08x\n", di_status[i].name,
-						*(di_status[i].status));
-	}
+	for (i = 0; di_status[i].status; i++)
+		len += sprintf(buf + len, "%s=%08x\n", di_status[i].name,
+			*(di_status[i].status));
 	return len;
 }
 
 static ssize_t
 show_vframe_status(struct device *dev,
-					struct device_attribute *attr,
-					char *buf)
+		   struct device_attribute *attr,
+		   char *buf)
 {
 	int ret = 0;
 	struct vframe_states states;
 	struct vframe_provider_s *vfp;
+
 	vfp = vf_get_provider(VFM_NAME);
 	if (vfp && vfp->ops && vfp->ops->vf_states)
 		ret = vfp->ops->vf_states(&states, vfp->op_arg);
 
 	if (ret == 0) {
 		ret += sprintf(buf + ret, "vframe_pool_size=%d\n",
-states.vf_pool_size);
+			states.vf_pool_size);
 		ret += sprintf(buf + ret, "vframe buf_free_num=%d\n",
-states.buf_free_num);
+			states.buf_free_num);
 		ret += sprintf(buf + ret, "vframe buf_recycle_num=%d\n",
-states.buf_recycle_num);
+			states.buf_recycle_num);
 		ret += sprintf(buf + ret, "vframe buf_avail_num=%d\n",
-states.buf_avail_num);
-
+			states.buf_avail_num);
 	} else {
 		ret += sprintf(buf + ret, "vframe no states\n");
 	}
@@ -977,9 +1049,150 @@ states.buf_avail_num);
 	return ret;
 }
 
-static ssize_t store_dump_mem(struct device *dev,
-	struct device_attribute *attr,
-	const char *buf, size_t len);
+static void parse_cmd_params(char *buf_orig, char **parm)
+{
+	char *ps, *token;
+	unsigned int n = 0;
+
+	ps = buf_orig;
+	while (1) {
+		token = strsep(&ps, "\n");
+		if (token == NULL)
+			break;
+		if (*token == '\0')
+			continue;
+		parm[n++] = token;
+	}
+}
+
+struct pd_param_s {
+	char *name;
+	int *addr;
+};
+struct FlmDectRes dectres;
+struct sFlmSftPar pd_param;
+static struct pd_param_s pd_params[] = {
+	{ "sFrmDifAvgRat",
+	  &(pd_param.sFrmDifAvgRat)},
+	{ "sFrmDifLgTDif",
+	  &(pd_param.sFrmDifLgTDif) },
+	{ "sF32StpWgt01",
+	  &(pd_param.sF32StpWgt01) },
+	{ "sF32StpWgt02",
+	  &(pd_param.sF32StpWgt02) },
+	{ "sF32DifLgRat",
+	  &(pd_param.sF32DifLgRat) },
+	{ "sFlm2MinAlpha",
+	  &(pd_param.sFlm2MinAlpha) },
+	{ "sFlm2MinBelta",
+	  &(pd_param.sFlm2MinBelta) },
+	{ "sFlm20ftAlpha",
+	  &(pd_param.sFlm20ftAlpha) },
+	{ "sFlm2LgDifThd",
+	  &(pd_param.sFlm2LgDifThd) },
+	{ "sFlm2LgFlgThd",
+	  &(pd_param.sFlm2LgFlgThd) },
+	{ "sF32Dif01A1",
+	  &(pd_param.sF32Dif01A1)   },
+	{ "sF32Dif01T1",
+	  &(pd_param.sF32Dif01T1)   },
+	{ "sF32Dif01A2",
+	  &(pd_param.sF32Dif01A2)   },
+	{ "sF32Dif01T2",
+	  &(pd_param.sF32Dif01T2)   },
+	{ "rCmbRwMinCt0",
+	  &(pd_param.rCmbRwMinCt0)  },
+	{ "rCmbRwMinCt1",
+	  &(pd_param.rCmbRwMinCt1)  },
+	{ "mPstDlyPre",
+	  &(pd_param.mPstDlyPre)    },
+	{ "mNxtDlySft",
+	  &(pd_param.mNxtDlySft)    },
+	{ "sF32Dif02M0",
+	  &(pd_param.sF32Dif02M0)   },        /* mpeg-4096, cvbs-8192 */
+	{ "sF32Dif02M1",
+	  &(pd_param.sF32Dif02M1)   },        /* mpeg-4096, cvbs-8192 */
+	{ "",		  NULL          }
+};
+
+static ssize_t pd_param_store(struct device *dev,
+			      struct device_attribute *attr, const char *buff,
+			      size_t count)
+{
+	int i = 0;
+	int value = 0;
+	int rc = 0;
+	char *parm[2] = { NULL }, *buf_orig;
+
+	buf_orig = kstrdup(buff, GFP_KERNEL);
+	parse_cmd_params(buf_orig, (char **)(&parm));
+	for (i = 0; pd_params[i].addr; i++) {
+		if (!strcmp(parm[0], pd_params[i].name)) {
+			rc = kstrtoint(parm[1], 10, &value);
+			*(pd_params[i].addr) = value;
+			pr_dbg("%s=%d.\n", pd_params[i].name, value);
+		}
+	}
+
+	return count;
+}
+
+static ssize_t pd_param_show(struct device *dev,
+			     struct device_attribute *attr, char *buff)
+{
+	ssize_t len = 0;
+	int i = 0;
+
+	for (i = 0; pd_params[i].addr; i++)
+		len += sprintf(buff + len, "%s=%d.\n",
+			pd_params[i].name, *pd_params[i].addr);
+
+	len += sprintf(buff + len, "\npulldown detection result:\n");
+	len += sprintf(buff + len, "rCmb32Spcl=%u.\n", dectres.rCmb32Spcl);
+	len += sprintf(buff + len, "rPstCYWnd0 s=%u.\n", dectres.rPstCYWnd0[0]);
+	len += sprintf(buff + len, "rPstCYWnd0 e=%u.\n", dectres.rPstCYWnd0[1]);
+	len += sprintf(buff + len, "rPstCYWnd0 b=%u.\n", dectres.rPstCYWnd0[2]);
+
+	len += sprintf(buff + len, "rPstCYWnd1 s=%u.\n", dectres.rPstCYWnd1[0]);
+	len += sprintf(buff + len, "rPstCYWnd1 e=%u.\n", dectres.rPstCYWnd1[1]);
+	len += sprintf(buff + len, "rPstCYWnd1 b=%u.\n", dectres.rPstCYWnd1[2]);
+
+	len += sprintf(buff + len, "rPstCYWnd2 s=%u.\n", dectres.rPstCYWnd2[0]);
+	len += sprintf(buff + len, "rPstCYWnd2 e=%u.\n", dectres.rPstCYWnd2[1]);
+	len += sprintf(buff + len, "rPstCYWnd2 b=%u.\n", dectres.rPstCYWnd2[2]);
+
+	len += sprintf(buff + len, "rPstCYWnd3 s=%u.\n", dectres.rPstCYWnd3[0]);
+	len += sprintf(buff + len, "rPstCYWnd3 e=%u.\n", dectres.rPstCYWnd3[1]);
+	len += sprintf(buff + len, "rPstCYWnd3 b=%u.\n", dectres.rPstCYWnd3[2]);
+
+	len += sprintf(buff + len, "rPstCYWnd4 s=%u.\n", dectres.rPstCYWnd4[0]);
+	len += sprintf(buff + len, "rPstCYWnd4 e=%u.\n", dectres.rPstCYWnd4[1]);
+	len += sprintf(buff + len, "rPstCYWnd4 b=%u.\n", dectres.rPstCYWnd4[2]);
+
+	len += sprintf(buff + len, "rFlmPstGCm=%u.\n", dectres.rFlmPstGCm);
+	len += sprintf(buff + len, "rFlmSltPre=%u.\n", dectres.rFlmSltPre);
+	len += sprintf(buff + len, "rFlmPstMod=%d.\n", dectres.rFlmPstMod);
+	len += sprintf(buff + len, "rF22Flag=%d.\n", dectres.rF22Flag);
+	return len;
+}
+
+static ssize_t show_tvp_region(struct device *dev,
+			     struct device_attribute *attr, char *buff)
+{
+	ssize_t len = 0;
+
+	len = sprintf(buff, "segment DI:%lx - %lx (size:0x%x)\n",
+			de_devp->mem_start,
+			de_devp->mem_start + de_devp->mem_size - 1,
+			de_devp->mem_size);
+	return len;
+}
+
+
+static DEVICE_ATTR(pd_param, 0664, pd_param_show, pd_param_store);
+
+static ssize_t store_dump_mem(struct device *dev, struct device_attribute *attr,
+			      const char *buf, size_t len);
 static DEVICE_ATTR(config, 0664, show_config, store_config);
 static DEVICE_ATTR(parameters, 0664, show_parameters, store_parameters);
 static DEVICE_ATTR(debug, 0222, NULL, store_dbg);
@@ -987,22 +1200,22 @@ static DEVICE_ATTR(dump_pic, 0222, NULL, store_dump_mem);
 static DEVICE_ATTR(log, 0664, show_log, store_log);
 static DEVICE_ATTR(status, 0444, show_status, NULL);
 static DEVICE_ATTR(provider_vframe_status, 0444, show_vframe_status, NULL);
+static DEVICE_ATTR(tvp_region, 0444, show_tvp_region, NULL);
 /***************************
 * di buffer management
 ***************************/
-#define MAX_IN_BUF_NUM		  16
-#define MAX_LOCAL_BUF_NUM	  12
-#define MAX_POST_BUF_NUM	  16
-
-#define VFRAME_TYPE_IN			1
-#define VFRAME_TYPE_LOCAL		2
-#define VFRAME_TYPE_POST		3
-#define VFRAME_TYPE_NUM			3
-#ifdef DI_DEBUG
+#define MAX_IN_BUF_NUM            16
+#define MAX_LOCAL_BUF_NUM         12
+#define MAX_POST_BUF_NUM          16
+
+#define VFRAME_TYPE_IN                  1
+#define VFRAME_TYPE_LOCAL               2
+#define VFRAME_TYPE_POST                3
+#define VFRAME_TYPE_NUM                 3
+
 static char *vframe_type_name[] = {
-"", "di_buf_in", "di_buf_loc", "di_buf_post"
+	"", "di_buf_in", "di_buf_loc", "di_buf_post"
 };
-#endif
 
 #if defined(CONFIG_AM_DEINTERLACE_SD_ONLY)
 static unsigned int default_width = 720;
@@ -1013,42 +1226,43 @@ static unsigned int default_height = 1080;
 #endif
 static int local_buf_num;
 
-	/*
-		progressive frame process type config:
-		0, process by field;
-		1, process by frame (only valid for vdin source whose
-			 width/height does not change)
-	*/
+/*
+ * progressive frame process type config:
+ * 0, process by field;
+ * 1, process by frame (only valid for vdin source whose
+ * width/height does not change)
+ */
 static vframe_t *vframe_in[MAX_IN_BUF_NUM];
 static vframe_t vframe_in_dup[MAX_IN_BUF_NUM];
-static vframe_t vframe_local[MAX_LOCAL_BUF_NUM*2];
+static vframe_t vframe_local[MAX_LOCAL_BUF_NUM * 2];
 static vframe_t vframe_post[MAX_POST_BUF_NUM];
-static di_buf_t *cur_post_ready_di_buf;
+static struct di_buf_s *cur_post_ready_di_buf;
 
-static di_buf_t di_buf_local[MAX_LOCAL_BUF_NUM*2];
-static di_buf_t di_buf_in[MAX_IN_BUF_NUM];
-static di_buf_t di_buf_post[MAX_POST_BUF_NUM];
+static struct di_buf_s di_buf_local[MAX_LOCAL_BUF_NUM * 2];
+static struct di_buf_s di_buf_in[MAX_IN_BUF_NUM];
+static struct di_buf_s di_buf_post[MAX_POST_BUF_NUM];
 
 /*
-all buffers are in
-1) list of local_free_list,in_free_list,pre_ready_list,recycle_list
-2) di_pre_stru.di_inp_buf
-3) di_pre_stru.di_wr_buf
-4) cur_post_ready_di_buf
-5) (di_buf_t*)(vframe->private_data)->di_buf[]
-
-6) post_free_list_head
-8) (di_buf_t*)(vframe->private_data)
-*/
-#define QUEUE_LOCAL_FREE	   0
-#define QUEUE_IN_FREE		   1
-#define QUEUE_PRE_READY		   2
-#define QUEUE_POST_FREE		   3
-#define QUEUE_POST_READY	   4
-#define QUEUE_RECYCLE		   5
-#define QUEUE_DISPLAY		   6
-#define QUEUE_TMP			   7
-#define QUEUE_NUM 8
+ * all buffers are in
+ * 1) list of local_free_list,in_free_list,pre_ready_list,recycle_list
+ * 2) di_pre_stru.di_inp_buf
+ * 3) di_pre_stru.di_wr_buf
+ * 4) cur_post_ready_di_buf
+ * 5) (struct di_buf_s*)(vframe->private_data)->di_buf[]
+ *
+ * 6) post_free_list_head
+ * 8) (struct di_buf_s*)(vframe->private_data)
+ */
+#define QUEUE_LOCAL_FREE           0
+#define QUEUE_IN_FREE              1
+#define QUEUE_PRE_READY            2
+#define QUEUE_POST_FREE            3
+#define QUEUE_POST_READY           4
+#define QUEUE_RECYCLE              5
+#define QUEUE_DISPLAY              6
+#define QUEUE_TMP                  7
+#define QUEUE_POST_DOING           8
+#define QUEUE_NUM                  9
 
 #ifdef USE_LIST
 static struct
@@ -1058,7 +1272,7 @@ static struct
 list_head in_free_list_head = LIST_HEAD_INIT(in_free_list_head);
 /* vframe is NULL */
 static struct
-list_head pre_ready_list_head =	LIST_HEAD_INIT(pre_ready_list_head);
+list_head pre_ready_list_head = LIST_HEAD_INIT(pre_ready_list_head);
 /* vframe is either local_vframe or in_vframe */
 static struct
 list_head recycle_list_head = LIST_HEAD_INIT(recycle_list_head);
@@ -1087,7 +1301,6 @@ static void queue_init(int local_buffer_num)
 	list_head_array[QUEUE_RECYCLE] = &recycle_list_head;
 	list_head_array[QUEUE_DISPLAY] = &display_list_head;
 	list_head_array[QUEUE_TMP] = &post_ready_list_head;
-
 }
 
 static bool queue_empty(int queue_idx)
@@ -1095,12 +1308,12 @@ static bool queue_empty(int queue_idx)
 	return list_empty(list_head_array[queue_idx]);
 }
 
-static void queue_out(di_buf_t *di_buf)
+static void queue_out(struct di_buf_s *di_buf)
 {
 	list_del(&(di_buf->list));
 }
 
-static void queue_in(di_buf_t *di_buf, int queue_idx)
+static void queue_in(struct di_buf_s *di_buf, int queue_idx)
 {
 	list_add_tail(&(di_buf->list), list_head_array[queue_idx]);
 }
@@ -1108,40 +1321,42 @@ static void queue_in(di_buf_t *di_buf, int queue_idx)
 static int list_count(int queue_idx)
 {
 	int count = 0;
-	di_buf_t *p = NULL, *ptmp;
+	struct di_buf_s *p = NULL, *ptmp;
+
 	list_for_each_entry_safe(p, ptmp, list_head_array[queue_idx], list) {
 		count++;
 	}
 	return count;
 }
 
-#define queue_for_each_entry(di_buf, ptm, queue_idx, list)	\
+#define queue_for_each_entry(di_buf, ptm, queue_idx, list)      \
 	list_for_each_entry_safe(di_buf, ptmp, list_head_array[queue_idx], list)
 
 #else
 #define MAX_QUEUE_POOL_SIZE   256
 struct queue_s {
-	int num;
-	int in_idx;
-	int out_idx;
-	int type; /* 0, first in first out;
-1, general;2, fix position for di buf*/
-	unsigned int pool[MAX_QUEUE_POOL_SIZE];
+	int		num;
+	int		in_idx;
+	int		out_idx;
+	int		type; /* 0, first in first out;
+			       * 1, general;2, fix position for di buf*/
+	unsigned int	pool[MAX_QUEUE_POOL_SIZE];
 };
 #define queue_t struct queue_s
 static queue_t queue[QUEUE_NUM];
 
 struct di_buf_pool_s {
-	di_buf_t *di_buf_ptr;
-	unsigned int size;
+	struct di_buf_s *di_buf_ptr;
+	unsigned int	size;
 } di_buf_pool[VFRAME_TYPE_NUM];
 
-#define queue_for_each_entry(di_buf, ptm, queue_idx, list)	\
+#define queue_for_each_entry(di_buf, ptm, queue_idx, list)      \
 	for (itmp = 0; ((di_buf = get_di_buf(queue_idx, &itmp)) != NULL); )
 
 static void queue_init(int local_buffer_num)
 {
 	int i, j;
+
 	for (i = 0; i < QUEUE_NUM; i++) {
 		queue_t *q = &queue[i];
 		for (j = 0; j < MAX_QUEUE_POOL_SIZE; j++)
@@ -1153,39 +1368,37 @@ static void queue_init(int local_buffer_num)
 		q->type = 0;
 		if ((i == QUEUE_RECYCLE) ||
 			(i == QUEUE_DISPLAY) ||
-			(i == QUEUE_TMP))
+			(i == QUEUE_TMP)     ||
+			(i == QUEUE_POST_DOING))
 			q->type = 1;
 
 		if ((i == QUEUE_LOCAL_FREE) && use_2_interlace_buff)
 			q->type = 2;
 	}
 	if (local_buffer_num > 0) {
-		di_buf_pool[VFRAME_TYPE_IN-1].di_buf_ptr = &di_buf_in[0];
-		di_buf_pool[VFRAME_TYPE_IN-1].size = MAX_IN_BUF_NUM;
+		di_buf_pool[VFRAME_TYPE_IN - 1].di_buf_ptr = &di_buf_in[0];
+		di_buf_pool[VFRAME_TYPE_IN - 1].size = MAX_IN_BUF_NUM;
 
 		di_buf_pool[VFRAME_TYPE_LOCAL-1].di_buf_ptr = &di_buf_local[0];
-		di_buf_pool[VFRAME_TYPE_LOCAL-1].size = local_buffer_num;
+		di_buf_pool[VFRAME_TYPE_LOCAL - 1].size = local_buffer_num;
 
-		di_buf_pool[VFRAME_TYPE_POST-1].di_buf_ptr = &di_buf_post[0];
-		di_buf_pool[VFRAME_TYPE_POST-1].size = MAX_POST_BUF_NUM;
+		di_buf_pool[VFRAME_TYPE_POST - 1].di_buf_ptr = &di_buf_post[0];
+		di_buf_pool[VFRAME_TYPE_POST - 1].size = MAX_POST_BUF_NUM;
 	}
-
 }
 
-static di_buf_t *get_di_buf(int queue_idx, int *start_pos)
+static struct di_buf_s *get_di_buf(int queue_idx, int *start_pos)
 {
 	queue_t *q = &(queue[queue_idx]);
 	int idx = 0;
 	unsigned int pool_idx, di_buf_idx;
-	di_buf_t *di_buf = NULL;
+	struct di_buf_s *di_buf = NULL;
 	int start_pos_init = *start_pos;
 
-#ifdef DI_DEBUG
-	if (di_log_flag&DI_LOG_QUEUE) {
+	if (di_log_flag & DI_LOG_QUEUE)
 		di_print("%s:<%d:%d,%d,%d> %d\n", __func__, queue_idx,
-q->num, q->in_idx, q->out_idx, *start_pos);
-	}
-#endif
+			q->num, q->in_idx, q->out_idx, *start_pos);
+
 	if (q->type == 0) {
 		if ((*start_pos) < q->num) {
 			idx = q->out_idx + (*start_pos);
@@ -1199,28 +1412,27 @@ q->num, q->in_idx, q->out_idx, *start_pos);
 	} else if ((q->type == 1) || (q->type == 2)) {
 		for (idx = (*start_pos); idx < MAX_QUEUE_POOL_SIZE; idx++) {
 			if (q->pool[idx] != 0) {
-				*start_pos = idx+1;
+				*start_pos = idx + 1;
 				break;
 			}
 		}
 	}
 	if (idx < MAX_QUEUE_POOL_SIZE) {
-		pool_idx = ((q->pool[idx]>>8)&0xff)-1;
-		di_buf_idx = q->pool[idx]&0xff;
+		pool_idx = ((q->pool[idx] >> 8) & 0xff) - 1;
+		di_buf_idx = q->pool[idx] & 0xff;
 		if (pool_idx < VFRAME_TYPE_NUM) {
-			if (di_buf_idx < di_buf_pool[pool_idx].size) {
+			if (di_buf_idx < di_buf_pool[pool_idx].size)
 				di_buf =
-&(di_buf_pool[pool_idx].di_buf_ptr[di_buf_idx]);
-			}
+					&(di_buf_pool[pool_idx].di_buf_ptr[
+						  di_buf_idx]);
 		}
 	}
 
-	if ((di_buf) && ((((pool_idx+1)<<8)|di_buf_idx)
-		!= ((di_buf->type<<8)|(di_buf->index)))) {
-#ifdef DI_DEBUG
-		pr_info("%s: Error (%x,%x)\n", __func__,
-(((pool_idx+1)<<8)|di_buf_idx), ((di_buf->type<<8)|(di_buf->index)));
-#endif
+	if ((di_buf) && ((((pool_idx + 1) << 8) | di_buf_idx)
+			 != ((di_buf->type << 8) | (di_buf->index)))) {
+		pr_dbg("%s: Error (%x,%x)\n", __func__,
+			(((pool_idx + 1) << 8) | di_buf_idx),
+			((di_buf->type << 8) | (di_buf->index)));
 		if (recovery_flag == 0) {
 			recovery_log_reason = 1;
 			recovery_log_queue_idx = (start_pos_init<<8)|queue_idx;
@@ -1230,59 +1442,55 @@ q->num, q->in_idx, q->out_idx, *start_pos);
 		di_buf = NULL;
 	}
 
-#ifdef DI_DEBUG
-	if (di_log_flag&DI_LOG_QUEUE) {
+	if (di_log_flag & DI_LOG_QUEUE) {
 		if (di_buf)
 			di_print("%s: %x(%d,%d)\n", __func__, di_buf,
-						pool_idx, di_buf_idx);
+				pool_idx, di_buf_idx);
 		else
 			di_print("%s: %x\n", __func__, di_buf);
 	}
-#endif
+
 	return di_buf;
 }
 
 
-static di_buf_t *get_di_buf_head(int queue_idx)
+static struct di_buf_s *get_di_buf_head(int queue_idx)
 {
 	queue_t *q = &(queue[queue_idx]);
 	int idx;
 	unsigned int pool_idx, di_buf_idx;
-	di_buf_t *di_buf = NULL;
-#ifdef DI_DEBUG
-	if (di_log_flag&DI_LOG_QUEUE) {
+	struct di_buf_s *di_buf = NULL;
+
+	if (di_log_flag & DI_LOG_QUEUE)
 		di_print("%s:<%d:%d,%d,%d>\n", __func__, queue_idx,
-					q->num, q->in_idx, q->out_idx);
-	}
-#endif
+			q->num, q->in_idx, q->out_idx);
+
 	if (q->num > 0) {
 		if (q->type == 0) {
 			idx = q->out_idx;
 		} else {
-			for (idx = 0; idx < MAX_QUEUE_POOL_SIZE; idx++) {
+			for (idx = 0; idx < MAX_QUEUE_POOL_SIZE; idx++)
 				if (q->pool[idx] != 0)
 					break;
-			}
 		}
 		if (idx < MAX_QUEUE_POOL_SIZE) {
-			pool_idx = ((q->pool[idx]>>8)&0xff)-1;
-			di_buf_idx = q->pool[idx]&0xff;
+			pool_idx = ((q->pool[idx] >> 8) & 0xff) - 1;
+			di_buf_idx = q->pool[idx] & 0xff;
 			if (pool_idx < VFRAME_TYPE_NUM) {
-				if (di_buf_idx < di_buf_pool[pool_idx].size) {
-					di_buf =
-&(di_buf_pool[pool_idx].di_buf_ptr[di_buf_idx]);
-				}
+				if (di_buf_idx < di_buf_pool[pool_idx].size)
+					di_buf = &(di_buf_pool[pool_idx].
+						di_buf_ptr[di_buf_idx]);
 			}
 		}
 	}
 
-	if ((di_buf) && ((((pool_idx+1)<<8)|di_buf_idx) !=
-		((di_buf->type<<8)|(di_buf->index)))) {
-#ifdef DI_DEBUG
-		pr_info("%s: Error (%x,%x)\n", __func__,
-					(((pool_idx+1)<<8)|di_buf_idx),
-					((di_buf->type<<8)|(di_buf->index)));
-#endif
+	if ((di_buf) && ((((pool_idx + 1) << 8) | di_buf_idx) !=
+			 ((di_buf->type << 8) | (di_buf->index)))) {
+
+		pr_dbg("%s: Error (%x,%x)\n", __func__,
+			(((pool_idx + 1) << 8) | di_buf_idx),
+			((di_buf->type << 8) | (di_buf->index)));
+
 		if (recovery_flag == 0) {
 			recovery_log_reason = 2;
 			recovery_log_queue_idx = queue_idx;
@@ -1292,27 +1500,26 @@ static di_buf_t *get_di_buf_head(int queue_idx)
 		di_buf = NULL;
 	}
 
-#ifdef DI_DEBUG
-	if (di_log_flag&DI_LOG_QUEUE) {
+	if (di_log_flag & DI_LOG_QUEUE) {
 		if (di_buf)
 			di_print("%s: %x(%d,%d)\n", __func__, di_buf,
-						pool_idx, di_buf_idx);
+				pool_idx, di_buf_idx);
 		else
 			di_print("%s: %x\n", __func__, di_buf);
 	}
-#endif
-	return di_buf;
 
+	return di_buf;
 }
 
-static void queue_out(di_buf_t *di_buf)
+static void queue_out(struct di_buf_s *di_buf)
 {
 	int i;
 	queue_t *q;
+
 	if (di_buf == NULL) {
-#ifdef DI_DEBUG
-		pr_info("%s:Error\n", __func__);
-#endif
+
+		pr_dbg("%s:Error\n", __func__);
+
 		if (recovery_flag == 0)
 			recovery_log_reason = 3;
 
@@ -1321,16 +1528,16 @@ static void queue_out(di_buf_t *di_buf)
 	}
 	if (di_buf->queue_index >= 0 && di_buf->queue_index < QUEUE_NUM) {
 		q = &(queue[di_buf->queue_index]);
-#ifdef DI_DEBUG
-		if (di_log_flag&DI_LOG_QUEUE) {
+
+		if (di_log_flag & DI_LOG_QUEUE)
 			di_print("%s:<%d:%d,%d,%d> %x\n", __func__,
-di_buf->queue_index, q->num, q->in_idx, q->out_idx, di_buf);
-		}
-#endif
+				di_buf->queue_index, q->num, q->in_idx,
+				q->out_idx, di_buf);
+
 		if (q->num > 0) {
 			if (q->type == 0) {
 				if (q->pool[q->out_idx] ==
-					((di_buf->type<<8)|(di_buf->index))) {
+				    ((di_buf->type << 8) | (di_buf->index))) {
 					q->num--;
 					q->pool[q->out_idx] = 0;
 					q->out_idx++;
@@ -1338,23 +1545,26 @@ di_buf->queue_index, q->num, q->in_idx, q->out_idx, di_buf);
 						q->out_idx = 0;
 					di_buf->queue_index = -1;
 				} else {
-#ifdef DI_DEBUG
-					pr_info(
-"%s: Error (%d, %x,%x)\n", __func__,
-di_buf->queue_index, q->pool[q->out_idx],
-((di_buf->type<<8)|(di_buf->index)));
-#endif
+
+					pr_dbg(
+						"%s: Error (%d, %x,%x)\n",
+						__func__,
+						di_buf->queue_index,
+						q->pool[q->out_idx],
+						((di_buf->type << 8) |
+						(di_buf->index)));
+
 					if (recovery_flag == 0) {
 						recovery_log_reason = 4;
 						recovery_log_queue_idx =
-di_buf->queue_index;
+							di_buf->queue_index;
 						recovery_log_di_buf = di_buf;
 					}
 					recovery_flag++;
 				}
 			} else if (q->type == 1) {
 				int pool_val =
-(di_buf->type<<8)|(di_buf->index);
+					(di_buf->type << 8) | (di_buf->index);
 				for (i = 0; i < MAX_QUEUE_POOL_SIZE; i++) {
 					if (q->pool[i] == pool_val) {
 						q->num--;
@@ -1364,45 +1574,44 @@ di_buf->queue_index;
 					}
 				}
 				if (i == MAX_QUEUE_POOL_SIZE) {
-#ifdef DI_DEBUG
-					pr_info("%s: Error\n", __func__);
-#endif
+
+					pr_dbg("%s: Error\n", __func__);
+
 					if (recovery_flag == 0) {
 						recovery_log_reason = 5;
 						recovery_log_queue_idx =
-di_buf->queue_index;
+							di_buf->queue_index;
 						recovery_log_di_buf = di_buf;
 					}
 					recovery_flag++;
 				}
 			} else if (q->type == 2) {
 				int pool_val =
-(di_buf->type<<8)|(di_buf->index);
+					(di_buf->type << 8) | (di_buf->index);
 				if ((di_buf->index < MAX_QUEUE_POOL_SIZE) &&
-					(q->pool[di_buf->index] == pool_val)) {
+				    (q->pool[di_buf->index] == pool_val)) {
 					q->num--;
 					q->pool[di_buf->index] = 0;
 					di_buf->queue_index = -1;
 				} else {
-#ifdef DI_DEBUG
-					pr_info("%s: Error\n", __func__);
-#endif
+
+					pr_dbg("%s: Error\n", __func__);
+
 					if (recovery_flag == 0) {
 						recovery_log_reason = 5;
 						recovery_log_queue_idx =
-di_buf->queue_index;
+							di_buf->queue_index;
 						recovery_log_di_buf = di_buf;
 					}
 					recovery_flag++;
 				}
-
 			}
 		}
 	} else {
-#ifdef DI_DEBUG
-		pr_info("%s: Error, queue_index %d is not right\n",
-					__func__, di_buf->queue_index);
-#endif
+
+		pr_dbg("%s: Error, queue_index %d is not right\n",
+			__func__, di_buf->queue_index);
+
 		if (recovery_flag == 0) {
 			recovery_log_reason = 6;
 			recovery_log_queue_idx = 0;
@@ -1410,19 +1619,18 @@ di_buf->queue_index;
 		}
 		recovery_flag++;
 	}
-#ifdef DI_DEBUG
-	if (di_log_flag&DI_LOG_QUEUE)
+
+	if (di_log_flag & DI_LOG_QUEUE)
 		di_print("%s done\n", __func__);
-#endif
+
 }
 
-static void queue_in(di_buf_t *di_buf, int queue_idx)
+static void queue_in(struct di_buf_s *di_buf, int queue_idx)
 {
 	queue_t *q = NULL;
+
 	if (di_buf == NULL) {
-#ifdef DI_DEBUG
-		pr_info("%s:Error\n", __func__);
-#endif
+		pr_dbg("%s:Error\n", __func__);
 		if (recovery_flag == 0) {
 			recovery_log_reason = 7;
 			recovery_log_queue_idx = queue_idx;
@@ -1432,11 +1640,9 @@ static void queue_in(di_buf_t *di_buf, int queue_idx)
 		return;
 	}
 	if (di_buf->queue_index != -1) {
-#ifdef DI_DEBUG
-		pr_info("%s:%s[%d] Error, queue_index(%d) is not -1\n",
-__func__, vframe_type_name[di_buf->type],
-di_buf->index, di_buf->queue_index);
-#endif
+		pr_dbg("%s:%s[%d] Error, queue_index(%d) is not -1\n",
+			__func__, vframe_type_name[di_buf->type],
+			di_buf->index, di_buf->queue_index);
 		if (recovery_flag == 0) {
 			recovery_log_reason = 8;
 			recovery_log_queue_idx = queue_idx;
@@ -1446,14 +1652,12 @@ di_buf->index, di_buf->queue_index);
 		return;
 	}
 	q = &(queue[queue_idx]);
-#ifdef DI_DEBUG
-	if (di_log_flag&DI_LOG_QUEUE) {
+	if (di_log_flag & DI_LOG_QUEUE)
 		di_print("%s:<%d:%d,%d,%d> %x\n", __func__, queue_idx,
-					q->num, q->in_idx, q->out_idx, di_buf);
-	}
-#endif
+			q->num, q->in_idx, q->out_idx, di_buf);
+
 	if (q->type == 0) {
-		q->pool[q->in_idx] = (di_buf->type<<8)|(di_buf->index);
+		q->pool[q->in_idx] = (di_buf->type << 8) | (di_buf->index);
 		di_buf->queue_index = queue_idx;
 		q->in_idx++;
 		if (q->in_idx >= MAX_QUEUE_POOL_SIZE)
@@ -1471,9 +1675,7 @@ di_buf->index, di_buf->queue_index);
 			}
 		}
 		if (i == MAX_QUEUE_POOL_SIZE) {
-#ifdef DI_DEBUG
-			pr_info("%s: Error\n", __func__);
-#endif
+			pr_dbg("%s: Error\n", __func__);
 			if (recovery_flag == 0) {
 				recovery_log_reason = 9;
 				recovery_log_queue_idx = queue_idx;
@@ -1482,15 +1684,13 @@ di_buf->index, di_buf->queue_index);
 		}
 	} else if (q->type == 2) {
 		if ((di_buf->index < MAX_QUEUE_POOL_SIZE) &&
-(q->pool[di_buf->index] == 0)) {
+		    (q->pool[di_buf->index] == 0)) {
 			q->pool[di_buf->index] =
-(di_buf->type<<8)|(di_buf->index);
+				(di_buf->type << 8) | (di_buf->index);
 			di_buf->queue_index = queue_idx;
 			q->num++;
 		} else {
-#ifdef DI_DEBUG
-			pr_info("%s: Error\n", __func__);
-#endif
+			pr_dbg("%s: Error\n", __func__);
 			if (recovery_flag == 0) {
 				recovery_log_reason = 9;
 				recovery_log_queue_idx = queue_idx;
@@ -1498,10 +1698,9 @@ di_buf->index, di_buf->queue_index);
 			recovery_flag++;
 		}
 	}
-#ifdef DI_DEBUG
-	if (di_log_flag&DI_LOG_QUEUE)
+
+	if (di_log_flag & DI_LOG_QUEUE)
 		di_print("%s done\n", __func__);
-#endif
 }
 
 static int list_count(int queue_idx)
@@ -1512,196 +1711,236 @@ static int list_count(int queue_idx)
 static bool queue_empty(int queue_idx)
 {
 	bool ret = (queue[queue_idx].num == 0);
+
 	return ret;
 }
 #endif
 
-static bool is_in_queue(di_buf_t *di_buf, int queue_idx)
+static bool is_in_queue(struct di_buf_s *di_buf, int queue_idx)
 {
 	bool ret = 0;
-	di_buf_t *p = NULL;
+	struct di_buf_s *p = NULL;
 	int itmp;
+	unsigned int overflow_cnt;
+	overflow_cnt = 0;
+	if ((di_buf == NULL) || (queue_idx < 0) || (queue_idx >= QUEUE_NUM)) {
+		ret = 0;
+		di_print("%s: not in queue:%d!!!\n", __func__, queue_idx);
+		return ret;
+	}
 	queue_for_each_entry(p, ptmp, queue_idx, list) {
 		if (p == di_buf) {
 			ret = 1;
 			break;
 		}
+		if (overflow_cnt++ > MAX_QUEUE_POOL_SIZE) {
+			ret = 0;
+			di_print("%s: overflow_cnt!!!\n", __func__);
+			break;
+		}
 	}
 	return ret;
 }
 
 struct di_pre_stru_s {
-	/* pre input */
-	DI_MIF_t di_inp_mif;
-	DI_MIF_t di_mem_mif;
-	DI_MIF_t di_chan2_mif;
-	di_buf_t *di_inp_buf;
-	di_buf_t *di_post_inp_buf;
-	di_buf_t *di_inp_buf_next;
-	di_buf_t *di_mem_buf_dup_p;
-	di_buf_t *di_chan2_buf_dup_p;
-	/* pre output */
-	DI_SIM_MIF_t di_nrwr_mif;
-	DI_SIM_MIF_t di_mtnwr_mif;
-	di_buf_t *di_wr_buf;
-	di_buf_t *di_post_wr_buf;
+/* pre input */
+	struct DI_MIF_s	di_inp_mif;
+	struct DI_MIF_s	di_mem_mif;
+	struct DI_MIF_s	di_chan2_mif;
+	struct di_buf_s *di_inp_buf;
+	struct di_buf_s *di_post_inp_buf;
+	struct di_buf_s *di_inp_buf_next;
+	struct di_buf_s *di_mem_buf_dup_p;
+	struct di_buf_s *di_chan2_buf_dup_p;
+/* pre output */
+	struct DI_SIM_MIF_s	di_nrwr_mif;
+	struct DI_SIM_MIF_s	di_mtnwr_mif;
+	struct di_buf_s *di_wr_buf;
+	struct di_buf_s *di_post_wr_buf;
 #ifdef NEW_DI_V1
-	DI_SIM_MIF_t di_contp2rd_mif;
-	DI_SIM_MIF_t di_contprd_mif;
-	DI_SIM_MIF_t di_contwr_mif;
-	int field_count_for_cont;
-	/*
-		0 (f0,null,f0)->nr0,
-		1 (f1,nr0,f1)->nr1_cnt,
-		2 (f2,nr1_cnt,nr0)->nr2_cnt
-		3 (f3,nr2_cnt,nr1_cnt)->nr3_cnt
-	 */
-#endif
-#ifdef MCDI_SUPPORT
-	DI_MC_MIF_t di_mcinford_mif;
-	DI_MC_MIF_t di_mcvecwr_mif;
-	DI_MC_MIF_t di_mcinfowr_mif;
+	struct DI_SIM_MIF_s	di_contp2rd_mif;
+	struct DI_SIM_MIF_s	di_contprd_mif;
+	struct DI_SIM_MIF_s	di_contwr_mif;
+	int		field_count_for_cont;
+/*
+ * 0 (f0,null,f0)->nr0,
+ * 1 (f1,nr0,f1)->nr1_cnt,
+ * 2 (f2,nr1_cnt,nr0)->nr2_cnt
+ * 3 (f3,nr2_cnt,nr1_cnt)->nr3_cnt
+ */
 #endif
-	/* pre state */
-	int in_seq;
-	int recycle_seq;
-	int pre_ready_seq;
-
-	int pre_de_busy; /* 1 if pre_de is not done */
-	int pre_de_busy_timer_count;
-	int pre_de_process_done; /* flag when irq done */
-	int pre_de_clear_flag;
-	int unreg_req_flag; /* flag is set when VFRAME_EVENT_PROVIDER_UNREG*/
-	int unreg_req_flag2;
-	int reg_flag;
-	int force_unreg_req_flag;
-	int disable_req_flag;
-		/* current source info */
-	int cur_width;
-	int cur_height;
-	int cur_inp_type;
-	int cur_source_type;
-	int cur_sig_fmt;
+	struct DI_MC_MIF_s		di_mcinford_mif;
+	struct DI_MC_MIF_s		di_mcvecwr_mif;
+	struct DI_MC_MIF_s		di_mcinfowr_mif;
+/* pre state */
+	int	in_seq;
+	int	recycle_seq;
+	int	pre_ready_seq;
+
+	int	pre_de_busy;            /* 1 if pre_de is not done */
+	int	pre_de_busy_timer_count;
+	int	pre_de_process_done;    /* flag when irq done */
+	int	pre_de_clear_flag;
+	/* flag is set when VFRAME_EVENT_PROVIDER_UNREG*/
+	int	unreg_req_flag;
+	int	unreg_req_flag_irq;
+	int	reg_req_flag;
+	int	reg_req_flag_irq;
+	int	force_unreg_req_flag;
+	int	disable_req_flag;
+	/* current source info */
+	int	cur_width;
+	int	cur_height;
+	int	cur_inp_type;
+	int	cur_source_type;
+	int	cur_sig_fmt;
 	unsigned int orientation;
-	int cur_prog_flag; /* 1 for progressive source */
-	/* valid only when prog_proc_type is 0, for
-	progressive source: top field 1, bot field 0 */
-	int source_change_flag;
+	int	cur_prog_flag; /* 1 for progressive source */
+/* valid only when prog_proc_type is 0, for
+ * progressive source: top field 1, bot field 0 */
+	int	source_change_flag;
 
 	unsigned char prog_proc_type;
-	/* set by prog_proc_config when source is vdin,0:use 2 i
-	serial buffer,1:use 1 p buffer,3:use 2 i paralleling buffer*/
+/* set by prog_proc_config when source is vdin,0:use 2 i
+ * serial buffer,1:use 1 p buffer,3:use 2 i paralleling buffer*/
 	unsigned char enable_mtnwr;
 	unsigned char enable_pulldown_check;
 
-	int same_field_source_flag;
-	int left_right;/*1,left eye; 0,right eye in field alternative*/
-	/*input2pre*/
-	int bypass_start_count;
-	/* need discard some vframe when input2pre => bypass */
-	int vdin2nr;
-	enum tvin_trans_fmt source_trans_fmt;
-	enum tvin_trans_fmt det3d_trans_fmt;
+	int	same_field_source_flag;
+	int	left_right;/*1,left eye; 0,right eye in field alternative*/
+/*input2pre*/
+	int	bypass_start_count;
+/* need discard some vframe when input2pre => bypass */
+	int	vdin2nr;
+	enum tvin_trans_fmt	source_trans_fmt;
+	enum tvin_trans_fmt	det3d_trans_fmt;
+	unsigned int det_lr;
+	unsigned int det_tp;
+	unsigned int det_la;
+	unsigned int det_null;
 #ifdef DET3D
-	int vframe_interleave_flag;
+	int	vframe_interleave_flag;
 #endif
-	/**/
-	int pre_de_irq_timeout_count;
-	int pre_throw_flag;
-	int bad_frame_throw_count;
-	/*for static pic*/
-	int static_frame_count;
+/**/
+	int	pre_de_irq_timeout_count;
+	int	pre_throw_flag;
+	int	bad_frame_throw_count;
+/*for static pic*/
+	int	static_frame_count;
 	bool force_interlace;
 	bool bypass_pre;
 };
-#define di_pre_stru_t struct di_pre_stru_s
-static di_pre_stru_t di_pre_stru;
+static struct di_pre_stru_s di_pre_stru;
 
 static void dump_di_pre_stru(void)
 {
 	pr_info("di_pre_stru:\n");
 	pr_info("di_mem_buf_dup_p	   = 0x%p\n",
-					di_pre_stru.di_mem_buf_dup_p);
+		di_pre_stru.di_mem_buf_dup_p);
 	pr_info("di_chan2_buf_dup_p	   = 0x%p\n",
-					di_pre_stru.di_chan2_buf_dup_p);
+		di_pre_stru.di_chan2_buf_dup_p);
 	pr_info("in_seq				   = %d\n",
-					di_pre_stru.in_seq);
+		di_pre_stru.in_seq);
 	pr_info("recycle_seq		   = %d\n",
-					di_pre_stru.recycle_seq);
+		di_pre_stru.recycle_seq);
 	pr_info("pre_ready_seq		   = %d\n",
-					di_pre_stru.pre_ready_seq);
+		di_pre_stru.pre_ready_seq);
 	pr_info("pre_de_busy		   = %d\n",
-					di_pre_stru.pre_de_busy);
+		di_pre_stru.pre_de_busy);
 	pr_info("pre_de_busy_timer_count= %d\n",
-					di_pre_stru.pre_de_busy_timer_count);
+		di_pre_stru.pre_de_busy_timer_count);
 	pr_info("pre_de_process_done   = %d\n",
-					di_pre_stru.pre_de_process_done);
+		di_pre_stru.pre_de_process_done);
 	pr_info("pre_de_irq_timeout_count=%d\n",
-					di_pre_stru.pre_de_irq_timeout_count);
+		di_pre_stru.pre_de_irq_timeout_count);
 	pr_info("unreg_req_flag		   = %d\n",
-					di_pre_stru.unreg_req_flag);
+		di_pre_stru.unreg_req_flag);
+	pr_info("unreg_req_flag_irq		   = %d\n",
+		di_pre_stru.unreg_req_flag_irq);
+	pr_info("reg_req_flag		   = %d\n",
+		di_pre_stru.reg_req_flag);
+	pr_info("reg_req_flag_irq		   = %d\n",
+		di_pre_stru.reg_req_flag_irq);
 	pr_info("cur_width			   = %d\n",
-					di_pre_stru.cur_width);
+		di_pre_stru.cur_width);
 	pr_info("cur_height			   = %d\n",
-					di_pre_stru.cur_height);
+		di_pre_stru.cur_height);
 	pr_info("cur_inp_type		   = 0x%x\n",
-					di_pre_stru.cur_inp_type);
+		di_pre_stru.cur_inp_type);
 	pr_info("cur_source_type	   = %d\n",
-					di_pre_stru.cur_source_type);
+		di_pre_stru.cur_source_type);
 	pr_info("cur_prog_flag		   = %d\n",
-					di_pre_stru.cur_prog_flag);
+		di_pre_stru.cur_prog_flag);
 	pr_info("source_change_flag	   = %d\n",
-					di_pre_stru.source_change_flag);
+		di_pre_stru.source_change_flag);
 	pr_info("prog_proc_type		   = %d\n",
-					di_pre_stru.prog_proc_type);
+		di_pre_stru.prog_proc_type);
 	pr_info("enable_mtnwr		   = %d\n",
-					di_pre_stru.enable_mtnwr);
+		di_pre_stru.enable_mtnwr);
 	pr_info("enable_pulldown_check	= %d\n",
-				di_pre_stru.enable_pulldown_check);
+		di_pre_stru.enable_pulldown_check);
 	pr_info("same_field_source_flag = %d\n",
-				di_pre_stru.same_field_source_flag);
+		di_pre_stru.same_field_source_flag);
 #ifdef DET3D
 	pr_info("vframe_interleave_flag = %d\n",
-				di_pre_stru.vframe_interleave_flag);
+		di_pre_stru.vframe_interleave_flag);
 #endif
 	pr_info("left_right		   = %d\n",
-				di_pre_stru.left_right);
+		di_pre_stru.left_right);
 	pr_info("force_interlace   = %s\n",
-			di_pre_stru.force_interlace?"true":"false");
+		di_pre_stru.force_interlace ? "true" : "false");
 	pr_info("vdin2nr		   = %d\n",
-				di_pre_stru.vdin2nr);
+		di_pre_stru.vdin2nr);
 	pr_info("bypass_pre		   = %s\n",
-				di_pre_stru.bypass_pre?"true":"false");
+		di_pre_stru.bypass_pre ? "true" : "false");
 }
 
 struct di_post_stru_s {
-	DI_MIF_t di_buf0_mif;
-	DI_MIF_t di_buf1_mif;
-	DI_SIM_MIF_t di_mtnprd_mif;
-	#ifdef MCDI_SUPPORT
-	DI_MC_MIF_t di_mcvecrd_mif;
-	#endif
-	int update_post_reg_flag;
-	int post_process_fun_index;
-	int run_early_proc_fun_flag;
-	int cur_disp_index;
-	int canvas_id;
-	int next_canvas_id;
-	bool toggle_flag;
-	bool vscale_skip_flag;
-	uint start_pts;
-	int buf_type;
+	struct DI_MIF_s	di_buf0_mif;
+	struct DI_MIF_s	di_buf1_mif;
+	struct DI_MIF_s	di_buf2_mif;
+	struct DI_SIM_MIF_s di_diwr_mif;
+	struct DI_SIM_MIF_s	di_mtnprd_mif;
+	struct DI_MC_MIF_s	di_mcvecrd_mif;
+	struct di_buf_s *cur_post_buf;
+	int		update_post_reg_flag;
+	int		post_process_fun_index;
+	int		run_early_proc_fun_flag;
+	int		cur_disp_index;
+	int		canvas_id;
+	int		next_canvas_id;
+	bool		toggle_flag;
+	bool		vscale_skip_flag;
+	uint		start_pts;
+	int		buf_type;
+	int de_post_process_done;
+	int post_de_busy;
+	int di_post_num;
 };
-#define di_post_stru_t struct di_post_stru_s
-static di_post_stru_t di_post_stru;
+static struct di_post_stru_s di_post_stru;
+static void dump_di_post_stru(void)
+{
+	di_pr_info("\ndi_post_stru:\n");
+	di_pr_info("run_early_proc_fun_flag	= %d\n",
+		di_post_stru.run_early_proc_fun_flag);
+	di_pr_info("cur_disp_index = %d\n",
+		di_post_stru.cur_disp_index);
+	di_pr_info("post_de_busy			= %d\n",
+		di_post_stru.post_de_busy);
+	di_pr_info("de_post_process_done	= %d\n",
+		di_post_stru.de_post_process_done);
+	di_pr_info("cur_post_buf			= 0x%p\n,",
+		di_post_stru.cur_post_buf);
+}
+
 #ifdef NEW_DI_V1
 static ssize_t
 store_dump_mem(struct device *dev, struct device_attribute *attr,
-						const char *buf, size_t len)
+	       const char *buf, size_t len)
 {
 	unsigned int n = 0, canvas_w = 0, canvas_h = 0, canvas_real_size = 0;
 	char *buf_orig, *ps, *token;
-	char *parm[3] = {NULL};
+	char *parm[3] = { NULL };
 	struct file *filp = NULL;
 	loff_t pos = 0;
 	void *buff = NULL;
@@ -1719,15 +1958,90 @@ store_dump_mem(struct device *dev, struct device_attribute *attr,
 			continue;
 		parm[n++] = token;
 	}
-	if (!strcmp(parm[0], "capture")) {
+	if (0 == strcmp(parm[0], "capture")) {
 		if (parm[1] != NULL)
 			if (unlikely(di_pre_stru.di_mem_buf_dup_p == NULL))
 				return len;
 
 		canvas_w =
-(di_pre_stru.di_mem_buf_dup_p->canvas_config_size>>16)&0xffff;
+			(di_pre_stru.di_mem_buf_dup_p->canvas_config_size >> 16)
+			& 0xffff;
+		canvas_h =
+			(di_pre_stru.di_mem_buf_dup_p->canvas_config_size)
+			& 0xffff;
+		canvas_real_size = canvas_w * canvas_h * 2;
+		old_fs = get_fs();
+		set_fs(KERNEL_DS);
+/* pr_dbg("dump path =%s\n",dump_path); */
+		filp = filp_open(parm[1], O_RDWR | O_CREAT, 0666);
+		if (IS_ERR(filp)) {
+			pr_err("create %s error.\n", parm[1]);
+			return len;
+		}
+		dump_state_flag = 1;
+
+		buff = phys_to_virt(di_pre_stru.di_mem_buf_dup_p->nr_adr);
+		vfs_write(filp, buff, canvas_real_size, &pos);
+/*	pr_dbg("di_chan2_buf_dup_p:\n	nr:%u,mtn:%u,cnt:%u\n",
+ * di_pre_stru.di_chan2_buf_dup_p->nr_adr,
+ * di_pre_stru.di_chan2_buf_dup_p->mtn_adr,
+ * di_pre_stru.di_chan2_buf_dup_p->cnt_adr);
+ * pr_dbg("di_inp_buf:\n	nr:%u,mtn:%u,cnt:%u\n",
+ * di_pre_stru.di_inp_buf->nr_adr,
+ * di_pre_stru.di_inp_buf->mtn_adr,
+ * di_pre_stru.di_inp_buf->cnt_adr);
+ * pr_dbg("di_wr_buf:\n	nr:%u,mtn:%u,cnt:%u\n",
+ * di_pre_stru.di_wr_buf->nr_adr,
+ * di_pre_stru.di_wr_buf->mtn_adr,
+ * di_pre_stru.di_wr_buf->cnt_adr);
+ * pr_dbg("di_mem_buf_dup_p:\n  nr:%u,mtn:%u,cnt:%u\n",
+ * di_pre_stru.di_mem_buf_dup_p->nr_adr,
+ * di_pre_stru.di_mem_buf_dup_p->mtn_adr,
+ * di_pre_stru.di_mem_buf_dup_p->cnt_adr);
+ * pr_dbg("di_mem_start=%u\n",di_mem_start);
+ */
+		vfs_fsync(filp, 0);
+		dump_state_flag = 0;
+		filp_close(filp, NULL);
+		set_fs(old_fs);
+		pr_dbg("write buffer %d  to %s.\n",
+			di_pre_stru.di_mem_buf_dup_p->seq, parm[1]);
+	} else if (0 == strcmp(parm[0], "cap_input")) {
+		if (parm[1] != NULL)
+			if (vf_input_buff == NULL) {
+				pr_dbg("vf_input_buff is NULL\n");
+				return len;
+			}
+		canvas_real_size = vf_input_size;
+		old_fs = get_fs();
+		set_fs(KERNEL_DS);
+		pr_dbg("dump path =%s\n", parm[1]);
+		filp = filp_open(parm[1], O_RDWR | O_CREAT, 0666);
+		if (IS_ERR(filp)) {
+			pr_err("create %s error.\n", parm[1]);
+			return len;
+		}
+		dump_state_flag = 1;
+		pos = 0;
+		vfs_write(filp, vf_input_buff,
+			dump_one_frame_size * dump_vf_num, &pos);
+		vfs_fsync(filp, 0);
+		dump_state_flag = 0;
+		filp_close(filp, NULL);
+		set_fs(old_fs);
+		if (NULL != vf_input_buff) {
+			kfree(vf_input_buff);
+			vf_input_buff = NULL;
+		}
+	} else if (0 == strcmp(parm[0], "capture_post_wr_mem")) {
+		if (parm[1] != NULL)
+			if (unlikely(di_pre_stru.di_post_wr_buf == NULL))
+				return len;
+
+		canvas_w =
+(di_pre_stru.di_post_wr_buf->canvas_config_size>>16)&0xffff;
 		canvas_h =
-(di_pre_stru.di_mem_buf_dup_p->canvas_config_size)&0xffff;
+(di_pre_stru.di_post_wr_buf->canvas_config_size)&0xffff;
 		canvas_real_size = canvas_w*canvas_h*2;
 		old_fs = get_fs();
 		set_fs(KERNEL_DS);
@@ -1739,48 +2053,29 @@ store_dump_mem(struct device *dev, struct device_attribute *attr,
 		}
 		dump_state_flag = 1;
 
-		buff = phys_to_virt(di_pre_stru.di_mem_buf_dup_p->nr_adr);
+		buff = phys_to_virt(di_pre_stru.di_post_wr_buf->nr_adr);
 		vfs_write(filp, buff, canvas_real_size, &pos);
-		/*	pr_info("di_chan2_buf_dup_p:\n	nr:%u,mtn:%u,cnt:%u\n",
-di_pre_stru.di_chan2_buf_dup_p->nr_adr,
-di_pre_stru.di_chan2_buf_dup_p->mtn_adr,
-di_pre_stru.di_chan2_buf_dup_p->cnt_adr);
-			pr_info("di_inp_buf:\n	nr:%u,mtn:%u,cnt:%u\n",
-di_pre_stru.di_inp_buf->nr_adr,
-di_pre_stru.di_inp_buf->mtn_adr,
-di_pre_stru.di_inp_buf->cnt_adr);
-			pr_info("di_wr_buf:\n	nr:%u,mtn:%u,cnt:%u\n",
-di_pre_stru.di_wr_buf->nr_adr,
-di_pre_stru.di_wr_buf->mtn_adr,
-di_pre_stru.di_wr_buf->cnt_adr);
-			pr_info("di_mem_buf_dup_p:\n  nr:%u,mtn:%u,cnt:%u\n",
-di_pre_stru.di_mem_buf_dup_p->nr_adr,
-di_pre_stru.di_mem_buf_dup_p->mtn_adr,
-di_pre_stru.di_mem_buf_dup_p->cnt_adr);
-			pr_info("di_mem_start=%u\n",di_mem_start);
-			*/
 		vfs_fsync(filp, 0);
 		dump_state_flag = 0;
 		filp_close(filp, NULL);
 		set_fs(old_fs);
-		pr_info("write buffer %d  to %s.\n",
+		di_pr_info("write buffer %d  to %s.\n",
 di_pre_stru.di_mem_buf_dup_p->seq, parm[1]);
 	} else
-		pr_info("wrong dump di canvas\n");
+		pr_dbg("wrong dump di canvas\n");
 
 	return len;
-
 }
 #endif
 
 #define is_from_vdin(vframe) (vframe->type & VIDTYPE_VIU_422)
-static void recycle_vframe_type_pre(di_buf_t *di_buf);
-static void recycle_vframe_type_post(di_buf_t *di_buf);
+static void recycle_vframe_type_pre(struct di_buf_s *di_buf);
+static void recycle_vframe_type_post(struct di_buf_s *di_buf);
 #ifdef DI_DEBUG
 static void
-recycle_vframe_type_post_print(di_buf_t *di_buf,
-							const char *func,
-							const int line);
+recycle_vframe_type_post_print(struct di_buf_s *di_buf,
+				const char *func,
+				const int line);
 #endif
 
 reg_cfg_t *reg_cfg_head = NULL;
@@ -1790,17 +2085,18 @@ reg_cfg_t *reg_cfg_head = NULL;
 reg_cfg_t di_default_pre = {
 	NULL,
 	((1 << VFRAME_SOURCE_TYPE_OTHERS) |
-	 (1 << VFRAME_SOURCE_TYPE_TUNER)  |
-	 (1 << VFRAME_SOURCE_TYPE_CVBS)   |
-	 (1 << VFRAME_SOURCE_TYPE_COMP)	  |
+	 (1 << VFRAME_SOURCE_TYPE_TUNER) |
+	 (1 << VFRAME_SOURCE_TYPE_CVBS) |
+	 (1 << VFRAME_SOURCE_TYPE_COMP) |
 	 (1 << VFRAME_SOURCE_TYPE_HDMI)
-	 ),
+	),
 	0,
 	0,
 	{
 		(
-(TVIN_SIG_FMT_COMP_480P_60HZ_D000 << 16) | TVIN_SIG_FMT_CVBS_SECAM),
-			0
+			(TVIN_SIG_FMT_COMP_480P_60HZ_D000 << 16) |
+			TVIN_SIG_FMT_CVBS_SECAM),
+		0
 	},
 	{
 		{DI_EI_CTRL3,  0x0000013, 0, 27},
@@ -1818,22 +2114,23 @@ reg_cfg_t di_default_pre = {
 		{0x179f, 0xdb0c2503, 0, 32},
 /* #define DI_EI_CTRL13 */
 		{0x17a8, 0x0f021414 , 0, 31},
-		{0},
+		{ 0 },
 	}
 };
 reg_cfg_t di_default_post = {
 	NULL,
 	((1 << VFRAME_SOURCE_TYPE_OTHERS) |
-	 (1 << VFRAME_SOURCE_TYPE_TUNER)  |
-	 (1 << VFRAME_SOURCE_TYPE_CVBS)   |
-	 (1 << VFRAME_SOURCE_TYPE_COMP)   |
+	 (1 << VFRAME_SOURCE_TYPE_TUNER) |
+	 (1 << VFRAME_SOURCE_TYPE_CVBS) |
+	 (1 << VFRAME_SOURCE_TYPE_COMP) |
 	 (1 << VFRAME_SOURCE_TYPE_HDMI)
-	 ),
+	),
 	1,
 	2,
 	{
 		(
-(TVIN_SIG_FMT_COMP_480P_60HZ_D000 << 16) | TVIN_SIG_FMT_CVBS_SECAM),
+			(TVIN_SIG_FMT_COMP_480P_60HZ_D000 << 16) |
+			TVIN_SIG_FMT_CVBS_SECAM),
 		0
 	},
 	{
@@ -1844,20 +2141,20 @@ reg_cfg_t di_default_post = {
 		{DI_MTN_1_CTRL4, 0x08800840, 0, 31},
 		{DI_MTN_1_CTRL5, 0x74000d0d, 0, 31},
 /* #define DI_MTN_1_CTRL6 */
-		{0x17a9, 0x0d5a1520, 0, 31},
+		{DI_MTN_1_CTRL6, 0x0d5a1520, 0, 31},
 /* #define DI_MTN_1_CTRL7 */
-		{0x17aa, 0x0a0a0201, 0, 31},
+		{DI_MTN_1_CTRL7, 0x0a0a0201, 0, 31},
 /* #define DI_MTN_1_CTRL8 */
-		{0x17ab, 0x1a1a2662, 0, 31},
+		{DI_MTN_1_CTRL8, 0x1a1a2662, 0, 31},
 /* #define DI_MTN_1_CTRL9 */
-		{0x17ac, 0x0d200302, 0, 31},
+		{DI_MTN_1_CTRL9, 0x0d200302, 0, 31},
 /* #define DI_MTN_1_CTRL10 */
-		{0x17ad, 0x02020606, 0, 31},
+		{DI_MTN_1_CTRL10, 0x02020606, 0, 31},
 /* #define DI_MTN_1_CTRL11 */
-		{0x17ae, 0x05080304, 0, 31},
+		{DI_MTN_1_CTRL11, 0x05080304, 0, 31},
 /* #define DI_MTN_1_CTRL12 */
-		{0x17af, 0x40020a04, 0, 31},
-		{0},
+		{DI_MTN_1_CTRL12, 0x40020a04, 0, 31},
+		{ 0 },
 	}
 };
 
@@ -1869,61 +2166,67 @@ void di_add_reg_cfg(reg_cfg_t *reg_cfg)
 
 static void di_apply_reg_cfg(unsigned char pre_post_type)
 {
-	if (use_reg_cfg) {
-		reg_cfg_t *reg_cfg = reg_cfg_head;
-		int ii;
-		while (reg_cfg) {
-			unsigned char set_flag = 0;
-			if ((pre_post_type == reg_cfg->pre_post_type) &&
-((1<<di_pre_stru.cur_source_type)&reg_cfg->source_types_enable)) {
-				if (
-di_pre_stru.cur_source_type == VFRAME_SOURCE_TYPE_OTHERS &&
-(2 != reg_cfg->dtv_defintion_type)) {
-					/* if:dtv stand defintion
-else if:high defintion */
-					if (di_pre_stru.cur_height < 720 &&
-reg_cfg->dtv_defintion_type)
-						set_flag = 1;
+	reg_cfg_t *reg_cfg = reg_cfg_head;
+	int ii;
+
+	if (!use_reg_cfg)
+		return;
+	while (reg_cfg) {
+		unsigned char set_flag = 0;
+		if ((pre_post_type == reg_cfg->pre_post_type) &&
+			((1 << di_pre_stru.cur_source_type) &
+			reg_cfg->source_types_enable)) {
+			if (di_pre_stru.cur_source_type ==
+			VFRAME_SOURCE_TYPE_OTHERS &&
+			(2 != reg_cfg->dtv_defintion_type)) {
+				/* if:dtv stand defintion
+				 * else if:high defintion */
+				if (di_pre_stru.cur_height < 720 &&
+				reg_cfg->dtv_defintion_type)
+					set_flag = 1;
+				else if (di_pre_stru.cur_height >= 720
+				&& (!reg_cfg->dtv_defintion_type))
+					set_flag = 1;
+			} else {
+				for (ii = 0; ii < FMT_MAX_NUM; ii++) {
+					if (reg_cfg->
+					sig_fmt_range[ii] == 0)
+						break;
 					else if (
-di_pre_stru.cur_height >= 720 && (!reg_cfg->dtv_defintion_type))
+					(di_pre_stru.cur_sig_fmt >=
+					((reg_cfg->sig_fmt_range[ii]
+					>> 16) & 0xffff))
+					&& (di_pre_stru.cur_sig_fmt <=
+					(reg_cfg->sig_fmt_range[ii] &
+					0xffff))) {
 						set_flag = 1;
-				} else {
-					for (ii = 0; ii < FMT_MAX_NUM; ii++) {
-						if (
-reg_cfg->sig_fmt_range[ii] == 0) {
-							break;
-						} else if (
-(di_pre_stru.cur_sig_fmt >= ((reg_cfg->sig_fmt_range[ii]>>16)&0xffff)) &&
-(di_pre_stru.cur_sig_fmt <= (reg_cfg->sig_fmt_range[ii]&0xffff))) {
-							set_flag = 1;
-							break;
-						}
+						break;
 					}
 				}
 			}
-			if (set_flag) {
-				for (ii = 0; ii < REG_SET_MAX_NUM; ii++) {
-					if (reg_cfg->reg_set[ii].adr) {
-						if (pre_post_type) {
-							VSYNC_WR_MPEG_REG_BITS(
-reg_cfg->reg_set[ii].adr,
-reg_cfg->reg_set[ii].val,
-reg_cfg->reg_set[ii].start,
-reg_cfg->reg_set[ii].len);
-						} else
-							RDMA_WR_BITS(
-reg_cfg->reg_set[ii].adr, reg_cfg->reg_set[ii].val,
-reg_cfg->reg_set[ii].start, reg_cfg->reg_set[ii].len);
-					} else {
-						break;
-					}
+		}
+		if (set_flag) {
+			for (ii = 0; ii < REG_SET_MAX_NUM; ii++) {
+				if (0 == reg_cfg->reg_set[ii].adr)
+					break;
+				if (pre_post_type) {
+					DI_VSYNC_WR_MPEG_REG_BITS(
+					reg_cfg->reg_set[ii].adr,
+					reg_cfg->reg_set[ii].val,
+					reg_cfg->reg_set[ii].start,
+					reg_cfg->reg_set[ii].len);
+				} else {
+					RDMA_WR_BITS(
+					reg_cfg->reg_set[ii].adr,
+					reg_cfg->reg_set[ii].val,
+					reg_cfg->reg_set[ii].start,
+					reg_cfg->reg_set[ii].len);
 				}
-				break;
 			}
-			reg_cfg = reg_cfg->next;
+			break;
 		}
+		reg_cfg = reg_cfg->next;
 	}
-
 }
 #endif
 
@@ -1931,23 +2234,26 @@ reg_cfg->reg_set[ii].start, reg_cfg->reg_set[ii].len);
 static void dis2_di(void)
 {
 	ulong flags = 0, fiq_flag = 0, irq_flag2 = 0;
+
 	init_flag = 0;
 	di_lock_irqfiq_save(irq_flag2, fiq_flag);
-	/* vf_unreg_provider(&di_vf_prov); */
+/* vf_unreg_provider(&di_vf_prov); */
 	vf_light_unreg_provider(&di_vf_prov);
 	di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
+	reg_flag = 0;
 	spin_lock_irqsave(&plist_lock, flags);
 	di_lock_irqfiq_save(irq_flag2, fiq_flag);
 	if (di_pre_stru.di_inp_buf) {
 		if (vframe_in[di_pre_stru.di_inp_buf->index]) {
 			vf_put(
-vframe_in[di_pre_stru.di_inp_buf->index], VFM_NAME);
+				vframe_in[di_pre_stru.di_inp_buf->index],
+				VFM_NAME);
 			vframe_in[di_pre_stru.di_inp_buf->index] = NULL;
 			vf_notify_provider(
-VFM_NAME, VFRAME_EVENT_RECEIVER_PUT, NULL);
+				VFM_NAME, VFRAME_EVENT_RECEIVER_PUT, NULL);
 		}
-		/* list_add_tail(
-&(di_pre_stru.di_inp_buf->list), &in_free_list_head); */
+/* list_add_tail(
+ * &(di_pre_stru.di_inp_buf->list), &in_free_list_head); */
 		di_pre_stru.di_inp_buf->invert_top_bot_flag = 0;
 		queue_in(di_pre_stru.di_inp_buf, QUEUE_IN_FREE);
 		di_pre_stru.di_inp_buf = NULL;
@@ -1956,8 +2262,14 @@ VFM_NAME, VFRAME_EVENT_RECEIVER_PUT, NULL);
 	di_set_power_control(0, 0);
 	if (get_blackout_policy()) {
 		di_set_power_control(1, 0);
-		disable_post_deinterlace_2();
-		Wr(DI_CLKG_CTRL, 0x2);
+		DI_Wr(DI_CLKG_CTRL, 0x2);
+	}
+
+	if (post_wr_en && post_wr_surpport) {
+		diwr_set_power_control(0);
+		#ifdef CONFIG_VSYNC_RDMA
+		enable_rdma(1);
+		#endif
 	}
 
 	di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
@@ -1966,23 +2278,22 @@ VFM_NAME, VFRAME_EVENT_RECEIVER_PUT, NULL);
 
 static ssize_t
 store_config(struct device *dev,
-			struct device_attribute *attr,
-			const char *buf, size_t count)
+	     struct device_attribute *attr,
+	     const char *buf, size_t count)
 {
 	if (strncmp(buf, "disable", 7) == 0) {
-#ifdef DI_DEBUG
+
 		di_print("%s: disable\n", __func__);
-#endif
+
 		if (init_flag) {
 			di_pre_stru.disable_req_flag = 1;
 			provider_vframe_level = 0;
 			bypass_dynamic_flag = 0;
 			post_ready_empty_count = 0;
 
-			trigger_pre_di_process('d');
+			trigger_pre_di_process(TRIGGER_PRE_BY_DEBUG_DISABLE);
 			while (di_pre_stru.disable_req_flag)
 				usleep_range(1000, 1001);
-
 		}
 	} else if (strncmp(buf, "dis2", 4) == 0) {
 		dis2_di();
@@ -1993,8 +2304,9 @@ store_config(struct device *dev,
 static unsigned char is_progressive(vframe_t *vframe)
 {
 	unsigned char ret = 0;
+
 	ret =
-((vframe->type & VIDTYPE_TYPEMASK) == VIDTYPE_PROGRESSIVE);
+		((vframe->type & VIDTYPE_TYPEMASK) == VIDTYPE_PROGRESSIVE);
 	return ret;
 }
 
@@ -2005,51 +2317,50 @@ static void force_source_change(void)
 
 static unsigned char is_source_change(vframe_t *vframe)
 {
-#define VFRAME_FORMAT_MASK	\
-(VIDTYPE_VIU_422|VIDTYPE_VIU_SINGLE_PLANE|VIDTYPE_VIU_444|VIDTYPE_MVC)
-	if (
-		(di_pre_stru.cur_width != vframe->width) ||
-		(di_pre_stru.cur_height != vframe->height) ||
-(((di_pre_stru.cur_inp_type&VFRAME_FORMAT_MASK) !=
-(vframe->type&VFRAME_FORMAT_MASK)) &&
-(!is_handle_prog_frame_as_interlace(vframe))) ||
-(di_pre_stru.cur_source_type != vframe->source_type)
-		) {
+#define VFRAME_FORMAT_MASK      \
+	(VIDTYPE_VIU_422 | VIDTYPE_VIU_SINGLE_PLANE | VIDTYPE_VIU_444 | \
+	 VIDTYPE_MVC)
+	if ((di_pre_stru.cur_width != vframe->width) ||
+	(di_pre_stru.cur_height != vframe->height) ||
+	(((di_pre_stru.cur_inp_type & VFRAME_FORMAT_MASK) !=
+	(vframe->type & VFRAME_FORMAT_MASK)) &&
+	(!is_handle_prog_frame_as_interlace(vframe))) ||
+	(di_pre_stru.cur_source_type != vframe->source_type)) {
 		/* video format changed */
 		return 1;
 	} else if (
-((di_pre_stru.cur_prog_flag != is_progressive(vframe)) &&
-(!is_handle_prog_frame_as_interlace(vframe))) ||
-((di_pre_stru.cur_inp_type&VIDTYPE_VIU_FIELD) !=
-(vframe->type&VIDTYPE_VIU_FIELD))
-		) {
+	((di_pre_stru.cur_prog_flag != is_progressive(vframe)) &&
+	(!is_handle_prog_frame_as_interlace(vframe))) ||
+	((di_pre_stru.cur_inp_type & VIDTYPE_VIU_FIELD) !=
+	(vframe->type & VIDTYPE_VIU_FIELD))
+	) {
 		/* just scan mode changed */
 		if (!di_pre_stru.force_interlace)
-			pr_info("DI I<->P.\n");
+			pr_dbg("DI I<->P.\n");
 		return 2;
 	}
 	return 0;
 }
 /*
-static unsigned char is_vframe_type_change(vframe_t* vframe)
-{
-	if(
-		(di_pre_stru.cur_prog_flag!=is_progressive(vframe))||
-((di_pre_stru.cur_inp_type&VFRAME_FORMAT_MASK)!=
-(vframe->type&VFRAME_FORMAT_MASK))
-		)
-		return 1;
-
-	return 0;
-}
-*/
+ * static unsigned char is_vframe_type_change(vframe_t* vframe)
+ * {
+ * if(
+ * (di_pre_stru.cur_prog_flag!=is_progressive(vframe))||
+ * ((di_pre_stru.cur_inp_type&VFRAME_FORMAT_MASK)!=
+ * (vframe->type&VFRAME_FORMAT_MASK))
+ * )
+ * return 1;
+ *
+ * return 0;
+ * }
+ */
 static int trick_mode;
 static unsigned char is_bypass(vframe_t *vf_in)
 {
 	unsigned int vtype = 0;
-
-	if (di_debug_flag&0x10000) /* for debugging */
-		return (di_debug_flag>>17)&0x1;
+	int ret = 0;
+	if (di_debug_flag & 0x10000) /* for debugging */
+		return (di_debug_flag >> 17) & 0x1;
 
 	if (bypass_interlace_output && interlace_output_flag)
 		return 1;
@@ -2057,40 +2368,42 @@ static unsigned char is_bypass(vframe_t *vf_in)
 	if (bypass_all)
 		return 1;
 	if (di_pre_stru.cur_prog_flag &&
-		((bypass_prog) ||
-(di_pre_stru.cur_width > 1920) || (di_pre_stru.cur_height > 1080)
-|| (di_pre_stru.cur_inp_type&VIDTYPE_VIU_444))
-		)
+	    ((bypass_prog) ||
+	     (di_pre_stru.cur_width > 1920) || (di_pre_stru.cur_height > 1080)
+	     || (di_pre_stru.cur_inp_type & VIDTYPE_VIU_444))
+	    )
 		return 1;
 	if (di_pre_stru.cur_prog_flag &&
-(di_pre_stru.cur_width == 1920) && (di_pre_stru.cur_height == 1080)
-		&& (bypass_1080p)
-		)
+	    (di_pre_stru.cur_width == 1920) && (di_pre_stru.cur_height == 1080)
+	    && (bypass_1080p)
+	    )
 		return 1;
 
 	if (di_pre_stru.cur_prog_flag &&
-		(di_pre_stru.cur_width > 720) && (di_pre_stru.cur_height > 576)
-		&& (bypass_hd_prog)
-		)
+	    (di_pre_stru.cur_width > 720) && (di_pre_stru.cur_height > 576)
+	    && (bypass_hd_prog)
+	    )
 		return 1;
 
 	if (bypass_hd &&
-((di_pre_stru.cur_width > 720) || (di_pre_stru.cur_height > 576))
-	  )
+	    ((di_pre_stru.cur_width > 720) || (di_pre_stru.cur_height > 576))
+	    )
 		return 1;
 	if (bypass_superd &&
-	((di_pre_stru.cur_width > 1920) || (di_pre_stru.cur_height > 1080))
-	  )
+	    ((di_pre_stru.cur_width > 1920) || (di_pre_stru.cur_height > 1080))
+	    )
+		return 1;
+	if ((di_pre_stru.cur_width < 16) || (di_pre_stru.cur_height < 16))
 		return 1;
 
-	if (di_pre_stru.cur_inp_type&VIDTYPE_MVC)
+	if (di_pre_stru.cur_inp_type & VIDTYPE_MVC)
 		return 1;
 
 	if (di_pre_stru.cur_source_type == VFRAME_SOURCE_TYPE_PPMGR)
 		return 1;
 
 	if (((bypass_trick_mode) &&
-(new_keep_last_frame_enable == 0)) || (bypass_trick_mode&0x2)) {
+	     (new_keep_last_frame_enable == 0)) || (bypass_trick_mode & 0x2)) {
 		int trick_mode;
 		query_video_status(0, &trick_mode);
 		if (trick_mode)
@@ -2098,15 +2411,15 @@ static unsigned char is_bypass(vframe_t *vf_in)
 	}
 
 	if (bypass_3d &&
-		(di_pre_stru.source_trans_fmt != 0))
+	    (di_pre_stru.source_trans_fmt != 0))
 		return 1;
 
-	/*prot is conflict with di post*/
+/*prot is conflict with di post*/
 	if (vf_in && vf_in->video_angle)
 		return 1;
-	if (vf_in && (vf_in->type &VIDTYPE_PIC))
+	if (vf_in && (vf_in->type & VIDTYPE_PIC))
 		return 1;
-		
+
 	if (vf_in && (vf_in->type & VIDTYPE_COMPRESS))
 		return 1;
 	if ((di_vscale_skip_enable & 0x4) && vf_in) {
@@ -2114,32 +2427,36 @@ static unsigned char is_bypass(vframe_t *vf_in)
 		vtype = vf_in->type;
 		vf_in->type &= (~VIDTYPE_TYPEMASK);
 		vf_in->type |= VIDTYPE_VIU_422;
-		di_vscale_skip_count = get_current_vscale_skip_count(vf_in);
+		ret = get_current_vscale_skip_count(vf_in);
+		di_vscale_skip_count = (ret&0xff);
+		vpp_3d_mode = ((ret>>8)&0xff);
 		vf_in->type = vtype;
-		if (di_vscale_skip_count > 0)
+		if (di_vscale_skip_count > 0 ||
+			(vpp_3d_mode
+			#ifdef DET3D
+			&& (!det3d_en)
+			#endif
+			)
+			)
 			return 1;
 	}
-	return 0;
 
+	return 0;
 }
 
 static unsigned char is_bypass_post(void)
 {
-	if (di_debug_flag&0x40000)  /* for debugging */
-		return (di_debug_flag>>19)&0x1;
+	if (di_debug_flag & 0x40000) /* for debugging */
+		return (di_debug_flag >> 19) & 0x1;
 
 	/*prot is conflict with di post*/
 	if (di_pre_stru.orientation)
 		return 1;
-	if ((bypass_post) || (bypass_dynamic_flag&1))
+	if ((bypass_post) || (bypass_dynamic_flag & 1))
 		return 1;
 
 
 #ifdef DET3D
-	if (det3d_en)
-		return 1;
-
-
 	if (di_pre_stru.vframe_interleave_flag != 0)
 		return 1;
 
@@ -2151,11 +2468,11 @@ static unsigned char is_bypass_post(void)
 static unsigned char is_input2pre(void)
 {
 	if (input2pre
-		#ifdef NEW_DI_V3
-		&& di_pre_stru.cur_prog_flag
-		#endif
-		&& vdin_source_flag
-		&& (bypass_state == 0))
+#ifdef NEW_DI_V3
+	    && di_pre_stru.cur_prog_flag
+#endif
+	    && vdin_source_flag
+	    && (bypass_state == 0))
 		return 1;
 
 	return 0;
@@ -2163,26 +2480,28 @@ static unsigned char is_input2pre(void)
 #endif
 
 #ifdef DI_USE_FIXED_CANVAS_IDX
-static int di_post_idx[2][4];
+static int di_post_idx[2][6];
 static int di_pre_idx[2][10];
 static int di_get_canvas(void)
 {
-	int pre_num = 7, post_num = 3, i = 0;
-	#ifdef MCDI_SUPPORT
-	/* mem/chan2/nr/mtn/contrd/contrd2/contw/mcinfrd/mcinfow/mcvecw */
-	pre_num = 10;
-	/* buf0/buf1/mtnp/mcvec */
-	post_num = 4;
-	#endif
+	int pre_num = 7, post_num = 6, i = 0;
+
+	if (mcpre_en) {
+		/* mem/chan2/nr/mtn/contrd/contrd2/
+		 * contw/mcinfrd/mcinfow/mcvecw */
+		pre_num = 10;
+		/* buf0/buf1/buf2/mtnp/mcvec */
+		post_num = 6;
+	}
 	if (canvas_pool_alloc_canvas_table("di_pre",
-		&di_pre_idx[0][0], pre_num, CANVAS_MAP_TYPE_1)) {
-		pr_info("%s allocate di pre canvas error.\n", __func__);
+	&di_pre_idx[0][0], pre_num, CANVAS_MAP_TYPE_1)) {
+		pr_dbg("%s allocate di pre canvas error.\n", __func__);
 		return 1;
 	}
 	if (di_pre_rdma_enable) {
 		if (canvas_pool_alloc_canvas_table("di_pre",
-			&di_pre_idx[1][0], pre_num, CANVAS_MAP_TYPE_1)) {
-			pr_info("%s allocate di pre canvas error.\n", __func__);
+		&di_pre_idx[1][0], pre_num, CANVAS_MAP_TYPE_1)) {
+			pr_dbg("%s allocate di pre canvas error.\n", __func__);
 			return 1;
 		}
 	} else {
@@ -2190,47 +2509,51 @@ static int di_get_canvas(void)
 			di_pre_idx[1][i] = di_pre_idx[0][i];
 	}
 	if (canvas_pool_alloc_canvas_table("di_post",
-		&di_post_idx[0][0], post_num, CANVAS_MAP_TYPE_1)) {
-		pr_info("%s allocate di post canvas error.\n", __func__);
+		    &di_post_idx[0][0], post_num, CANVAS_MAP_TYPE_1)) {
+		pr_dbg("%s allocate di post canvas error.\n", __func__);
 		return 1;
 	}
 
-	#ifdef CONFIG_VSYNC_RDMA
+#ifdef CONFIG_VSYNC_RDMA
 	if (canvas_pool_alloc_canvas_table("di_post",
-		&di_post_idx[1][0], post_num, CANVAS_MAP_TYPE_1)) {
-		pr_info("%s allocate di post canvas error.\n", __func__);
+		    &di_post_idx[1][0], post_num, CANVAS_MAP_TYPE_1)) {
+		pr_dbg("%s allocate di post canvas error.\n", __func__);
 		return 1;
 	}
-	#else
+#else
 	for (i = 0; i < post_num; i++)
 		di_post_idx[1][i] = di_post_idx[0][i];
 #endif
 	return 0;
 }
-static void
-config_canvas_idx(di_buf_t *di_buf, int nr_canvas_idx, int mtn_canvas_idx)
+static void config_canvas_idx(struct di_buf_s *di_buf, int nr_canvas_idx,
+	int mtn_canvas_idx)
 {
 	unsigned int width, canvas_height;
+
 	if (!di_buf)
 		return;
-	width = (di_buf->canvas_config_size>>16)&0xffff;
-	canvas_height = (di_buf->canvas_config_size)&0xffff;
+	width = (di_buf->canvas_config_size >> 16) & 0xffff;
+	canvas_height = (di_buf->canvas_config_size) & 0xffff;
 	if (di_buf->canvas_config_flag == 1) {
 		if (nr_canvas_idx >= 0) {
 			di_buf->nr_canvas_idx = nr_canvas_idx;
 			canvas_config(
-nr_canvas_idx, di_buf->nr_adr, width * 2, canvas_height, 0, 0);
+				nr_canvas_idx, di_buf->nr_adr, width * 2,
+				canvas_height, 0, 0);
 		}
 	} else if (di_buf->canvas_config_flag == 2) {
 		if (nr_canvas_idx >= 0) {
 			di_buf->nr_canvas_idx = nr_canvas_idx;
 			canvas_config(
-nr_canvas_idx, di_buf->nr_adr, width * 2, canvas_height/2, 0, 0);
+				nr_canvas_idx, di_buf->nr_adr, width * 2,
+				canvas_height / 2, 0, 0);
 		}
 		if (mtn_canvas_idx >= 0) {
 			di_buf->mtn_canvas_idx = mtn_canvas_idx;
 			canvas_config(
-mtn_canvas_idx, di_buf->mtn_adr, width/2, canvas_height/2, 0, 0);
+				mtn_canvas_idx, di_buf->mtn_adr, width / 2,
+				canvas_height / 2, 0, 0);
 		}
 	}
 	if (nr_canvas_idx >= 0) {
@@ -2240,60 +2563,73 @@ mtn_canvas_idx, di_buf->mtn_adr, width/2, canvas_height/2, 0, 0);
 }
 
 #ifdef NEW_DI_V1
-static void config_cnt_canvas_idx(di_buf_t *di_buf, unsigned int cnt_canvas_idx)
+static void config_cnt_canvas_idx(struct di_buf_s *di_buf,
+	unsigned int cnt_canvas_idx)
 {
 	unsigned int width, canvas_height;
+
 	if (!di_buf)
 		return;
-	width = (di_buf->canvas_config_size>>16)&0xffff;
-	canvas_height = (di_buf->canvas_config_size)&0xffff;
+	width = (di_buf->canvas_config_size >> 16) & 0xffff;
+	canvas_height = (di_buf->canvas_config_size) & 0xffff;
 	di_buf->cnt_canvas_idx = cnt_canvas_idx;
 	canvas_config(
-cnt_canvas_idx, di_buf->cnt_adr, width/2, canvas_height/2, 0, 0);
+		cnt_canvas_idx, di_buf->cnt_adr, width / 2, canvas_height / 2,
+		0, 0);
 }
 #endif
-#ifdef MCDI_SUPPORT
-static void config_mcinfo_canvas_idx(di_buf_t *di_buf, int mcinfo_canvas_idx)
+
+static void config_mcinfo_canvas_idx(struct di_buf_s *di_buf,
+	int mcinfo_canvas_idx)
 {
 	unsigned int canvas_height;
+
 	if (!di_buf)
 		return;
-	canvas_height = (di_buf->canvas_config_size)&0xffff;
+	canvas_height = (di_buf->canvas_config_size) & 0xffff;
 	di_buf->mcinfo_canvas_idx = mcinfo_canvas_idx;
 	canvas_config(
-	mcinfo_canvas_idx, di_buf->mcinfo_adr, canvas_height/2, 2, 0, 0);
+		mcinfo_canvas_idx, di_buf->mcinfo_adr, canvas_height / 2, 2, 0,
+		0);
 }
-static void config_mcvec_canvas_idx(di_buf_t *di_buf, int mcvec_canvas_idx)
+static void config_mcvec_canvas_idx(struct di_buf_s *di_buf,
+	int mcvec_canvas_idx)
 {
 	unsigned int width, canvas_height;
+
 	if (!di_buf)
 		return;
-	width = (di_buf->canvas_config_size>>16)&0xffff;
-	canvas_height = (di_buf->canvas_config_size)&0xffff;
+	width = (di_buf->canvas_config_size >> 16) & 0xffff;
+	canvas_height = (di_buf->canvas_config_size) & 0xffff;
 	di_buf->mcvec_canvas_idx = mcvec_canvas_idx;
 	canvas_config(
-mcvec_canvas_idx, di_buf->mcvec_adr, width * 2/5, canvas_height/2, 0, 0);
+		mcvec_canvas_idx, di_buf->mcvec_adr, width * 2 / 5,
+		canvas_height / 2, 0, 0);
 }
-#endif
+
 
 #else
 
-static void config_canvas(di_buf_t *di_buf)
+static void config_canvas(struct di_buf_s *di_buf)
 {
 	unsigned int width, canvas_height;
+
 	if (!di_buf)
 		return;
-	width = (di_buf->canvas_config_size>>16)&0xffff;
-	canvas_height = (di_buf->canvas_config_size)&0xffff;
+	width = (di_buf->canvas_config_size >> 16) & 0xffff;
+	canvas_height = (di_buf->canvas_config_size) & 0xffff;
 	if (di_buf->canvas_config_flag == 1) {
 		canvas_config(
-di_buf->nr_canvas_idx, di_buf->nr_adr, width * 2, canvas_height, 0, 0);
+			di_buf->nr_canvas_idx, di_buf->nr_adr, width * 2,
+			canvas_height, 0, 0);
 		di_buf->canvas_config_flag = 0;
 	} else if (di_buf->canvas_config_flag == 2) {
 		canvas_config(
-di_buf->nr_canvas_idx, di_buf->nr_adr, width * 2, canvas_height/2, 0, 0);
+			di_buf->nr_canvas_idx, di_buf->nr_adr, width * 2,
+			canvas_height / 2, 0, 0);
 		canvas_config(
-di_buf->mtn_canvas_idx, di_buf->mtn_adr, width/2, canvas_height/2, 0, 0);
+			di_buf->mtn_canvas_idx, di_buf->mtn_adr, width / 2,
+			canvas_height / 2, 0, 0);
 		di_buf->canvas_config_flag = 0;
 	}
 }
@@ -2304,31 +2640,26 @@ static int di_init_buf(int width, int height, unsigned char prog_flag)
 {
 	int i, local_buf_num_available, local_buf_num_valid;
 	int canvas_height = height + 8;
-#ifdef D2D3_SUPPORT
-	unsigned dp_buf_size = 0;
-	unsigned dp_mem_start = 0;
-#endif
+
 	unsigned int di_buf_size;
+	unsigned int di_post_mem = 0, di_post_buf_size = 0;
 	frame_count = 0;
 	disp_frame_count = 0;
 	cur_post_ready_di_buf = NULL;
-	for (i = 0; i < MAX_IN_BUF_NUM; i++)
-		vframe_in[i] = NULL;
+	for (i = 0; i < MAX_IN_BUF_NUM; i++) {
+		if (vframe_in[i]) {
+			vf_put(vframe_in[i], VFM_NAME);
+			vf_notify_provider(
+				VFM_NAME, VFRAME_EVENT_RECEIVER_PUT, NULL);
+			vframe_in[i] = NULL;
+		}
+	}
 
 	memset(&di_pre_stru, 0, sizeof(di_pre_stru));
-#ifdef D2D3_SUPPORT
-	dp_buf_size = 256 * canvas_height/2;/* 139264 bytes */
-#endif
 	if (prog_flag) {
 		di_pre_stru.prog_proc_type = 1;
 		di_buf_size = width * canvas_height * 2;
-#ifdef D2D3_SUPPORT
-		if (d2d3_enable) {
-			local_buf_num = di_mem_size/(di_buf_size + dp_buf_size);
-			dp_mem_start = di_mem_start + di_buf_size * local_buf_num;
-		} else
-#endif
-		local_buf_num = de_devp->mem_size/di_buf_size;
+		local_buf_num = de_devp->mem_size / di_buf_size;
 		local_buf_num_available = local_buf_num;
 		if (local_buf_num > (2 * MAX_LOCAL_BUF_NUM))
 			local_buf_num = 2 * MAX_LOCAL_BUF_NUM;
@@ -2339,27 +2670,33 @@ static int di_init_buf(int width, int height, unsigned char prog_flag)
 			new_keep_last_frame_enable = 0;
 	} else {
 		di_pre_stru.prog_proc_type = 0;
-#ifdef MCDI_SUPPORT
-		/*nr_size(bits)=w*active_h*8*2(yuv422) mtn(bits)=w*active_h*4
-		cont(bits)=w*active_h*4 mv(bits)=w*active_h/5*16
-		mcinfo(bits)=active_h*16*/
-		di_buf_size =
-(width * canvas_height) * 6/4 + width * canvas_height/5 + canvas_height;
-		/* 3552320 bytes */
-#elif defined NEW_DI_V1
-		di_buf_size = width * canvas_height * 6/4;/* 3133440 bytes */
+
+		if (mcpre_en) {
+			/*nr_size(bits)=w*active_h*8*2(yuv422)
+			 * mtn(bits)=w*active_h*4
+			 * cont(bits)=w*active_h*4 mv(bits)=w*active_h/5*16
+			 * mcinfo(bits)=active_h*16*/
+			di_buf_size =
+				(width * canvas_height) * 6 / 4 + width *
+				canvas_height / 5 + canvas_height;
+			/* 3552320 bytes */
+		} else {
+#ifdef NEW_DI_V1
+			/* 3133440 bytes */
+			di_buf_size = width * canvas_height * 6 / 4;
 #else
-		di_buf_size = width * canvas_height * 5/4;/* 2611200 bytes */
+			/* 2611200 bytes */
+			di_buf_size = width * canvas_height * 5 / 4;
 #endif
-#ifdef D2D3_SUPPORT
-		if (d2d3_enable) {
-			local_buf_num =
-de_devp->mem_size/(di_buf_size+dp_buf_size);
-			dp_mem_start =
-de_devp->mem_start + di_buf_size * local_buf_num;
-		} else
-#endif
-		local_buf_num = de_devp->mem_size/di_buf_size;
+		}
+
+		local_buf_num = de_devp->mem_size / di_buf_size;
+
+		if (post_wr_en && post_wr_surpport) {
+			local_buf_num = (de_devp->mem_size +
+				(width*canvas_height<<2)) /
+				(di_buf_size + (width*canvas_height<<1));
+		}
 
 		local_buf_num_available = local_buf_num;
 		if (local_buf_num > MAX_LOCAL_BUF_NUM)
@@ -2378,10 +2715,10 @@ de_devp->mem_start + di_buf_size * local_buf_num;
 	queue_init(local_buf_num);
 	local_buf_num_valid = local_buf_num;
 	for (i = 0; i < local_buf_num; i++) {
-		di_buf_t *di_buf = &(di_buf_local[i]);
+		struct di_buf_s *di_buf = &(di_buf_local[i]);
 		int ii = USED_LOCAL_BUF_MAX;
 		if ((used_post_buf_index != -1) &&
-(new_keep_last_frame_enable)) {
+		    (new_keep_last_frame_enable)) {
 			for (ii = 0; ii < USED_LOCAL_BUF_MAX; ii++) {
 				if (i == used_local_buf_index[ii]) {
 					di_print("%s skip %d\n", __func__, i);
@@ -2393,50 +2730,43 @@ de_devp->mem_start + di_buf_size * local_buf_num;
 		}
 
 		if (ii >= USED_LOCAL_BUF_MAX) {
-			memset(di_buf, 0, sizeof(di_buf_t));
+			memset(di_buf, 0, sizeof(struct di_buf_s));
 			di_buf->type = VFRAME_TYPE_LOCAL;
 			di_buf->pre_ref_count = 0;
 			di_buf->post_ref_count = 0;
 			if (prog_flag) {
 				di_buf->nr_adr
-= de_devp->mem_start + di_buf_size * i;
+					= de_devp->mem_start + di_buf_size * i;
 				di_buf->canvas_config_flag = 1;
 				di_buf->canvas_config_size
-= (width<<16)|canvas_height;
-#ifdef D2D3_SUPPORT
-				if (d2d3_enable) {
-					di_buf->dp_buf_adr
-= dp_mem_start + (i * dp_buf_size);
-					di_buf->dp_buf_size
-= dp_buf_size;
-				}
-#endif
+					= (width << 16) | canvas_height;
 			} else {
 				di_buf->nr_adr
-= de_devp->mem_start + di_buf_size * i;
+					= de_devp->mem_start + di_buf_size * i;
 				di_buf->mtn_adr
-= de_devp->mem_start + di_buf_size * i + width * canvas_height;
+					= de_devp->mem_start + di_buf_size * i +
+					  width * canvas_height;
 #ifdef NEW_DI_V1
 				di_buf->cnt_adr =
-de_devp->mem_start + di_buf_size * i + (width * canvas_height) * 5/4;
-#endif
-#ifdef MCDI_SUPPORT
-				di_buf->mcvec_adr =
-de_devp->mem_start + di_buf_size * i + (width * canvas_height) * 6/4;
-				di_buf->mcinfo_adr =
-de_devp->mem_start + di_buf_size * i + (width * canvas_height) * 6/4 +
-width *canvas_height/5;
-#endif
+					de_devp->mem_start + di_buf_size * i +
+					(width * canvas_height) * 5 / 4;
+#endif
+
+				if (mcpre_en) {
+					di_buf->mcvec_adr =
+						de_devp->mem_start +
+						di_buf_size * i +
+						(width * canvas_height) * 6 / 4;
+					di_buf->mcinfo_adr =
+						de_devp->mem_start +
+						di_buf_size * i +
+						(width * canvas_height) * 6 /
+						4 +
+						width * canvas_height / 5;
+				}
 				di_buf->canvas_config_flag = 2;
 				di_buf->canvas_config_size
-= (width<<16)|canvas_height;
-#ifdef D2D3_SUPPORT
-				if (d2d3_enable) {
-					di_buf->dp_buf_adr
-= dp_mem_start + (i*dp_buf_size);
-					di_buf->dp_buf_size = dp_buf_size;
-				}
-#endif
+					= (width << 16) | canvas_height;
 			}
 			di_buf->index = i;
 			di_buf->vframe = &(vframe_local[i]);
@@ -2449,10 +2779,19 @@ width *canvas_height/5;
 		}
 	}
 
-	for (i = 0; i < MAX_IN_BUF_NUM; i++) {
-		di_buf_t *di_buf = &(di_buf_in[i]);
+	if (post_wr_en && post_wr_surpport) {
+		di_post_mem = de_devp->mem_start + di_buf_size*local_buf_num;
+		di_post_buf_size = width * canvas_height*2;
+		/* pre buffer must 2 more than post buffer */
+		di_post_stru.di_post_num = local_buf_num - 2;
+	} else {
+		di_post_stru.di_post_num = MAX_POST_BUF_NUM;
+		di_post_buf_size = 0;
+	}
+	for (i = 0; i < di_post_stru.di_post_num; i++) {
+		struct di_buf_s *di_buf = &(di_buf_in[i]);
 		if (di_buf) {
-			memset(di_buf, 0, sizeof(di_buf_t));
+			memset(di_buf, 0, sizeof(struct di_buf_s));
 			di_buf->type = VFRAME_TYPE_IN;
 			di_buf->pre_ref_count = 0;
 			di_buf->post_ref_count = 0;
@@ -2466,10 +2805,10 @@ width *canvas_height/5;
 	}
 
 	for (i = 0; i < MAX_POST_BUF_NUM; i++) {
-		di_buf_t *di_buf = &(di_buf_post[i]);
+		struct di_buf_s *di_buf = &(di_buf_post[i]);
 		if (di_buf) {
 			if (i != used_post_buf_index) {
-				memset(di_buf, 0, sizeof(di_buf_t));
+				memset(di_buf, 0, sizeof(struct di_buf_s));
 				di_buf->type = VFRAME_TYPE_POST;
 				di_buf->index = i;
 				di_buf->vframe = &(vframe_post[i]);
@@ -2485,7 +2824,7 @@ width *canvas_height/5;
 
 static void di_uninit_buf(void)
 {
-	di_buf_t *p = NULL;/* , *ptmp; */
+	struct di_buf_s *p = NULL;/* , *ptmp; */
 	int i, ii = 0;
 	int itmp;
 
@@ -2498,40 +2837,39 @@ static void di_uninit_buf(void)
 	}
 
 	queue_for_each_entry(p, ptmp, QUEUE_DISPLAY, list) {
-		if (p->di_buf[0]->type != VFRAME_TYPE_IN &&
-p->process_fun_index != PROCESS_FUN_NULL) {
-			if (p->index == di_post_stru.cur_disp_index) {
-				used_post_buf_index = p->index;
-				for (i = 0; i < USED_LOCAL_BUF_MAX; i++) {
-					if (p->di_buf_dup_p[i] != NULL) {
-						used_local_buf_index[ii]
-= p->di_buf_dup_p[i]->index;
-						/* prepare
-for recycle the keep buffer*/
-						p->di_buf_dup_p[i]->pre_ref_count = 0;
-						p->di_buf_dup_p[i]->post_ref_count = 0;
-						if (
-is_in_queue(p->di_buf_dup_p[i], p->di_buf_dup_p[i]->queue_index))
-							queue_out(
-p->di_buf_dup_p[i]);
-						ii++;
-						if (
-p->di_buf_dup_p[i]->di_wr_linked_buf)
-							used_local_buf_index[ii] =
-p->di_buf_dup_p[i]->di_wr_linked_buf->index;
-					}
-				}
-				queue_out(p);
-				break;
+	if (p->di_buf[0]->type != VFRAME_TYPE_IN &&
+		(p->process_fun_index != PROCESS_FUN_NULL) &&
+		(ii < USED_LOCAL_BUF_MAX) &&
+		(p->index == di_post_stru.cur_disp_index)) {
+		used_post_buf_index = p->index;
+		for (i = 0; i < USED_LOCAL_BUF_MAX; i++) {
+			if (p->di_buf_dup_p[i] == NULL)
+				continue;
+			used_local_buf_index[ii] =
+				p->di_buf_dup_p[i]->index;
+			/* prepare for recycle
+			 * the keep buffer*/
+			p->di_buf_dup_p[i]->pre_ref_count = 0;
+			p->di_buf_dup_p[i]->post_ref_count = 0;
+			if ((p->di_buf_dup_p[i]->queue_index >= 0) &&
+			(p->di_buf_dup_p[i]->queue_index < QUEUE_NUM)) {
+				if (is_in_queue(p->di_buf_dup_p[i],
+				p->di_buf_dup_p[i]->queue_index))
+					queue_out(p->di_buf_dup_p[i]);
 			}
+			ii++;
+			if (p->di_buf_dup_p[i]->di_wr_linked_buf)
+				used_local_buf_index[ii] =
+				p->di_buf_dup_p[i]->di_wr_linked_buf->index;
 		}
-		if (ii >= USED_LOCAL_BUF_MAX)
-			break;
+		queue_out(p);
+		break;
+	}
 	}
 	if (used_post_buf_index != -1) {
 		pr_info("%s keep cur di_buf %d (%d %d %d)\n",
-__func__, used_post_buf_index, used_local_buf_index[0],
-used_local_buf_index[1], used_local_buf_index[2]);
+			__func__, used_post_buf_index, used_local_buf_index[0],
+			used_local_buf_index[1], used_local_buf_index[2]);
 	}
 #ifdef USE_LIST
 	list_for_each_entry_safe(p, ptmp, &local_free_list_head, list) {
@@ -2558,18 +2896,28 @@ used_local_buf_index[1], used_local_buf_index[2]);
 #else
 	queue_init(0);
 #endif
-	for (i = 0; i < MAX_IN_BUF_NUM; i++)
-		vframe_in[i] = NULL;
+	for (i = 0; i < MAX_IN_BUF_NUM; i++) {
+		if (vframe_in[i]) {
+			vf_put(vframe_in[i], VFM_NAME);
+			vf_notify_provider(
+				VFM_NAME, VFRAME_EVENT_RECEIVER_PUT, NULL);
+			vframe_in[i] = NULL;
+		}
+	}
 
 	di_pre_stru.pre_de_process_done = 0;
 	di_pre_stru.pre_de_busy = 0;
-
+	if (post_wr_en && post_wr_surpport) {
+		di_post_stru.cur_post_buf = NULL;
+		di_post_stru.post_de_busy = 0;
+		di_post_stru.de_post_process_done = 0;
+	}
 }
 
 static void log_buffer_state(unsigned char *tag)
 {
-	if (di_log_flag&DI_LOG_BUFFER_STATE) {
-		di_buf_t *p = NULL;/* , *ptmp; */
+	if (di_log_flag & DI_LOG_BUFFER_STATE) {
+		struct di_buf_s *p = NULL;/* , *ptmp; */
 		int itmp;
 		int in_free = 0;
 		int local_free = 0;
@@ -2595,7 +2943,6 @@ static void log_buffer_state(unsigned char *tag)
 
 			if (p->di_buf[1])
 				post_ready_ext++;
-
 		}
 		queue_for_each_entry(p, ptmp, QUEUE_DISPLAY, list) {
 			display++;
@@ -2604,7 +2951,6 @@ static void log_buffer_state(unsigned char *tag)
 
 			if (p->di_buf[1])
 				display_ext++;
-
 		}
 		recycle = list_count(QUEUE_RECYCLE);
 
@@ -2620,7 +2966,7 @@ static void log_buffer_state(unsigned char *tag)
 
 		if (buf_state_log_start) {
 			di_print(
-"[%s]i %d, i_f %d/%d, l_f %d/%d, pre_r %d, post_f %d/%d,",
+		"[%s]i %d, i_f %d/%d, l_f %d/%d, pre_r %d, post_f %d/%d,",
 				tag,
 				provider_vframe_level,
 				in_free, MAX_IN_BUF_NUM,
@@ -2628,7 +2974,7 @@ static void log_buffer_state(unsigned char *tag)
 				pre_ready,
 				post_free, MAX_POST_BUF_NUM);
 			di_print(
-"post_r (%d:%d), disp (%d:%d),rec %d, di_i %d, di_w %d\n",
+		"post_r (%d:%d), disp (%d:%d),rec %d, di_i %d, di_w %d\n",
 				post_ready, post_ready_ext,
 				display, display_ext,
 				recycle,
@@ -2636,140 +2982,158 @@ static void log_buffer_state(unsigned char *tag)
 				);
 		}
 		di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
-
 	}
-
-
 }
 
-static void dump_di_buf(di_buf_t *di_buf)
-{
-	pr_info("di_buf %p vframe %p:\n", di_buf, di_buf->vframe);
-	pr_info("index %d, post_proc_flag %d, new_format_flag %d, type %d, seq %d, pre_ref_count %d, post_ref_count %d, queue_index %d pulldown_mode %d process_fun_index %d\n",
-di_buf->index, di_buf->post_proc_flag, di_buf->new_format_flag, di_buf->type,
-di_buf->seq, di_buf->pre_ref_count, di_buf->post_ref_count,
-di_buf->queue_index, di_buf->pulldown_mode, di_buf->process_fun_index);
-	pr_info("di_buf: %p, %p, di_buf_dup_p: %p, %p, %p, %p, %p\n",
-di_buf->di_buf[0], di_buf->di_buf[1], di_buf->di_buf_dup_p[0],
-di_buf->di_buf_dup_p[1], di_buf->di_buf_dup_p[2],
-di_buf->di_buf_dup_p[3], di_buf->di_buf_dup_p[4]);
-	pr_info("nr_adr 0x%lx, nr_canvas_idx 0x%x, mtn_adr 0x%lx, mtn_canvas_idx 0x%x",
-di_buf->nr_adr, di_buf->nr_canvas_idx, di_buf->mtn_adr, di_buf->mtn_canvas_idx);
+static void dump_di_buf(struct di_buf_s *di_buf)
+{
+	pr_dbg("di_buf %p vframe %p:\n", di_buf, di_buf->vframe);
+	pr_dbg("index %d, post_proc_flag %d, new_format_flag %d, type %d,",
+		di_buf->index, di_buf->post_proc_flag,
+		di_buf->new_format_flag, di_buf->type);
+	pr_dbg("seq %d, pre_ref_count %d,post_ref_count %d, queue_index %d,",
+		di_buf->seq, di_buf->pre_ref_count, di_buf->post_ref_count,
+		di_buf->queue_index);
+	pr_dbg("pulldown_mode %d process_fun_index %d\n",
+		di_buf->pulldown_mode, di_buf->process_fun_index);
+	pr_dbg("di_buf: %p, %p, di_buf_dup_p: %p, %p, %p, %p, %p\n",
+		di_buf->di_buf[0], di_buf->di_buf[1], di_buf->di_buf_dup_p[0],
+		di_buf->di_buf_dup_p[1], di_buf->di_buf_dup_p[2],
+		di_buf->di_buf_dup_p[3], di_buf->di_buf_dup_p[4]);
+	pr_dbg(
+	"nr_adr 0x%lx, nr_canvas_idx 0x%x, mtn_adr 0x%lx, mtn_canvas_idx 0x%x",
+		di_buf->nr_adr, di_buf->nr_canvas_idx, di_buf->mtn_adr,
+		di_buf->mtn_canvas_idx);
 #ifdef NEW_DI_V1
-	pr_info("cnt_adr 0x%lx, cnt_canvas_idx 0x%x\n",
+	pr_dbg("cnt_adr 0x%lx, cnt_canvas_idx 0x%x\n",
 		di_buf->cnt_adr, di_buf->cnt_canvas_idx);
 #endif
+	pr_dbg("di_cnt %d, priveated %u.\n",
+			atomic_read(&di_buf->di_cnt), di_buf->privated);
 }
 
 static void dump_pool(int index)
 {
-
 	int j;
 	queue_t *q = &queue[index];
-	pr_info("queue[%d]: in_idx %d, out_idx %d, num %d, type %d\n",
-index, q->in_idx, q->out_idx, q->num, q->type);
+
+	pr_dbg("queue[%d]: in_idx %d, out_idx %d, num %d, type %d\n",
+		index, q->in_idx, q->out_idx, q->num, q->type);
 	for (j = 0; j < MAX_QUEUE_POOL_SIZE; j++) {
-		pr_info("0x%x ", q->pool[j]);
-		if (((j+1)%16) == 0)
-			pr_info("\n");
+		pr_dbg("0x%x ", q->pool[j]);
+		if (((j + 1) % 16) == 0)
+			pr_debug("\n");
 	}
-	pr_info("\n");
+	pr_debug("\n");
 }
 
 static void dump_vframe(vframe_t *vf)
 {
-	pr_info("vframe %p:\n", vf);
-	pr_info("index %d, type 0x%x, type_backup 0x%x, blend_mode %d, duration %d, duration_pulldown %d, pts %d, flag 0x%x\n",
-vf->index, vf->type, vf->type_backup, vf->blend_mode,
-vf->duration, vf->duration_pulldown, vf->pts, vf->flag);
-	pr_info("canvas0Addr 0x%x, canvas1Addr 0x%x, bufWidth %d, width %d, height %d, ratio_control 0x%x, orientation 0x%x, source_type %d, phase %d, soruce_mode %d, sig_fmt %d\n",
-vf->canvas0Addr, vf->canvas1Addr, vf->bufWidth, vf->width,
-vf->height, vf->ratio_control, vf->orientation,
-vf->source_type, vf->phase, vf->source_mode, vf->sig_fmt);
-	pr_info("trans_fmt 0x%x, left_eye(%d %d %d %d), right_eye(%d %d %d %d)\n",
-vf->trans_fmt, vf->left_eye.start_x, vf->left_eye.start_y,
-vf->left_eye.width, vf->left_eye.height,
-vf->right_eye.start_x, vf->right_eye.start_y,
-vf->right_eye.width, vf->right_eye.height);
-	pr_info("mode_3d_enable %d, orientation %u,",
-			vf->mode_3d_enable, vf->orientation);
-	pr_info("early_process_fun 0x%p, process_fun 0x%p, private_data %p\n",
-			vf->early_process_fun,
-			vf->process_fun, vf->private_data);
-	pr_info("pixel_ratio %d list %p\n",
-			vf->pixel_ratio, &vf->list);
-
-}
-
-static void print_di_buf(di_buf_t *di_buf, int format)
+	pr_dbg("vframe %p:\n", vf);
+	pr_dbg("index %d, type 0x%x, type_backup 0x%x, blend_mode %d bitdepth %d\n",
+		vf->index, vf->type, vf->type_backup,
+		vf->blend_mode, (vf->bitdepth&BITDEPTH_Y10)?10:8);
+	pr_dbg("duration %d, duration_pulldown %d, pts %d, flag 0x%x\n",
+		vf->duration, vf->duration_pulldown, vf->pts, vf->flag);
+	pr_dbg("canvas0Addr 0x%x, canvas1Addr 0x%x, bufWidth %d\n",
+		vf->canvas0Addr, vf->canvas1Addr, vf->bufWidth);
+	pr_dbg("width %d, height %d, ratio_control 0x%x, orientation 0x%x\n",
+		vf->width, vf->height, vf->ratio_control, vf->orientation);
+	pr_dbg("source_type %d, phase %d, soruce_mode %d, sig_fmt %d\n",
+		vf->source_type, vf->phase, vf->source_mode, vf->sig_fmt);
+	pr_dbg(
+		"trans_fmt 0x%x, lefteye(%d %d %d %d), righteye(%d %d %d %d)\n",
+		vf->trans_fmt, vf->left_eye.start_x, vf->left_eye.start_y,
+		vf->left_eye.width, vf->left_eye.height,
+		vf->right_eye.start_x, vf->right_eye.start_y,
+		vf->right_eye.width, vf->right_eye.height);
+	pr_dbg("mode_3d_enable %d, use_cnt %d,",
+		vf->mode_3d_enable, atomic_read(&vf->use_cnt));
+	pr_dbg("early_process_fun 0x%p, process_fun 0x%p, private_data %p\n",
+		vf->early_process_fun,
+		vf->process_fun, vf->private_data);
+	pr_dbg("pixel_ratio %d list %p\n",
+		vf->pixel_ratio, &vf->list);
+}
+
+static void print_di_buf(struct di_buf_s *di_buf, int format)
 {
 	if (!di_buf)
 		return;
 	if (format == 1) {
-		pr_info("\t+index %d, 0x%p, type %d, vframetype 0x%x, trans_fmt %u\n",
-				di_buf->index,
-				di_buf,
-				di_buf->type,
-				di_buf->vframe->type,
-				di_buf->vframe->trans_fmt);
+		pr_info(
+		"\t+index %d, 0x%p, type %d, vframetype 0x%x, trans_fmt %u,bitdepath %d\n",
+			di_buf->index,
+			di_buf,
+			di_buf->type,
+			di_buf->vframe->type,
+			di_buf->vframe->trans_fmt,
+			di_buf->vframe->bitdepth);
 		if (di_buf->di_wr_linked_buf) {
 			pr_info("\tlinked  +index %d, 0x%p, type %d\n",
-					di_buf->di_wr_linked_buf->index,
-					di_buf->di_wr_linked_buf,
-					di_buf->di_wr_linked_buf->type);
+				di_buf->di_wr_linked_buf->index,
+				di_buf->di_wr_linked_buf,
+				di_buf->di_wr_linked_buf->type);
 		}
 	} else if (format == 2) {
-		pr_info("index %d, 0x%p(vframe 0x%p), type %d,",
-				di_buf->index, di_buf,
-				di_buf->vframe, di_buf->type);
-		pr_info("vframetype 0x%x, trans_fmt %u,duration %d pts %d\n",
-				di_buf->vframe->type,
-				di_buf->vframe->trans_fmt,
-				di_buf->vframe->duration,
-				di_buf->vframe->pts);
+		pr_info("index %d, 0x%p(vframe 0x%p), type %d\n",
+			di_buf->index, di_buf,
+			di_buf->vframe, di_buf->type);
+		pr_info("vframetype 0x%x, trans_fmt %u,duration %d pts %d,bitdepth %d\n",
+			di_buf->vframe->type,
+			di_buf->vframe->trans_fmt,
+			di_buf->vframe->duration,
+			di_buf->vframe->pts,
+			di_buf->vframe->bitdepth);
 		if (di_buf->di_wr_linked_buf) {
 			pr_info("linked index %d, 0x%p, type %d\n",
-					di_buf->di_wr_linked_buf->index,
-					di_buf->di_wr_linked_buf,
-					di_buf->di_wr_linked_buf->type);
+				di_buf->di_wr_linked_buf->index,
+				di_buf->di_wr_linked_buf,
+				di_buf->di_wr_linked_buf->type);
 		}
 	}
-
 }
 
 static void dump_state(void)
 {
-	di_buf_t *p = NULL;/* , *ptmp; */
+	struct di_buf_s *p = NULL;/* , *ptmp; */
 	int itmp;
 	int i;
+
 	dump_state_flag = 1;
 	pr_info("version %s, provider vframe level %d,",
-			version_s, provider_vframe_level);
+		version_s, provider_vframe_level);
 	pr_info("init_flag %d, is_bypass %d, receiver_is_amvideo %d\n",
-			init_flag, is_bypass(NULL), receiver_is_amvideo);
+		init_flag, is_bypass(NULL), receiver_is_amvideo);
 	pr_info("recovery_flag = %d, recovery_log_reason=%d, di_blocking=%d",
-			recovery_flag, recovery_log_reason, di_blocking);
+		recovery_flag, recovery_log_reason, di_blocking);
 	pr_info("recovery_log_queue_idx=%d, recovery_log_di_buf=0x%p\n",
-			recovery_log_queue_idx, recovery_log_di_buf);
+		recovery_log_queue_idx, recovery_log_di_buf);
 	pr_info("new_keep_last_frame_enable %d,", new_keep_last_frame_enable);
 	pr_info("used_post_buf_index %d(0x%p),", used_post_buf_index,
-(used_post_buf_index ==  -1)?NULL : &(di_buf_post[used_post_buf_index]));
-		pr_info("used_local_buf_index:\n");
+		(used_post_buf_index ==
+		 -1) ? NULL : &(di_buf_post[used_post_buf_index]));
+	pr_info("used_local_buf_index:\n");
 	for (i = 0; i < USED_LOCAL_BUF_MAX; i++) {
 		int tmp = used_local_buf_index[i];
 		pr_info("%d(0x%p) ", tmp,
-(tmp ==  -1)?NULL :  &(di_buf_local[tmp]));
+			(tmp == -1) ? NULL :  &(di_buf_local[tmp]));
 	}
 
 	pr_info("\nin_free_list (max %d):\n", MAX_IN_BUF_NUM);
 	queue_for_each_entry(p, ptmp, QUEUE_IN_FREE, list) {
 		pr_info("index %2d, 0x%p, type %d\n",
-p->index, p, p->type);
+			p->index, p, p->type);
 	}
 	pr_info("local_free_list (max %d):\n", local_buf_num);
 	queue_for_each_entry(p, ptmp, QUEUE_LOCAL_FREE, list) {
 		pr_info("index %2d, 0x%p, type %d\n", p->index, p, p->type);
 	}
+
+	pr_info("post_doing_list:\n");
+	queue_for_each_entry(p, ptmp, QUEUE_POST_DOING, list) {
+		print_di_buf(p, 2);
+	}
 	pr_info("pre_ready_list:\n");
 	queue_for_each_entry(p, ptmp, QUEUE_PRE_READY, list) {
 		print_di_buf(p, 2);
@@ -2777,7 +3141,7 @@ p->index, p, p->type);
 	pr_info("post_free_list (max %d):\n", MAX_POST_BUF_NUM);
 	queue_for_each_entry(p, ptmp, QUEUE_POST_FREE, list) {
 		pr_info("index %2d, 0x%p, type %d, vframetype 0x%x\n",
-p->index, p, p->type , p->vframe->type);
+			p->index, p, p->type, p->vframe->type);
 	}
 	pr_info("post_ready_list:\n");
 	queue_for_each_entry(p, ptmp, QUEUE_POST_READY, list) {
@@ -2800,7 +3164,8 @@ p->index, p, p->type , p->vframe->type);
 			p->pre_ref_count,
 			p->post_ref_count);
 		if (p->di_wr_linked_buf) {
-			pr_info("linked index %2d, 0x%p, type %d pre_ref_count %d post_ref_count %d\n",
+			pr_info(
+	"linked index %2d, 0x%p, type %d pre_ref_count %d post_ref_count %d\n",
 				p->di_wr_linked_buf->index,
 				p->di_wr_linked_buf,
 				p->di_wr_linked_buf->type,
@@ -2813,53 +3178,58 @@ p->index, p, p->type , p->vframe->type);
 			di_pre_stru.di_inp_buf->index,
 			di_pre_stru.di_inp_buf,
 			di_pre_stru.di_inp_buf->type);
-	} else
+	} else {
 		pr_info("di_inp_buf: NULL\n");
+	}
 	if (di_pre_stru.di_wr_buf) {
 		pr_info("di_wr_buf:index %d, 0x%p, type %d\n",
 			di_pre_stru.di_wr_buf->index,
 			di_pre_stru.di_wr_buf,
 			di_pre_stru.di_wr_buf->type);
-	} else
+	} else {
 		pr_info("di_wr_buf: NULL\n");
+	}
 	dump_di_pre_stru();
+	dump_di_post_stru();
 	pr_info("vframe_in[]:");
+
 	for (i = 0; i < MAX_IN_BUF_NUM; i++)
 		pr_info("0x%p ", vframe_in[i]);
 
 	pr_info("\n");
 	pr_info("vf_peek()=>0x%p,di_process_cnt = %d\n",
-			vf_peek(VFM_NAME), di_process_cnt);
+		vf_peek(VFM_NAME), di_process_cnt);
 	pr_info("video_peek_cnt = %d,force_trig_cnt = %d\n",
-			video_peek_cnt, force_trig_cnt);
+		video_peek_cnt, force_trig_cnt);
 	dump_state_flag = 0;
-
 }
 
-static unsigned char check_di_buf(di_buf_t *di_buf, int reason)
+static unsigned char check_di_buf(struct di_buf_s *di_buf, int reason)
 {
 	int error = 0;
+
 	if (di_buf == NULL) {
-		pr_info("%s: Error %d, di_buf is NULL\n", __func__, reason);
+		pr_dbg("%s: Error %d, di_buf is NULL\n", __func__, reason);
 		return 1;
 	} else {
 		if (di_buf->type == VFRAME_TYPE_IN) {
 			if (di_buf->vframe != &vframe_in_dup[di_buf->index])
 				error = 1;
 		} else if (di_buf->type == VFRAME_TYPE_LOCAL) {
-				if (di_buf->vframe !=
-&vframe_local[di_buf->index])
-					error = 1;
+			if (di_buf->vframe !=
+			    &vframe_local[di_buf->index])
+				error = 1;
 		} else if (di_buf->type == VFRAME_TYPE_POST) {
 			if (di_buf->vframe != &vframe_post[di_buf->index])
 				error = 1;
 		} else {
-				error = 1;
+			error = 1;
 		}
 
 		if (error) {
-			pr_info(
-"%s: Error %d, di_buf wrong\n", __func__, reason);
+			pr_dbg(
+				"%s: Error %d, di_buf wrong\n", __func__,
+				reason);
 			if (recovery_flag == 0)
 				recovery_log_reason = reason;
 			recovery_flag++;
@@ -2872,115 +3242,131 @@ static unsigned char check_di_buf(di_buf_t *di_buf, int reason)
 
 
 /*
-*  di pre process
-*/
-#ifdef MCDI_SUPPORT
+ *  di pre process
+ */
 static void
-config_di_mcinford_mif(DI_MC_MIF_t *di_mcinford_mif,
-						di_buf_t *di_buf)
+config_di_mcinford_mif(struct DI_MC_MIF_s *di_mcinford_mif,
+		       struct di_buf_s *di_buf)
 {
 	if (di_buf) {
-		di_mcinford_mif->size_x = di_buf->vframe->height/4 - 1;
+		di_mcinford_mif->size_x = di_buf->vframe->height / 4 - 1;
 		di_mcinford_mif->size_y = 1;
 		di_mcinford_mif->canvas_num = di_buf->mcinfo_canvas_idx;
 	}
 }
 static void
-config_di_pre_mc_mif(DI_MC_MIF_t *di_mcinfo_mif,
-					DI_MC_MIF_t *di_mcvec_mif,
-					di_buf_t *di_buf)
+config_di_pre_mc_mif(struct DI_MC_MIF_s *di_mcinfo_mif,
+		     struct DI_MC_MIF_s *di_mcvec_mif,
+		     struct di_buf_s *di_buf)
 {
 	if (di_buf) {
-		di_mcinfo_mif->size_x = di_buf->vframe->height/4 - 1;
+		di_mcinfo_mif->size_x = di_buf->vframe->height / 4 - 1;
 		di_mcinfo_mif->size_y = 1;
 		di_mcinfo_mif->canvas_num = di_buf->mcinfo_canvas_idx;
 
-		di_mcvec_mif->size_x = (di_buf->vframe->width+4)/5 - 1;
-		di_mcvec_mif->size_y = di_buf->vframe->height/2 - 1;
+		di_mcvec_mif->size_x = (di_buf->vframe->width + 4) / 5 - 1;
+		di_mcvec_mif->size_y = di_buf->vframe->height / 2 - 1;
 		di_mcvec_mif->canvas_num = di_buf->mcvec_canvas_idx;
 	}
 }
-#endif
 #ifdef NEW_DI_V1
-static void config_di_cnt_mif(DI_SIM_MIF_t *di_cnt_mif, di_buf_t *di_buf)
+static void config_di_cnt_mif(struct DI_SIM_MIF_s *di_cnt_mif,
+	struct di_buf_s *di_buf)
 {
 	if (di_buf) {
-		di_cnt_mif->start_x		= 0;
-		di_cnt_mif->end_x		= di_buf->vframe->width - 1;
-		di_cnt_mif->start_y		= 0;
-		di_cnt_mif->end_y		= di_buf->vframe->height/2 - 1;
-		di_cnt_mif->canvas_num	= di_buf->cnt_canvas_idx;
+		di_cnt_mif->start_x = 0;
+		di_cnt_mif->end_x = di_buf->vframe->width - 1;
+		di_cnt_mif->start_y = 0;
+		di_cnt_mif->end_y = di_buf->vframe->height / 2 - 1;
+		di_cnt_mif->canvas_num = di_buf->cnt_canvas_idx;
 	}
 }
 #endif
 
 static void
-config_di_wr_mif(DI_SIM_MIF_t *di_nrwr_mif,
-				DI_SIM_MIF_t *di_mtnwr_mif,
-				di_buf_t *di_buf,
-				vframe_t *in_vframe)
+config_di_wr_mif(struct DI_SIM_MIF_s *di_nrwr_mif,
+		 struct DI_SIM_MIF_s *di_mtnwr_mif,
+		 struct di_buf_s *di_buf,
+		 vframe_t *in_vframe)
 {
 	di_nrwr_mif->canvas_num = di_buf->nr_canvas_idx;
-	di_nrwr_mif->start_x	= 0;
-	di_nrwr_mif->end_x		= in_vframe->width - 1;
-	di_nrwr_mif->start_y	= 0;
+	di_nrwr_mif->start_x = 0;
+	di_nrwr_mif->end_x = in_vframe->width - 1;
+	di_nrwr_mif->start_y = 0;
+	if (di_buf->vframe->bitdepth & BITDEPTH_Y10)
+		di_nrwr_mif->bit_mode =
+			(di_buf->vframe->bitdepth & FULL_PACK_422_MODE)?3:1;
+	else
+		di_nrwr_mif->bit_mode = 0;
 	if (di_pre_stru.prog_proc_type == 0)
-		di_nrwr_mif->end_y = in_vframe->height/2 - 1;
+		di_nrwr_mif->end_y = in_vframe->height / 2 - 1;
 	else
 		di_nrwr_mif->end_y = in_vframe->height - 1;
 	if (di_pre_stru.prog_proc_type == 0) {
 		di_mtnwr_mif->start_x = 0;
-		di_mtnwr_mif->end_x	= in_vframe->width - 1;
+		di_mtnwr_mif->end_x = in_vframe->width - 1;
 		di_mtnwr_mif->start_y = 0;
-		di_mtnwr_mif->end_y	= in_vframe->height/2 - 1;
+		di_mtnwr_mif->end_y = in_vframe->height / 2 - 1;
 		di_mtnwr_mif->canvas_num = di_buf->mtn_canvas_idx;
 	}
 }
 
-static void config_di_mif(DI_MIF_t *di_mif, di_buf_t *di_buf)
+static void config_di_mif(struct DI_MIF_s *di_mif, struct di_buf_s *di_buf)
 {
 	if (di_buf == NULL)
 		return;
 	di_mif->canvas0_addr0 =
-di_buf->vframe->canvas0Addr & 0xff;
+		di_buf->vframe->canvas0Addr & 0xff;
 	di_mif->canvas0_addr1 =
-(di_buf->vframe->canvas0Addr>>8) & 0xff;
+		(di_buf->vframe->canvas0Addr >> 8) & 0xff;
 	di_mif->canvas0_addr2 =
-(di_buf->vframe->canvas0Addr>>16) & 0xff;
-
+		(di_buf->vframe->canvas0Addr >> 16) & 0xff;
+
+	if (di_buf->vframe->bitdepth & BITDEPTH_Y10) {
+		if (di_buf->vframe->type & VIDTYPE_VIU_444)
+			di_mif->bit_mode =
+			(di_buf->vframe->bitdepth & FULL_PACK_422_MODE)?3:2;
+		else if (di_buf->vframe->type & VIDTYPE_VIU_422)
+			di_mif->bit_mode =
+			(di_buf->vframe->bitdepth & FULL_PACK_422_MODE)?3:1;
+	} else {
+		di_mif->bit_mode = 0;
+	}
 	if (di_buf->vframe->type & VIDTYPE_VIU_422) {
 		/* from vdin or local vframe */
 		if ((!is_progressive(di_buf->vframe))
-|| (di_pre_stru.prog_proc_type)
-			) {
+		    || (di_pre_stru.prog_proc_type)
+		    ) {
 			di_mif->video_mode = 0;
 			di_mif->set_separate_en = 0;
 			di_mif->src_field_mode = 0;
 			di_mif->output_field_num = 0;
 			di_mif->luma_x_start0 = 0;
-			di_mif->luma_x_end0	=
-di_buf->vframe->width - 1;
+			di_mif->luma_x_end0 =
+				di_buf->vframe->width - 1;
 			di_mif->luma_y_start0 = 0;
 			if (di_pre_stru.prog_proc_type)
-				di_mif->luma_y_end0	=
-di_buf->vframe->height - 1;
+				di_mif->luma_y_end0 =
+					di_buf->vframe->height - 1;
 			else
-				di_mif->luma_y_end0	=
-di_buf->vframe->height/2 - 1;
-			di_mif->chroma_x_start0	= 0;
-			di_mif->chroma_x_end0	= 0;
-			di_mif->chroma_y_start0	= 0;
-			di_mif->chroma_y_end0	= 0;
+				di_mif->luma_y_end0 =
+					di_buf->vframe->height / 2 - 1;
+			di_mif->chroma_x_start0 = 0;
+			di_mif->chroma_x_end0 = 0;
+			di_mif->chroma_y_start0 = 0;
+			di_mif->chroma_y_end0 = 0;
 			di_mif->canvas0_addr0 =
-di_buf->vframe->canvas0Addr & 0xff;
+				di_buf->vframe->canvas0Addr & 0xff;
 			di_mif->canvas0_addr1 =
-(di_buf->vframe->canvas0Addr>>8) & 0xff;
+				(di_buf->vframe->canvas0Addr >> 8) & 0xff;
 			di_mif->canvas0_addr2 =
-(di_buf->vframe->canvas0Addr>>16) & 0xff;
+				(di_buf->vframe->canvas0Addr >> 16) & 0xff;
 		}
 	} else {
-		/* from decoder */
-		di_mif->video_mode = 0;
+		if (di_buf->vframe->type & VIDTYPE_VIU_444)
+			di_mif->video_mode = 1;
+		else
+			di_mif->video_mode = 0;
 		if (di_buf->vframe->type & VIDTYPE_VIU_NV21)
 			di_mif->set_separate_en = 2;
 		else
@@ -2988,243 +3374,267 @@ di_buf->vframe->canvas0Addr & 0xff;
 
 
 		if (is_progressive(di_buf->vframe) &&
-(di_pre_stru.prog_proc_type)) {
+		    (di_pre_stru.prog_proc_type)) {
 			di_mif->src_field_mode = 0;
-			di_mif->output_field_num = 0;	/* top */
-			di_mif->luma_x_start0	= 0;
-			di_mif->luma_x_end0	=
-di_buf->vframe->width - 1;
-			di_mif->luma_y_start0	= 0;
-			di_mif->luma_y_end0	=
-di_buf->vframe->height - 1;
-			di_mif->chroma_x_start0		= 0;
-			di_mif->chroma_x_end0	=
-di_buf->vframe->width/2 - 1;
-			di_mif->chroma_y_start0		= 0;
+			di_mif->output_field_num = 0; /* top */
+			di_mif->luma_x_start0 = 0;
+			di_mif->luma_x_end0 =
+				di_buf->vframe->width - 1;
+			di_mif->luma_y_start0 = 0;
+			di_mif->luma_y_end0 =
+				di_buf->vframe->height - 1;
+			di_mif->chroma_x_start0 = 0;
+			di_mif->chroma_x_end0 =
+				di_buf->vframe->width / 2 - 1;
+			di_mif->chroma_y_start0 = 0;
 			di_mif->chroma_y_end0 =
-di_buf->vframe->height/2 - 1;
+				di_buf->vframe->height / 2 - 1;
 		} else {
+			di_mif->src_prog = di_pre_stru.cur_prog_flag;
 			di_mif->src_field_mode = 1;
 			if (
-(di_buf->vframe->type & VIDTYPE_TYPEMASK) == VIDTYPE_INTERLACE_TOP) {
+				(di_buf->vframe->type & VIDTYPE_TYPEMASK) ==
+				VIDTYPE_INTERLACE_TOP) {
 				di_mif->output_field_num = 0; /* top */
-				di_mif->luma_x_start0	= 0;
-				di_mif->luma_x_end0	=
-di_buf->vframe->width - 1;
-				di_mif->luma_y_start0	= 0;
+				di_mif->luma_x_start0 = 0;
+				di_mif->luma_x_end0 =
+					di_buf->vframe->width - 1;
+				di_mif->luma_y_start0 = 0;
 				di_mif->luma_y_end0 =
-di_buf->vframe->height - 2;
-				di_mif->chroma_x_start0		= 0;
+					di_buf->vframe->height - 2;
+				di_mif->chroma_x_start0 = 0;
 				di_mif->chroma_x_end0 =
-di_buf->vframe->width/2 - 1;
-				di_mif->chroma_y_start0		= 0;
+					di_buf->vframe->width / 2 - 1;
+				di_mif->chroma_y_start0 = 0;
 				di_mif->chroma_y_end0 =
-di_buf->vframe->height/2 - 2;
+					di_buf->vframe->height / 2 - 1;
 			} else {
 				di_mif->output_field_num = 1;
 				/* bottom */
-				di_mif->luma_x_start0	= 0;
+				di_mif->luma_x_start0 = 0;
 				di_mif->luma_x_end0 =
-di_buf->vframe->width - 1;
-				di_mif->luma_y_start0	= 1;
-				di_mif->luma_y_end0	=
-di_buf->vframe->height - 1;
-				di_mif->chroma_x_start0		= 0;
+					di_buf->vframe->width - 1;
+				di_mif->luma_y_start0 = 1;
+				di_mif->luma_y_end0 =
+					di_buf->vframe->height - 1;
+				di_mif->chroma_x_start0 = 0;
 				di_mif->chroma_x_end0 =
-di_buf->vframe->width/2 - 1;
-				di_mif->chroma_y_start0		= 1;
+					di_buf->vframe->width / 2 - 1;
+				di_mif->chroma_y_start0 = 0;
 				di_mif->chroma_y_end0 =
-di_buf->vframe->height/2 - 1;
+					di_buf->vframe->height / 2 - 1;
 			}
 		}
 	}
-
 }
 
 static void pre_de_process(void)
 {
 	int chan2_field_num = 1;
-	int canvases_idex = di_pre_stru.field_count_for_cont%2;
+	int canvases_idex = di_pre_stru.field_count_for_cont % 2;
+
 #ifdef NEW_DI_V1
 	int cont_rd = 1;
 #endif
-#ifdef MCDI_SUPPORT
 	unsigned int blkhsize = 0;
-#endif
-#ifdef DI_DEBUG
 	di_print("%s: start\n", __func__);
-#endif
 	di_pre_stru.pre_de_busy = 1;
 	di_pre_stru.pre_de_busy_timer_count = 0;
 
 	config_di_mif(&di_pre_stru.di_inp_mif, di_pre_stru.di_inp_buf);
-	/* pr_info("set_separate_en=%d vframe->type %d\n",
-di_pre_stru.di_inp_mif.set_separate_en,
-di_pre_stru.di_inp_buf->vframe->type); */
+	/* pr_dbg("set_separate_en=%d vframe->type %d\n",
+	 * di_pre_stru.di_inp_mif.set_separate_en,
+	 * di_pre_stru.di_inp_buf->vframe->type); */
 #ifdef DI_USE_FIXED_CANVAS_IDX
 	if ((di_pre_stru.di_mem_buf_dup_p != NULL &&
-di_pre_stru.di_mem_buf_dup_p != di_pre_stru.di_inp_buf)) {
+	     di_pre_stru.di_mem_buf_dup_p != di_pre_stru.di_inp_buf)) {
 		config_canvas_idx(di_pre_stru.di_mem_buf_dup_p,
-di_pre_idx[canvases_idex][0], -1);
+			di_pre_idx[canvases_idex][0], -1);
 #ifdef NEW_DI_V1
 		config_cnt_canvas_idx(di_pre_stru.di_mem_buf_dup_p,
-di_pre_idx[canvases_idex][1]);
+			di_pre_idx[canvases_idex][1]);
 #endif
 	}
 	if (di_pre_stru.di_chan2_buf_dup_p != NULL) {
 		config_canvas_idx(di_pre_stru.di_chan2_buf_dup_p,
-di_pre_idx[canvases_idex][2], -1);
+			di_pre_idx[canvases_idex][2], -1);
 #ifdef NEW_DI_V1
 		config_cnt_canvas_idx(di_pre_stru.di_chan2_buf_dup_p,
-di_pre_idx[canvases_idex][3]);
+			di_pre_idx[canvases_idex][3]);
 #endif
 	}
 	config_canvas_idx(di_pre_stru.di_wr_buf,
-di_pre_idx[canvases_idex][4], di_pre_idx[canvases_idex][5]);
+		di_pre_idx[canvases_idex][4], di_pre_idx[canvases_idex][5]);
 #ifdef NEW_DI_V1
 	config_cnt_canvas_idx(di_pre_stru.di_wr_buf,
-					di_pre_idx[canvases_idex][6]);
-#endif
-#ifdef MCDI_SUPPORT
-if (di_pre_stru.di_chan2_buf_dup_p != NULL)
-	config_mcinfo_canvas_idx(di_pre_stru.di_chan2_buf_dup_p,
-		di_pre_idx[canvases_idex][7]);
-	config_mcinfo_canvas_idx(di_pre_stru.di_wr_buf,
-					di_pre_idx[canvases_idex][8]);
-	config_mcvec_canvas_idx(di_pre_stru.di_wr_buf,
-					di_pre_idx[canvases_idex][9]);
+		di_pre_idx[canvases_idex][6]);
 #endif
+	if (mcpre_en) {
+		if (di_pre_stru.di_chan2_buf_dup_p != NULL)
+			config_mcinfo_canvas_idx(di_pre_stru.di_chan2_buf_dup_p,
+				di_pre_idx[canvases_idex][7]);
+		config_mcinfo_canvas_idx(di_pre_stru.di_wr_buf,
+			di_pre_idx[canvases_idex][8]);
+		config_mcvec_canvas_idx(di_pre_stru.di_wr_buf,
+			di_pre_idx[canvases_idex][9]);
+	}
 #endif
 	config_di_mif(&di_pre_stru.di_mem_mif, di_pre_stru.di_mem_buf_dup_p);
 	config_di_mif(&di_pre_stru.di_chan2_mif,
-di_pre_stru.di_chan2_buf_dup_p);
+		di_pre_stru.di_chan2_buf_dup_p);
 	config_di_wr_mif(&di_pre_stru.di_nrwr_mif, &di_pre_stru.di_mtnwr_mif,
 		di_pre_stru.di_wr_buf, di_pre_stru.di_inp_buf->vframe);
+
 #ifdef NEW_DI_V1
 	config_di_cnt_mif(&di_pre_stru.di_contp2rd_mif,
-di_pre_stru.di_mem_buf_dup_p);
+		di_pre_stru.di_mem_buf_dup_p);
 	config_di_cnt_mif(&di_pre_stru.di_contprd_mif,
-di_pre_stru.di_chan2_buf_dup_p);
+		di_pre_stru.di_chan2_buf_dup_p);
 	config_di_cnt_mif(&di_pre_stru.di_contwr_mif, di_pre_stru.di_wr_buf);
 #endif
-#ifdef MCDI_SUPPORT
-	config_di_mcinford_mif(&di_pre_stru.di_mcinford_mif,
-di_pre_stru.di_chan2_buf_dup_p);
-	config_di_pre_mc_mif(&di_pre_stru.di_mcinfowr_mif,
-&di_pre_stru.di_mcvecwr_mif, di_pre_stru.di_wr_buf);
-#endif
+	if (mcpre_en) {
+		config_di_mcinford_mif(&di_pre_stru.di_mcinford_mif,
+			di_pre_stru.di_chan2_buf_dup_p);
+		config_di_pre_mc_mif(&di_pre_stru.di_mcinfowr_mif,
+			&di_pre_stru.di_mcvecwr_mif, di_pre_stru.di_wr_buf);
+	}
 
 	if ((di_pre_stru.di_chan2_buf_dup_p) &&
-((di_pre_stru.di_chan2_buf_dup_p->vframe->type & VIDTYPE_TYPEMASK)
-== VIDTYPE_INTERLACE_TOP)) {
+	    ((di_pre_stru.di_chan2_buf_dup_p->vframe->type & VIDTYPE_TYPEMASK)
+	     == VIDTYPE_INTERLACE_TOP))
 		chan2_field_num = 0;
-	}
 
-	RDMA_WR(DI_PRE_SIZE, di_pre_stru.di_nrwr_mif.end_x|
-(di_pre_stru.di_nrwr_mif.end_y << 16));
-#ifdef MCDI_SUPPORT
-	blkhsize = (di_pre_stru.di_nrwr_mif.end_x+4)/5;
-	RDMA_WR(MCDI_HV_SIZEIN, (di_pre_stru.di_nrwr_mif.end_y+1)|
-((di_pre_stru.di_nrwr_mif.end_x+1) << 16));
-	Wr(MCDI_HV_BLKSIZEIN, (overturn?3:0) << 30 | blkhsize << 16 |
-(di_pre_stru.di_nrwr_mif.end_y+1));
-	RDMA_WR(MCDI_BLKTOTAL, blkhsize*(di_pre_stru.di_nrwr_mif.end_y+1));
-#endif
+	RDMA_WR(DI_PRE_SIZE, di_pre_stru.di_nrwr_mif.end_x |
+		(di_pre_stru.di_nrwr_mif.end_y << 16));
+	if (mcpre_en) {
+		blkhsize = (di_pre_stru.di_nrwr_mif.end_x + 4) / 5;
+		RDMA_WR(MCDI_HV_SIZEIN, (di_pre_stru.di_nrwr_mif.end_y + 1)
+			| ((di_pre_stru.di_nrwr_mif.end_x + 1) << 16));
+		RDMA_WR(MCDI_HV_BLKSIZEIN, (overturn ? 3 : 0) << 30
+			| blkhsize << 16
+			| (di_pre_stru.di_nrwr_mif.end_y + 1));
+		RDMA_WR(MCDI_BLKTOTAL,
+			blkhsize * (di_pre_stru.di_nrwr_mif.end_y + 1));
+	}
 	/* set interrupt mask for pre module. */
+	/* we need to only leave one mask open
+	   to prevent multiple entry for de_irq */
 	RDMA_WR(DI_INTR_CTRL,
-((di_pre_stru.enable_mtnwr?1:0) << 16) | /* mask nrwr interrupt. */
-((di_pre_stru.enable_mtnwr?0:1) << 17) | /* mtnwr interrupt. */
-(1 << 18) | /* mask diwr interrupt. */
-(1 << 19) | /* mask hist check interrupt. */
-(1 << 20) | /* mask cont interrupt. */
-#ifdef MCDI_SUPPORT
-(1 << 21) | /* mask medi interrupt. */
-(1 << 22) | /* mask vecwr interrupt. */
-(1 << 23) | /* mask infwr interrupt. */
-#endif
-0xf); /* clean all pending interrupt bits. */
-
-	/* Wr(DI_PRE_CTRL, 0x3 << 30);
-	//remove it for M6, can not disalbe it here */
-	enable_di_pre_aml(&di_pre_stru.di_inp_mif,/* di_inp */
-				&di_pre_stru.di_mem_mif, /* di_mem */
-				&di_pre_stru.di_chan2_mif,/* chan2 */
-				&di_pre_stru.di_nrwr_mif, /* nrwrite */
-				&di_pre_stru.di_mtnwr_mif, /* mtn write */
+		/* mask nrwr interrupt. */
+		((di_pre_stru.enable_mtnwr ? 1 : 0) << 16) |
+		/* mtnwr interrupt. */
+		((di_pre_stru.enable_mtnwr ? 0 : 1) << 17) |
+		/* mask diwr intrpt. */
+		(((post_wr_en && post_wr_surpport)?0:1) << 18) |
+		(1 << 19) | /* mask hist check interrupt. */
+		(1 << 20) | /* mask cont interrupt. */
+		(1 << 21) | /* mask medi interrupt. */
+		(1 << 22) | /* mask vecwr interrupt. */
+		(1 << 23) | /* mask infwr interrupt. */
+		#ifdef DET3D
+		((det3d_en ? 0 : 1) << 24) | /* mask det3d interrupt. */
+		#else
+		(1 << 24) | /* mask det3d interrupt. */
+		#endif
+		((post_wr_en && post_wr_surpport)?0xb:0xf));
+		/* clean all pending interrupt bits. */
+
+	enable_di_pre_aml(&di_pre_stru.di_inp_mif,      /* di_inp */
+		&di_pre_stru.di_mem_mif,                /* di_mem */
+		&di_pre_stru.di_chan2_mif,              /* chan2 */
+		&di_pre_stru.di_nrwr_mif,               /* nrwrite */
+		&di_pre_stru.di_mtnwr_mif,              /* mtn write */
 #ifdef NEW_DI_V1
-				&di_pre_stru.di_contp2rd_mif,
-				&di_pre_stru.di_contprd_mif,
-				&di_pre_stru.di_contwr_mif,
-#endif
-				1,			  /* nr enable */
-				di_pre_stru.enable_mtnwr, /* mtn enable */
-				di_pre_stru.enable_pulldown_check,
-				/* pd32 check_en */
-				di_pre_stru.enable_pulldown_check,
-				/* pd22 check_en */
-				0,	/* hist check_en */
-				chan2_field_num,
-				/* field num for chan2. 1 bottom, 0 top. */
-				di_pre_stru.vdin2nr, /* pre vdin link. */
-				pre_hold_line, /* hold line. */
-				pre_urgent
-			 );
+		&di_pre_stru.di_contp2rd_mif,
+		&di_pre_stru.di_contprd_mif,
+		&di_pre_stru.di_contwr_mif,
+#endif
+		1,                              /* nr enable */
+		di_pre_stru.enable_mtnwr,       /* mtn enable */
+		di_pre_stru.enable_pulldown_check,
+/* pd32 check_en */
+		di_pre_stru.enable_pulldown_check,
+/* pd22 check_en */
+		0, /* hist check_en */
+		chan2_field_num,
+/* field num for chan2. 1 bottom, 0 top. */
+		di_pre_stru.vdin2nr,    /* pre vdin link. */
+		pre_hold_line,          /* hold line. */
+		pre_urgent
+		);
 	if (get_cpu_type() >= MESON_CPU_MAJOR_ID_GXBB)
 		enable_afbc_input(di_pre_stru.di_inp_buf->vframe);
 
-	RDMA_WR(DI_PRE_CTRL, Rd(DI_PRE_CTRL)|(0x3 << 30));
-	/* add for M6, reset */
-#ifdef MCDI_SUPPORT
-	if (!di_pre_stru.cur_prog_flag && mcpre_en)
-		enable_mc_di_pre(&di_pre_stru.di_mcinford_mif,
-&di_pre_stru.di_mcinfowr_mif, &di_pre_stru.di_mcvecwr_mif, pre_urgent);
-#endif
-		if (di_pre_stru.cur_prog_flag == 1) {
-			di_mtn_1_ctrl1 &= (~(1<<31)); /* disable contwr */
-			di_mtn_1_ctrl1 &= (~(1<<29));/* disable txt */
-			cont_rd = 0;
+	if (mcpre_en) {
+		if (!di_pre_stru.cur_prog_flag && mcpre_en)
+			enable_mc_di_pre(&di_pre_stru.di_mcinford_mif,
+				&di_pre_stru.di_mcinfowr_mif,
+				&di_pre_stru.di_mcvecwr_mif, pre_urgent);
+	}
+	if (di_pre_stru.cur_prog_flag == 1 || di_pre_stru.enable_mtnwr == 0) {
+		di_mtn_1_ctrl1 &= (~(1 << 31)); /* disable contwr */
+		di_mtn_1_ctrl1 &= (~(1 << 29)); /* disable txt */
+		cont_rd = 0;
+		if (mcpre_en)
 			RDMA_WR(DI_ARB_CTRL,
-				RDMA_RD(DI_ARB_CTRL)|1<<9|1<<8|1<<1|1<<0);
-		} else {
+				(RDMA_RD(DI_ARB_CTRL) & (~0x303)) | 0xF0F);
+		else
 			RDMA_WR(DI_ARB_CTRL,
-				RDMA_RD(DI_ARB_CTRL)|1<<9|1<<8|1<<1|1<<0);
-			di_mtn_1_ctrl1 |= (1<<31); /* enable contwr */
-			RDMA_WR(DI_PRE_CTRL, RDMA_RD(DI_PRE_CTRL)|(1<<1));
-			/* mtn must enable for mtn1 enable */
-			di_mtn_1_ctrl1 &= (~(1<<29));/* disable txt */
-			cont_rd = 1;
-		}
-		if (di_pre_stru.field_count_for_cont >= 3) {
-			di_mtn_1_ctrl1 |= 1<<29;/* enable txt */
-			RDMA_WR(DI_PRE_CTRL,
-				RDMA_RD(DI_PRE_CTRL)|(cont_rd<<25));
-			#ifdef NEW_DI_V4
-			RDMA_WR(DNR_CTRL, dnr_en?0x1ff00:0);
-			#endif
-			#ifdef MCDI_SUPPORT
-			if (di_pre_stru.cur_prog_flag == 0)
+				RDMA_RD(DI_ARB_CTRL) | 1 << 9 | 1 << 8
+				| 1 << 1 | 1 <<	0);
+	} else {
+		if (mcpre_en)
+			RDMA_WR(DI_ARB_CTRL,
+				RDMA_RD(DI_ARB_CTRL) | 1 << 9 | 1 << 8
+				| 1 << 1 | 1 << 0 | 0xF0F);
+		else
+			RDMA_WR(DI_ARB_CTRL,
+				RDMA_RD(DI_ARB_CTRL) | 1 << 9 | 1 << 8
+				| 1 << 1 | 1 <<	0);
+
+		di_mtn_1_ctrl1 |= (1 << 31); /* enable contwr */
+		RDMA_WR(DI_PRE_CTRL, RDMA_RD(DI_PRE_CTRL) | (1 << 1));
+		/* mtn must enable for mtn1 enable */
+		di_mtn_1_ctrl1 &= (~(1 << 29));/* disable txt */
+		cont_rd = 1;
+	}
+	if (di_pre_stru.field_count_for_cont >= 3) {
+		di_mtn_1_ctrl1 |= 1 << 29;/* enable txt */
+		RDMA_WR(DI_PRE_CTRL,
+			RDMA_RD(DI_PRE_CTRL) | (cont_rd << 25));
+#ifdef NEW_DI_V4
+		if ((!dnr_en) && (Rd(DNR_CTRL) != 0) && dnr_reg_update)
+			RDMA_WR(DNR_CTRL, 0);
+#endif
+		if (mcpre_en) {
+			if ((di_pre_stru.cur_prog_flag == 0) &&
+				(di_pre_stru.enable_mtnwr == 1)
+			   )
+				RDMA_WR(DI_MTN_CTRL1,
+					(mcpre_en ? 0x3000 : 0) |
+					RDMA_RD(DI_MTN_CTRL1));
+			else
 				RDMA_WR(DI_MTN_CTRL1,
-				(mcpre_en?0x3000:0)|RDMA_RD(DI_MTN_CTRL1));
-				/* enable me(mc di) */
+					(0xffffcfff & RDMA_RD(DI_MTN_CTRL1)));
+			/* enable me(mc di) */
 			if (di_pre_stru.field_count_for_cont == 4) {
-				di_mtn_1_ctrl1 &= (~(1<<30));
+				di_mtn_1_ctrl1 &= (~(1 << 30));
 				/* enable contp2rd and contprd */
-				RDMA_WR(MCDI_MOTINEN, 1<<1|1);
+				RDMA_WR(MCDI_MOTINEN, 1 << 1 | 1);
 			}
-			if (di_pre_stru.field_count_for_cont == 5) {
-				RDMA_WR(MCDI_CTRL_MODE, 0x1bfeefff);
+			if (di_pre_stru.field_count_for_cont == 5)
+				RDMA_WR(MCDI_CTRL_MODE, 0x1bfff7ff);
 				/* disalbe reflinfo */
-			}
-			#else
-			di_mtn_1_ctrl1 &= (~(1<<30));
-			/* enable contp2rd and contprd */
-			#endif
 		} else {
-			enable_film_mode_check(
-				di_pre_stru.di_inp_buf->vframe->width,
-				di_pre_stru.di_inp_buf->vframe->height/2,
-				di_pre_stru.di_inp_buf->vframe->source_type);
-			#ifdef MCDI_SUPPORT
+			di_mtn_1_ctrl1 &= (~(1 << 30));
+		}
+		/* enable contp2rd and contprd */
+	} else {
+		enable_film_mode_check(
+			di_pre_stru.di_inp_buf->vframe->width,
+			di_pre_stru.di_inp_buf->vframe->height / 2,
+			di_pre_stru.di_inp_buf->vframe->source_type);
+		if (mcpre_en) {
 			/* txtdet_en mode */
 			RDMA_WR_BITS(MCDI_CTRL_MODE, 0, 1, 1);
 			RDMA_WR_BITS(MCDI_CTRL_MODE, 1, 9, 1);
@@ -3232,18 +3642,17 @@ di_pre_stru.di_chan2_buf_dup_p);
 			RDMA_WR_BITS(MCDI_CTRL_MODE, 0, 28, 1);
 			RDMA_WR(MCDI_MOTINEN, 0);
 			RDMA_WR(DI_MTN_CTRL1,
-(0xffffcfff&RDMA_RD(DI_MTN_CTRL1)));
+				(0xffffcfff & RDMA_RD(DI_MTN_CTRL1)));
 			/* disable me(mc di) */
-			#endif
-			#ifdef NEW_DI_V4
-			RDMA_WR(DNR_CTRL, 0);
-			#endif
 		}
-		di_pre_stru.field_count_for_cont++;
+#ifdef NEW_DI_V4
+		RDMA_WR(DNR_CTRL, 0);
+#endif
+	}
+	di_pre_stru.field_count_for_cont++;
 
-		RDMA_WR(DI_MTN_1_CTRL1, di_mtn_1_ctrl1);
-		/* Wr(DI_PRE_CTRL, Rd(DI_PRE_CTRL)|(1<<25)); */
-		di_apply_reg_cfg(0);
+	RDMA_WR(DI_MTN_1_CTRL1, di_mtn_1_ctrl1);
+	di_apply_reg_cfg(0);
 #ifdef SUPPORT_MPEG_TO_VDIN
 	if (mpeg2vdin_flag) {
 		struct vdin_arg_s vdin_arg;
@@ -3253,6 +3662,10 @@ di_pre_stru.di_chan2_buf_dup_p);
 			vdin_ops->tvin_vdin_func(0, &vdin_arg);
 	}
 #endif
+
+	/* enable pre mif*/
+	enable_di_pre_mif(1);
+
 #ifdef CONFIG_AML_RDMA
 	if (di_pre_rdma_enable & 0x2)
 		rdma_config(de_devp->rdma_handle, RDMA_TRIGGER_MANUAL);
@@ -3263,11 +3676,12 @@ di_pre_stru.di_chan2_buf_dup_p);
 
 static void pre_de_done_buf_clear(void)
 {
-	di_buf_t *wr_buf = NULL;
+	struct di_buf_s *wr_buf = NULL;
+
 	if (di_pre_stru.di_wr_buf) {
 		wr_buf = di_pre_stru.di_wr_buf;
 		if ((di_pre_stru.prog_proc_type == 2) &&
-				wr_buf->di_wr_linked_buf) {
+		    wr_buf->di_wr_linked_buf) {
 			wr_buf->di_wr_linked_buf->pre_ref_count = 0;
 			wr_buf->di_wr_linked_buf->post_ref_count = 0;
 			queue_in(wr_buf->di_wr_linked_buf, QUEUE_RECYCLE);
@@ -3277,7 +3691,6 @@ static void pre_de_done_buf_clear(void)
 		wr_buf->post_ref_count = 0;
 		queue_in(wr_buf, QUEUE_RECYCLE);
 		di_pre_stru.di_wr_buf = NULL;
-
 	}
 	if (di_pre_stru.di_inp_buf) {
 		if (di_pre_stru.di_mem_buf_dup_p == di_pre_stru.di_inp_buf)
@@ -3288,13 +3701,15 @@ static void pre_de_done_buf_clear(void)
 	}
 }
 
-static void top_bot_config(di_buf_t *di_buf)
+static void top_bot_config(struct di_buf_s *di_buf)
 {
 	vframe_t *vframe = di_buf->vframe;
-	if (((invert_top_bot&0x1) != 0) && (!is_progressive(vframe))) {
+
+	if (((invert_top_bot & 0x1) != 0) && (!is_progressive(vframe))) {
 		if (di_buf->invert_top_bot_flag == 0) {
 			if (
-(vframe->type & VIDTYPE_TYPEMASK) == VIDTYPE_INTERLACE_TOP) {
+				(vframe->type & VIDTYPE_TYPEMASK) ==
+				VIDTYPE_INTERLACE_TOP) {
 				vframe->type &= (~VIDTYPE_TYPEMASK);
 				vframe->type |= VIDTYPE_INTERLACE_BOTTOM;
 			} else {
@@ -3306,10 +3721,835 @@ static void top_bot_config(di_buf_t *di_buf)
 	}
 }
 
+struct FlmModReg_t flmreg;
+unsigned int pulldown_enable = 1;
+module_param(pulldown_enable, uint, 0644);
+MODULE_PARM_DESC(pulldown_enable, "/n pulldonw mode result./n");
+
+static unsigned int pldn_mod;
+module_param(pldn_mod, uint, 0644);
+MODULE_PARM_DESC(pldn_mod, "/n pulldonw mode result./n");
+
+static unsigned int pldn_cmb0 = 1;
+module_param(pldn_cmb0, uint, 0644);
+MODULE_PARM_DESC(pldn_cmb0, "/n pulldonw combing result./n");
+
+static unsigned int pldn_cmb1;
+module_param(pldn_cmb1, uint, 0644);
+MODULE_PARM_DESC(pldn_cmb1, "/n pulldonw combing result./n");
+
+static unsigned int pldn_calc_en = 1;
+module_param(pldn_calc_en, uint, 0644);
+MODULE_PARM_DESC(pldn_calc_en, "/n pulldonw calculation enable./n");
+
+#define MAX_NUM_DI_REG 32
+#define GXTVBB_REG_START 12
+static unsigned int combing_setting_registers[MAX_NUM_DI_REG] = {
+	DI_MTN_1_CTRL1,
+	DI_MTN_1_CTRL2,
+	DI_MTN_1_CTRL3,
+	DI_MTN_1_CTRL4,
+	DI_MTN_1_CTRL5,
+	DI_MTN_1_CTRL6,
+	DI_MTN_1_CTRL7,
+	DI_MTN_1_CTRL8,
+	DI_MTN_1_CTRL9,
+	DI_MTN_1_CTRL10,
+	DI_MTN_1_CTRL11,
+	DI_MTN_1_CTRL12,
+	/* below reg are gxtvbb only, offset defined in GXTVBB_REG_START */
+	MCDI_REL_DET_PD22_CHK,
+	MCDI_PD22_CHK_THD,
+	MCDI_PD22_CHK_THD_RT,
+	NR2_MATNR_DEGHOST,
+	0
+};
+
+static unsigned int combing_setting_masks[MAX_NUM_DI_REG] = {
+	0x0fffffff,
+	0xffffffff,
+	0xffffffff,
+	0xffffffff,
+	0xffffffff,
+	0xffffffff,
+	0xffffffff,
+	0xffffffff,
+	0xffffffff,
+	0xffffffff,
+	0xffffffff,
+	0xffffffff,
+	0x0003ff1f,
+	0x01ff3fff,
+	0x07ffff1f,
+	0x000001ff,
+	0
+};
+
+static unsigned int combing_pure_still_setting[MAX_NUM_DI_REG] = {
+	0x00141410,
+	0x1A1A3A62,
+	0x15200A0A,
+	0x01800880,
+	0x74000D0D,
+	0x0D5A1520,
+	0x0A800480,
+	0x1A1A2662,
+	0x0D200302,
+	0x02020202,
+	0x06090708,
+	0x40020A04,
+	0x0001FF0C,
+	0x00400204,
+	0x00016404,
+	0x00000199
+};
+
+static unsigned int combing_bias_static_setting[MAX_NUM_DI_REG] = {
+	0x00141410,
+	0x1A1A3A62,
+	0x15200A0A,
+	0x01800880,
+	0x74000D0D,
+	0x0D5A1520,
+	0x0A800480,
+	0x1A1A2662,
+	0x0D200302,
+	0x02020202,
+	0x06090708,
+	0x40020A04,
+	0x0001FF0C,
+	0x00400204,
+	0x00016404,
+	0x00000166
+};
+
+
+static unsigned int combing_normal_setting[MAX_NUM_DI_REG] = {
+	0x00202015,
+	0x1A1A3A62,
+	0x15200a0a,
+	0x01000880,
+	0x74000D0D,
+	0x0D5A1520,
+	0x0A0A0201,
+	0x1A1A2662,
+	0x0D200302,
+	0x02020606,
+	0x05080304,
+	0x40020a04,
+	0x0001FF0C,
+	0x00400204,
+	0x00016404,
+	0x00000153
+};
+
+static unsigned int combing_bias_motion_setting[MAX_NUM_DI_REG] = {
+	0x00202015,
+	0x1A1A3A62,
+	0x15200101,
+	0x01200440,
+	0x74000D0D,
+	0x0D5A1520,
+	0x0A0A0201,
+	0x1A1A2662,
+	0x0D200302,
+	0x02020606,
+	0x05080304,
+	0x40020a04,
+	0x0001ff0c, /* 0x0001FF12 */
+	0x00400204, /* 0x00200204 */
+	0x00016404, /* 0x00012002 */
+	0x00000142
+};
+
+static unsigned int combing_very_motion_setting[MAX_NUM_DI_REG] = {
+	0x00202015,
+	0x1A1A3A62,
+	0x15200101,
+	0x01200440,
+	0x74000D0D,
+	0x0D5A1520,
+	0x0A0A0201,
+	0x1A1A2662,
+	0x0D200302,
+	0x02020606,
+	0x05080304,
+	0x40020a04,  /* 0x60000404,*/
+	0x0001ff0c, /* 0x0001FF12 */
+	0x00400204, /* 0x00200204 */
+	0x00016404, /* 0x00012002 */
+	0x00000131
+};
+/*special for resolution test file*/
+static unsigned int combing_resolution_setting[MAX_NUM_DI_REG] = {
+	0x00202015,
+	0x141a3a62,
+	0x15200a0a,
+	0x01800880,
+	0x74000d0d,
+	0x0d5a1520,
+	0x0a800480,
+	0x1a1a2662,
+	0x0d200302,
+	0x01010101,
+	0x06090708,
+	0x40020a04,
+	0x0001ff0c,
+	0x00400204,
+	0x00016404,
+	0x00000131
+};
+
+static unsigned int (*combing_setting_values[6])[MAX_NUM_DI_REG] = {
+	&combing_pure_still_setting,
+	&combing_bias_static_setting,
+	&combing_normal_setting,
+	&combing_bias_motion_setting,
+	&combing_very_motion_setting,
+	&combing_resolution_setting
+};
+
+/* decide the levels based on glb_mot[0:4]
+ * or with patches like Hist, smith trig logic
+ * level:    0->1  1->2   2->3   3->4
+ * from low motion to high motion level
+ * take 720x480 as example */
+static unsigned int combing_glb_mot_thr_LH[4] = {1440, 2880, 4760, 9520};
+/* level:    0<-1  1<-2   2<-3   3<-4
+ * from high motion to low motion level */
+static unsigned int combing_glb_mot_thr_HL[4] = {720, 1440, 2880, 5760};
+
+static bool combing_fix_en = true;
+module_param(combing_fix_en, bool, 0664);
+static unsigned int num_glb_mot_thr_LH = 4;
+module_param_array(combing_glb_mot_thr_LH, uint, &num_glb_mot_thr_LH, 0664);
+static unsigned int num_glb_mot_thr_HL = 4;
+module_param_array(combing_glb_mot_thr_HL, uint, &num_glb_mot_thr_HL, 0664);
+static unsigned int num_combing_setting_registers = MAX_NUM_DI_REG;
+module_param_array(combing_setting_registers, uint,
+	&num_combing_setting_registers, 0664);
+static unsigned int num_combing_setting_masks = MAX_NUM_DI_REG;
+module_param_array(combing_setting_masks, uint,
+	&num_combing_setting_masks, 0664);
+static unsigned int num_combing_pure_still_setting = MAX_NUM_DI_REG;
+module_param_array(combing_pure_still_setting, uint,
+	&num_combing_pure_still_setting, 0664);
+static unsigned int num_combing_bias_static_setting = MAX_NUM_DI_REG;
+module_param_array(combing_bias_static_setting, uint,
+	&num_combing_bias_static_setting, 0664);
+static unsigned int num_combing_normal_setting = MAX_NUM_DI_REG;
+module_param_array(combing_normal_setting, uint, &num_combing_normal_setting,
+	0664);
+static unsigned int num_combing_bias_motion_setting = MAX_NUM_DI_REG;
+module_param_array(combing_bias_motion_setting, uint,
+	&num_combing_bias_motion_setting, 0664);
+static unsigned int num_combing_very_motion_setting = MAX_NUM_DI_REG;
+module_param_array(combing_very_motion_setting, uint,
+	&num_combing_very_motion_setting, 0664);
+/* 0: pure still; 1: bias static; 2: normal; 3: bias motion, 4: very motion */
+static int cur_lev = 2;
+module_param_named(combing_cur_lev, cur_lev, int, 0444);
+static int force_lev = 0xff;
+module_param_named(combing_force_lev, force_lev, int, 0664);
+static int dejaggy_flag = -1;
+module_param_named(combing_dejaggy_flag, dejaggy_flag, int, 0664);
+static int dejaggy_enable = 1;
+module_param_named(combing_dejaggy_enable, dejaggy_enable, int, 0664);
+static uint num_dejaggy_setting = 5;
+/* 0:off 1:1-14-1 2:1-6-1 3:3-10-3 4:100% */
+/* current setting dejaggy always on when interlace source */
+static int combing_dejaggy_setting[5] = {1, 1, 1, 2, 3};
+module_param_array(combing_dejaggy_setting, uint,
+	&num_dejaggy_setting, 0664);
+#ifdef CONFIG_AM_ATVDEMOD
+static int atv_snr_val = 30;
+module_param_named(atv_snr_val, atv_snr_val, int, 0664);
+static int atv_snr_cnt;
+module_param_named(atv_snr_cnt, atv_snr_cnt, int, 0664);
+static int atv_snr_cnt_limit = 30;
+module_param_named(atv_snr_cnt_limit, atv_snr_cnt_limit, int, 0664);
+#endif
+static int last_lev = -1;
+static int glb_mot[5] = {0, 0, 0, 0, 0};
+static int still_field_count;
+static int dejaggy_4p = true;
+module_param_named(dejaggy_4p, dejaggy_4p, int, 0664);
+UINT32 field_count = 0;
+
+static int cmb_adpset_cnt;
+module_param(cmb_adpset_cnt, int, 0664);
+static void combing_threshold_config(unsigned int  width)
+{
+	int i = 0;
+	/* init combing threshold */
+	for (i = 0; i < 4; i++) {
+		combing_glb_mot_thr_LH[i] = (width<<1)*(i+1);
+		combing_glb_mot_thr_HL[i] = width<<i;
+	}
+	combing_glb_mot_thr_LH[3] = width*13;
+}
+
+unsigned int adp_set_level(unsigned int diff)
+{
+	unsigned int rst = 0;
+	char tlog[] = "LHM";
+	if (diff <= combing_glb_mot_thr_LH[0])
+		rst = 0;
+	else if (diff >= combing_glb_mot_thr_LH[3])
+		rst = 1;
+	else
+		rst = 2;
+
+	if (cmb_adpset_cnt > 0) {
+		pr_info("\ndiff=%d lvl=%c\n", diff, tlog[rst]);
+		cmb_adpset_cnt--;
+	}
+
+	return rst;
+}
+
+unsigned int adp_set_mtn_ctrl3(unsigned int diff, unsigned int dlvel)
+{
+	int istp = 0;
+	int idats = 0;
+	int idatm = 0;
+	int idatr = 0;
+	unsigned int rst = 0;
+	if (dlvel == 0)
+		rst = combing_pure_still_setting[2];
+	else if (dlvel == 1)
+		rst = combing_very_motion_setting[2];
+	else {
+		rst = 0x1520;
+		istp = 64 * (diff - combing_glb_mot_thr_LH[0]) /
+			(combing_glb_mot_thr_LH[3] -
+			combing_glb_mot_thr_LH[0] + 1);
+
+		idats = (combing_pure_still_setting[2] >> 8) & 0xff;
+		idatm = (combing_very_motion_setting[2] >> 8) & 0xff;
+
+		idatr = ((idats - idatm) * istp >> 6) + idatm;
+		rst = (rst<<8) | (idatr & 0xff);
+
+		idats = (combing_pure_still_setting[2]) & 0xff;
+		idatm = (combing_very_motion_setting[2]) & 0xff;
+
+		idatr = ((idats - idatm) * istp >> 6) + idatm;
+		rst = (rst<<8) | (idatr & 0xff);
+	}
+/*
+	if (cmb_adpset_cnt > 0)
+		pr_info("mtn_ctrl3=%8x\n", rst); */
+
+	return rst;
+}
+
+int di_debug_new_en = 1;
+module_param(di_debug_new_en, int, 0644);
+MODULE_PARM_DESC(di_debug_new_en, "di_debug_new_en");
+
+int cmb_num_rat_ctl4 = 64; /* 0~255 */
+module_param(cmb_num_rat_ctl4, int, 0644);
+MODULE_PARM_DESC(cmb_num_rat_ctl4, "cmb_num_rat_ctl4");
+
+int cmb_rat_ctl4_minthd = 64;
+module_param(cmb_rat_ctl4_minthd, int, 0644);
+MODULE_PARM_DESC(cmb_rat_ctl4_minthd, "cmb_rat_ctl4_minthd");
+
+int tTCNm = 0; /* combing rows */
+unsigned int adp_set_mtn_ctrl4(unsigned int diff, unsigned int dlvel)
+{
+	int hHeight = di_pre_stru.di_nrwr_mif.end_y;
+	int istp = 0, idats = 0, idatm = 0, idatr = 0;
+	unsigned int rst = 0;
+	if (dlvel == 0)
+		rst = combing_pure_still_setting[3];
+	else if (dlvel == 1)
+		rst = combing_very_motion_setting[3];
+	else {
+			rst = 1;
+			istp = 64 * (diff - combing_glb_mot_thr_LH[0]) /
+				(combing_glb_mot_thr_LH[3] -
+				combing_glb_mot_thr_LH[0] + 1);
+
+			idats = (combing_pure_still_setting[3] >> 16) & 0xff;
+			idatm = (combing_very_motion_setting[3] >> 16) & 0xff;
+
+			idatr = ((idats - idatm) * istp >> 6) + idatm;
+			if (di_debug_new_en)
+				idatr = idatr >> 1;
+			rst = (rst<<8) | (idatr & 0xff);
+
+			idats = (combing_pure_still_setting[3] >> 8) & 0xff;
+			idatm = (combing_very_motion_setting[3] >> 8) & 0xff;
+
+			idatr = ((idats - idatm) * istp >> 6) + idatm;
+			rst = (rst<<8) | (idatr & 0xff);
+
+			idats = (combing_pure_still_setting[3]) & 0xff;
+			idatm = (combing_very_motion_setting[3]) & 0xff;
+
+			idatr = ((idats - idatm) * istp >> 6) + idatm;
+			rst = (rst << 8) | (idatr & 0xff);
+	}
+
+	if (di_debug_new_en == 1) {
+		istp = ((cmb_num_rat_ctl4 * hHeight + 128) >> 8);
+		if (cmb_adpset_cnt > 0)
+			pr_info("mtn_ctrl4=%8x %03d (%03d)\n",
+				rst, istp, tTCNm);
+	if (tTCNm > istp) {
+		istp = 64 * (hHeight - tTCNm) / (hHeight - istp + 1);
+		if (istp < 4)
+			istp = 4;
+
+		idatm = 1;
+		idats = (rst >> 16) & 0xff;
+		idatr = ((idats * istp + 32) >> 6);
+				idatr = idatr >> 1; /*color*/
+		if (idatr < (cmb_rat_ctl4_minthd >> 1))
+			idatr = (cmb_rat_ctl4_minthd >> 1);
+		idatm = (idatm<<8) | (idatr & 0xff);
+
+		idats = (rst >> 8) & 0xff;
+		idatr = ((idats * istp + 32) >> 6);
+		if (idatr < 4)
+			idatr = 4;
+		idatm = (idatm<<8) | (idatr & 0xff);
+
+		idats = rst & 0xff;
+		idatr = ((idats * istp + 32) >> 6);
+		if (idatr < cmb_rat_ctl4_minthd)
+			idatr = cmb_rat_ctl4_minthd;
+		idatm = (idatm<<8) | (idatr & 0xff);
+
+		rst = idatm;
+
+		if (cmb_adpset_cnt > 0)
+			pr_info("%03d (%03d)=%8x\n",
+				tTCNm, hHeight, rst);
+	}
+	}
+	return rst;
+}
+
+unsigned int adp_set_mtn_ctrl7(unsigned int diff, unsigned int dlvel)
+{
+	int istp = 0, idats = 0, idatm = 0, idatr = 0;
+	unsigned int rst = 0;
+	if (dlvel == 0)
+		rst = combing_pure_still_setting[6];
+	else if (dlvel == 1)
+		rst = combing_very_motion_setting[6];
+	else {
+			rst = 10;
+			istp = 64 * (diff - combing_glb_mot_thr_LH[0]) /
+				(combing_glb_mot_thr_LH[3] -
+				combing_glb_mot_thr_LH[0] + 1);
+
+			idats = (combing_pure_still_setting[6] >> 16) & 0xff;
+			idatm = (combing_very_motion_setting[6] >> 16) & 0xff;
+
+			idatr = ((idats - idatm) * istp >> 6) + idatm;
+			rst = (rst<<8) | (idatr & 0xff);
+
+			idats = (combing_pure_still_setting[6] >> 8) & 0xff;
+			idatm = (combing_very_motion_setting[6] >> 8) & 0xff;
+
+			idatr = ((idats - idatm) * istp >> 6) + idatm;
+			rst = (rst<<8) | (idatr & 0xff);
+
+			idats = (combing_pure_still_setting[6]) & 0xff;
+			idatm = (combing_very_motion_setting[6]) & 0xff;
+
+			idatr = ((idats - idatm) * istp >> 6) + idatm;
+			rst = (rst<<8) | (idatr & 0xff);
+	}
+	/*
+	if (cmb_adpset_cnt > 0) {
+		pr_info("mtn_ctrl7=%8x\n", rst);
+	}*/
+	return rst;
+}
+
+unsigned int adp_set_mtn_ctrl10(unsigned int diff, unsigned int dlvel)
+{
+	int istp = 0, idats = 0, idatm = 0, idatr = 0;
+	unsigned int rst = 0;
+	if (dlvel == 0)
+		rst = combing_pure_still_setting[9];
+	else if (dlvel == 1)
+		rst = combing_very_motion_setting[9];
+	else {
+			istp = 64 * (diff - combing_glb_mot_thr_LH[0]) /
+				(combing_glb_mot_thr_LH[3] -
+				combing_glb_mot_thr_LH[0] + 1);
+
+			idats = (combing_very_motion_setting[9] >> 24) & 0xff;
+			idatm = (combing_pure_still_setting[9] >> 24) & 0xff;
+
+			idatr = ((idats - idatm) * istp >> 6) + idatm;
+			rst = (rst<<8) | (idatr & 0xff);
+
+			idats = (combing_very_motion_setting[9] >> 16) & 0xff;
+			idatm = (combing_pure_still_setting[9] >> 16) & 0xff;
+
+			idatr = ((idats - idatm) * istp >> 6) + idatm;
+			rst = (rst<<8) | (idatr & 0xff);
+
+			idats = (combing_very_motion_setting[9] >> 8) & 0xff;
+			idatm = (combing_pure_still_setting[9] >> 8) & 0xff;
+
+			idatr = ((idats - idatm) * istp >> 6) + idatm;
+			rst = (rst<<8) | (idatr & 0xff);
+
+			idats = (combing_very_motion_setting[9]) & 0xff;
+			idatm = (combing_pure_still_setting[9]) & 0xff;
+
+			idatr = ((idats - idatm) * istp >> 6) + idatm;
+			rst = (rst<<8) | (idatr & 0xff);
+	}
+	/*
+	if (cmb_adpset_cnt > 0) {
+		pr_info("mtn_ctr10=%8x\n", rst);
+	}*/
+	return rst;
+}
+
+unsigned int adp_set_mtn_ctrl11(unsigned int diff, unsigned int dlvel)
+{
+	int istp = 0, idats = 0, idatm = 0, idatr = 0;
+	unsigned int rst = 0;
+	if (dlvel == 0)
+		rst = combing_pure_still_setting[10];
+	else if (dlvel == 1)
+		rst = combing_very_motion_setting[10];
+	else {
+			istp = 64 * (diff - combing_glb_mot_thr_LH[0]) /
+				(combing_glb_mot_thr_LH[3] -
+				combing_glb_mot_thr_LH[0] + 1);
+
+			idats = (combing_pure_still_setting[10] >> 24) & 0xff;
+			idatm = (combing_very_motion_setting[10] >> 24) & 0xff;
+
+			idatr = ((idats - idatm) * istp >> 6) + idatm;
+			rst = (rst<<8) | (idatr & 0xff);
+
+			idats = (combing_pure_still_setting[10] >> 16) & 0xff;
+			idatm = (combing_very_motion_setting[10] >> 16) & 0xff;
+
+			idatr = ((idats - idatm) * istp >> 6) + idatm;
+			rst = (rst<<8) | (idatr & 0xff);
+
+			idats = (combing_pure_still_setting[10] >> 8) & 0xff;
+			idatm = (combing_very_motion_setting[10] >> 8) & 0xff;
+
+			idatr = ((idats - idatm) * istp >> 6) + idatm;
+			rst = (rst<<8) | (idatr & 0xff);
+
+			idats = (combing_pure_still_setting[10]) & 0xff;
+			idatm = (combing_very_motion_setting[10]) & 0xff;
+
+			idatr = ((idats - idatm) * istp >> 6) + idatm;
+			rst = (rst<<8) | (idatr & 0xff);
+	}
+	/*
+	if (cmb_adpset_cnt > 0) {
+		pr_info("mtn_ctr11=%8x\n", rst);
+	}*/
+	return rst;
+}
+
+void set_combing_regs(int lvl)
+{
+	int i;
+	unsigned int ndat = 0;
+	for (i = 0; i < MAX_NUM_DI_REG; i++) {
+		if ((combing_setting_registers[i] == 0)
+		|| (combing_setting_masks[i] == 0))
+			break;
+		if (combing_setting_registers[i] == DI_MTN_1_CTRL1)
+			di_mtn_1_ctrl1 =
+				(di_mtn_1_ctrl1 &
+				~combing_setting_masks[i]) |
+				((*combing_setting_values[lvl])[0] &
+				combing_setting_masks[i]);
+		if (di_force_bit_mode != 10 &&
+			combing_setting_registers[i] == NR2_MATNR_DEGHOST)
+			break;
+		else if (i < GXTVBB_REG_START) {
+			/* TODO: need change to check if
+			register only in GCTVBB */
+			ndat = (*combing_setting_values[lvl])[i];
+			DI_Wr(combing_setting_registers[i], ndat);
+		} else if (is_meson_gxtvbb_cpu())
+			DI_Wr(combing_setting_registers[i],
+				((*combing_setting_values[lvl])[i] &
+				combing_setting_masks[i]) |
+				(Rd(
+					combing_setting_registers[i])
+					& ~combing_setting_masks[i]));
+	}
+}
+
+static int like_pulldown22_flag;
+
+int di_debug_readreg = 0;
+module_param(di_debug_readreg, int, 0644);
+MODULE_PARM_DESC(di_debug_readreg, "di_debug_readreg");
+
+static unsigned int field_diff_rate;
+
+static void adaptive_combing_fixing(
+	pulldown_detect_info_t *field_pd_info,
+	int frame_type, int wWidth)
+{
+	unsigned int glb_mot_avg2;
+	unsigned int glb_mot_avg3;
+	unsigned int glb_mot_avg5;
+
+	unsigned int diff = 0;
+	unsigned int wt_dat = 0;
+	unsigned int dlvl = 0;
+	static unsigned int pre_dat[5];
+	bool prt_flg = (cmb_adpset_cnt > 0);
+	unsigned int i = 0;
+
+	static unsigned int pre_num;
+	unsigned int crt_num = field_pd_info->field_diff_num;
+	unsigned int drat = 0;
+	if (pre_num > crt_num)
+		diff = pre_num - crt_num;
+	else
+		diff = crt_num - pre_num;
+
+	if (diff >= wWidth)
+		field_diff_rate = 0;
+	else {
+		drat = (diff << 8) / (wWidth + 1);
+		if (drat > 255)
+			field_diff_rate = 0;
+		else
+			field_diff_rate = 256 - drat;
+	}
+	pre_num = crt_num;
+
+	if (di_debug_readreg > 1) {
+		for (i = 0; i < 12; i++) {
+			wt_dat = Rd(combing_setting_registers[i]);
+			pr_info("mtn_ctrl%02d = 0x%08x\n",
+				i+1, wt_dat);
+		}
+		pr_info("\n");
+		di_debug_readreg--;
+	}
+
+	if (!combing_fix_en)
+		return;
+
+	glb_mot[4] = glb_mot[3];
+	glb_mot[3] = glb_mot[2];
+	glb_mot[2] = glb_mot[1];
+	glb_mot[1] = glb_mot[0];
+	glb_mot[0] = field_pd_info->frame_diff_num;
+	glb_mot_avg5 =
+		(glb_mot[0] + glb_mot[1] + glb_mot[2] + glb_mot[3] +
+		 glb_mot[4]) / 5;
+	glb_mot_avg3 = (glb_mot[0] + glb_mot[1] + glb_mot[2]) / 3;
+	glb_mot_avg2 = (glb_mot[0] + glb_mot[1]) / 2;
+
+	if (glb_mot[0] > combing_glb_mot_thr_LH[0])
+		still_field_count = 0;
+	else
+	if (still_field_count < 16)
+		still_field_count++;
+	if (glb_mot_avg3 > combing_glb_mot_thr_LH[min(cur_lev, 3)]) {
+		if (cur_lev < 4)
+			cur_lev++;
+	} else {
+		if (glb_mot_avg5 <
+		    combing_glb_mot_thr_HL[max(cur_lev - 1, 0)]) {
+			if (cur_lev <= 1 && still_field_count > 5)
+				cur_lev = 0;
+			else
+				cur_lev = max(cur_lev - 1, 1);
+		}
+	}
+	if ((force_lev >= 0) & (force_lev < 6))
+		cur_lev = force_lev;
+	if (cur_lev != last_lev) {
+		set_combing_regs(cur_lev);
+		if (pr_pd & 0x400)
+			pr_dbg("\t%5d: from %d to %d: di_mtn_1_ctrl1 = %08x\n",
+				field_count, last_lev, cur_lev, di_mtn_1_ctrl1);
+
+		last_lev = cur_lev;
+	}
+
+	if ((force_lev > 5) && (di_debug_new_en == 1) &&
+		(glb_mot[1] != glb_mot[0])) {
+		dlvl = adp_set_level(glb_mot[0]);
+		diff = glb_mot[0];
+		pre_dat[0] = Rd(DI_MTN_1_CTRL3);
+		wt_dat = adp_set_mtn_ctrl3(diff, dlvl);
+		if (pre_dat[0] != wt_dat) {
+			DI_Wr(DI_MTN_1_CTRL3, wt_dat);
+			pre_dat[0] = wt_dat;
+			if (prt_flg)
+				pr_info("set mtn03 0x%08x.\n", wt_dat);
+		}
+
+		pre_dat[1] = Rd(DI_MTN_1_CTRL4);
+		wt_dat = adp_set_mtn_ctrl4(diff, dlvl);
+		if (pre_dat[1] != wt_dat) {
+			DI_Wr(DI_MTN_1_CTRL4, wt_dat);
+			if (prt_flg)
+				pr_info("set mtn04 %08x -> %08x (%d).\n",
+				pre_dat[1], wt_dat,
+				field_pd_info->field_diff_num);
+			pre_dat[1] = wt_dat;
+		}
+
+		pre_dat[2] = Rd(DI_MTN_1_CTRL7);
+		wt_dat = adp_set_mtn_ctrl7(diff, dlvl);
+		if (pre_dat[2] != wt_dat) {
+			DI_Wr(DI_MTN_1_CTRL7, wt_dat);
+			pre_dat[2] = wt_dat;
+			if (prt_flg)
+				pr_info("set mtn07 0x%08x.\n", wt_dat);
+		}
+
+		pre_dat[3] = Rd(DI_MTN_1_CTRL10);
+		wt_dat = adp_set_mtn_ctrl10(diff, dlvl);
+		if (pre_dat[3] != wt_dat) {
+			DI_Wr(DI_MTN_1_CTRL10, wt_dat);
+			pre_dat[3] = wt_dat;
+			if (prt_flg)
+				pr_info("set mtn10 0x%08x.\n", wt_dat);
+		}
+
+		pre_dat[4] = Rd(DI_MTN_1_CTRL11);
+		wt_dat = adp_set_mtn_ctrl11(diff, dlvl);
+		if (pre_dat[4] != wt_dat) {
+			DI_Wr(DI_MTN_1_CTRL11, wt_dat);
+			pre_dat[4] = wt_dat;
+			if (prt_flg)
+				pr_info("set mtn11 0x%08x.\n\n", wt_dat);
+		}
+	}
+
+	if (is_meson_gxtvbb_cpu() && dejaggy_enable) {
+		/* only enable dejaggy for interlace */
+		if ((frame_type & VIDTYPE_TYPEMASK) == VIDTYPE_PROGRESSIVE &&
+			!dejaggy_4p) {
+			if (dejaggy_flag != -1) {
+				dejaggy_flag = -1;
+				DI_Wr_reg_bits(SRSHARP0_SHARP_DEJ1_MISC,
+					0, 3, 1);
+			}
+		} else {
+			if ((dejaggy_flag == -1)
+			|| ((Rd(SRSHARP0_SHARP_SR2_CTRL) & (1 << 24)) == 0)) {
+				/* enable dejaggy module */
+				DI_Wr_reg_bits(SRSHARP0_SHARP_SR2_CTRL,
+					1, 24, 1);
+				/* first time set default */
+				DI_Wr_reg_bits(SRSHARP0_SHARP_DEJ2_PRC,
+					0xff, 24, 8);
+				DI_Wr(SRSHARP0_SHARP_DEJ1_PRC,
+					(0xff<<24)|(0xd1<<16)|(0xe<<8)|0x31);
+				DI_Wr(
+					SRSHARP0_SHARP_DEJ2_MISC, 0x30);
+				DI_Wr(
+					SRSHARP0_SHARP_DEJ1_MISC, 0x02f4);
+				dejaggy_flag = 0;
+			}
+			if (dejaggy_enable) {
+				/* dejaggy alpha according to motion level */
+				dejaggy_flag =
+					combing_dejaggy_setting[cur_lev];
+				/* TODO: check like_pulldown22_flag and ATV
+				noise_level */
+				#ifdef CONFIG_AM_ATVDEMOD
+				if ((aml_atvdemod_get_snr_ex() < atv_snr_val)
+					&& (di_pre_stru.cur_source_type ==
+					VFRAME_SOURCE_TYPE_TUNER)) {
+					if (atv_snr_cnt++ > atv_snr_cnt_limit)
+						dejaggy_flag += 3;
+				} else if (atv_snr_cnt)
+					atv_snr_cnt = 0;
+				#endif
+				if (like_pulldown22_flag && (cur_lev > 2))
+					dejaggy_flag += 1;
+				/* overwrite dejaggy alpha */
+				if (dejaggy_enable >= 2)
+					dejaggy_flag = dejaggy_enable;
+				if (dejaggy_flag > 4)
+					dejaggy_flag = 4;
+				if (dejaggy_flag)
+					DI_Wr_reg_bits(
+						SRSHARP0_SHARP_DEJ1_MISC,
+						(1<<3)|dejaggy_flag, 0, 4);
+				else
+					DI_Wr_reg_bits(
+						SRSHARP0_SHARP_DEJ1_MISC,
+						0, 3, 1);
+			} else
+				dejaggy_flag = 0;
+		}
+	} else if (is_meson_gxtvbb_cpu()) {
+		dejaggy_flag = -1;
+		DI_Wr_reg_bits(SRSHARP0_SHARP_DEJ1_MISC, 0, 3, 1);
+	}
+}
+
+static unsigned int flm22_sure_num = 100;
+
+/*
+static unsigned int flmxx_sure_num = 50;
+module_param(flmxx_sure_num, uint, 0644);
+MODULE_PARM_DESC(flmxx_sure_num, "ture film-xx/n");
+*/
+
+/* static unsigned int flmxx_sure_num[7]
+ = {50, 50, 50, 50, 50, 50, 50}; */
+static unsigned int flmxx_sure_num[7] = {20, 20, 20, 20, 20, 20, 20};
+static unsigned int flmxx_snum_adr = 7;
+module_param_array(flmxx_sure_num, uint, &flmxx_snum_adr, 0664);
+
+static unsigned int flm22_glbpxlnum_rat = 4; /* 4/256 = 64 */
+
+static unsigned int flm22_glbpxl_maxrow = 16; /* 16/256 = 16 */
+module_param(flm22_glbpxl_maxrow, uint, 0644);
+MODULE_PARM_DESC(flm22_glbpxl_maxrow, "flm22_glbpxl_maxrow/n");
+
+static unsigned int flm22_glbpxl_minrow = 3; /* 4/256 = 64 */
+module_param(flm22_glbpxl_minrow, uint, 0644);
+MODULE_PARM_DESC(flm22_glbpxl_minrow, "flm22_glbpxl_minrow/n");
+
+static unsigned int cmb_3point_rnum;
+module_param(cmb_3point_rnum, uint, 0644);
+MODULE_PARM_DESC(cmb_3point_rnum, "cmb_3point_rnum/n");
+
+static unsigned int cmb_3point_rrat = 32;
+module_param(cmb_3point_rrat, uint, 0644);
+MODULE_PARM_DESC(cmb_3point_rrat, "cmb_3point_rrat/n");
+
 static void pre_de_done_buf_config(void)
 {
 	ulong flags = 0, fiq_flag = 0, irq_flag2 = 0;
 	bool dynamic_flag = false;
+	int hHeight = di_pre_stru.di_nrwr_mif.end_y;
+	int wWidth  = di_pre_stru.di_nrwr_mif.end_x;
+
+	bool flm32 = false;
+	bool flm22 = false;
+	bool flmxx = false;
+	int tb_chk_ret = 0;
+	unsigned int glb_mot = 0;
+	unsigned int mot_row = 0;
+	unsigned int mot_max = 0;
+
 	if (di_pre_stru.di_wr_buf) {
 		if (di_pre_stru.pre_throw_flag > 0) {
 			di_pre_stru.di_wr_buf->throw_flag = 1;
@@ -3317,61 +4557,423 @@ static void pre_de_done_buf_config(void)
 		} else {
 			di_pre_stru.di_wr_buf->throw_flag = 0;
 		}
-	if (di_pre_stru.di_post_wr_buf) {
-		dynamic_flag = read_pulldown_info(
-&(di_pre_stru.di_post_wr_buf->field_pd_info),
-&(di_pre_stru.di_post_wr_buf->win_pd_info[0]));
-		di_pre_stru.static_frame_count =
-dynamic_flag?0:(di_pre_stru.static_frame_count+1);
-		if (di_pre_stru.static_frame_count > static_pic_threshold) {
-			di_pre_stru.static_frame_count = static_pic_threshold;
-			di_pre_stru.di_post_wr_buf->pulldown_mode
-= PULL_DOWN_BLEND_0;
-		} else {
-			di_pre_stru.di_post_wr_buf->pulldown_mode =
+#ifdef DET3D
+		if (di_pre_stru.di_wr_buf->vframe->trans_fmt == 0 &&
+			di_pre_stru.det3d_trans_fmt != 0 && det3d_en) {
+				di_pre_stru.di_wr_buf->vframe->trans_fmt =
+				di_pre_stru.det3d_trans_fmt;
+				set3d_view(di_pre_stru.det3d_trans_fmt,
+					di_pre_stru.di_wr_buf->vframe);
+		}
+#endif
+		if (!di_pre_rdma_enable)
+			di_pre_stru.di_post_wr_buf = di_pre_stru.di_wr_buf;
+
+		if (di_pre_stru.cur_source_type == VFRAME_SOURCE_TYPE_OTHERS &&
+				tff_bff_enable) {
+			tb_chk_ret = tff_bff_check((di_pre_stru.cur_height>>1),
+					di_pre_stru.cur_width);
+			di_pre_stru.di_post_wr_buf->privated &= (~0x3);
+			di_pre_stru.di_post_wr_buf->privated |=	tb_chk_ret;
+		}
+		if (di_pre_stru.di_post_wr_buf) {
+			dynamic_flag = read_pulldown_info(
+				&(di_pre_stru.di_post_wr_buf->field_pd_info),
+				&(di_pre_stru.di_post_wr_buf->win_pd_info[0]));
+			di_pre_stru.static_frame_count =
+				dynamic_flag ? 0 : (di_pre_stru.
+						    static_frame_count + 1);
+			if (di_pre_stru.static_frame_count >
+			    static_pic_threshold) {
+				di_pre_stru.static_frame_count =
+					static_pic_threshold;
+				di_pre_stru.di_post_wr_buf->pulldown_mode =
+					PULL_DOWN_BLEND_0;
+			} else {
+				di_pre_stru.di_post_wr_buf->pulldown_mode =
 					PULL_DOWN_NORMAL;
+			}
+			adaptive_combing_fixing(
+				&(di_pre_stru.di_post_wr_buf->field_pd_info),
+				di_pre_stru.cur_inp_type,
+				wWidth + 1);
 		}
-	}
+
+		tTCNm = 0;
+		if (!di_pre_stru.cur_prog_flag) {
+			/* always read and print data */
+			read_new_pulldown_info(&flmreg);
+
+			/* read_new_pulldown_info(&flmreg); */
+			if ((pldn_calc_en == 1) && pulldown_enable) {
+				dectres.rF22Flag = FlmVOFSftTop(
+					&(dectres.rCmb32Spcl),
+					dectres.rPstCYWnd0,
+					dectres.rPstCYWnd1,
+					dectres.rPstCYWnd2,
+					dectres.rPstCYWnd3,
+					dectres.rPstCYWnd4,
+					&(dectres.rFlmPstGCm),
+					&(dectres.rFlmSltPre),
+					&(dectres.rFlmPstMod),
+					flmreg.rROFldDif01,
+					flmreg.rROFrmDif02,
+					flmreg.rROCmbInf,
+					&tTCNm,
+					&pd_param,
+					hHeight + 1,
+					wWidth  + 1);
+
+				if (hHeight >= 289) /*full hd */
+					tTCNm = tTCNm << 1;
+				if (tTCNm > hHeight)
+					tTCNm = hHeight;
+
+				prt_flg = ((pr_pd >> 1) & 0x1);
+				if (prt_flg) {
+					sprintf(debug_str, "#Pst-Dbg:\n");
+					sprintf(debug_str + strlen(debug_str),
+					"Mod=%d, Pre=%d, GCmb=%d, Lvl2=%d\n",
+					dectres.rFlmPstMod,
+					dectres.rFlmSltPre,
+					dectres.rFlmPstGCm,
+					dectres.rF22Flag);
+
+					sprintf(debug_str + strlen(debug_str),
+					"N%03d: nd[%d~%d], [%d~%d], [%d~%d], [%d~%d]\n",
+					tTCNm,
+					dectres.rPstCYWnd0[0],
+					dectres.rPstCYWnd0[1],
+					dectres.rPstCYWnd1[0],
+					dectres.rPstCYWnd1[1],
+					dectres.rPstCYWnd2[0],
+					dectres.rPstCYWnd2[1],
+					dectres.rPstCYWnd3[0],
+					dectres.rPstCYWnd3[1]);
+
+					pr_info("%s", debug_str);
+				}
+			}
+
+			if (pulldown_enable && di_pre_stru.di_post_wr_buf) {
+				/* refresh, default setting */
+				di_pre_stru.di_post_wr_buf->pulldown_mode =
+					PULL_DOWN_NORMAL;
+				di_pre_stru.di_post_wr_buf->reg0_s = 0;
+				di_pre_stru.di_post_wr_buf->reg0_e = 0;
+				di_pre_stru.di_post_wr_buf->reg0_bmode = 0;
+
+				di_pre_stru.di_post_wr_buf->reg1_s = 0;
+				di_pre_stru.di_post_wr_buf->reg1_e = 0;
+				di_pre_stru.di_post_wr_buf->reg1_bmode = 0;
+
+				di_pre_stru.di_post_wr_buf->reg2_s = 0;
+				di_pre_stru.di_post_wr_buf->reg2_e = 0;
+				di_pre_stru.di_post_wr_buf->reg2_bmode = 0;
+
+				di_pre_stru.di_post_wr_buf->reg3_s = 0;
+				di_pre_stru.di_post_wr_buf->reg3_e = 0;
+				di_pre_stru.di_post_wr_buf->reg3_bmode = 0;
+			}
+			if (dectres.rFlmPstMod == 1)
+				like_pulldown22_flag = dectres.rF22Flag;
+			else
+				like_pulldown22_flag = 0;
+
+			if (di_debug_new_en) {
+				if ((pr_pd >> 1) & 0x1)
+					pr_info("fld_dif_rat=%d\n",
+					field_diff_rate);
+
+				if ((dectres.rF22Flag >=
+					(cmb_3point_rnum + field_diff_rate)) &&
+					(tTCNm >
+					(hHeight * cmb_3point_rrat >> 8))) {
+					if ((pr_pd >> 1) & 0x1)
+						pr_info("coeff-3-point enabled\n");
+				}
+			}
+			if (pulldown_enable == 1 && dectres.rFlmPstMod != 0
+				&& di_pre_stru.di_post_wr_buf) {
+				flm32 = (dectres.rFlmPstMod == 2 &&
+					dectres.rFlmPstGCm == 0);
+
+				if (di_debug_new_en &&
+					(dectres.rFlmPstMod == 1)) {
+					glb_mot = di_pre_stru.di_post_wr_buf->
+						field_pd_info.frame_diff_num;
+					mot_row = glb_mot *
+					flm22_glbpxlnum_rat / (wWidth + 1);
+					mot_max = (flm22_glbpxl_maxrow *
+						hHeight + 128) >> 8;
+					if ((pr_pd >> 1) & 0x1)
+						pr_info("dejaggies level=%3d - (%02d - %02d)\n",
+							dectres.rF22Flag,
+							mot_max, mot_row);
+
+				if (mot_row < mot_max) {
+					if (dectres.rF22Flag >
+						(mot_max - mot_row))
+							dectres.rF22Flag -=
+							(mot_max - mot_row);
+					else
+							dectres.rF22Flag = 0;
+
+				if (mot_row <=
+							flm22_glbpxl_minrow)
+							dectres.rFlmPstMod = 0;
+					}
+				}
+
+				flm22 = (dectres.rFlmPstMod == 1  &&
+					dectres.rF22Flag >= flm22_sure_num);
+				if (dectres.rFlmPstMod >= 4)
+					flmxx = (dectres.rF22Flag >=
+					flmxx_sure_num[dectres.rFlmPstMod - 4]);
+				else
+					flmxx = 0;
+
+				/* 2-2 force */
+				if ((pldn_mod == 0) &&
+					(flm32 || flm22 || flmxx)) {
+					if (dectres.rFlmSltPre == 1)
+						di_pre_stru.di_post_wr_buf
+						->pulldown_mode =
+							PULL_DOWN_BLEND_0;
+					else {
+						di_pre_stru.di_post_wr_buf
+						->pulldown_mode =
+							PULL_DOWN_BLEND_2;
+						}
+				} else if (pldn_mod == 1) {
+					if (dectres.rFlmSltPre == 1)
+						di_pre_stru.di_post_wr_buf
+						->pulldown_mode =
+							PULL_DOWN_BLEND_0;
+					else
+						di_pre_stru.di_post_wr_buf
+						->pulldown_mode =
+							PULL_DOWN_BLEND_2;
+				} else {
+					di_pre_stru.di_post_wr_buf->
+					pulldown_mode =
+						PULL_DOWN_NORMAL;
+				}
+
+				if (flm32 && (pldn_cmb0 == 1)) {
+					di_pre_stru.di_post_wr_buf->reg0_s =
+						dectres.rPstCYWnd0[0];
+					di_pre_stru.di_post_wr_buf->reg0_e =
+						dectres.rPstCYWnd0[1];
+
+					di_pre_stru.di_post_wr_buf->reg1_s =
+						dectres.rPstCYWnd1[0];
+					di_pre_stru.di_post_wr_buf->reg1_e =
+						dectres.rPstCYWnd1[1];
+
+					di_pre_stru.di_post_wr_buf->reg2_s =
+						dectres.rPstCYWnd2[0];
+					di_pre_stru.di_post_wr_buf->reg2_e =
+						dectres.rPstCYWnd2[1];
+
+					di_pre_stru.di_post_wr_buf->reg3_s =
+						dectres.rPstCYWnd3[0];
+					di_pre_stru.di_post_wr_buf->reg3_e =
+						dectres.rPstCYWnd3[1];
+
+					di_pre_stru.di_post_wr_buf->reg0_bmode =
+						dectres.rPstCYWnd0[2];
+					di_pre_stru.di_post_wr_buf->reg1_bmode =
+						dectres.rPstCYWnd1[2];
+					di_pre_stru.di_post_wr_buf->reg2_bmode =
+						dectres.rPstCYWnd2[2];
+					di_pre_stru.di_post_wr_buf->reg3_bmode =
+						dectres.rPstCYWnd3[2];
+				} else if (dectres.rF22Flag > 1 &&
+					dectres.rFlmPstMod == 1 &&
+					pldn_cmb0 == 1) {
+					/* SRSHARP0_SHARP_SR2_CTRL */
+					/* SRSHARP0_SHARP_DEJ2_MISC */
+					/* SRSHARP0_SHARP_DEJ1_MISC */
+
+					if ((pr_pd >> 1) & 0x1)
+						pr_info("dejaggies level= %3d\n",
+						dectres.rF22Flag);
+				} else if (dectres.rFlmPstGCm == 0
+					&& pldn_cmb0 > 1
+					&& pldn_cmb0 <= 5) {
+					di_pre_stru.di_post_wr_buf->reg0_s =
+						dectres.rPstCYWnd0[0];
+					di_pre_stru.di_post_wr_buf->reg0_e =
+						dectres.rPstCYWnd0[1];
+
+					di_pre_stru.di_post_wr_buf->reg1_s =
+						dectres.rPstCYWnd1[0];
+					di_pre_stru.di_post_wr_buf->reg1_e =
+						dectres.rPstCYWnd1[1];
+
+					di_pre_stru.di_post_wr_buf->reg2_s =
+						dectres.rPstCYWnd2[0];
+					di_pre_stru.di_post_wr_buf->reg2_e =
+						dectres.rPstCYWnd2[1];
+
+					di_pre_stru.di_post_wr_buf->reg3_s =
+						dectres.rPstCYWnd3[0];
+					di_pre_stru.di_post_wr_buf->reg3_e =
+						dectres.rPstCYWnd3[1];
+
+					/* 1-->only film-mode
+					 * 2-->windows-->mtn
+					 * 3-->windows-->detected
+					 * 4-->windows-->di */
+					if (pldn_cmb0 == 2) { /* 1-->normal */
+						di_pre_stru.di_post_wr_buf->
+							reg0_bmode =
+							dectres.rPstCYWnd0[2];
+						di_pre_stru.di_post_wr_buf->
+							reg1_bmode =
+							dectres.rPstCYWnd1[2];
+						di_pre_stru.di_post_wr_buf->
+							reg2_bmode =
+							dectres.rPstCYWnd2[2];
+						di_pre_stru.di_post_wr_buf->
+							reg3_bmode =
+							dectres.rPstCYWnd3[2];
+					} else if (pldn_cmb0 == 3) {
+						di_pre_stru.di_post_wr_buf->
+							reg0_bmode = 3;
+						di_pre_stru.di_post_wr_buf->
+							reg1_bmode = 3;
+						di_pre_stru.di_post_wr_buf->
+							reg2_bmode = 3;
+						di_pre_stru.di_post_wr_buf->
+							reg3_bmode = 3;
+					} else if (pldn_cmb0 == 4) {
+						di_pre_stru.di_post_wr_buf->
+							reg0_bmode = 2;
+						di_pre_stru.di_post_wr_buf->
+							reg1_bmode = 2;
+						di_pre_stru.di_post_wr_buf->
+							reg2_bmode = 2;
+						di_pre_stru.di_post_wr_buf->
+							reg3_bmode = 2;
+					} else if (pldn_cmb0 == 5) {
+						di_pre_stru.
+						di_post_wr_buf->reg3_s = 0;
+						di_pre_stru.
+						di_post_wr_buf->reg3_e = 60;
+						di_pre_stru.
+						di_post_wr_buf->reg3_bmode = 0;
+					}
+				}
+				/* else pldn_cmb0==0 (Nothing) */
+				if ((1 == dectres.rFlmPstGCm) && (pldn_cmb1 > 0)
+				    && (pldn_cmb1 <= 5)) {
+					di_pre_stru.di_post_wr_buf->reg0_s =
+						dectres.rPstCYWnd0[0];
+					di_pre_stru.di_post_wr_buf->reg0_e =
+						dectres.rPstCYWnd0[1];
+
+					di_pre_stru.di_post_wr_buf->reg1_s =
+						dectres.rPstCYWnd1[0];
+					di_pre_stru.di_post_wr_buf->reg1_e =
+						dectres.rPstCYWnd1[1];
+
+					di_pre_stru.di_post_wr_buf->reg2_s =
+						dectres.rPstCYWnd2[0];
+					di_pre_stru.di_post_wr_buf->reg2_e =
+						dectres.rPstCYWnd2[1];
+
+					di_pre_stru.di_post_wr_buf->reg3_s =
+						dectres.rPstCYWnd3[0];
+					di_pre_stru.di_post_wr_buf->reg3_e =
+						dectres.rPstCYWnd3[1];
+
+					if (pldn_cmb1 == 1) { /* 1-->normal */
+					di_pre_stru.di_post_wr_buf->reg0_bmode =
+							dectres.rPstCYWnd0[2];
+					di_pre_stru.di_post_wr_buf->reg1_bmode =
+							dectres.rPstCYWnd1[2];
+					di_pre_stru.di_post_wr_buf->reg2_bmode =
+							dectres.rPstCYWnd2[2];
+					di_pre_stru.di_post_wr_buf->reg3_bmode =
+							dectres.rPstCYWnd3[2];
+					} else if (pldn_cmb1 == 2) {
+						di_pre_stru.
+						di_post_wr_buf->reg0_bmode = 3;
+						di_pre_stru.
+						di_post_wr_buf->reg1_bmode = 3;
+						di_pre_stru.
+						di_post_wr_buf->reg2_bmode = 3;
+						di_pre_stru.
+						di_post_wr_buf->reg3_bmode = 3;
+					} else if (pldn_cmb1 == 3) {
+						di_pre_stru.
+						di_post_wr_buf->reg0_bmode = 2;
+						di_pre_stru.
+						di_post_wr_buf->reg1_bmode = 2;
+						di_pre_stru.
+						di_post_wr_buf->reg2_bmode = 2;
+						di_pre_stru.
+						di_post_wr_buf->reg3_bmode = 2;
+					} else if (pldn_cmb1 == 4) {
+						di_pre_stru.
+						di_post_wr_buf->reg2_s = 202;
+						di_pre_stru.
+						di_post_wr_buf->reg2_e = 222;
+						di_pre_stru.
+						di_post_wr_buf->reg2_bmode = 0;
+					}
+				}
+			} else if ((pldn_cmb0 == 6) && (pldn_cmb1 == 6)) {
+				di_pre_stru.di_post_wr_buf->reg1_s = 60;
+				di_pre_stru.di_post_wr_buf->reg1_e = 180;
+				di_pre_stru.di_post_wr_buf->reg1_bmode = 0;
+			}
+		}
+		field_count++;
+		if (field_count == 0x7fffffff)
+			field_count = 3;
+
 		if (di_pre_stru.cur_prog_flag) {
 			if (di_pre_stru.prog_proc_type == 0) {
 				/* di_mem_buf_dup->vfrme
-is either local vframe, or bot field of vframe from in_list */
-					di_pre_stru.di_mem_buf_dup_p->pre_ref_count = 0;
-					di_pre_stru.di_mem_buf_dup_p
-= di_pre_stru.di_chan2_buf_dup_p;
-					di_pre_stru.di_chan2_buf_dup_p
-= di_pre_stru.di_wr_buf;
-#ifdef DI_DEBUG
-					di_print("%s:set di_mem to di_chan2,",
-							__func__);
-					di_print("set di_chan2 to di_wr_buf\n");
-#endif
+				 * is either local vframe,
+				 * or bot field of vframe from in_list */
+				di_pre_stru.di_mem_buf_dup_p->pre_ref_count = 0;
+				di_pre_stru.di_mem_buf_dup_p
+					= di_pre_stru.di_chan2_buf_dup_p;
+				di_pre_stru.di_chan2_buf_dup_p
+					= di_pre_stru.di_wr_buf;
+				di_print("%s:set di_mem to di_chan2,",
+					__func__);
+				di_print("set di_chan2 to di_wr_buf\n");
 			} else {
 				di_pre_stru.di_mem_buf_dup_p->pre_ref_count = 0;
 				/*recycle the progress throw buffer*/
 				if (di_pre_stru.di_wr_buf->throw_flag) {
-					di_pre_stru.di_wr_buf->pre_ref_count = 0;
+					di_pre_stru.di_wr_buf->
+						pre_ref_count = 0;
 					di_pre_stru.di_mem_buf_dup_p = NULL;
-#ifdef DI_DEBUG
-					di_print(
-"%s set throw %s[%d] pre_ref_count to 0.\n", __func__,
-vframe_type_name[di_pre_stru.di_wr_buf->type], di_pre_stru.di_wr_buf->index);
-#endif
+				di_print(
+				"%s set throw %s[%d] pre_ref_count to 0.\n",
+				__func__,
+				vframe_type_name[di_pre_stru.di_wr_buf->type],
+				di_pre_stru.di_wr_buf->index);
 				} else {
 					di_pre_stru.di_mem_buf_dup_p
-= di_pre_stru.di_wr_buf;
+						= di_pre_stru.di_wr_buf;
 				}
-#ifdef DI_DEBUG
 				di_print(
-"%s: set di_mem_buf_dup_p to di_wr_buf\n", __func__);
-#endif
+					"%s: set di_mem_buf_dup_p to di_wr_buf\n",
+					__func__);
 			}
 
 			di_pre_stru.di_wr_buf->seq
-= di_pre_stru.pre_ready_seq++;
+				= di_pre_stru.pre_ready_seq++;
 			di_pre_stru.di_wr_buf->post_ref_count = 0;
 			di_pre_stru.di_wr_buf->left_right
-= di_pre_stru.left_right;
+				= di_pre_stru.left_right;
 			if (di_pre_stru.source_change_flag) {
 				di_pre_stru.di_wr_buf->new_format_flag = 1;
 				di_pre_stru.source_change_flag = 0;
@@ -3381,24 +4983,26 @@ vframe_type_name[di_pre_stru.di_wr_buf->type], di_pre_stru.di_wr_buf->index);
 			if (bypass_state == 1) {
 				di_pre_stru.di_wr_buf->new_format_flag = 1;
 				bypass_state = 0;
-/* #ifdef DI_DEBUG */
 				di_print(
-"%s:bypass_state change to 0, is_bypass() %d trick_mode %d bypass_all %d\n",
-__func__, is_bypass(NULL), trick_mode, bypass_all);
-/* #endif */
+					"%s:bypass_state->0, is_bypass() %d\n",
+					__func__, is_bypass(NULL));
+				di_print(
+					"trick_mode %d bypass_all %d\n",
+					trick_mode, bypass_all);
 			}
 			if (di_pre_stru.di_post_wr_buf)
 				queue_in(di_pre_stru.di_post_wr_buf,
 					QUEUE_PRE_READY);
-#ifdef DI_DEBUG
 			di_print(
-"%s: %s[%d] => pre_ready_list\n", __func__,
-vframe_type_name[di_pre_stru.di_wr_buf->type],
-di_pre_stru.di_wr_buf->index);
-#endif
+				"%s: %s[%d] => pre_ready_list\n", __func__,
+				vframe_type_name[di_pre_stru.di_wr_buf->type],
+				di_pre_stru.di_wr_buf->index);
 			if (di_pre_stru.di_wr_buf) {
-				di_pre_stru.di_post_wr_buf =
-					di_pre_stru.di_wr_buf;
+				if (di_pre_rdma_enable)
+					di_pre_stru.di_post_wr_buf =
+				di_pre_stru.di_wr_buf;
+				else
+					di_pre_stru.di_post_wr_buf = NULL;
 				di_pre_stru.di_wr_buf = NULL;
 			}
 		} else {
@@ -3406,20 +5010,19 @@ di_pre_stru.di_wr_buf->index);
 			di_pre_stru.di_mem_buf_dup_p = NULL;
 			if (di_pre_stru.di_chan2_buf_dup_p) {
 				di_pre_stru.di_mem_buf_dup_p =
-di_pre_stru.di_chan2_buf_dup_p;
-#ifdef DI_DEBUG
+					di_pre_stru.di_chan2_buf_dup_p;
 				di_print(
-"%s: set di_mem_buf_dup_p to di_chan2_buf_dup_p\n", __func__);
-#endif
+				"%s: di_mem_buf_dup_p = di_chan2_buf_dup_p\n",
+				__func__);
 			}
 			di_pre_stru.di_chan2_buf_dup_p = di_pre_stru.di_wr_buf;
 
 			if (di_pre_stru.di_wr_buf->post_proc_flag == 2) {
 				/* add dummy buf, will not be displayed */
 				if (!queue_empty(QUEUE_LOCAL_FREE)) {
-					di_buf_t *di_buf_tmp;
+					struct di_buf_s *di_buf_tmp;
 					di_buf_tmp =
-get_di_buf_head(QUEUE_LOCAL_FREE);
+					get_di_buf_head(QUEUE_LOCAL_FREE);
 					if (di_buf_tmp) {
 						queue_out(di_buf_tmp);
 						di_buf_tmp->pre_ref_count = 0;
@@ -3427,19 +5030,20 @@ get_di_buf_head(QUEUE_LOCAL_FREE);
 						di_buf_tmp->post_proc_flag = 3;
 						di_buf_tmp->new_format_flag = 0;
 						queue_in(
-di_buf_tmp, QUEUE_PRE_READY);
+							di_buf_tmp,
+							QUEUE_PRE_READY);
 					}
-#ifdef DI_DEBUG
 					di_print(
-"%s: dummy %s[%d] => pre_ready_list\n",
-__func__, vframe_type_name[di_buf_tmp->type], di_buf_tmp->index);
-#endif
-			   }
+					"%s: dummy %s[%d] => pre_ready_list\n",
+					__func__,
+					vframe_type_name[di_buf_tmp->type],
+					di_buf_tmp->index);
+				}
 			}
 			di_pre_stru.di_wr_buf->seq =
-di_pre_stru.pre_ready_seq++;
+				di_pre_stru.pre_ready_seq++;
 			di_pre_stru.di_wr_buf->left_right =
-di_pre_stru.left_right;
+				di_pre_stru.left_right;
 			di_pre_stru.di_wr_buf->post_ref_count = 0;
 			if (di_pre_stru.source_change_flag) {
 				di_pre_stru.di_wr_buf->new_format_flag = 1;
@@ -3450,56 +5054,59 @@ di_pre_stru.left_right;
 			if (bypass_state == 1) {
 				di_pre_stru.di_wr_buf->new_format_flag = 1;
 				bypass_state = 0;
-/* #ifdef DI_DEBUG */
+
 				di_print(
-"%s:bypass_state change to 0, is_bypass() %d trick_mode %d bypass_all %d\n",
-__func__, is_bypass(NULL), trick_mode, bypass_all);
-/* #endif */
+					"%s:bypass_state->0, is_bypass() %d\n",
+					__func__, is_bypass(NULL));
+				di_print(
+					"trick_mode %d bypass_all %d\n",
+					trick_mode, bypass_all);
+
 			}
 
 			if (di_pre_stru.di_post_wr_buf)
 				queue_in(di_pre_stru.di_post_wr_buf,
 					QUEUE_PRE_READY);
 
-#ifdef DI_DEBUG
 			di_print("%s: %s[%d] => pre_ready_list\n", __func__,
-vframe_type_name[di_pre_stru.di_wr_buf->type], di_pre_stru.di_wr_buf->index);
-#endif
+				vframe_type_name[di_pre_stru.di_wr_buf->type],
+				di_pre_stru.di_wr_buf->index);
+
 			if (di_pre_stru.di_wr_buf) {
-				di_pre_stru.di_post_wr_buf =
-					di_pre_stru.di_wr_buf;
+				if (di_pre_rdma_enable)
+					di_pre_stru.di_post_wr_buf =
+				di_pre_stru.di_wr_buf;
+				else
+					di_pre_stru.di_post_wr_buf = NULL;
 				di_pre_stru.di_wr_buf = NULL;
 			}
-
 		}
 	}
 
 	if (di_pre_stru.di_post_inp_buf) {
-#ifdef DI_DEBUG
 		di_print("%s: %s[%d] => recycle_list\n", __func__,
-vframe_type_name[di_pre_stru.di_inp_buf->type],
-di_pre_stru.di_inp_buf->index);
-#endif
+			vframe_type_name[di_pre_stru.di_inp_buf->type],
+			di_pre_stru.di_inp_buf->index);
 		di_lock_irqfiq_save(irq_flag2, fiq_flag);
 		queue_in(di_pre_stru.di_post_inp_buf, QUEUE_RECYCLE);
 		di_pre_stru.di_post_inp_buf = NULL;
 		di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
 	}
 	if (di_pre_stru.di_inp_buf) {
-			di_pre_stru.di_post_inp_buf = di_pre_stru.di_inp_buf;
-			di_pre_stru.di_inp_buf = NULL;
-		}
+		di_pre_stru.di_post_inp_buf = di_pre_stru.di_inp_buf;
+		di_pre_stru.di_inp_buf = NULL;
+	}
 }
 
 #if defined(NEW_DI_TV)
 /* add for di Reg re-init */
 static enum
-vframe_source_type_e  vframe_source_type = VFRAME_SOURCE_TYPE_OTHERS;
+vframe_source_type_e vframe_source_type = VFRAME_SOURCE_TYPE_OTHERS;
 static void di_set_para_by_tvinfo(vframe_t *vframe)
 {
 	if (vframe->source_type == vframe_source_type)
 		return;
-	pr_info("%s: tvinfo change, reset di Reg\n", __func__);
+	pr_dbg("%s: tvinfo change, reset di Reg\n", __func__);
 	vframe_source_type = vframe->source_type;
 	/* add for smooth skin */
 	if (vframe_source_type != VFRAME_SOURCE_TYPE_OTHERS)
@@ -3513,19 +5120,20 @@ static void di_set_para_by_tvinfo(vframe_t *vframe)
 		RDMA_WR(DI_EI_CTRL1, 0x5ac00f80);
 		RDMA_WR(DI_EI_CTRL2, 0x0aff0aff);
 		RDMA_WR(DI_BLEND_CTRL, 0x19f00019);
-		pr_info(
-"%s: tvinfo change, reset di Reg in tuner source\n", __func__);
+		pr_dbg(
+			"%s: tvinfo change, reset di Reg in tuner source\n",
+			__func__);
 	}
 
-	/* Wr(DI_EI_CTRL0, ei_ctrl0); */
-	/* Wr(DI_EI_CTRL1, ei_ctrl1); */
-	/* Wr(DI_EI_CTRL2, ei_ctrl2); */
-
+	/* DI_Wr(DI_EI_CTRL0, ei_ctrl0); */
+	/* DI_Wr(DI_EI_CTRL1, ei_ctrl1); */
+	/* DI_Wr(DI_EI_CTRL2, ei_ctrl2); */
 }
 #endif
-static void recycle_vframe_type_pre(di_buf_t *di_buf)
+static void recycle_vframe_type_pre(struct di_buf_s *di_buf)
 {
 	ulong flags = 0, fiq_flag = 0, irq_flag2 = 0;
+
 	di_lock_irqfiq_save(irq_flag2, fiq_flag);
 
 	queue_in(di_buf, QUEUE_RECYCLE);
@@ -3533,11 +5141,11 @@ static void recycle_vframe_type_pre(di_buf_t *di_buf)
 	di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
 }
 /*
-* it depend on local buffer queue type is 2
-*/
+ * it depend on local buffer queue type is 2
+ */
 static int peek_free_linked_buf(void)
 {
-	di_buf_t *p = NULL;
+	struct di_buf_s *p = NULL;
 	int itmp, p_index = -2;
 
 	if (list_count(QUEUE_LOCAL_FREE) < 2)
@@ -3552,44 +5160,105 @@ static int peek_free_linked_buf(void)
 	return -1;
 }
 /*
-* it depend on local buffer queue type is 2
-*/
-static di_buf_t *get_free_linked_buf(int idx)
+ * it depend on local buffer queue type is 2
+ */
+static struct di_buf_s *get_free_linked_buf(int idx)
 {
-	di_buf_t *di_buf = NULL, *di_buf_linked = NULL;
+	struct di_buf_s *di_buf = NULL, *di_buf_linked = NULL;
 	int pool_idx = 0, di_buf_idx = 0;
 
 	queue_t *q = &(queue[QUEUE_LOCAL_FREE]);
+
 	if (list_count(QUEUE_LOCAL_FREE) < 2)
 		return NULL;
-	if (q->pool[idx] != 0 && q->pool[idx+1] != 0) {
-		pool_idx = ((q->pool[idx]>>8)&0xff)-1;
-		di_buf_idx = q->pool[idx]&0xff;
+	if (q->pool[idx] != 0 && q->pool[idx + 1] != 0) {
+		pool_idx = ((q->pool[idx] >> 8) & 0xff) - 1;
+		di_buf_idx = q->pool[idx] & 0xff;
 		if (pool_idx < VFRAME_TYPE_NUM) {
 			if (di_buf_idx < di_buf_pool[pool_idx].size) {
-				di_buf =
-&(di_buf_pool[pool_idx].di_buf_ptr[di_buf_idx]);
+				di_buf = &(di_buf_pool[pool_idx].
+					di_buf_ptr[di_buf_idx]);
 				queue_out(di_buf);
 			}
 		}
-		pool_idx = ((q->pool[idx+1]>>8)&0xff)-1;
-		di_buf_idx = q->pool[idx+1]&0xff;
+		pool_idx = ((q->pool[idx + 1] >> 8) & 0xff) - 1;
+		di_buf_idx = q->pool[idx + 1] & 0xff;
 		if (pool_idx < VFRAME_TYPE_NUM) {
 			if (di_buf_idx < di_buf_pool[pool_idx].size) {
-				di_buf_linked =
-&(di_buf_pool[pool_idx].di_buf_ptr[di_buf_idx]);
+				di_buf_linked =	&(di_buf_pool[pool_idx].
+					di_buf_ptr[di_buf_idx]);
 				queue_out(di_buf_linked);
 			}
 		}
 		di_buf->di_wr_linked_buf = di_buf_linked;
-
 	}
 	return di_buf;
 }
 
+
+static void dump_vframe_input(vframe_t *vframe)
+{
+	unsigned int canvas_w = 0, canvas_h = 0, canvas_real_size = 0;
+	unsigned int y_size = 0;
+	unsigned int uv_size = 0;
+	void *buff = NULL;
+	struct canvas_s vf_canvas;
+	if (NULL == vframe)
+		return;
+	canvas_read(vframe->canvas0Addr & 0xff, &vf_canvas);
+	canvas_w = vf_canvas.width;
+	canvas_h = vf_canvas.height;
+	y_size = canvas_w * canvas_h;
+	uv_size = canvas_w * canvas_h / 2;
+	canvas_real_size = y_size + uv_size;
+	dump_one_frame_size = canvas_real_size;
+	pr_dbg("canvas_w: %d, canvas_h: %d, canvas_real_size: %d\n",
+		canvas_w, canvas_h, canvas_real_size);
+	pr_dbg("canvas0Addr: %x\n", vframe->canvas0Addr);
+	pr_dbg("canvas1Addr: %x\n", vframe->canvas1Addr);
+	if (dump_vf_start_flag) {
+		pr_dbg("vf_input_buff size: %d\n",
+			canvas_real_size * dump_vf_num);
+		vf_input_buff =
+			kmalloc(canvas_real_size * dump_vf_num, GFP_KERNEL);
+		pr_dbg("malloc vframe buff\n");
+	}
+	if (NULL == vf_input_buff) {
+		dump_vf_num_inner = 0;
+		pr_dbg("kmalloc vf_input_buff failed\n");
+		return;
+	}
+	if ((!is_progressive(vframe))
+		&& ((vframe->height == 576) || (vframe->height == 480))
+		&& ((vframe->type & VIDTYPE_TYPEMASK)
+			== VIDTYPE_INTERLACE_TOP)) {
+		return;
+	}
+	buff = phys_to_virt(canvas_get_addr(vframe->canvas0Addr & 0xff));
+	if (NULL == buff) {
+		dump_vf_num_inner = 0;
+		pr_dbg("buff is NULL\n");
+		return;
+	}
+	vf_input_size = canvas_real_size;
+	memcpy(vf_input_buff + (dump_buff_offset * canvas_real_size),
+		buff, y_size);
+	buff = phys_to_virt(canvas_get_addr((vframe->canvas0Addr >> 8) & 0xff));
+	if (NULL == buff) {
+		dump_vf_num_inner = 0;
+		return;
+	}
+	memcpy(vf_input_buff + y_size + (dump_buff_offset * vf_input_size),
+		buff, uv_size);
+	++dump_buff_offset;
+	--dump_vf_num_inner;
+	pr_dbg("dup vf_input_buff OK\n");
+	return;
+}
+
 static unsigned char pre_de_buf_config(void)
 {
-	di_buf_t *di_buf = NULL;
+	struct di_buf_s *di_buf = NULL;
 	vframe_t *vframe;
 	int i, di_linked_buf_idx = -1;
 	unsigned char change_type = 0;
@@ -3597,61 +5266,60 @@ static unsigned char pre_de_buf_config(void)
 	if (di_blocking)
 		return 0;
 	if ((queue_empty(QUEUE_IN_FREE) && (!di_pre_stru.di_inp_buf_next)) ||
-		queue_empty(QUEUE_LOCAL_FREE)) {
+	    (queue_empty(QUEUE_LOCAL_FREE)))
 		return 0;
-	}
 
 	if (is_bypass(NULL)) {
 		/* some provider has problem if receiver
-		get all buffers of provider */
+		 * get all buffers of provider */
 		int in_buf_num = 0;
-		for (i = 0; i < MAX_IN_BUF_NUM; i++) {
+		for (i = 0; i < MAX_IN_BUF_NUM; i++)
 			if (vframe_in[i] != NULL)
 				in_buf_num++;
-		}
 		if (in_buf_num > bypass_get_buf_threshold
 #ifdef DET3D
-			&& (di_pre_stru.vframe_interleave_flag == 0)
+		    && (di_pre_stru.vframe_interleave_flag == 0)
 #endif
-			) {
+		    )
 			return 0;
-		}
 	} else if (di_pre_stru.prog_proc_type == 2) {
 		di_linked_buf_idx = peek_free_linked_buf();
-	if (di_linked_buf_idx == -1)
+		if (di_linked_buf_idx == -1 && used_post_buf_index != -1) {
+			recycle_keep_buffer();
+			pr_info("%s: recycle keep buffer for peek null linked buf\n",
+				__func__);
 			return 0;
+		}
 	}
-
 	if (di_pre_stru.di_inp_buf_next) {
 		di_pre_stru.di_inp_buf = di_pre_stru.di_inp_buf_next;
 		di_pre_stru.di_inp_buf_next = NULL;
-#ifdef DI_DEBUG
 		di_print("%s: di_inp_buf_next %s[%d] => di_inp_buf\n",
-__func__, vframe_type_name[di_pre_stru.di_inp_buf->type],
-di_pre_stru.di_inp_buf->index);
-#endif
+			__func__,
+			vframe_type_name[di_pre_stru.di_inp_buf->type],
+			di_pre_stru.di_inp_buf->index);
 		if (di_pre_stru.di_mem_buf_dup_p == NULL) {/* use n */
 			di_pre_stru.di_mem_buf_dup_p = di_pre_stru.di_inp_buf;
-#ifdef DI_DEBUG
 			di_print(
-"%s: set di_mem_buf_dup_p to be di_inp_buf\n", __func__);
-#endif
+				"%s: set di_mem_buf_dup_p to be di_inp_buf\n",
+				__func__);
 		}
 	} else {
 		/* check if source change */
 #ifdef CHECK_VDIN_BUF_ERROR
-#define WR_CANVAS_BIT					0
-#define WR_CANVAS_WID					8
+#define WR_CANVAS_BIT                                   0
+#define WR_CANVAS_WID                                   8
 
 		vframe = vf_peek(VFM_NAME);
 
 		if (vframe && is_from_vdin(vframe)) {
 			if (vframe->canvas0Addr ==
-Rd_reg_bits((VDIN_WR_CTRL + 0), WR_CANVAS_BIT, WR_CANVAS_WID))
+			    Rd_reg_bits((VDIN_WR_CTRL + 0), WR_CANVAS_BIT,
+				    WR_CANVAS_WID))
 				same_w_r_canvas_count++;
-			#ifdef RUN_DI_PROCESS_IN_IRQ
+#ifdef RUN_DI_PROCESS_IN_IRQ
 			di_pre_stru.vdin2nr = is_input2pre();
-			#endif
+#endif
 		}
 #endif
 
@@ -3660,30 +5328,53 @@ Rd_reg_bits((VDIN_WR_CTRL + 0), WR_CANVAS_BIT, WR_CANVAS_WID))
 		if (vframe == NULL)
 			return 0;
 
-	if (vframe->width > 10000 || vframe->height > 10000 ||
-di_pre_stru.bad_frame_throw_count > 0) {
-		if (vframe->width > 10000 || vframe->height > 10000)
-			di_pre_stru.bad_frame_throw_count = 10;
-		di_pre_stru.bad_frame_throw_count--;
-		vf_put(vframe, VFM_NAME);
-		vf_notify_provider(
-VFM_NAME, VFRAME_EVENT_RECEIVER_PUT, NULL);
-		return 0;
-	}
+		vframe->prog_proc_config = (prog_proc_config&0x20) >> 5;
+
+		if (dump_vf_start_flag)
+			dump_vf_num_inner = dump_vf_num;
 
+		if (dump_vf_num_inner) {
+			dump_vframe_input(vframe);
+			dump_vf_start_flag = 0;
+		}
+		if (0 == dump_vf_num_inner)
+			dump_buff_offset = 0;
+
+		if (vframe->width > 10000 || vframe->height > 10000 ||
+		    di_pre_stru.bad_frame_throw_count > 0) {
+			if (vframe->width > 10000 || vframe->height > 10000)
+				di_pre_stru.bad_frame_throw_count = 10;
+			di_pre_stru.bad_frame_throw_count--;
+			vf_put(vframe, VFM_NAME);
+			vf_notify_provider(
+				VFM_NAME, VFRAME_EVENT_RECEIVER_PUT, NULL);
+			return 0;
+		}
 		if (
-((vframe->type & VIDTYPE_TYPEMASK) != VIDTYPE_PROGRESSIVE) &&
-(vframe->width == 1920) && (vframe->height == 1088))
+			((vframe->type & VIDTYPE_TYPEMASK) !=
+			 VIDTYPE_PROGRESSIVE) &&
+			(vframe->width == 1920) && (vframe->height == 1088))
 			force_height = 1080;
-		 else
+		else
 			force_height = 0;
-
+		if (
+			(vframe->source_type == VFRAME_SOURCE_TYPE_OTHERS) &&
+			(vframe->width % 2 == 1)) {
+			force_width = vframe->width - 1;
+			if (force_width != (vframe->width - 1))
+				pr_info("DI: force source width %u to even num %d.\n",
+					vframe->width, force_width);
+		} else {
+			force_width = 0;
+		}
 		di_pre_stru.source_trans_fmt = vframe->trans_fmt;
-	di_pre_stru.left_right = di_pre_stru.left_right?0:1;
+		di_pre_stru.left_right = di_pre_stru.left_right ? 0 : 1;
 
-		if (((invert_top_bot&0x2) != 0) && (!is_progressive(vframe))) {
+		if (((invert_top_bot & 0x2) != 0) &&
+		    (!is_progressive(vframe))) {
 			if (
-(vframe->type & VIDTYPE_TYPEMASK) == VIDTYPE_INTERLACE_TOP) {
+				(vframe->type & VIDTYPE_TYPEMASK) ==
+				VIDTYPE_INTERLACE_TOP) {
 				vframe->type &= (~VIDTYPE_TYPEMASK);
 				vframe->type |= VIDTYPE_INTERLACE_BOTTOM;
 			} else {
@@ -3698,30 +5389,30 @@ VFM_NAME, VFRAME_EVENT_RECEIVER_PUT, NULL);
 		if (force_height)
 			vframe->height = force_height;
 
-#ifdef DI_DEBUG
 		di_print("%s: vf_get => 0x%p\n", __func__, vframe);
-#endif
+
 		provider_vframe_level--;
 		di_buf = get_di_buf_head(QUEUE_IN_FREE);
 
 		if (check_di_buf(di_buf, 10))
 			return 0;
 
-		if (di_log_flag&DI_LOG_VFRAME)
+		if (di_log_flag & DI_LOG_VFRAME)
 			dump_vframe(vframe);
 
-	#ifdef SUPPORT_MPEG_TO_VDIN
-	if (
-(!is_from_vdin(vframe)) &&
-(vframe->sig_fmt == TVIN_SIG_FMT_NULL) && mpeg2vdin_flag) {
-		struct vdin_arg_s vdin_arg;
-		struct vdin_v4l2_ops_s *vdin_ops = get_vdin_v4l2_ops();
-		vdin_arg.cmd = VDIN_CMD_GET_HISTGRAM;
-		vdin_arg.private = (unsigned int)vframe;
-		if (vdin_ops->tvin_vdin_func)
-			vdin_ops->tvin_vdin_func(0, &vdin_arg);
-	}
-	#endif
+#ifdef SUPPORT_MPEG_TO_VDIN
+		if (
+			(!is_from_vdin(vframe)) &&
+			(vframe->sig_fmt == TVIN_SIG_FMT_NULL) &&
+			mpeg2vdin_flag) {
+			struct vdin_arg_s vdin_arg;
+			struct vdin_v4l2_ops_s *vdin_ops = get_vdin_v4l2_ops();
+			vdin_arg.cmd = VDIN_CMD_GET_HISTGRAM;
+			vdin_arg.private = (unsigned int)vframe;
+			if (vdin_ops->tvin_vdin_func)
+				vdin_ops->tvin_vdin_func(0, &vdin_arg);
+		}
+#endif
 		memcpy(di_buf->vframe, vframe, sizeof(vframe_t));
 
 		di_buf->vframe->private_data = di_buf;
@@ -3732,47 +5423,65 @@ VFM_NAME, VFRAME_EVENT_RECEIVER_PUT, NULL);
 		change_type = is_source_change(vframe);
 		/* source change, when i mix p,force p as i*/
 		if (change_type == 1 || (change_type == 2 &&
-di_pre_stru.cur_prog_flag == 1)) {
+					 di_pre_stru.cur_prog_flag == 1)) {
 			if (di_pre_stru.di_mem_buf_dup_p) {
 				/*avoid only 2 i field then p field*/
 				if (
-(di_pre_stru.cur_prog_flag == 0) && use_2_interlace_buff)
-					di_pre_stru.di_mem_buf_dup_p->post_proc_flag = -1;
+					(di_pre_stru.cur_prog_flag == 0) &&
+					use_2_interlace_buff)
+					di_pre_stru.di_mem_buf_dup_p->
+					post_proc_flag = -1;
 				di_pre_stru.di_mem_buf_dup_p->pre_ref_count = 0;
 				di_pre_stru.di_mem_buf_dup_p = NULL;
-
 			}
 			if (di_pre_stru.di_chan2_buf_dup_p) {
 				/*avoid only 1 i field then p field*/
 				if (
-(di_pre_stru.cur_prog_flag == 0) && use_2_interlace_buff)
-					di_pre_stru.di_chan2_buf_dup_p->post_proc_flag = -1;
-				di_pre_stru.di_chan2_buf_dup_p->pre_ref_count = 0;
+					(di_pre_stru.cur_prog_flag == 0) &&
+					use_2_interlace_buff)
+					di_pre_stru.di_chan2_buf_dup_p->
+					post_proc_flag = -1;
+				di_pre_stru.di_chan2_buf_dup_p->pre_ref_count =
+					0;
 				di_pre_stru.di_chan2_buf_dup_p = NULL;
 			}
-/* #ifdef DI_DEBUG */
-			pr_info("%s: source change: 0x%x/%d/%d/%d=>0x%x/%d/%d/%d\n",
-__func__, di_pre_stru.cur_inp_type, di_pre_stru.cur_width,
-di_pre_stru.cur_height, di_pre_stru.cur_source_type,
-di_buf->vframe->type, di_buf->vframe->width,
-di_buf->vframe->height,	di_buf->vframe->source_type);
-/* #endif */
+			/* force recycle keep buffer when switch source */
+			if (used_post_buf_index != -1) {
+				if (di_buf_post[used_post_buf_index].vframe
+					->source_type !=
+					di_buf->vframe->source_type) {
+					recycle_keep_buffer();
+					pr_info("%s: source type changed!!!\n",
+						__func__);
+				}
+			}
+			pr_info(
+			"%s: source change: 0x%x/%d/%d/%d=>0x%x/%d/%d/%d\n",
+				__func__,
+				di_pre_stru.cur_inp_type,
+				di_pre_stru.cur_width,
+				di_pre_stru.cur_height,
+				di_pre_stru.cur_source_type,
+				di_buf->vframe->type,
+				di_buf->vframe->width,
+				di_buf->vframe->height,
+				di_buf->vframe->source_type);
 			di_pre_stru.cur_width = di_buf->vframe->width;
 			di_pre_stru.cur_height = di_buf->vframe->height;
 			di_pre_stru.cur_prog_flag =
-is_progressive(di_buf->vframe);
+				is_progressive(di_buf->vframe);
 			if (di_pre_stru.cur_prog_flag) {
 				if ((use_2_interlace_buff) &&
-!(prog_proc_config&0x10))
+				    !(prog_proc_config & 0x10))
 					di_pre_stru.prog_proc_type = 2;
 				else
 					di_pre_stru.prog_proc_type
-= prog_proc_config&0x10;
+						= prog_proc_config & 0x10;
 			} else
 				di_pre_stru.prog_proc_type = 0;
 			di_pre_stru.cur_inp_type = di_buf->vframe->type;
 			di_pre_stru.cur_source_type =
-di_buf->vframe->source_type;
+				di_buf->vframe->source_type;
 			di_pre_stru.cur_sig_fmt = di_buf->vframe->sig_fmt;
 			di_pre_stru.orientation = di_buf->vframe->video_angle;
 			di_pre_stru.source_change_flag = 1;
@@ -3781,227 +5490,214 @@ di_buf->vframe->source_type;
 			di_set_para_by_tvinfo(vframe);
 #endif
 #ifdef SUPPORT_MPEG_TO_VDIN
-		if ((!is_from_vdin(vframe)) &&
-(vframe->sig_fmt == TVIN_SIG_FMT_NULL) && (mpeg2vdin_en)) {
-			struct vdin_arg_s vdin_arg;
-			struct vdin_v4l2_ops_s *vdin_ops = get_vdin_v4l2_ops();
-			vdin_arg.cmd = VDIN_CMD_MPEGIN_START;
-			vdin_arg.h_active = di_pre_stru.cur_width;
-			vdin_arg.v_active = di_pre_stru.cur_height;
-			if (vdin_ops->tvin_vdin_func)
-				vdin_ops->tvin_vdin_func(0, &vdin_arg);
-			mpeg2vdin_flag = 1;
-		}
+			if ((!is_from_vdin(vframe)) &&
+			    (vframe->sig_fmt == TVIN_SIG_FMT_NULL) &&
+			    (mpeg2vdin_en)) {
+				struct vdin_arg_s vdin_arg;
+				struct vdin_v4l2_ops_s *vdin_ops =
+					get_vdin_v4l2_ops();
+				vdin_arg.cmd = VDIN_CMD_MPEGIN_START;
+				vdin_arg.h_active = di_pre_stru.cur_width;
+				vdin_arg.v_active = di_pre_stru.cur_height;
+				if (vdin_ops->tvin_vdin_func)
+					vdin_ops->tvin_vdin_func(0, &vdin_arg);
+				mpeg2vdin_flag = 1;
+			}
 #endif
 #ifdef NEW_DI_V1
 			di_pre_stru.field_count_for_cont = 0;
 #endif
-		} else {
+		} else if (di_pre_stru.cur_prog_flag == 0) {
 			/* check if top/bot interleaved */
-			if (di_pre_stru.cur_prog_flag == 0) {
-				if (change_type == 2)
-					/* source is i interleaves p fields */
-					di_pre_stru.force_interlace = true;
-				if (
-(di_pre_stru.cur_inp_type & VIDTYPE_TYPEMASK) ==
-(di_buf->vframe->type & VIDTYPE_TYPEMASK)) {
+			if (change_type == 2)
+				/* source is i interleaves p fields */
+				di_pre_stru.force_interlace = true;
+			if ((di_pre_stru.cur_inp_type &
+			VIDTYPE_TYPEMASK) == (di_buf->vframe->type &
+			VIDTYPE_TYPEMASK)) {
 #ifdef CHECK_VDIN_BUF_ERROR
-					if (
-(di_buf->vframe->type & VIDTYPE_TYPEMASK) == VIDTYPE_INTERLACE_TOP)
-						same_field_top_count++;
-					else
-						same_field_bot_count++;
+				if ((di_buf->vframe->type &
+				VIDTYPE_TYPEMASK) ==
+				VIDTYPE_INTERLACE_TOP)
+					same_field_top_count++;
+				else
+					same_field_bot_count++;
 #endif
-					if (
-di_pre_stru.same_field_source_flag < same_field_source_flag_th) {
-						/*some source's filed
-is top or bot always*/
-						di_pre_stru.same_field_source_flag++;
+				if (di_pre_stru.same_field_source_flag <
+				same_field_source_flag_th) {
+					/* some source's filed
+					 * is top or bot always */
+					di_pre_stru.same_field_source_flag++;
 
 					if (skip_wrong_field &&
-is_from_vdin(di_buf->vframe)) {
-						recycle_vframe_type_pre(di_buf);
+					is_from_vdin(di_buf->vframe)) {
+						recycle_vframe_type_pre(
+							di_buf);
 						return 0;
 					}
 				}
-			}
-				else{
-					di_pre_stru.same_field_source_flag = 0;
-				}
-			}
+
+			} else
+				di_pre_stru.same_field_source_flag = 0;
+			di_pre_stru.cur_inp_type = di_buf->vframe->type;
+		} else {
+			di_pre_stru.same_field_source_flag = 0;
 			di_pre_stru.cur_inp_type = di_buf->vframe->type;
 		}
 
-			if (is_bypass(di_buf->vframe)) {
-				/* bypass progressive */
-				di_buf->seq = di_pre_stru.pre_ready_seq++;
-				di_buf->post_ref_count = 0;
-				if (di_pre_stru.source_change_flag) {
-					di_buf->new_format_flag = 1;
-					di_pre_stru.source_change_flag = 0;
-				} else {
-					di_buf->new_format_flag = 0;
-				}
+		if (is_bypass(di_buf->vframe)) {
+			/* bypass progressive */
+			di_buf->seq = di_pre_stru.pre_ready_seq++;
+			di_buf->post_ref_count = 0;
+			if (di_pre_stru.source_change_flag) {
+				di_buf->new_format_flag = 1;
+				di_pre_stru.source_change_flag = 0;
+			} else {
+				di_buf->new_format_flag = 0;
+			}
 
-				if (bypass_state == 0) {
-					if (di_pre_stru.di_mem_buf_dup_p) {
-						di_pre_stru.di_mem_buf_dup_p->pre_ref_count = 0;
-						di_pre_stru.di_mem_buf_dup_p = NULL;
-					}
-					if (di_pre_stru.di_chan2_buf_dup_p) {
-						di_pre_stru.di_chan2_buf_dup_p->pre_ref_count = 0;
-						di_pre_stru.di_chan2_buf_dup_p = NULL;
-					}
+			if (bypass_state == 0) {
+				if (di_pre_stru.di_mem_buf_dup_p) {
+					di_pre_stru.di_mem_buf_dup_p->
+					pre_ref_count = 0;
+					di_pre_stru.di_mem_buf_dup_p = NULL;
+				}
+				if (di_pre_stru.di_chan2_buf_dup_p) {
+					di_pre_stru.di_chan2_buf_dup_p->
+					pre_ref_count = 0;
+					di_pre_stru.di_chan2_buf_dup_p = NULL;
+				}
 
 				if (di_pre_stru.di_wr_buf) {
-					di_pre_stru.di_wr_buf->pre_ref_count = 0;
-					di_pre_stru.di_wr_buf->post_ref_count = 0;
+					di_pre_stru.di_wr_buf->pre_ref_count =
+						0;
+					di_pre_stru.di_wr_buf->post_ref_count =
+						0;
 					recycle_vframe_type_pre(
-di_pre_stru.di_wr_buf);
+						di_pre_stru.di_wr_buf);
 
-#ifdef DI_DEBUG
 					di_print(
-"%s: %s[%d] => recycle_list\n", __func__,
-vframe_type_name[di_pre_stru.di_wr_buf->type],
-di_pre_stru.di_wr_buf->index);
-#endif
-						di_pre_stru.di_wr_buf = NULL;
-					}
-
-						di_buf->new_format_flag = 1;
-						bypass_state = 1;
-/* #ifdef DI_DEBUG */
-				di_print(
-"%s:bypass_state change to 1, is_bypass() %d trick_mode %d bypass_all %d\n",
-__func__, is_bypass(NULL), trick_mode, bypass_all);
-/* #endif */
+						"%s: %s[%d] => recycle_list\n",
+						__func__,
+						vframe_type_name[di_pre_stru.
+							di_wr_buf->type],
+						di_pre_stru.di_wr_buf->index);
+					di_pre_stru.di_wr_buf = NULL;
 				}
 
-				top_bot_config(di_buf);
-				queue_in(di_buf, QUEUE_PRE_READY);
-				if (
-(bypass_pre&0x2) && !di_pre_stru.cur_prog_flag)
-					di_buf->post_proc_flag = -2;
-				else
-					di_buf->post_proc_flag = 0;
-#ifdef DI_DEBUG
+				di_buf->new_format_flag = 1;
+				bypass_state = 1;
 				di_print(
-"%s: %s[%d] => pre_ready_list\n", __func__,
-vframe_type_name[di_buf->type], di_buf->index);
-#endif
-				return 0;
-			} else if (is_progressive(di_buf->vframe)) {
-				if (
-is_handle_prog_frame_as_interlace(vframe) && (is_progressive(vframe))) {
-					di_buf_t *di_buf_tmp = NULL;
-					vframe_in[di_buf->index] = NULL;
-					di_buf->vframe->type &=
-(~VIDTYPE_TYPEMASK);
-					di_buf->vframe->type |=
-VIDTYPE_INTERLACE_TOP;
-					di_buf->post_proc_flag = 0;
+					"%s:bypass_state = 1, is_bypass() %d\n",
+					__func__, is_bypass(NULL));
+				di_print(
+					"trick_mode %d bypass_all %d\n",
+					trick_mode, bypass_all);
+			}
 
-					di_buf_tmp =
-get_di_buf_head(QUEUE_IN_FREE);
-					di_buf_tmp->vframe->private_data
-= di_buf_tmp;
-					di_buf_tmp->seq = di_pre_stru.in_seq;
-					di_pre_stru.in_seq++;
-					queue_out(di_buf_tmp);
-					vframe_in[di_buf_tmp->index] = vframe;
-					memcpy(
-di_buf_tmp->vframe, vframe, sizeof(vframe_t));
-					di_pre_stru.di_inp_buf_next
-= di_buf_tmp;
-					di_buf_tmp->vframe->type
-&= (~VIDTYPE_TYPEMASK);
-					di_buf_tmp->vframe->type
-|= VIDTYPE_INTERLACE_BOTTOM;
-					di_buf_tmp->post_proc_flag = 0;
-
-					di_pre_stru.di_inp_buf = di_buf;
-#ifdef DI_DEBUG
-					di_print(
-"%s: %s[%d] => di_inp_buf; %s[%d] => di_inp_buf_next\n",
-__func__, vframe_type_name[di_buf->type], di_buf->index,
-vframe_type_name[di_buf_tmp->type], di_buf_tmp->index);
-#endif
+			top_bot_config(di_buf);
+			queue_in(di_buf, QUEUE_PRE_READY);
+			if (
+				(bypass_pre & 0x2) &&
+				!di_pre_stru.cur_prog_flag)
+				di_buf->post_proc_flag = -2;
+			else
+				di_buf->post_proc_flag = 0;
+			di_print(
+				"%s: %s[%d] => pre_ready_list\n", __func__,
+				vframe_type_name[di_buf->type], di_buf->index);
+			return 0;
+		} else if (is_progressive(di_buf->vframe)) {
+			if (
+				is_handle_prog_frame_as_interlace(vframe) &&
+				(is_progressive(vframe))) {
+				struct di_buf_s *di_buf_tmp = NULL;
+				vframe_in[di_buf->index] = NULL;
+				di_buf->vframe->type &=
+					(~VIDTYPE_TYPEMASK);
+				di_buf->vframe->type |=
+					VIDTYPE_INTERLACE_TOP;
+				di_buf->post_proc_flag = 0;
+
+				di_buf_tmp =
+					get_di_buf_head(QUEUE_IN_FREE);
+				di_buf_tmp->vframe->private_data
+					= di_buf_tmp;
+				di_buf_tmp->seq = di_pre_stru.in_seq;
+				di_pre_stru.in_seq++;
+				queue_out(di_buf_tmp);
+				vframe_in[di_buf_tmp->index] = vframe;
+				memcpy(
+					di_buf_tmp->vframe, vframe,
+					sizeof(vframe_t));
+				di_pre_stru.di_inp_buf_next
+					= di_buf_tmp;
+				di_buf_tmp->vframe->type
+					&= (~VIDTYPE_TYPEMASK);
+				di_buf_tmp->vframe->type
+					|= VIDTYPE_INTERLACE_BOTTOM;
+				di_buf_tmp->post_proc_flag = 0;
 
-					if (
-di_pre_stru.di_mem_buf_dup_p == NULL) {/* use n */
-						di_pre_stru.di_mem_buf_dup_p
-= di_buf;
-#ifdef DI_DEBUG
-						di_print(
-"%s: set di_mem_buf_dup_p to be di_inp_buf\n", __func__);
-#endif
-					}
-				} else {
-					/* n */
-					di_buf->post_proc_flag = 0;
-					if ((prog_proc_config&0x40) ||
-di_pre_stru.force_interlace)
-						di_buf->post_proc_flag = 1;
-					#if 0
-					if (di_pre_stru.prog_proc_type == 0) {
-						if (change_type == 2) {
-							if (
-(di_pre_stru.cur_inp_type & VIDTYPE_TYPEMASK) == VIDTYPE_INTERLACE_TOP)
-								di_pre_stru.process_count = 0;
-							else
-								di_pre_stru.process_count = 1;
-						} else {
-							di_pre_stru.process_count = 1;
-						}
-					} else {
-						di_pre_stru.process_count = 0;
-					}
-					#endif
-					di_pre_stru.di_inp_buf = di_buf;
-#ifdef DI_DEBUG
+				di_pre_stru.di_inp_buf = di_buf;
+				di_print(
+			"%s: %s[%d] => di_inp_buf; %s[%d] => di_inp_buf_next\n",
+					__func__,
+					vframe_type_name[di_buf->type],
+					di_buf->index,
+					vframe_type_name[di_buf_tmp->type],
+					di_buf_tmp->index);
+
+				if (di_pre_stru.di_mem_buf_dup_p == NULL) {
+					di_pre_stru.di_mem_buf_dup_p = di_buf;
 					di_print(
-"%s: %s[%d] => di_inp_buf\n",
-__func__, vframe_type_name[di_buf->type], di_buf->index);
-#endif
-					if (
-di_pre_stru.di_mem_buf_dup_p == NULL) {/* use n */
-						di_pre_stru.di_mem_buf_dup_p
-= di_buf;
-#ifdef DI_DEBUG
-						di_print(
-"%s: set di_mem_buf_dup_p to be di_inp_buf\n", __func__);
-#endif
-					}
+				"%s: set di_mem_buf_dup_p to be di_inp_buf\n",
+						__func__);
 				}
 			} else {
-#ifdef NEW_DI_V1
-					if (
-di_pre_stru.di_chan2_buf_dup_p == NULL) {
-						di_pre_stru.field_count_for_cont = 0;
-						di_mtn_1_ctrl1 |= (1<<30);
-						/* ignore contp2rd
-and contprd */
-					}
-#endif
-				di_buf->post_proc_flag = 1;
+				di_buf->post_proc_flag = 0;
+				if ((prog_proc_config & 0x40) ||
+				    di_pre_stru.force_interlace)
+					di_buf->post_proc_flag = 1;
 				di_pre_stru.di_inp_buf = di_buf;
-#ifdef DI_DEBUG
-				di_print("%s: %s[%d] => di_inp_buf\n", __func__,
-vframe_type_name[di_buf->type], di_buf->index);
-#endif
-
+				di_print(
+					"%s: %s[%d] => di_inp_buf\n",
+					__func__,
+					vframe_type_name[di_buf->type],
+					di_buf->index);
 				if (
-di_pre_stru.di_mem_buf_dup_p == NULL) {/* use n */
-					di_pre_stru.di_mem_buf_dup_p = di_buf;
-#ifdef DI_DEBUG
+					di_pre_stru.di_mem_buf_dup_p == NULL) {
+					/* use n */
+					di_pre_stru.di_mem_buf_dup_p
+						= di_buf;
 					di_print(
-"%s: set di_mem_buf_dup_p to be di_inp_buf\n", __func__);
-#endif
+				"%s: set di_mem_buf_dup_p to be di_inp_buf\n",
+						__func__);
 				}
 			}
+		} else {
+#ifdef NEW_DI_V1
+			if (
+				di_pre_stru.di_chan2_buf_dup_p == NULL) {
+				di_pre_stru.field_count_for_cont = 0;
+				di_mtn_1_ctrl1 |= (1 << 30);
+				/* ignore contp2rd and contprd */
+			}
+#endif
+			di_buf->post_proc_flag = 1;
+			di_pre_stru.di_inp_buf = di_buf;
+			di_print("%s: %s[%d] => di_inp_buf\n", __func__,
+				vframe_type_name[di_buf->type], di_buf->index);
+
+			if (di_pre_stru.di_mem_buf_dup_p == NULL) {/* use n */
+				di_pre_stru.di_mem_buf_dup_p = di_buf;
+				di_print(
+				"%s: set di_mem_buf_dup_p to be di_inp_buf\n",
+					__func__);
+			}
+		}
 	}
 
-	 /* di_wr_buf */
+	/* di_wr_buf */
 	if (di_pre_stru.prog_proc_type == 2) {
 		di_linked_buf_idx = peek_free_linked_buf();
 		if (di_linked_buf_idx != -1)
@@ -4011,6 +5707,7 @@ di_pre_stru.di_mem_buf_dup_p == NULL) {/* use n */
 		if (di_buf == NULL) {
 			/* recycle_vframe_type_pre(di_pre_stru.di_inp_buf); */
 			/*save for next process*/
+			recycle_keep_buffer();
 			di_pre_stru.di_inp_buf_next = di_pre_stru.di_inp_buf;
 			return 0;
 		}
@@ -4021,50 +5718,68 @@ di_pre_stru.di_mem_buf_dup_p == NULL) {/* use n */
 	} else {
 		di_buf = get_di_buf_head(QUEUE_LOCAL_FREE);
 		if (check_di_buf(di_buf, 11)) {
+			/* recycle_keep_buffer();
+			pr_dbg("%s:recycle keep buffer\n", __func__);*/
 			recycle_vframe_type_pre(di_pre_stru.di_inp_buf);
 			return 0;
 		}
 		queue_out(di_buf);
-		di_buf->canvas_config_flag = 2;
+		if (di_pre_stru.prog_proc_type & 0x10)
+			di_buf->canvas_config_flag = 1;
+		else
+			di_buf->canvas_config_flag = 2;
 		di_buf->di_wr_linked_buf = NULL;
 	}
 
 	di_pre_stru.di_wr_buf = di_buf;
 	di_pre_stru.di_wr_buf->pre_ref_count = 1;
 
-#ifdef DI_DEBUG
 	di_print("%s: %s[%d] => di_wr_buf\n", __func__,
-			vframe_type_name[di_buf->type], di_buf->index);
+		vframe_type_name[di_buf->type], di_buf->index);
 	if (di_buf->di_wr_linked_buf)
 		di_print("%s: linked %s[%d] => di_wr_buf\n", __func__,
-vframe_type_name[di_buf->di_wr_linked_buf->type],
-di_buf->di_wr_linked_buf->index);
-#endif
+			vframe_type_name[di_buf->di_wr_linked_buf->type],
+			di_buf->di_wr_linked_buf->index);
 
 	memcpy(di_buf->vframe,
-di_pre_stru.di_inp_buf->vframe, sizeof(vframe_t));
+		di_pre_stru.di_inp_buf->vframe, sizeof(vframe_t));
 	di_buf->vframe->private_data = di_buf;
 	di_buf->vframe->canvas0Addr = di_buf->nr_canvas_idx;
 	di_buf->vframe->canvas1Addr = di_buf->nr_canvas_idx;
+	/* set vframe bit info */
+	di_buf->vframe->bitdepth &= ~(BITDEPTH_YMASK);
+	di_buf->vframe->bitdepth &= ~(FULL_PACK_422_MODE);
+	if (di_force_bit_mode == 10) {
+		di_buf->vframe->bitdepth |= (BITDEPTH_Y10);
+		if (full_422_pack)
+			di_buf->vframe->bitdepth |= (FULL_PACK_422_MODE);
+	} else
+		di_buf->vframe->bitdepth |= (BITDEPTH_Y8);
 
 	if (di_pre_stru.prog_proc_type) {
 		di_buf->vframe->type = VIDTYPE_PROGRESSIVE |
-VIDTYPE_VIU_422 | VIDTYPE_VIU_SINGLE_PLANE | VIDTYPE_VIU_FIELD;
+				       VIDTYPE_VIU_422 |
+				       VIDTYPE_VIU_SINGLE_PLANE |
+				       VIDTYPE_VIU_FIELD;
 		if (di_pre_stru.cur_inp_type & VIDTYPE_PRE_INTERLACE)
 			di_buf->vframe->type |= VIDTYPE_PRE_INTERLACE;
 	} else {
 		if (
-((di_pre_stru.di_inp_buf->vframe->type & VIDTYPE_TYPEMASK) ==
-VIDTYPE_INTERLACE_TOP)) {
+			((di_pre_stru.di_inp_buf->vframe->type &
+			  VIDTYPE_TYPEMASK) ==
+			 VIDTYPE_INTERLACE_TOP))
 			di_buf->vframe->type = VIDTYPE_INTERLACE_TOP |
-VIDTYPE_VIU_422 | VIDTYPE_VIU_SINGLE_PLANE | VIDTYPE_VIU_FIELD;
-		} else {
+					       VIDTYPE_VIU_422 |
+					       VIDTYPE_VIU_SINGLE_PLANE |
+					       VIDTYPE_VIU_FIELD;
+		else
 			di_buf->vframe->type = VIDTYPE_INTERLACE_BOTTOM |
-VIDTYPE_VIU_422 | VIDTYPE_VIU_SINGLE_PLANE | VIDTYPE_VIU_FIELD;
-		}
+					       VIDTYPE_VIU_422 |
+					       VIDTYPE_VIU_SINGLE_PLANE |
+					       VIDTYPE_VIU_FIELD;
 	}
 
-	/* */
+/* */
 	if (is_bypass_post()) {
 		if (bypass_post_state == 0)
 			di_pre_stru.source_change_flag = 1;
@@ -4077,7 +5792,7 @@ VIDTYPE_VIU_422 | VIDTYPE_VIU_SINGLE_PLANE | VIDTYPE_VIU_FIELD;
 		bypass_post_state = 0;
 	}
 
-	/* if(is_progressive(di_pre_stru.di_inp_buf->vframe)){ */
+/* if(is_progressive(di_pre_stru.di_inp_buf->vframe)){ */
 	if (di_pre_stru.di_inp_buf->post_proc_flag == 0) {
 		di_pre_stru.enable_mtnwr = 0;
 		di_pre_stru.enable_pulldown_check = 0;
@@ -4095,14 +5810,14 @@ VIDTYPE_VIU_422 | VIDTYPE_VIU_SINGLE_PLANE | VIDTYPE_VIU_FIELD;
 			di_pre_stru.enable_mtnwr = 1;
 			di_buf->post_proc_flag = 1;
 			di_pre_stru.enable_pulldown_check =
-				di_pre_stru.cur_prog_flag?0:1;
+				di_pre_stru.cur_prog_flag ? 0 : 1;
 		}
 	}
 
 #ifndef USE_LIST
 	if ((di_pre_stru.di_mem_buf_dup_p == di_pre_stru.di_wr_buf) ||
-		(di_pre_stru.di_chan2_buf_dup_p == di_pre_stru.di_wr_buf)) {
-		pr_info("+++++++++++++++++++++++\n");
+	    (di_pre_stru.di_chan2_buf_dup_p == di_pre_stru.di_wr_buf)) {
+		pr_dbg("+++++++++++++++++++++++\n");
 		if (recovery_flag == 0)
 			recovery_log_reason = 12;
 
@@ -4111,31 +5826,32 @@ VIDTYPE_VIU_422 | VIDTYPE_VIU_SINGLE_PLANE | VIDTYPE_VIU_FIELD;
 	}
 #endif
 	return 1;
-
 }
 
 static int check_recycle_buf(void)
 {
-	di_buf_t *di_buf = NULL;/* , *ptmp; */
+	struct di_buf_s *di_buf = NULL;/* , *ptmp; */
 	int itmp;
 	int ret = 0;
+
 	if (di_blocking)
 		return ret;
 	queue_for_each_entry(di_buf, ptmp, QUEUE_RECYCLE, list) {
 		if ((di_buf->pre_ref_count == 0) &&
-			(di_buf->post_ref_count == 0)) {
+		    (di_buf->post_ref_count == 0)) {
 			if (di_buf->type == VFRAME_TYPE_IN) {
 				queue_out(di_buf);
 				if (vframe_in[di_buf->index]) {
 					vf_put(
-vframe_in[di_buf->index], VFM_NAME);
+						vframe_in[di_buf->index],
+						VFM_NAME);
 					vf_notify_provider(VFM_NAME,
-VFRAME_EVENT_RECEIVER_PUT, NULL);
-#ifdef DI_DEBUG
+						VFRAME_EVENT_RECEIVER_PUT,
+						NULL);
 					di_print(
-"%s: vf_put(%d) %x\n", __func__, di_pre_stru.recycle_seq,
-vframe_in[di_buf->index]);
-#endif
+						"%s: vf_put(%d) %x\n", __func__,
+						di_pre_stru.recycle_seq,
+						vframe_in[di_buf->index]);
 					vframe_in[di_buf->index] = NULL;
 				}
 				di_buf->invert_top_bot_flag = 0;
@@ -4148,21 +5864,21 @@ vframe_in[di_buf->index]);
 				queue_in(di_buf, QUEUE_LOCAL_FREE);
 				if (di_buf->di_wr_linked_buf) {
 					queue_in(
-di_buf->di_wr_linked_buf, QUEUE_LOCAL_FREE);
-#ifdef DI_DEBUG
+						di_buf->di_wr_linked_buf,
+						QUEUE_LOCAL_FREE);
 					di_print(
-"%s: linked %s[%d]=>recycle_list\n", __func__,
-vframe_type_name[di_buf->di_wr_linked_buf->type],
-di_buf->di_wr_linked_buf->index);
-#endif
+					"%s: linked %s[%d]=>recycle_list\n",
+						__func__,
+						vframe_type_name[
+						di_buf->di_wr_linked_buf->type],
+						di_buf->di_wr_linked_buf->index
+					);
 					di_buf->di_wr_linked_buf = NULL;
 				}
 				ret |= 2;
 			}
-#ifdef DI_DEBUG
 			di_print("%s: recycle %s[%d]\n", __func__,
 				vframe_type_name[di_buf->type], di_buf->index);
-#endif
 		}
 	}
 	return ret;
@@ -4173,95 +5889,131 @@ static void set3d_view(enum tvin_trans_fmt trans_fmt, struct vframe_s *vf)
 {
 	struct vframe_view_s *left_eye, *right_eye;
 
-	left_eye  = &vf->left_eye;
+	left_eye = &vf->left_eye;
 	right_eye = &vf->right_eye;
 
 	switch (trans_fmt) {
 	case TVIN_TFMT_3D_DET_LR:
 	case TVIN_TFMT_3D_LRH_OLOR:
-		left_eye->start_x	 = 0;
-		left_eye->start_y	 = 0;
-		left_eye->width		 = vf->width >> 1;
-		left_eye->height	 = vf->height;
-		right_eye->start_x	 = vf->width >> 1;
-		right_eye->start_y	 = 0;
-		right_eye->width	 = vf->width >> 1;
-		right_eye->height	 = vf->height;
+		left_eye->start_x = 0;
+		left_eye->start_y = 0;
+		left_eye->width = vf->width >> 1;
+		left_eye->height = vf->height;
+		right_eye->start_x = vf->width >> 1;
+		right_eye->start_y = 0;
+		right_eye->width = vf->width >> 1;
+		right_eye->height = vf->height;
 		break;
 	case TVIN_TFMT_3D_DET_TB:
 	case TVIN_TFMT_3D_TB:
-		left_eye->start_x	 = 0;
-		left_eye->start_y	 = 0;
-		left_eye->width		 = vf->width;
-		left_eye->height	 = vf->height >> 1;
-		right_eye->start_x	 = 0;
-		right_eye->start_y	 = vf->height >> 1;
-		right_eye->width	 = vf->width;
-		right_eye->height	 = vf->height >> 1;
+		left_eye->start_x = 0;
+		left_eye->start_y = 0;
+		left_eye->width = vf->width;
+		left_eye->height = vf->height >> 1;
+		right_eye->start_x = 0;
+		right_eye->start_y = vf->height >> 1;
+		right_eye->width = vf->width;
+		right_eye->height = vf->height >> 1;
 		break;
 	case TVIN_TFMT_3D_DET_INTERLACE:
-		left_eye->start_x	 = 0;
-		left_eye->start_y	 = 0;
-		left_eye->width		 = vf->width;
-		left_eye->height	 = vf->height >> 1;
-		right_eye->start_x	 = 0;
-		right_eye->start_y	 = 0;
-		right_eye->width	 = vf->width;
-		right_eye->height	 = vf->height >> 1;
+		left_eye->start_x = 0;
+		left_eye->start_y = 0;
+		left_eye->width = vf->width;
+		left_eye->height = vf->height >> 1;
+		right_eye->start_x = 0;
+		right_eye->start_y = 0;
+		right_eye->width = vf->width;
+		right_eye->height = vf->height >> 1;
 		break;
 	case TVIN_TFMT_3D_DET_CHESSBOARD:
-		/***
-		 * LRLRLR	  LRLRLR
-		 * LRLRLR  or RLRLRL
-		 * LRLRLR	  LRLRLR
-		 * LRLRLR	  RLRLRL
-		 */
+/***
+ * LRLRLR	  LRLRLR
+ * LRLRLR  or RLRLRL
+ * LRLRLR	  LRLRLR
+ * LRLRLR	  RLRLRL
+ */
 		break;
-	default:  /* 2D */
-		left_eye->start_x	 = 0;
-		left_eye->start_y	 = 0;
-		left_eye->width		 = 0;
-		left_eye->height	 = 0;
-		right_eye->start_x	 = 0;
-		right_eye->start_y	 = 0;
-		right_eye->width	 = 0;
-		right_eye->height	 = 0;
+	default: /* 2D */
+		left_eye->start_x = 0;
+		left_eye->start_y = 0;
+		left_eye->width = 0;
+		left_eye->height = 0;
+		right_eye->start_x = 0;
+		right_eye->start_y = 0;
+		right_eye->width = 0;
+		right_eye->height = 0;
 		break;
 	}
 }
 
 /*
-static int get_3d_info(struct vframe_s *vf)
+ * static int get_3d_info(struct vframe_s *vf)
+ * {
+ * int ret = 0;
+ *
+ * vf->trans_fmt = det3d_fmt_detect();
+ * pr_dbg("[det3d..]new 3d fmt: %d\n", vf->trans_fmt);
+ *
+ * vdin_set_view(vf->trans_fmt, vf);
+ *
+ * return ret;
+ * }
+ */
+static unsigned int det3d_frame_cnt = 50;
+module_param_named(det3d_frame_cnt, det3d_frame_cnt, uint, 0644);
+static void det3d_irq(void)
 {
-	int ret = 0;
-
-	vf->trans_fmt = det3d_fmt_detect();
-	pr_info("[det3d..]new 3d fmt: %d\n", vf->trans_fmt);
-
-	vdin_set_view(vf->trans_fmt, vf);
-
-	return ret;
-}
-*/
+	unsigned int data32 = 0, likely_val = 0;
+	unsigned long frame_sum = 0;
+	if (!det3d_en)
+		return;
 
-static irqreturn_t det3d_irq(int irq, void *dev_instance)
-{
-	unsigned int data32 = 0;
+	data32 = det3d_fmt_detect();
+	switch (data32) {
+	case TVIN_TFMT_3D_DET_LR:
+	case TVIN_TFMT_3D_LRH_OLOR:
+		di_pre_stru.det_lr++;
+		break;
+	case TVIN_TFMT_3D_DET_TB:
+	case TVIN_TFMT_3D_TB:
+		di_pre_stru.det_tp++;
+		break;
+	case TVIN_TFMT_3D_DET_INTERLACE:
+		di_pre_stru.det_la++;
+		break;
+	default:
+		di_pre_stru.det_null++;
+		break;
+	}
 
-	if (det3d_en) {
-		data32 = det3d_fmt_detect();
-		if (det3d_mode != data32) {
-			det3d_mode = data32;
-			pr_info("[det3d..]new 3d fmt: %d\n", det3d_mode);
-		}
+	if (det3d_mode != data32) {
+		det3d_mode = data32;
+		di_print("[det3d..]new 3d fmt: %d\n", det3d_mode);
+	}
+	if (frame_count > 20) {
+		frame_sum = di_pre_stru.det_lr + di_pre_stru.det_tp
+					+ di_pre_stru.det_la
+					+ di_pre_stru.det_null;
+		if ((frame_count%det3d_frame_cnt) || (frame_sum > UINT_MAX))
+			return;
+		likely_val = max3(di_pre_stru.det_lr,
+						di_pre_stru.det_tp,
+						di_pre_stru.det_la);
+		if (di_pre_stru.det_null >= likely_val)
+			det3d_mode = 0;
+		else if (likely_val == di_pre_stru.det_lr)
+			det3d_mode = TVIN_TFMT_3D_LRH_OLOR;
+		else if (likely_val == di_pre_stru.det_tp)
+			det3d_mode = TVIN_TFMT_3D_TB;
+		else
+			det3d_mode = TVIN_TFMT_3D_DET_INTERLACE;
+		di_pre_stru.det3d_trans_fmt = det3d_mode;
 	} else {
-		det3d_mode = 0;
+		di_pre_stru.det3d_trans_fmt = 0;
 	}
-	di_pre_stru.det3d_trans_fmt = det3d_mode;
-	return IRQ_HANDLED;
 }
 #endif
-#ifdef MCDI_SUPPORT
+
 static bool calc_mcinfo_en = 1;
 module_param(calc_mcinfo_en, bool, 0664);
 MODULE_PARM_DESC(calc_mcinfo_en, "/n get mcinfo for post /n");
@@ -4274,58 +6026,91 @@ unsigned int ro_mcdi_col_cfd[26];
 static void get_mcinfo_from_reg_in_irq(void)
 {
 	unsigned int i = 0, ncolcrefsum = 0, blkcount = 0, *reg = NULL;
-	/*get info for current field process by post*/
+
+/*get info for current field process by post*/
 	di_pre_stru.di_wr_buf->curr_field_mcinfo.highvertfrqflg =
-(Rd(MCDI_RO_HIGH_VERT_FRQ_FLG)&0x1);
+		(Rd(MCDI_RO_HIGH_VERT_FRQ_FLG) & 0x1);
 /* post:MCDI_MC_REL_GAIN_OFFST_0 */
 	di_pre_stru.di_wr_buf->curr_field_mcinfo.motionparadoxflg =
-(Rd(MCDI_RO_MOTION_PARADOX_FLG)&0x1);
+		(Rd(MCDI_RO_MOTION_PARADOX_FLG) & 0x1);
 /* post:MCDI_MC_REL_GAIN_OFFST_0 */
 	reg = di_pre_stru.di_wr_buf->curr_field_mcinfo.regs;
 	for (i = 0; i < 26; i++) {
-		ro_mcdi_col_cfd[i] = Rd(0x2fb0+i);
+		ro_mcdi_col_cfd[i] = Rd(0x2fb0 + i);
 		di_pre_stru.di_wr_buf->curr_field_mcinfo.regs[i] = 0;
 		if (!calc_mcinfo_en)
-			*(reg+i) = ro_mcdi_col_cfd[i];
-
+			*(reg + i) = ro_mcdi_col_cfd[i];
 	}
 	if (calc_mcinfo_en) {
-		blkcount = (di_pre_stru.cur_width+4)/5;
+		blkcount = (di_pre_stru.cur_width + 4) / 5;
 		for (i = 0; i < blkcount; i++) {
-			ncolcrefsum += ((ro_mcdi_col_cfd[i/32]>>(i%32))&0x1);
+			ncolcrefsum +=
+				((ro_mcdi_col_cfd[i / 32] >> (i % 32)) & 0x1);
 			if (
-((ncolcrefsum+(blkcount>>1))<<8)/blkcount > colcfd_thr) {
+				((ncolcrefsum + (blkcount >> 1)) << 8) /
+				blkcount > colcfd_thr)
 				for (i = 0; i < blkcount; i++)
-					*(reg + i/32) += (1<<(i%32));
-			}
+					*(reg + i / 32) += (1 << (i % 32));
 		}
 	}
 }
 static void set_post_mcinfo(struct mcinfo_pre_s *curr_field_mcinfo)
 {
 	unsigned int i = 0;
-	VSYNC_WR_MPEG_REG_BITS(MCDI_MC_REL_GAIN_OFFST_0,
-curr_field_mcinfo->highvertfrqflg, 24, 1);
-	VSYNC_WR_MPEG_REG_BITS(MCDI_MC_REL_GAIN_OFFST_0,
-curr_field_mcinfo->motionparadoxflg, 25, 1);
-	for (i = 0; i < 26; i++)
-		VSYNC_WR_MPEG_REG(0x2f78+i, curr_field_mcinfo->regs[i]);
 
+	DI_VSYNC_WR_MPEG_REG_BITS(MCDI_MC_REL_GAIN_OFFST_0,
+		curr_field_mcinfo->highvertfrqflg, 24, 1);
+	DI_VSYNC_WR_MPEG_REG_BITS(MCDI_MC_REL_GAIN_OFFST_0,
+		curr_field_mcinfo->motionparadoxflg, 25, 1);
+	for (i = 0; i < 26; i++)
+		DI_VSYNC_WR_MPEG_REG(0x2f78 + i, curr_field_mcinfo->regs[i]);
 }
-#endif
+
 static irqreturn_t de_irq(int irq, void *dev_instance)
 {
 #ifndef CHECK_DI_DONE
-	unsigned int data32;
-	data32 = Rd(DI_INTR_CTRL);
-   /* if ( (data32 & 0xf) != 0x1 ) { */
-   /* pr_info("%s: error %x\n", __func__, data32); */
-   /* } else { */
-	Wr(DI_INTR_CTRL, data32);
-   /* } */
+	unsigned int data32 = Rd(DI_INTR_CTRL);
+	unsigned int mask32 = (data32 >> 16) & 0x1ff;
+	int flag = 0;
+
+	if (di_pre_stru.pre_de_busy) {
+		/* only one inetrrupr mask should be enable */
+		if ((data32 & 4) && !(mask32 & 4)) {
+			di_print("== DIWR ==\n");
+			flag = 1;
+		} else if ((data32 & 2) && !(mask32 & 2)) {
+			di_print("== MTNWR ==\n");
+			flag = 1;
+		} else if ((data32 & 1) && !(mask32 & 1)) {
+			di_print("== NRWR ==\n");
+			flag = 1;
+		} else {
+			di_print("== DI IRQ 0x%x ==\n", data32);
+			flag = 0;
+		}
+	}
+
+#endif
+#ifdef DET3D
+	if (det3d_en) {
+		if ((data32 & 0x100) && !(mask32 & 0x100) && flag) {
+			DI_Wr(DI_INTR_CTRL, data32);
+			det3d_irq();
+		} else {
+			goto end;
+		}
+	} else {
+		DI_Wr(DI_INTR_CTRL, data32);
+	}
+#else
+	DI_Wr(DI_INTR_CTRL, data32);
 #endif
-	/* Wr(A9_0_IRQ_IN1_INTR_STAT_CLR, 1 << 14); */
-   /* Rd(A9_0_IRQ_IN1_INTR_STAT_CLR); */
+	if ((post_wr_en && post_wr_surpport) && (data32&0x4)) {
+		di_post_stru.de_post_process_done = 1;
+		di_post_stru.post_de_busy = 0;
+		if (!(data32 & 0x2))
+			goto end;
+	}
 	if (pre_process_time_force)
 		return IRQ_HANDLED;
 
@@ -4333,44 +6118,47 @@ static irqreturn_t de_irq(int irq, void *dev_instance)
 		di_print("%s: wrong enter %x\n", __func__, Rd(DI_INTR_CTRL));
 		return IRQ_HANDLED;
 	}
-#ifdef DI_DEBUG
-		di_print("%s: start\n", __func__);
-#endif
 
-#ifdef MCDI_SUPPORT
-	get_mcinfo_from_reg_in_irq();
-#endif
+	di_print("%s: start\n", __func__);
+
+	if (flag) {
+		if (mcpre_en)
+			get_mcinfo_from_reg_in_irq();
+
 #ifdef NEW_DI_V4
-	if (dnr_en)
-		run_dnr_in_irq(
-di_pre_stru.di_nrwr_mif.end_x+1, di_pre_stru.di_nrwr_mif.end_y+1);
+		if (dnr_en)
+			run_dnr_in_irq(
+				di_pre_stru.di_nrwr_mif.end_x + 1,
+				di_pre_stru.di_nrwr_mif.end_y + 1);
+		else
+			if ((Rd(DNR_CTRL) != 0) && dnr_reg_update)
+				DI_Wr(DNR_CTRL, 0);
 #endif
-	di_pre_stru.pre_de_process_done = 1;
-	di_pre_stru.pre_de_busy = 0;
+		/* disable mif */
+		enable_di_pre_mif(0);
+		di_pre_stru.pre_de_process_done = 1;
+		di_pre_stru.pre_de_busy = 0;
 
-	if (init_flag) {
-		/* pr_info("%s:up di sema\n", __func__); */
-		trigger_pre_di_process('i');
+end:
+		if (init_flag)
+			/* pr_dbg("%s:up di sema\n", __func__); */
+			trigger_pre_di_process(TRIGGER_PRE_BY_DE_IRQ);
 	}
 
-#ifdef DI_DEBUG
 	di_print("%s: end\n", __func__);
-#endif
 
 	return IRQ_HANDLED;
 }
 
 /*
-di post process
-*/
-static void inc_post_ref_count(di_buf_t *di_buf)
+ * di post process
+ */
+static void inc_post_ref_count(struct di_buf_s *di_buf)
 {
 /* int post_blend_mode; */
 
 	if (di_buf == NULL) {
-#ifdef DI_DEBUG
-		pr_info("%s: Error\n", __func__);
-#endif
+		pr_dbg("%s: Error\n", __func__);
 		if (recovery_flag == 0)
 			recovery_log_reason = 13;
 
@@ -4383,20 +6171,15 @@ static void inc_post_ref_count(di_buf_t *di_buf)
 	if (di_buf->pulldown_mode != PULL_DOWN_BLEND_2) {
 		if (di_buf->di_buf_dup_p[0])
 			di_buf->di_buf_dup_p[0]->post_ref_count++;
-
 	}
 	if (di_buf->di_buf_dup_p[2])
 		di_buf->di_buf_dup_p[2]->post_ref_count++;
-
 }
 
-static void dec_post_ref_count(di_buf_t *di_buf)
+static void dec_post_ref_count(struct di_buf_s *di_buf)
 {
-
 	if (di_buf == NULL) {
-#ifdef DI_DEBUG
-		pr_info("%s: Error\n", __func__);
-#endif
+		pr_dbg("%s: Error\n", __func__);
 		if (recovery_flag == 0)
 			recovery_log_reason = 14;
 
@@ -4409,38 +6192,39 @@ static void dec_post_ref_count(di_buf_t *di_buf)
 
 	if (di_buf->pulldown_mode != PULL_DOWN_BLEND_2) {
 		if (di_buf->di_buf_dup_p[0] &&
-di_buf->di_buf_dup_p[0]->post_proc_flag != -2)
+		    di_buf->di_buf_dup_p[0]->post_proc_flag != -2)
 			di_buf->di_buf_dup_p[0]->post_ref_count--;
 	}
 	if (di_buf->di_buf_dup_p[2])
 		di_buf->di_buf_dup_p[2]->post_ref_count--;
-
 }
 
-static void vscale_skip_disable_post(di_buf_t *di_buf, vframe_t *disp_vf)
+static void vscale_skip_disable_post(struct di_buf_s *di_buf, vframe_t *disp_vf)
 {
-	di_buf_t *di_buf_i = NULL;
-	int width = (di_buf->di_buf[0]->canvas_config_size>>16)&0xffff;
-	int canvas_height = (di_buf->di_buf[0]->canvas_config_size)&0xffff;
-	if (di_vscale_skip_enable&0x2) {/* drop the bottom field */
+	struct di_buf_s *di_buf_i = NULL;
+	int width = (di_buf->di_buf[0]->canvas_config_size >> 16) & 0xffff;
+	int canvas_height = (di_buf->di_buf[0]->canvas_config_size) & 0xffff;
+
+	if (di_vscale_skip_enable & 0x2) {/* drop the bottom field */
 		if ((di_buf->di_buf_dup_p[0]) && (di_buf->di_buf_dup_p[1]))
 			di_buf_i =
-(di_buf->di_buf_dup_p[1]->vframe->type & VIDTYPE_TYPEMASK) ==
-VIDTYPE_INTERLACE_TOP ? di_buf->di_buf_dup_p[1] : di_buf->di_buf_dup_p[0];
+				(di_buf->di_buf_dup_p[1]->vframe->type &
+				 VIDTYPE_TYPEMASK) ==
+				VIDTYPE_INTERLACE_TOP ? di_buf->di_buf_dup_p[1]
+				: di_buf->di_buf_dup_p[0];
 		else
 			di_buf_i = di_buf->di_buf[0];
 	} else {
 		if ((di_buf->di_buf[0]->post_proc_flag > 0)
-&& (di_buf->di_buf_dup_p[1]))
+		    && (di_buf->di_buf_dup_p[1]))
 			di_buf_i = di_buf->di_buf_dup_p[1];
 		else
 			di_buf_i = di_buf->di_buf[0];
-
 	}
 	disp_vf->type = di_buf_i->vframe->type;
-	/* pr_info("%s (%x %x) (%x %x)\n", __func__,
-disp_vf, disp_vf->type, di_buf_i->vframe,
-di_buf_i->vframe->type); */
+	/* pr_dbg("%s (%x %x) (%x %x)\n", __func__,
+	 * disp_vf, disp_vf->type, di_buf_i->vframe,
+	 * di_buf_i->vframe->type); */
 	disp_vf->width = di_buf_i->vframe->width;
 	disp_vf->height = di_buf_i->vframe->height;
 	disp_vf->duration = di_buf_i->vframe->duration;
@@ -4449,23 +6233,28 @@ di_buf_i->vframe->type); */
 	disp_vf->canvas0Addr = di_post_idx[di_post_stru.canvas_id][0];
 	disp_vf->canvas1Addr = di_post_idx[di_post_stru.canvas_id][0];
 	canvas_config(
-di_post_idx[di_post_stru.canvas_id][0],
-di_buf_i->nr_adr, width*2, canvas_height, 0, 0);
+		di_post_idx[di_post_stru.canvas_id][0],
+		di_buf_i->nr_adr, width * 2, canvas_height, 0, 0);
 	disable_post_deinterlace_2();
 	di_post_stru.vscale_skip_flag = true;
 }
-static void process_vscale_skip(di_buf_t *di_buf, vframe_t *disp_vf)
-{
-	if ((di_buf->di_buf[0] != NULL) && (di_vscale_skip_enable&0x5) &&
-		(di_buf->process_fun_index != PROCESS_FUN_NULL)) {
-		di_vscale_skip_count = get_current_vscale_skip_count(disp_vf);
-		if (((di_vscale_skip_count > 0) && (di_vscale_skip_enable&0x5))
-|| (di_vscale_skip_enable>>16) || (bypass_dynamic_flag&0x2)) {
-			if (di_vscale_skip_enable&0x4) {
+static void process_vscale_skip(struct di_buf_s *di_buf, vframe_t *disp_vf)
+{
+			int ret = 0, vpp_3d_mode = 0;
+	if ((di_buf->di_buf[0] != NULL) && (di_vscale_skip_enable & 0x5) &&
+	    (di_buf->process_fun_index != PROCESS_FUN_NULL)) {
+		ret = get_current_vscale_skip_count(disp_vf);
+		di_vscale_skip_count = (ret & 0xff);
+		vpp_3d_mode = ((ret >> 8) & 0xff);
+		if (((di_vscale_skip_count > 0) &&
+		     (di_vscale_skip_enable & 0x5))
+		    || (di_vscale_skip_enable >> 16) ||
+		    (bypass_dynamic_flag & 0x2)) {
+			if ((di_vscale_skip_enable & 0x4) && !vpp_3d_mode) {
 				if (di_buf->di_buf_dup_p[1] &&
-di_buf->pulldown_mode != PULL_DOWN_BUF1)
+				    di_buf->pulldown_mode != PULL_DOWN_BUF1)
 					di_buf->pulldown_mode = PULL_DOWN_EI;
-			} else{
+			} else {
 				vscale_skip_disable_post(di_buf, disp_vf);
 			}
 		}
@@ -4474,24 +6263,24 @@ di_buf->pulldown_mode != PULL_DOWN_BUF1)
 
 static int de_post_disable_fun(void *arg, vframe_t *disp_vf)
 {
-	di_buf_t *di_buf = (di_buf_t *)arg;
+	struct di_buf_s *di_buf = (struct di_buf_s *)arg;
 
 	di_post_stru.vscale_skip_flag = false;
 	di_post_stru.toggle_flag = true;
 
 	process_vscale_skip(di_buf, disp_vf);
-	/* for atv static image flickering */
+/* for atv static image flickering */
 	if (di_buf->process_fun_index == PROCESS_FUN_NULL)
 		disable_post_deinterlace_2();
 
 	return 1;
 /* called for new_format_flag, make
-video set video_property_changed */
+*  video set video_property_changed */
 }
 
 static int do_nothing_fun(void *arg, vframe_t *disp_vf)
 {
-	di_buf_t *di_buf = (di_buf_t *)arg;
+	struct di_buf_s *di_buf = (struct di_buf_s *)arg;
 
 	di_post_stru.vscale_skip_flag = false;
 	di_post_stru.toggle_flag = true;
@@ -4499,11 +6288,11 @@ static int do_nothing_fun(void *arg, vframe_t *disp_vf)
 	process_vscale_skip(di_buf, disp_vf);
 
 	if (di_buf->process_fun_index == PROCESS_FUN_NULL) {
-		if (Rd(DI_IF1_GEN_REG)&0x1 || Rd(DI_POST_CTRL)&0xf)
+		if (Rd(DI_IF1_GEN_REG) & 0x1 || Rd(DI_POST_CTRL) & 0xf)
 			disable_post_deinterlace_2();
-	}
 	/*if(di_buf->pulldown_mode == PULL_DOWN_EI && Rd(DI_IF1_GEN_REG)&0x1)
-	VSYNC_WR_MPEG_REG(DI_IF1_GEN_REG, 0x3 << 30);*/
+	 * DI_VSYNC_WR_MPEG_REG(DI_IF1_GEN_REG, 0x3 << 30);*/
+	}
 	return 0;
 }
 
@@ -4514,14 +6303,20 @@ static int do_pre_only_fun(void *arg, vframe_t *disp_vf)
 
 #ifdef DI_USE_FIXED_CANVAS_IDX
 	if (arg) {
-		di_buf_t *di_buf = (di_buf_t *)arg;
+		struct di_buf_s *di_buf = (struct di_buf_s *)arg;
 		vframe_t *vf = di_buf->vframe;
-		int width = (di_buf->di_buf[0]->canvas_config_size>>16)&0xffff;
-		int canvas_height =
-(di_buf->di_buf[0]->canvas_config_size)&0xffff;
+		int width, canvas_height;
+		if ((vf == NULL) || (di_buf->di_buf[0] == NULL)) {
+			di_print("error:%s,NULL point!!\n", __func__);
+			return 0;
+		}
+		width = (di_buf->di_buf[0]->canvas_config_size >> 16) & 0xffff;
+		canvas_height =
+			(di_buf->di_buf[0]->canvas_config_size) & 0xffff;
 #ifdef CONFIG_VSYNC_RDMA
 		if ((is_vsync_rdma_enable() &&
-((force_update_post_reg&0x40) == 0)) || (force_update_post_reg&0x20)) {
+		     ((force_update_post_reg & 0x40) == 0)) ||
+		    (force_update_post_reg & 0x20)) {
 			di_post_stru.canvas_id = di_post_stru.next_canvas_id;
 		} else {
 			di_post_stru.canvas_id = 0;
@@ -4530,69 +6325,139 @@ static int do_pre_only_fun(void *arg, vframe_t *disp_vf)
 #endif
 
 		canvas_config(
-di_post_idx[di_post_stru.canvas_id][0],
-di_buf->di_buf[0]->nr_adr, width*2, canvas_height, 0, 0);
+			di_post_idx[di_post_stru.canvas_id][0],
+			di_buf->di_buf[0]->nr_adr, width * 2, canvas_height, 0,
+			0);
 
 		vf->canvas0Addr =
-di_post_idx[di_post_stru.canvas_id][0];
+			di_post_idx[di_post_stru.canvas_id][0];
 		vf->canvas1Addr =
-di_post_idx[di_post_stru.canvas_id][0];
+			di_post_idx[di_post_stru.canvas_id][0];
 #ifdef DET3D
 		if (di_pre_stru.vframe_interleave_flag && di_buf->di_buf[1]) {
 			canvas_config(
-di_post_idx[di_post_stru.canvas_id][1],
-di_buf->di_buf[1]->nr_adr, width*2, canvas_height, 0, 0);
+				di_post_idx[di_post_stru.canvas_id][1],
+				di_buf->di_buf[1]->nr_adr, width * 2,
+				canvas_height, 0, 0);
 			vf->canvas1Addr =
-di_post_idx[di_post_stru.canvas_id][1];
+				di_post_idx[di_post_stru.canvas_id][1];
 			vf->duration <<= 1;
 		}
 #endif
-		di_post_stru.next_canvas_id = di_post_stru.canvas_id?0:1;
+		di_post_stru.next_canvas_id = di_post_stru.canvas_id ? 0 : 1;
 
 		if (di_buf->process_fun_index == PROCESS_FUN_NULL) {
-			if (Rd(DI_IF1_GEN_REG)&0x1)
+			if (Rd(DI_IF1_GEN_REG) & 0x1 || Rd(DI_POST_CTRL) & 0xf)
 				disable_post_deinterlace_2();
 		}
 
-
 	}
 #endif
 
 	return 0;
 }
 
+static void config_fftffb_mode(struct di_buf_s *di_buf,
+	unsigned int *post_field_type, char fftffb_mode)
+{
+	switch (fftffb_mode) {
+	case 1:
+		*post_field_type =
+		(di_buf->di_buf_dup_p[0]->vframe->type &
+		 VIDTYPE_TYPEMASK)
+		== VIDTYPE_INTERLACE_TOP ? 0 : 1;
+		di_post_stru.di_buf0_mif.canvas0_addr0 =
+		di_buf->di_buf_dup_p[0]->nr_canvas_idx;
+		di_post_stru.di_buf1_mif.canvas0_addr0 =
+		di_buf->di_buf_dup_p[1]->nr_canvas_idx;
+		di_post_stru.di_buf2_mif.canvas0_addr0 =
+		di_buf->di_buf_dup_p[2]->nr_canvas_idx;
+		di_post_stru.di_mtnprd_mif.canvas_num =
+		di_buf->di_buf_dup_p[1]->mtn_canvas_idx;
+		break;
+	case 2:
+		*post_field_type =
+		(di_buf->di_buf_dup_p[2]->vframe->type &
+		 VIDTYPE_TYPEMASK)
+		== VIDTYPE_INTERLACE_TOP ? 0 : 1;
+		di_post_stru.di_buf0_mif.canvas0_addr0 =
+		di_buf->di_buf_dup_p[2]->nr_canvas_idx;
+		di_post_stru.di_buf1_mif.canvas0_addr0 =
+		di_buf->di_buf_dup_p[0]->nr_canvas_idx;
+		di_post_stru.di_buf2_mif.canvas0_addr0 =
+		di_buf->di_buf_dup_p[1]->nr_canvas_idx;
+		di_post_stru.di_mtnprd_mif.canvas_num =
+		di_buf->di_buf_dup_p[1]->mtn_canvas_idx;
+		break;
+	default:
+		*post_field_type =
+		(di_buf->di_buf_dup_p[1]->vframe->type &
+		 VIDTYPE_TYPEMASK)
+		== VIDTYPE_INTERLACE_TOP ? 0 : 1;
+		di_post_stru.di_buf0_mif.canvas0_addr0 =
+		di_buf->di_buf_dup_p[1]->nr_canvas_idx;
+		di_post_stru.di_buf1_mif.canvas0_addr0 =
+		di_buf->di_buf_dup_p[0]->nr_canvas_idx;
+		di_post_stru.di_buf2_mif.canvas0_addr0 =
+		di_buf->di_buf_dup_p[2]->nr_canvas_idx;
+		di_post_stru.di_mtnprd_mif.canvas_num =
+		di_buf->di_buf_dup_p[2]->mtn_canvas_idx;
+		break;
+	}
+
+}
+
 static void get_vscale_skip_count(unsigned par)
 {
-	di_vscale_skip_count_real = (par >> 24)&0xff;
+	di_vscale_skip_count_real = (par >> 24) & 0xff;
 }
 
-#define get_vpp_reg_update_flag(par) ((par>>16)&0x1)
-static unsigned int post_blend;
-module_param(post_blend, uint, 0664);
+#define get_vpp_reg_update_flag(par) ((par >> 16) & 0x1)
+
+static unsigned int pldn_dly = 1;
+static unsigned int tbbtff_dly;
+
+static unsigned int pldn_wnd_flsh = 1;
+module_param(pldn_wnd_flsh, uint, 0644);
+MODULE_PARM_DESC(pldn_wnd_flsh, "/n reflesh the window./n");
+
+static unsigned int pldn_pst_set;
+module_param(pldn_pst_set, uint, 0644);
+MODULE_PARM_DESC(pldn_pst_set, "/n pulldown post setting./n");
+
+static unsigned int post_blend;
+module_param(post_blend, uint, 0664);
 MODULE_PARM_DESC(post_blend, "/n show blend mode/n");
 static unsigned int post_ei;
 module_param(post_ei, uint, 0664);
 MODULE_PARM_DESC(post_ei, "/n show blend mode/n");
 static int
 de_post_process(void *arg, unsigned zoom_start_x_lines,
-unsigned zoom_end_x_lines, unsigned zoom_start_y_lines,
-unsigned zoom_end_y_lines, vframe_t *disp_vf)
+		unsigned zoom_end_x_lines, unsigned zoom_start_y_lines,
+		unsigned zoom_end_y_lines, vframe_t *disp_vf)
 {
-	di_buf_t *di_buf = (di_buf_t *)arg;
+	struct di_buf_s *di_buf = (struct di_buf_s *)arg;
+	struct di_buf_s *di_pldn_buf = di_buf->di_buf_dup_p[pldn_dly];
 	unsigned int di_width, di_height, di_start_x, di_end_x;
 	unsigned int di_start_y, di_end_y, hold_line = post_hold_line;
 	unsigned int post_blend_en = 0, post_blend_mode = 0,
-blend_mtn_en = 0, ei_en = 0, post_field_num = 0;
+		     blend_mtn_en = 0, ei_en = 0, post_field_num = 0;
+	int di_vpp_en, di_ddr_en;
 
-	if (di_get_power_control(1) == 0)
+	if ((di_get_power_control(1) == 0) || di_post_stru.vscale_skip_flag)
 		return 0;
-
+	if (is_in_queue(di_buf, QUEUE_POST_FREE)) {
+		pr_info("%s post_buf[%d] is in post free list.\n",
+				__func__, di_buf->index);
+		return 0;
+	}
 	get_vscale_skip_count(zoom_start_x_lines);
 
-	if (di_post_stru.vscale_skip_flag)
+	if ((!di_post_stru.toggle_flag) &&
+	    ((force_update_post_reg & 0x10) == 0))
 		return 0;
 
-	if ((!di_post_stru.toggle_flag) && ((force_update_post_reg&0x10) == 0))
+	if ((di_buf == NULL) || (di_buf->di_buf_dup_p[0] == NULL))
 		return 0;
 
 	if (di_post_stru.toggle_flag && di_buf->di_buf_dup_p[1])
@@ -4603,7 +6468,7 @@ blend_mtn_en = 0, ei_en = 0, post_field_num = 0;
 	di_post_stru.cur_disp_index = di_buf->index;
 
 	if ((di_post_stru.post_process_fun_index != 1) ||
-		((force_update_post_reg&0xf) != 0)) {
+	    ((force_update_post_reg & 0xf) != 0)) {
 		force_update_post_reg &= ~0x1;
 		di_post_stru.post_process_fun_index = 1;
 		di_post_stru.update_post_reg_flag = update_post_reg_count;
@@ -4611,13 +6476,13 @@ blend_mtn_en = 0, ei_en = 0, post_field_num = 0;
 
 	if (get_vpp_reg_update_flag(zoom_start_x_lines))
 		di_post_stru.update_post_reg_flag = update_post_reg_count;
-	/* pr_info("%s set update_post_reg_flag to %d\n", __func__,
-	di_post_stru.update_post_reg_flag); */
+/* pr_dbg("%s set update_post_reg_flag to %d\n", __func__,
+ * di_post_stru.update_post_reg_flag); */
 
-	zoom_start_x_lines = zoom_start_x_lines&0xffff;
-	zoom_end_x_lines = zoom_end_x_lines&0xffff;
-	zoom_start_y_lines = zoom_start_y_lines&0xffff;
-	zoom_end_y_lines = zoom_end_y_lines&0xffff;
+	zoom_start_x_lines = zoom_start_x_lines & 0xffff;
+	zoom_end_x_lines = zoom_end_x_lines & 0xffff;
+	zoom_start_y_lines = zoom_start_y_lines & 0xffff;
+	zoom_end_y_lines = zoom_end_y_lines & 0xffff;
 
 	if ((init_flag == 0) && (new_keep_last_frame_enable == 0))
 		return 0;
@@ -4628,61 +6493,124 @@ blend_mtn_en = 0, ei_en = 0, post_field_num = 0;
 	di_start_y = zoom_start_y_lines;
 	di_end_y = zoom_end_y_lines;
 	di_height = di_end_y - di_start_y + 1;
-	di_height = di_height/(di_vscale_skip_count_real+1);
-/* pr_info("height = (%d %d %d %d %d)\n",
-di_buf->vframe->height, zoom_start_x_lines, zoom_end_x_lines,
-zoom_start_y_lines, zoom_end_y_lines); */
-
-	if (Rd(DI_POST_SIZE) != ((di_width-1) | ((di_height-1)<<16)) ||
-di_post_stru.buf_type != di_buf->di_buf_dup_p[0]->type ||
-(di_post_stru.di_buf0_mif.luma_x_start0 != di_start_x) ||
-(di_post_stru.di_buf0_mif.luma_y_start0 != di_start_y/2)) {
+	di_height = di_height / (di_vscale_skip_count_real + 1);
+	/* make sure the height is even number */
+	if (di_height%2)
+		di_height++;
+/* pr_dbg("height = (%d %d %d %d %d)\n",
+*  di_buf->vframe->height, zoom_start_x_lines, zoom_end_x_lines,
+*  zoom_start_y_lines, zoom_end_y_lines); */
+
+	if (Rd(DI_POST_SIZE) != ((di_width - 1) | ((di_height - 1) << 16)) ||
+	    di_post_stru.buf_type != di_buf->di_buf_dup_p[0]->type ||
+	    (di_post_stru.di_buf0_mif.luma_x_start0 != di_start_x) ||
+	    (di_post_stru.di_buf0_mif.luma_y_start0 != di_start_y / 2)) {
 		di_post_stru.buf_type = di_buf->di_buf_dup_p[0]->type;
+
 		initial_di_post_2(di_width, di_height, hold_line);
 
+		if ((di_buf->di_buf_dup_p[0]->vframe == NULL) ||
+			(di_buf->vframe == NULL))
+			return 0;
+		/* bit mode config */
+		if (di_buf->vframe->bitdepth & BITDEPTH_Y10) {
+			if (di_buf->vframe->type & VIDTYPE_VIU_444) {
+				di_post_stru.di_buf0_mif.bit_mode =
+			(di_buf->vframe->bitdepth & FULL_PACK_422_MODE)?3:2;
+				di_post_stru.di_buf1_mif.bit_mode =
+			(di_buf->vframe->bitdepth & FULL_PACK_422_MODE)?3:2;
+				di_post_stru.di_buf2_mif.bit_mode =
+			(di_buf->vframe->bitdepth & FULL_PACK_422_MODE)?3:2;
+			} else {
+				di_post_stru.di_buf0_mif.bit_mode =
+			(di_buf->vframe->bitdepth & FULL_PACK_422_MODE)?3:1;
+				di_post_stru.di_buf1_mif.bit_mode =
+			(di_buf->vframe->bitdepth & FULL_PACK_422_MODE)?3:1;
+				di_post_stru.di_buf2_mif.bit_mode =
+			(di_buf->vframe->bitdepth & FULL_PACK_422_MODE)?3:1;
+			}
+		} else {
+			di_post_stru.di_buf0_mif.bit_mode = 0;
+			di_post_stru.di_buf1_mif.bit_mode = 0;
+			di_post_stru.di_buf2_mif.bit_mode = 0;
+		}
+		if (di_buf->vframe->type & VIDTYPE_VIU_444) {
+			di_post_stru.di_buf0_mif.video_mode = 1;
+			di_post_stru.di_buf1_mif.video_mode = 1;
+			di_post_stru.di_buf2_mif.video_mode = 1;
+		} else {
+			di_post_stru.di_buf0_mif.video_mode = 0;
+			di_post_stru.di_buf1_mif.video_mode = 0;
+			di_post_stru.di_buf2_mif.video_mode = 0;
+		}
 		if (di_post_stru.buf_type == VFRAME_TYPE_IN &&
-!(di_buf->di_buf_dup_p[0]->vframe->type & VIDTYPE_VIU_FIELD)) {
+		    !(di_buf->di_buf_dup_p[0]->vframe->type &
+		      VIDTYPE_VIU_FIELD)) {
 			if (di_buf->vframe->type & VIDTYPE_VIU_NV21) {
 				di_post_stru.di_buf0_mif.set_separate_en = 1;
 				di_post_stru.di_buf1_mif.set_separate_en = 1;
+				di_post_stru.di_buf2_mif.set_separate_en = 1;
 			} else {
 				di_post_stru.di_buf0_mif.set_separate_en = 0;
 				di_post_stru.di_buf1_mif.set_separate_en = 0;
+				di_post_stru.di_buf2_mif.set_separate_en = 0;
 			}
-			di_post_stru.di_buf0_mif.luma_y_start0	= di_start_y;
-			di_post_stru.di_buf0_mif.luma_y_end0	= di_end_y;
+			di_post_stru.di_buf0_mif.luma_y_start0 = di_start_y;
+			di_post_stru.di_buf0_mif.luma_y_end0 = di_end_y;
 		} else { /* from vdin or local vframe process by di pre */
 			di_post_stru.di_buf0_mif.set_separate_en = 0;
-			di_post_stru.di_buf0_mif.luma_y_start0 = di_start_y>>1;
-			di_post_stru.di_buf0_mif.luma_y_end0 = di_end_y>>1;
-
+			di_post_stru.di_buf0_mif.luma_y_start0 =
+				di_start_y >> 1;
+			di_post_stru.di_buf0_mif.luma_y_end0 = di_end_y >> 1;
 			di_post_stru.di_buf1_mif.set_separate_en = 0;
-			di_post_stru.di_buf1_mif.luma_y_start0 = di_start_y>>1;
-			di_post_stru.di_buf1_mif.luma_y_end0 = di_end_y>>1;
-		}
-		di_post_stru.di_buf0_mif.luma_x_start0	= di_start_x;
-		di_post_stru.di_buf0_mif.luma_x_end0	= di_end_x;
-		di_post_stru.di_buf1_mif.luma_x_start0	= di_start_x;
-		di_post_stru.di_buf1_mif.luma_x_end0	= di_end_x;
-
-		di_post_stru.di_mtnprd_mif.start_x	= di_start_x;
-		di_post_stru.di_mtnprd_mif.end_x		= di_end_x;
-		di_post_stru.di_mtnprd_mif.start_y	= di_start_y>>1;
-		di_post_stru.di_mtnprd_mif.end_y	= di_end_y >> 1;
-		#ifdef MCDI_SUPPORT
-		di_post_stru.di_mcvecrd_mif.start_x = (di_start_x+4)/5;
-		di_post_stru.di_mcvecrd_mif.start_y = (di_start_y>>1);
-		di_post_stru.di_mcvecrd_mif.size_x	= (di_width+4)/5 - 1;
-		di_post_stru.di_mcvecrd_mif.size_y	= (di_height>>1)-1;
-		#endif
+			di_post_stru.di_buf1_mif.luma_y_start0 =
+				di_start_y >> 1;
+			di_post_stru.di_buf1_mif.luma_y_end0 = di_end_y >> 1;
+			di_post_stru.di_buf2_mif.set_separate_en = 0;
+			di_post_stru.di_buf2_mif.luma_y_end0 = di_end_y >> 1;
+			di_post_stru.di_buf2_mif.luma_y_start0 =
+				di_start_y >> 1;
+		}
+		di_post_stru.di_buf0_mif.luma_x_start0 = di_start_x;
+		di_post_stru.di_buf0_mif.luma_x_end0 = di_end_x;
+		di_post_stru.di_buf1_mif.luma_x_start0 = di_start_x;
+		di_post_stru.di_buf1_mif.luma_x_end0 = di_end_x;
+		di_post_stru.di_buf2_mif.luma_x_start0 = di_start_x;
+		di_post_stru.di_buf2_mif.luma_x_end0 = di_end_x;
+
+		if ((post_wr_en && post_wr_surpport)) {
+			di_post_stru.di_diwr_mif.start_x = di_start_x;
+			di_post_stru.di_diwr_mif.end_x   = di_end_x;
+			di_post_stru.di_diwr_mif.start_y = di_start_y;
+			di_post_stru.di_diwr_mif.end_y   = di_end_y;
+		}
+
+		di_post_stru.di_mtnprd_mif.start_x = di_start_x;
+		di_post_stru.di_mtnprd_mif.end_x = di_end_x;
+		di_post_stru.di_mtnprd_mif.start_y = di_start_y >> 1;
+		di_post_stru.di_mtnprd_mif.end_y = di_end_y >> 1;
+		if (mcpre_en) {
+			di_post_stru.di_mcvecrd_mif.start_x = di_start_x / 5;
+			di_post_stru.di_mcvecrd_mif.vecrd_offset =
+				((di_start_x % 5) ? (5 - di_start_x % 5) : 0);
+			di_post_stru.di_mcvecrd_mif.start_y =
+				(di_start_y >> 1);
+			di_post_stru.di_mcvecrd_mif.size_x =
+				(di_end_x + 1 + 4) / 5 - 1 - di_start_x / 5;
+			di_post_stru.di_mcvecrd_mif.size_y =
+				(di_height >> 1) - 1;
+		}
 		di_post_stru.update_post_reg_flag = update_post_reg_count;
+		/* if height decrease, mtn will not enough */
+		if (di_buf->pulldown_mode != PULL_DOWN_BUF1)
+			di_buf->pulldown_mode = PULL_DOWN_EI;
 	}
 
 #ifdef DI_USE_FIXED_CANVAS_IDX
 #ifdef CONFIG_VSYNC_RDMA
-	if (
-(is_vsync_rdma_enable() && ((force_update_post_reg&0x40) == 0)) ||
-(force_update_post_reg&0x20)) {
+	if ((is_vsync_rdma_enable() &&
+		((force_update_post_reg & 0x40) == 0)) ||
+		(force_update_post_reg & 0x20)) {
 		di_post_stru.canvas_id = di_post_stru.next_canvas_id;
 	} else {
 		di_post_stru.canvas_id = 0;
@@ -4694,224 +6622,419 @@ di_post_stru.buf_type != di_buf->di_buf_dup_p[0]->type ||
 	case PULL_DOWN_BLEND_0:
 	case PULL_DOWN_NORMAL:
 		config_canvas_idx(
-di_buf->di_buf_dup_p[1], di_post_idx[di_post_stru.canvas_id][0], -1);
+			di_buf->di_buf_dup_p[1],
+			di_post_idx[di_post_stru.canvas_id][0], -1);
 		config_canvas_idx(
-di_buf->di_buf_dup_p[2], -1, di_post_idx[di_post_stru.canvas_id][2]);
+			di_buf->di_buf_dup_p[2], -1,
+			di_post_idx[di_post_stru.canvas_id][2]);
 		config_canvas_idx(
-di_buf->di_buf_dup_p[0], di_post_idx[di_post_stru.canvas_id][1], -1);
-		#ifdef MCDI_SUPPORT
-		config_mcvec_canvas_idx(
-di_buf->di_buf_dup_p[2], di_post_idx[di_post_stru.canvas_id][3]);
-		#endif
+			di_buf->di_buf_dup_p[0],
+			di_post_idx[di_post_stru.canvas_id][1], -1);
+		config_canvas_idx(
+			di_buf->di_buf_dup_p[2],
+			di_post_idx[di_post_stru.canvas_id][3], -1);
+		if (mcpre_en)
+			config_mcvec_canvas_idx(
+				di_buf->di_buf_dup_p[2],
+				di_post_idx[di_post_stru.canvas_id][4]);
+
+		/* for post_wr_en */
+		if ((post_wr_en && post_wr_surpport))
+			config_canvas_idx(
+			di_buf, di_post_idx[di_post_stru.canvas_id][5], -1);
 		break;
 	case PULL_DOWN_BLEND_2:
 		config_canvas_idx(
-di_buf->di_buf_dup_p[1], di_post_idx[di_post_stru.canvas_id][0], -1);
+			di_buf->di_buf_dup_p[0],
+			di_post_idx[di_post_stru.canvas_id][3], -1);
 		config_canvas_idx(
-di_buf->di_buf_dup_p[2], -1, di_post_idx[di_post_stru.canvas_id][2]);
+			di_buf->di_buf_dup_p[1],
+			di_post_idx[di_post_stru.canvas_id][0], -1);
 		config_canvas_idx(
-di_buf->di_buf_dup_p[2], di_post_idx[di_post_stru.canvas_id][1], -1);
-		#ifdef MCDI_SUPPORT
-		config_mcvec_canvas_idx(
-di_buf->di_buf_dup_p[2], di_post_idx[di_post_stru.canvas_id][3]);
-		#endif
+			di_buf->di_buf_dup_p[2], -1,
+			di_post_idx[di_post_stru.canvas_id][2]);
+		config_canvas_idx(
+			di_buf->di_buf_dup_p[2],
+			di_post_idx[di_post_stru.canvas_id][1], -1);
+		if (mcpre_en)
+			config_mcvec_canvas_idx(
+				di_buf->di_buf_dup_p[2],
+				di_post_idx[di_post_stru.canvas_id][4]);
+		if ((post_wr_en && post_wr_surpport))
+			config_canvas_idx(
+			di_buf, di_post_idx[di_post_stru.canvas_id][5], -1);
 		break;
 	case PULL_DOWN_MTN:
 		config_canvas_idx(
-di_buf->di_buf_dup_p[1], di_post_idx[di_post_stru.canvas_id][0], -1);
+			di_buf->di_buf_dup_p[1],
+			di_post_idx[di_post_stru.canvas_id][0], -1);
 		config_canvas_idx(
-di_buf->di_buf_dup_p[2], -1, di_post_idx[di_post_stru.canvas_id][2]);
+			di_buf->di_buf_dup_p[2], -1,
+			di_post_idx[di_post_stru.canvas_id][2]);
 		config_canvas_idx(
-di_buf->di_buf_dup_p[0], di_post_idx[di_post_stru.canvas_id][1], -1);
+			di_buf->di_buf_dup_p[0],
+			di_post_idx[di_post_stru.canvas_id][1], -1);
+		if ((post_wr_en && post_wr_surpport))
+			config_canvas_idx(
+di_buf, di_post_idx[di_post_stru.canvas_id][4], -1);
 		break;
 	case PULL_DOWN_BUF1:/* wave with buf1 */
 		config_canvas_idx(
-di_buf->di_buf_dup_p[1], di_post_idx[di_post_stru.canvas_id][0], -1);
+			di_buf->di_buf_dup_p[1],
+			di_post_idx[di_post_stru.canvas_id][0], -1);
 		config_canvas_idx(
-di_buf->di_buf_dup_p[1], -1, di_post_idx[di_post_stru.canvas_id][2]);
+			di_buf->di_buf_dup_p[1], -1,
+			di_post_idx[di_post_stru.canvas_id][2]);
 		config_canvas_idx(
-di_buf->di_buf_dup_p[0], di_post_idx[di_post_stru.canvas_id][1], -1);
+			di_buf->di_buf_dup_p[0],
+			di_post_idx[di_post_stru.canvas_id][1], -1);
+		if ((post_wr_en && post_wr_surpport))
+			config_canvas_idx(
+di_buf, di_post_idx[di_post_stru.canvas_id][4], -1);
 		break;
 	case PULL_DOWN_EI:
 		if (di_buf->di_buf_dup_p[1])
 			config_canvas_idx(
-di_buf->di_buf_dup_p[1], di_post_idx[di_post_stru.canvas_id][0], -1);
+				di_buf->di_buf_dup_p[1],
+				di_post_idx[di_post_stru.canvas_id][0], -1);
+		if ((post_wr_en && post_wr_surpport))
+			config_canvas_idx(
+di_buf, di_post_idx[di_post_stru.canvas_id][4], -1);
 		break;
 	default:
 		break;
 	}
-	di_post_stru.next_canvas_id = di_post_stru.canvas_id?0:1;
+	di_post_stru.next_canvas_id = di_post_stru.canvas_id ? 0 : 1;
 #endif
+	if (di_buf->di_buf_dup_p[1] == NULL)
+		return 0;
+	if ((di_buf->di_buf_dup_p[1]->vframe == NULL) ||
+		di_buf->di_buf_dup_p[0]->vframe == NULL)
+		return 0;
 	switch (di_buf->pulldown_mode) {
 	case PULL_DOWN_BLEND_0:
 	case PULL_DOWN_NORMAL:
-		post_field_num =
-(di_buf->di_buf_dup_p[1]->vframe->type & VIDTYPE_TYPEMASK)
-== VIDTYPE_INTERLACE_TOP?0:1;
-		di_post_stru.di_buf0_mif.canvas0_addr0 =
-di_buf->di_buf_dup_p[1]->nr_canvas_idx;
-		di_post_stru.di_buf1_mif.canvas0_addr0 =
-di_buf->di_buf_dup_p[0]->nr_canvas_idx;
-		di_post_stru.di_mtnprd_mif.canvas_num =
-di_buf->di_buf_dup_p[2]->mtn_canvas_idx;
-		#ifdef MCDI_SUPPORT
-		di_post_stru.di_mcvecrd_mif.canvas_num =
-di_buf->di_buf_dup_p[2]->mcvec_canvas_idx;
-		#endif
-		if (di_buf->pulldown_mode == PULL_DOWN_NORMAL) {
+		config_fftffb_mode(di_buf, &post_field_num,
+			(di_buf->di_buf_dup_p[tbbtff_dly]->privated&0x3));
+		if (mcpre_en)
+			di_post_stru.di_mcvecrd_mif.canvas_num =
+				di_buf->di_buf_dup_p[2]->mcvec_canvas_idx;
+		if (di_buf->pulldown_mode == PULL_DOWN_NORMAL)
 			post_blend_mode = 3;
-			blend_mtn_en = 1;
-			ei_en = 1;
-			post_blend_en = 1;
-		} else {
+		else
 			post_blend_mode = 1;
-			blend_mtn_en = 0;
-			ei_en = 0;
-			post_blend_en = 0;
-		}
+		blend_mtn_en = 1;
+		post_ei = ei_en = 1;
+		post_blend_en = 1;
 		break;
 	case PULL_DOWN_BLEND_2:
 		post_field_num =
-(di_buf->di_buf_dup_p[1]->vframe->type & VIDTYPE_TYPEMASK)
-== VIDTYPE_INTERLACE_TOP?0:1;
+			(di_buf->di_buf_dup_p[1]->vframe->type &
+			 VIDTYPE_TYPEMASK)
+			== VIDTYPE_INTERLACE_TOP ? 0 : 1;
 		di_post_stru.di_buf0_mif.canvas0_addr0 =
-di_buf->di_buf_dup_p[1]->nr_canvas_idx;
+			di_buf->di_buf_dup_p[1]->nr_canvas_idx;
 		di_post_stru.di_buf1_mif.canvas0_addr0 =
-di_buf->di_buf_dup_p[2]->nr_canvas_idx;
+			di_buf->di_buf_dup_p[2]->nr_canvas_idx;
+		di_post_stru.di_buf2_mif.canvas0_addr0 =
+			di_buf->di_buf_dup_p[0]->nr_canvas_idx;
 		di_post_stru.di_mtnprd_mif.canvas_num =
-di_buf->di_buf_dup_p[2]->mtn_canvas_idx;
-		#ifdef MCDI_SUPPORT
-		di_post_stru.di_mcvecrd_mif.canvas_num =
-di_buf->di_buf_dup_p[2]->mcvec_canvas_idx;
-		#endif
-		post_blend_mode = 1;
-		blend_mtn_en = 0;
-		ei_en = 0;
-		post_blend_en = 0;
+			di_buf->di_buf_dup_p[2]->mtn_canvas_idx;
+		if (mcpre_en)
+			di_post_stru.di_mcvecrd_mif.canvas_num =
+				di_buf->di_buf_dup_p[2]->mcvec_canvas_idx;
+
+		if ((post_wr_en && post_wr_surpport))
+			di_post_stru.di_diwr_mif.canvas_num =
+				di_post_idx[di_post_stru.canvas_id][4];
+
+				post_blend_mode = 1;
+		blend_mtn_en = 1;
+		post_ei = ei_en = 1;
+		post_blend_en = 1;
 		break;
 	case PULL_DOWN_MTN:
 		post_field_num =
-(di_buf->di_buf_dup_p[1]->vframe->type & VIDTYPE_TYPEMASK)
-== VIDTYPE_INTERLACE_TOP?0:1;
+			(di_buf->di_buf_dup_p[1]->vframe->type &
+			 VIDTYPE_TYPEMASK)
+			== VIDTYPE_INTERLACE_TOP ? 0 : 1;
 		di_post_stru.di_buf0_mif.canvas0_addr0 =
-di_buf->di_buf_dup_p[1]->nr_canvas_idx;
+			di_buf->di_buf_dup_p[1]->nr_canvas_idx;
 		di_post_stru.di_buf1_mif.canvas0_addr0 =
-di_buf->di_buf_dup_p[0]->nr_canvas_idx;
+			di_buf->di_buf_dup_p[0]->nr_canvas_idx;
 		di_post_stru.di_mtnprd_mif.canvas_num =
-di_buf->di_buf_dup_p[2]->mtn_canvas_idx;
+			di_buf->di_buf_dup_p[2]->mtn_canvas_idx;
+		if ((post_wr_en && post_wr_surpport))
+			di_post_stru.di_diwr_mif.canvas_num =
+				di_post_idx[di_post_stru.canvas_id][4];
 		post_blend_mode = 0;
 		blend_mtn_en = 1;
-		ei_en = 1;
+		post_ei = ei_en = 1;
 		post_blend_en = 1;
 		break;
 	case PULL_DOWN_BUF1:
 		post_field_num =
-(di_buf->di_buf_dup_p[1]->vframe->type & VIDTYPE_TYPEMASK)
-== VIDTYPE_INTERLACE_TOP?0:1;
+			(di_buf->di_buf_dup_p[1]->vframe->type &
+			 VIDTYPE_TYPEMASK)
+			== VIDTYPE_INTERLACE_TOP ? 0 : 1;
 		di_post_stru.di_buf0_mif.canvas0_addr0 =
-di_buf->di_buf_dup_p[1]->nr_canvas_idx;
+			di_buf->di_buf_dup_p[1]->nr_canvas_idx;
 		di_post_stru.di_mtnprd_mif.canvas_num =
-di_buf->di_buf_dup_p[1]->mtn_canvas_idx;
+			di_buf->di_buf_dup_p[1]->mtn_canvas_idx;
 		di_post_stru.di_buf1_mif.canvas0_addr0 =
-di_buf->di_buf_dup_p[0]->nr_canvas_idx;
+			di_buf->di_buf_dup_p[0]->nr_canvas_idx;
+		if ((post_wr_en && post_wr_surpport))
+			di_post_stru.di_diwr_mif.canvas_num =
+				di_post_idx[di_post_stru.canvas_id][4];
 		post_blend_mode = 1;
-		blend_mtn_en = 0;/* must enable */
-		ei_en = post_ei;/* must enable */
+		blend_mtn_en = 0;
+		post_ei = ei_en = 0;
 		post_blend_en = 0;
 		break;
 	case PULL_DOWN_EI:
 		if (di_buf->di_buf_dup_p[1]) {
 			di_post_stru.di_buf0_mif.canvas0_addr0 =
-di_buf->di_buf_dup_p[1]->nr_canvas_idx;
+				di_buf->di_buf_dup_p[1]->nr_canvas_idx;
 			post_field_num =
-(di_buf->di_buf_dup_p[1]->vframe->type & VIDTYPE_TYPEMASK)
-== VIDTYPE_INTERLACE_TOP?0:1;
+				(di_buf->di_buf_dup_p[1]->vframe->type &
+				 VIDTYPE_TYPEMASK)
+				== VIDTYPE_INTERLACE_TOP ? 0 : 1;
 		} else {
 			post_field_num =
-(di_buf->di_buf_dup_p[0]->vframe->type & VIDTYPE_TYPEMASK)
-== VIDTYPE_INTERLACE_TOP?0:1;
+				(di_buf->di_buf_dup_p[0]->vframe->type &
+				 VIDTYPE_TYPEMASK)
+				== VIDTYPE_INTERLACE_TOP ? 0 : 1;
 			di_post_stru.di_buf0_mif.src_field_mode
-= post_field_num;
+				= post_field_num;
 		}
+		if ((post_wr_en && post_wr_surpport))
+			di_post_stru.di_diwr_mif.canvas_num =
+				di_post_idx[di_post_stru.canvas_id][4];
 		post_blend_mode = 2;
-		blend_mtn_en = 0;/* must enable */
-		ei_en = 1;
+		blend_mtn_en = 0;
+		post_ei = ei_en = 1;
 		post_blend_en = 0;
 		break;
 	default:
 		break;
 	}
 
-#ifdef MCDI_SUPPORT
-	di_post_stru.di_mcvecrd_mif.blend_mode = post_blend_mode;
-#endif
+	if ((post_wr_en && post_wr_surpport)) {
+		di_vpp_en = 0;
+		di_ddr_en = 1;
+	} else {
+		di_vpp_en = 1;
+		di_ddr_en = 0;
+	}
+
+	/* if post size < MIN_POST_WIDTH, force ei */
+	if ((di_width < MIN_BLEND_WIDTH) &&
+		(di_buf->pulldown_mode == PULL_DOWN_BLEND_0 ||
+		di_buf->pulldown_mode == PULL_DOWN_BLEND_2 ||
+		di_buf->pulldown_mode == PULL_DOWN_NORMAL
+		)) {
+		post_blend_mode = 1;
+		blend_mtn_en = 0;
+		post_ei = ei_en = 0;
+		post_blend_en = 0;
+	}
+
+	if (mcpre_en)
+		di_post_stru.di_mcvecrd_mif.blend_mode = post_blend_mode;
+
 	if ((di_post_stru.update_post_reg_flag) &&
-((force_update_post_reg&0x80) == 0)) {
+	    ((force_update_post_reg & 0x80) == 0)) {
 		enable_di_post_2(
-				&di_post_stru.di_buf0_mif,
-				&di_post_stru.di_buf1_mif,
-				NULL,
-				&di_post_stru.di_mtnprd_mif,
-				ei_en,			/* ei enable */
-				post_blend_en,	/* blend enable */
-				blend_mtn_en,	/* blend mtn enable */
-				post_blend_mode,/* blend mode. */
-				1,		/* di_vpp_en. */
-				0,		/* di_ddr_en. */
-				post_field_num,	/* 1 bottom generate top */
-				hold_line,
-				post_urgent
+			&di_post_stru.di_buf0_mif,
+			&di_post_stru.di_buf1_mif,
+			&di_post_stru.di_buf2_mif,
+			((post_wr_en && post_wr_surpport) ?
+				(&di_post_stru.di_diwr_mif):NULL),
+			&di_post_stru.di_mtnprd_mif,
+			ei_en,                  /* ei enable */
+			post_blend_en,          /* blend enable */
+			blend_mtn_en,           /* blend mtn enable */
+			post_blend_mode,        /* blend mode. */
+			di_vpp_en,		/* di_vpp_en. */
+			di_ddr_en,		/* di_ddr_en. */
+			post_field_num,         /* 1 bottom generate top */
+			hold_line,
+			post_urgent
 			);
-		#ifdef MCDI_SUPPORT
-		enable_mc_di_post(
-&di_post_stru.di_mcvecrd_mif, post_urgent, overturn);
-		#endif
-	} else
-		 di_post_switch_buffer(
-				&di_post_stru.di_buf0_mif,
-				&di_post_stru.di_buf1_mif,
-				NULL,
-				&di_post_stru.di_mtnprd_mif,
-				#ifdef MCDI_SUPPORT
-				&di_post_stru.di_mcvecrd_mif,
-				#endif
-				ei_en,	/* ei enable */
-				post_blend_en,/* blend enable */
-				blend_mtn_en,	/* blend mtn enable */
-				post_blend_mode,/* blend mode. */
-				1,	/* di_vpp_en. */
-				0,	/* di_ddr_en. */
-				post_field_num,/* 1 bottom generate top */
-				hold_line,
-				post_urgent
+		if (mcpre_en)
+			enable_mc_di_post(
+				&di_post_stru.di_mcvecrd_mif, post_urgent,
+				overturn);
+		else if (is_meson_gxtvbb_cpu() || is_meson_txl_cpu())
+			DI_VSYNC_WR_MPEG_REG_BITS(MCDI_MC_CRTL, 0, 0, 2);
+	} else {
+		di_post_switch_buffer(
+			&di_post_stru.di_buf0_mif,
+			&di_post_stru.di_buf1_mif,
+			&di_post_stru.di_buf2_mif,
+((post_wr_en && post_wr_surpport) ? (&di_post_stru.di_diwr_mif):NULL),
+			&di_post_stru.di_mtnprd_mif,
+			&di_post_stru.di_mcvecrd_mif,
+			ei_en,                  /* ei enable */
+			post_blend_en,          /* blend enable */
+			blend_mtn_en,           /* blend mtn enable */
+			post_blend_mode,        /* blend mode. */
+			di_vpp_en,	/* di_vpp_en. */
+			di_ddr_en,	/* di_ddr_en. */
+			post_field_num,         /* 1 bottom generate top */
+			hold_line,
+			post_urgent
 			);
+	}
 
 #ifdef NEW_DI_V1
 	if (di_post_stru.update_post_reg_flag)
 		di_apply_reg_cfg(1);
 
 #endif
-#ifdef NEW_DI_TV
-	di_post_read_reverse_irq(overturn);
-#endif
-#ifdef MCDI_SUPPORT
-	if (di_buf->di_buf_dup_p[2])
-		set_post_mcinfo(&di_buf->di_buf_dup_p[2]->curr_field_mcinfo);
-#endif
+	if (is_meson_gxtvbb_cpu() || is_meson_txl_cpu())
+		di_post_read_reverse_irq(overturn);
+	if (mcpre_en) {
+		if (di_buf->di_buf_dup_p[2])
+			set_post_mcinfo(&di_buf->di_buf_dup_p[2]
+				->curr_field_mcinfo);
+	} else if (is_meson_gxtvbb_cpu() || is_meson_txl_cpu())
+			DI_VSYNC_WR_MPEG_REG_BITS(MCDI_MC_CRTL, 0, 0, 2);
+
+
+/* set pull down region (f(t-1) */
+
+	if (di_pldn_buf && pulldown_enable &&
+		!di_pre_stru.cur_prog_flag) {
+		if (pldn_wnd_flsh == 1) {
+			DI_VSYNC_WR_MPEG_REG_BITS(DI_BLEND_REG0_Y,
+				di_pldn_buf->reg0_s, 17, 12);
+			DI_VSYNC_WR_MPEG_REG_BITS(DI_BLEND_REG0_Y,
+				di_pldn_buf->reg0_e, 1, 12);
+
+			DI_VSYNC_WR_MPEG_REG_BITS(DI_BLEND_REG1_Y,
+				di_pldn_buf->reg1_s, 17, 12);
+			DI_VSYNC_WR_MPEG_REG_BITS(DI_BLEND_REG1_Y,
+				di_pldn_buf->reg1_e, 1, 12);
+
+			DI_VSYNC_WR_MPEG_REG_BITS(DI_BLEND_REG2_Y,
+				di_pldn_buf->reg2_s, 17, 12);
+			DI_VSYNC_WR_MPEG_REG_BITS(DI_BLEND_REG2_Y,
+				di_pldn_buf->reg2_e, 1, 12);
+
+			DI_VSYNC_WR_MPEG_REG_BITS(DI_BLEND_REG3_Y,
+				di_pldn_buf->reg3_s, 17, 12);
+			DI_VSYNC_WR_MPEG_REG_BITS(DI_BLEND_REG3_Y,
+				di_pldn_buf->reg3_e, 1, 12);
+
+/* region0 */
+			DI_VSYNC_WR_MPEG_REG_BITS(DI_BLEND_CTRL,
+				(di_pldn_buf->reg0_e > di_pldn_buf->reg0_s)
+				? 1 : 0, 16, 1);
+			DI_VSYNC_WR_MPEG_REG_BITS(DI_BLEND_CTRL,
+				di_pldn_buf->reg0_bmode, 8, 2);
+
+			DI_VSYNC_WR_MPEG_REG_BITS(DI_BLEND_CTRL,
+				(di_pldn_buf->reg1_e > di_pldn_buf->reg1_s)
+				? 1 : 0, 17, 1);
+			DI_VSYNC_WR_MPEG_REG_BITS(DI_BLEND_CTRL,
+				di_pldn_buf->reg1_bmode, 10, 2);
+
+			DI_VSYNC_WR_MPEG_REG_BITS(DI_BLEND_CTRL,
+				(di_pldn_buf->reg2_e > di_pldn_buf->reg2_s)
+				? 1 : 0, 18, 1);
+			DI_VSYNC_WR_MPEG_REG_BITS(DI_BLEND_CTRL,
+				di_pldn_buf->reg2_bmode, 12, 2);
+
+			DI_VSYNC_WR_MPEG_REG_BITS(DI_BLEND_CTRL,
+				(di_pldn_buf->reg3_e > di_pldn_buf->reg3_s)
+				? 1 : 0, 19, 1);
+			DI_VSYNC_WR_MPEG_REG_BITS(DI_BLEND_CTRL,
+				di_pldn_buf->reg3_bmode, 14, 2);
+		} else if (pldn_wnd_flsh == 2) {
+			DI_VSYNC_WR_MPEG_REG(DI_BLEND_REG0_Y, 479);
+			DI_VSYNC_WR_MPEG_REG(DI_BLEND_REG1_Y, 160);
+			DI_VSYNC_WR_MPEG_REG(DI_BLEND_REG2_Y, 320 << 16 | 160);
+			DI_VSYNC_WR_MPEG_REG(DI_BLEND_REG3_Y, 479 << 16 | 320);
+			RDMA_WR(DI_BLEND_CTRL, 0x81f00019); /* normal */
+		}
+
+		if (pldn_pst_set == 1) {
+			DI_VSYNC_WR_MPEG_REG_BITS(DI_BLEND_CTRL, 1, 17, 1);
+/* weaver */
+			DI_VSYNC_WR_MPEG_REG_BITS(DI_BLEND_CTRL, 1, 10, 2);
+			DI_VSYNC_WR_MPEG_REG(DI_BLEND_REG1_Y, 120);
+		} else if (pldn_pst_set == 2) {
+			DI_VSYNC_WR_MPEG_REG_BITS(DI_BLEND_CTRL, 1, 18, 1);
+/* bob */
+			DI_VSYNC_WR_MPEG_REG_BITS(DI_BLEND_CTRL, 2, 12, 2);
+			DI_VSYNC_WR_MPEG_REG(DI_BLEND_REG2_Y, 120);
+		} else if (pldn_pst_set == 3) {
+			DI_VSYNC_WR_MPEG_REG_BITS(DI_BLEND_CTRL, 1, 19, 1);
+/* bob mtn */
+			DI_VSYNC_WR_MPEG_REG_BITS(DI_BLEND_CTRL, 0, 14, 2);
+			DI_VSYNC_WR_MPEG_REG(DI_BLEND_REG3_Y, 120);
+		} else if (pldn_pst_set == 5) {
+			RDMA_WR(DI_BLEND_CTRL, 0x81f00019); /* normal */
+		}
+	}
+
 	if (di_post_stru.update_post_reg_flag > 0)
 		di_post_stru.update_post_reg_flag--;
 	return 0;
 }
 
+
+static void post_de_done_buf_config(void)
+{
+	ulong flags = 0, fiq_flag = 0, irq_flag2 = 0;
+	struct di_buf_s *di_buf = NULL;
+	if (di_post_stru.cur_post_buf == NULL)
+		return;
+
+	di_lock_irqfiq_save(irq_flag2, fiq_flag);
+	queue_out(di_post_stru.cur_post_buf);
+	di_buf = di_post_stru.cur_post_buf;
+	queue_in(di_post_stru.cur_post_buf, QUEUE_POST_READY);
+	di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
+	vf_notify_receiver(VFM_NAME, VFRAME_EVENT_PROVIDER_VFRAME_READY, NULL);
+	di_post_stru.cur_post_buf = NULL;
+
+}
+
+static void di_post_process(void)
+{
+	struct di_buf_s *di_buf = NULL;
+	vframe_t *vf_p = NULL;
+
+
+	if (!queue_empty(QUEUE_POST_DOING) && !di_post_stru.post_de_busy) {
+		di_buf = get_di_buf_head(QUEUE_POST_DOING);
+		if (check_di_buf(di_buf, 20))
+			return;
+		vf_p = di_buf->vframe;
+		if (di_post_stru.run_early_proc_fun_flag) {
+			if (vf_p->early_process_fun)
+				vf_p->early_process_fun(
+					vf_p->private_data, vf_p);
+		}
+		if (di_buf->process_fun_index)
+			de_post_process(
+				di_buf, 0, vf_p->width-1,
+				0, vf_p->height-1, vf_p);
+		di_post_stru.post_de_busy = 1;
+		di_post_stru.cur_post_buf = di_buf;
+	}
+}
+
 int pd_detect_rst;
 
-static void recycle_vframe_type_post(di_buf_t *di_buf)
+static void recycle_vframe_type_post(struct di_buf_s *di_buf)
 {
 	int i;
+
 	if (di_buf == NULL) {
-#ifdef DI_DEBUG
-		pr_info("%s:Error\n", __func__);
-#endif
+		pr_dbg("%s:Error\n", __func__);
 		if (recovery_flag == 0)
 			recovery_log_reason = 15;
 
@@ -4924,7 +7047,6 @@ static void recycle_vframe_type_post(di_buf_t *di_buf)
 	for (i = 0; i < 2; i++) {
 		if (di_buf->di_buf[i])
 			queue_in(di_buf->di_buf[i], QUEUE_RECYCLE);
-
 	}
 	queue_out(di_buf); /* remove it from display_list_head */
 	di_buf->invert_top_bot_flag = 0;
@@ -4933,262 +7055,520 @@ static void recycle_vframe_type_post(di_buf_t *di_buf)
 
 #ifdef DI_DEBUG
 static void
-recycle_vframe_type_post_print(di_buf_t *di_buf,
-							const char *func,
-							const int line)
+recycle_vframe_type_post_print(struct di_buf_s *di_buf,
+			       const char *func,
+			       const int	line)
 {
 	int i;
+
 	di_print("%s:%d ", func, line);
 	for (i = 0; i < 2; i++) {
 		if (di_buf->di_buf[i])
 			di_print("%s[%d]<%d>=>recycle_list; ",
-vframe_type_name[di_buf->di_buf[i]->type], di_buf->di_buf[i]->index, i);
-
+				vframe_type_name[di_buf->di_buf[i]->type],
+				di_buf->di_buf[i]->index, i);
 	}
 	di_print("%s[%d] =>post_free_list\n",
-vframe_type_name[di_buf->type], di_buf->index);
+		vframe_type_name[di_buf->type], di_buf->index);
 }
 #endif
 
+void check_pulldown_mode(
+	int pulldown_type, int pulldown_mode2,
+	int *win_pd_type,  struct di_buf_s *di_buf)
+{
+	int ii;
+	unsigned mode, fdiff_num, dup1_wp_fdiff,
+		 dup1_wc_fdiff, dup1_wn_fdiff, dup2_wp_fdiff,
+		 dup2_wc_fdiff, dup2_wn_fdiff;
+	if ((pulldown_win_mode & 0xfffff) != 0) {
+		for (ii = 0; ii < 5; ii++) {
+			mode = (pulldown_win_mode >> (ii * 4)) & 0xf;
+			if (mode == 1) {
+				if (di_buf->di_buf_dup_p[1]->
+					pulldown_mode == 0) {
+					fdiff_num =
+						di_buf->di_buf_dup_p[1]->
+						win_pd_info[ii].field_diff_num;
+					if ((fdiff_num * win_pd_th[ii].
+					field_diff_num_th)
+					>= pd_win_prop[ii].pixels_num)
+						break;
+				} else {
+					fdiff_num =
+						di_buf->di_buf_dup_p[2]->
+						win_pd_info[ii].field_diff_num;
+					if ((fdiff_num * win_pd_th[ii].
+					field_diff_num_th)
+					>= pd_win_prop[ii].pixels_num)
+						break;
+				}
+				dup1_wn_fdiff =
+					di_buf->di_buf_dup_p[1]->
+					win_pd_info[ii + 1].field_diff_num;
+				dup1_wc_fdiff =
+					di_buf->di_buf_dup_p[1]->
+					win_pd_info[ii].field_diff_num;
+				dup1_wp_fdiff =
+					di_buf->di_buf_dup_p[1]->
+					win_pd_info[ii - 1].field_diff_num;
+				dup2_wc_fdiff =
+					di_buf->di_buf_dup_p[2]->
+					win_pd_info[ii].field_diff_num;
+				dup2_wn_fdiff =
+					di_buf->di_buf_dup_p[2]->
+					win_pd_info[ii + 1].field_diff_num;
+				dup2_wp_fdiff =
+					di_buf->di_buf_dup_p[2]->
+					win_pd_info[ii - 1].field_diff_num;
+				if ((ii != 0) && (ii != 5) && (ii != 4) &&
+				(pulldown_mode2 == 1) &&
+				(((dup2_wn_fdiff * 100) < dup1_wn_fdiff) &&
+				((dup2_wp_fdiff * 100) < dup1_wp_fdiff) &&
+				((dup2_wc_fdiff * 100) >= dup1_wc_fdiff))) {
+					di_print(
+						"out %x %06x %06x\n",
+						ii,
+						di_buf->di_buf_dup_p[2]->
+						win_pd_info[ii].field_diff_num,
+						di_buf->di_buf_dup_p[1]->
+						win_pd_info[ii].field_diff_num);
+					pd_detect_rst = 0;
+					break;
+				}
+				if ((ii != 0) && (ii != 5) && (ii != 4) &&
+				(pulldown_mode2 == 0) &&
+				((dup1_wn_fdiff * 100) < dup1_wc_fdiff) &&
+				((dup1_wp_fdiff * 100) < dup1_wc_fdiff)) {
+					pd_detect_rst = 0;
+					break;
+				}
+			} else if (mode == 2) {
+				if ((pulldown_type == 0) &&
+				(di_buf->di_buf_dup_p[1]->
+				win_pd_info[ii].field_diff_num_pattern
+				!= di_buf->di_buf_dup_p[1]->
+				field_pd_info.field_diff_num_pattern))
+					break;
+				if ((pulldown_type == 1) &&
+				(di_buf->di_buf_dup_p[1]->
+				win_pd_info[ii].frame_diff_num_pattern
+				!= di_buf->di_buf_dup_p[1]->
+				field_pd_info.frame_diff_num_pattern))
+					break;
+			} else if (mode == 3) {
+				if ((di_buf->di_buf_dup_p[1]->win_pd_mode[ii]
+				!= di_buf->di_buf_dup_p[1]->pulldown_mode)
+				|| (pulldown_type != win_pd_type[ii]))
+					break;
+			}
+		}
+		if (ii < 5)
+			di_buf->pulldown_mode = -1;
+	}
+}
 
-static int pulldown_process(di_buf_t *di_buf, int buffer_count)
+static int pulldown_process(struct di_buf_s *di_buf, int buffer_count)
 {
-	int pulldown_type =  -1; /* 0, 2:2; 1, m:n */
-	int win_pd_type[5] = {-1, -1, -1, -1, -1};
+	int pulldown_type = -1; /* 0, 2:2; 1, m:n */
+	int win_pd_type[5] = { -1, -1, -1, -1, -1 };
 	int ii;
 	int pulldown_mode2;
 	int pulldown_mode_ret;
+
 	insert_pd_his(&di_buf->di_buf_dup_p[1]->field_pd_info);
 	if (buffer_count == 3) {
 		/* 3 buffers */
 		cal_pd_parameters(&di_buf->di_buf_dup_p[1]->field_pd_info,
-&di_buf->di_buf_dup_p[0]->field_pd_info,
-&di_buf->di_buf_dup_p[2]->field_pd_info);
+			&di_buf->di_buf_dup_p[0]->field_pd_info,
+			&di_buf->di_buf_dup_p[2]->field_pd_info);
 		/* cal parameters of di_buf_dup_p[1] */
 		pattern_check_pre_2(0, &di_buf->di_buf_dup_p[2]->field_pd_info,
-				 &di_buf->di_buf_dup_p[1]->field_pd_info,
-				&di_buf->di_buf_dup_p[0]->field_pd_info,
-				(int *)&di_buf->di_buf_dup_p[1]->pulldown_mode,
-				NULL, &pulldown_type, &field_pd_th);
+			&di_buf->di_buf_dup_p[1]->field_pd_info,
+			&di_buf->di_buf_dup_p[0]->field_pd_info,
+			(int *)&di_buf->di_buf_dup_p[1]->pulldown_mode,
+			NULL, &pulldown_type, &field_pd_th);
 
 		for (ii = 0; ii < MAX_WIN_NUM; ii++) {
 			cal_pd_parameters(
-&di_buf->di_buf_dup_p[1]->win_pd_info[ii],
-&di_buf->di_buf_dup_p[0]->win_pd_info[ii],
-&di_buf->di_buf_dup_p[2]->win_pd_info[ii]);
-			/* cal parameters of di_buf_dup_p[1] */
-			pattern_check_pre_2(ii+1,
-&di_buf->di_buf_dup_p[2]->win_pd_info[ii],
-&di_buf->di_buf_dup_p[1]->win_pd_info[ii],
-&di_buf->di_buf_dup_p[0]->win_pd_info[ii],
-&(di_buf->di_buf_dup_p[1]->win_pd_mode[ii]),
-					NULL, &(win_pd_type[ii]), &win_pd_th[ii]
-			  );
+				&di_buf->di_buf_dup_p[1]->win_pd_info[ii],
+				&di_buf->di_buf_dup_p[0]->win_pd_info[ii],
+				&di_buf->di_buf_dup_p[2]->win_pd_info[ii]);
+/* cal parameters of di_buf_dup_p[1] */
+			pattern_check_pre_2(ii + 1,
+				&di_buf->di_buf_dup_p[2]->win_pd_info[ii],
+				&di_buf->di_buf_dup_p[1]->win_pd_info[ii],
+				&di_buf->di_buf_dup_p[0]->win_pd_info[ii],
+				&(di_buf->di_buf_dup_p[1]->win_pd_mode[ii]),
+				NULL, &(win_pd_type[ii]), &win_pd_th[ii]
+				);
 		}
 	}
 	pulldown_mode_ret = pulldown_mode2 = detect_pd32();
 
-	if (di_log_flag&DI_LOG_PULLDOWN) {
-		di_buf_t *dp = di_buf->di_buf_dup_p[1];
+	if (di_log_flag & DI_LOG_PULLDOWN) {
+		struct di_buf_s *dp = di_buf->di_buf_dup_p[1];
 		di_print(
 "%02d (%x%x%x) %08x %06x %08x %06x %02x %02x %02x %02x %02x %02x %02x %02x ",
-dp->seq%100, dp->pulldown_mode < 0?0xf:dp->pulldown_mode,
-pulldown_type < 0?0xf:pulldown_type,
-pulldown_mode2 < 0?0xf:pulldown_mode2,
-dp->field_pd_info.frame_diff, dp->field_pd_info.frame_diff_num,
-dp->field_pd_info.field_diff, dp->field_pd_info.field_diff_num,
-dp->field_pd_info.frame_diff_by_pre, dp->field_pd_info.frame_diff_num_by_pre,
-dp->field_pd_info.field_diff_by_pre, dp->field_pd_info.field_diff_num_by_pre,
-dp->field_pd_info.field_diff_by_next, dp->field_pd_info.field_diff_num_by_next,
-dp->field_pd_info.frame_diff_skew_ratio,
-dp->field_pd_info.frame_diff_num_skew_ratio);
+			dp->seq % 100,
+			dp->pulldown_mode < 0 ? 0xf : dp->pulldown_mode,
+			pulldown_type < 0 ? 0xf : pulldown_type,
+			pulldown_mode2 < 0 ? 0xf : pulldown_mode2,
+			dp->field_pd_info.frame_diff,
+			dp->field_pd_info.frame_diff_num,
+			dp->field_pd_info.field_diff,
+			dp->field_pd_info.field_diff_num,
+			dp->field_pd_info.frame_diff_by_pre,
+			dp->field_pd_info.frame_diff_num_by_pre,
+			dp->field_pd_info.field_diff_by_pre,
+			dp->field_pd_info.field_diff_num_by_pre,
+			dp->field_pd_info.field_diff_by_next,
+			dp->field_pd_info.field_diff_num_by_next,
+			dp->field_pd_info.frame_diff_skew_ratio,
+			dp->field_pd_info.frame_diff_num_skew_ratio);
 		for (ii = 0; ii < MAX_WIN_NUM; ii++) {
 			di_print(
-"(%x,%x) %08x %06x %08x %06x %02x %02x %02x %02x %02x %02x %02x %02x ",
-dp->win_pd_mode[ii] < 0?0xf:dp->win_pd_mode[ii],
-win_pd_type[ii] < 0?0xf:win_pd_type[ii],
-dp->win_pd_info[ii].frame_diff, dp->win_pd_info[ii].frame_diff_num,
-dp->win_pd_info[ii].field_diff, dp->win_pd_info[ii].field_diff_num,
-dp->win_pd_info[ii].frame_diff_by_pre,
-dp->win_pd_info[ii].frame_diff_num_by_pre,
-dp->win_pd_info[ii].field_diff_by_pre,
-dp->win_pd_info[ii].field_diff_num_by_pre,
-dp->win_pd_info[ii].field_diff_by_next,
-dp->win_pd_info[ii].field_diff_num_by_next,
-dp->win_pd_info[ii].frame_diff_skew_ratio,
-dp->win_pd_info[ii].frame_diff_num_skew_ratio);
+	"(%x,%x) %08x %06x %08x %06x %02x %02x %02x %02x %02x %02x %02x %02x ",
+				(dp->win_pd_mode[ii] < 0) ?
+					0xf : dp->win_pd_mode[ii],
+				win_pd_type[ii] < 0 ? 0xf : win_pd_type[ii],
+				dp->win_pd_info[ii].frame_diff,
+				dp->win_pd_info[ii].frame_diff_num,
+				dp->win_pd_info[ii].field_diff,
+				dp->win_pd_info[ii].field_diff_num,
+				dp->win_pd_info[ii].frame_diff_by_pre,
+				dp->win_pd_info[ii].frame_diff_num_by_pre,
+				dp->win_pd_info[ii].field_diff_by_pre,
+				dp->win_pd_info[ii].field_diff_num_by_pre,
+				dp->win_pd_info[ii].field_diff_by_next,
+				dp->win_pd_info[ii].field_diff_num_by_next,
+				dp->win_pd_info[ii].frame_diff_skew_ratio,
+				dp->win_pd_info[ii].frame_diff_num_skew_ratio);
 		}
 		di_print("\n");
 	}
 
 	di_buf->pulldown_mode = -1;
 	if (pulldown_detect) {
-		if (pulldown_detect&0x1)
+		if (pulldown_detect & 0x1)
 			di_buf->pulldown_mode =
-di_buf->di_buf_dup_p[1]->pulldown_mode;
-			 /* used by de_post_process */
-
-		if (pulldown_detect&0x10) {
+				di_buf->di_buf_dup_p[1]->pulldown_mode;
+		/* used by de_post_process */
+		if (pulldown_detect & 0x10) {
 			if ((pulldown_mode2 >= 0) && (pd_detect_rst > 15))
 				di_buf->pulldown_mode = pulldown_mode2;
-
 		}
 		if (pd_detect_rst <= 32)
 			pd_detect_rst++;
 
-		if ((pulldown_win_mode&0xfffff) != 0) {
-			int ii;
-			unsigned mode, fdiff_num, dup1_wp_fdiff,
-dup1_wc_fdiff, dup1_wn_fdiff, dup2_wp_fdiff,
-dup2_wc_fdiff, dup2_wn_fdiff;
-			for (ii = 0; ii < 5; ii++) {
-				mode = (pulldown_win_mode>>(ii*4))&0xf;
-				if (mode == 1) {
-					if (
-di_buf->di_buf_dup_p[1]->pulldown_mode == 0) {
-						fdiff_num =
-di_buf->di_buf_dup_p[1]->win_pd_info[ii].field_diff_num;
-						if (
-(fdiff_num*win_pd_th[ii].field_diff_num_th) >= pd_win_prop[ii].pixels_num)
-							break;
-					} else {
-						fdiff_num =
-di_buf->di_buf_dup_p[2]->win_pd_info[ii].field_diff_num;
-						if (
-(fdiff_num*win_pd_th[ii].field_diff_num_th) >= pd_win_prop[ii].pixels_num)
-							break;
-
-					}
-					dup1_wn_fdiff =
-di_buf->di_buf_dup_p[1]->win_pd_info[ii+1].field_diff_num;
-					dup1_wc_fdiff =
-di_buf->di_buf_dup_p[1]->win_pd_info[ii].field_diff_num;
-					dup1_wp_fdiff =
-di_buf->di_buf_dup_p[1]->win_pd_info[ii-1].field_diff_num;
-					dup2_wc_fdiff =
-di_buf->di_buf_dup_p[2]->win_pd_info[ii].field_diff_num;
-					dup2_wn_fdiff =
-di_buf->di_buf_dup_p[2]->win_pd_info[ii+1].field_diff_num;
-					dup2_wp_fdiff =
-di_buf->di_buf_dup_p[2]->win_pd_info[ii-1].field_diff_num;
-					if (
-(ii != 0) && (ii != 5) && (ii != 4) &&  (pulldown_mode2 == 1) &&
-(((dup2_wn_fdiff*100)  < dup1_wn_fdiff) &&
-((dup2_wp_fdiff*100)  < dup1_wp_fdiff) &&
-((dup2_wc_fdiff*100) >= dup1_wc_fdiff))) {
-						di_print(
-"out %x %06x %06x\n", ii,
-di_buf->di_buf_dup_p[2]->win_pd_info[ii].field_diff_num,
-di_buf->di_buf_dup_p[1]->win_pd_info[ii].field_diff_num);
-							pd_detect_rst = 0;
-						break;
-					}
-					if (
-(ii != 0) && (ii != 5) && (ii != 4) &&
-(pulldown_mode2 == 0) && ((dup1_wn_fdiff*100) < dup1_wc_fdiff) &&
-((dup1_wp_fdiff*100) < dup1_wc_fdiff)) {
-					   pd_detect_rst = 0;
-					   break;
-					}
-				} else if (mode == 2) {
-					if ((pulldown_type == 0) &&
-(di_buf->di_buf_dup_p[1]->win_pd_info[ii].field_diff_num_pattern
-!= di_buf->di_buf_dup_p[1]->field_pd_info.field_diff_num_pattern)
-						) {
-						break;
-					}
-					if ((pulldown_type == 1) &&
-(di_buf->di_buf_dup_p[1]->win_pd_info[ii].frame_diff_num_pattern
-!= di_buf->di_buf_dup_p[1]->field_pd_info.frame_diff_num_pattern)
-						) {
-						break;
-					}
-				} else if (mode == 3) {
-					if (
-(di_buf->di_buf_dup_p[1]->win_pd_mode[ii] !=
-di_buf->di_buf_dup_p[1]->pulldown_mode) || (pulldown_type != win_pd_type[ii]))
-						break;
-
-				}
-			}
-			if (ii < 5)
-				di_buf->pulldown_mode = -1;
-		}
+		check_pulldown_mode(pulldown_type, pulldown_mode2, win_pd_type,
+			di_buf);
 		if (di_buf->pulldown_mode != -1)
 			pulldown_count++;
 
 #if defined(NEW_DI_TV)
 		if (di_buf->vframe->source_type == VFRAME_SOURCE_TYPE_TUNER)
 			di_buf->pulldown_mode = -1;
-				 /* pr_info("2:2 ignore\n"); */
+		/* pr_dbg("2:2 ignore\n"); */
 
 #endif
 	}
 	return pulldown_mode_ret;
 }
 
-#ifdef NEW_DI_TV
-static int pulldown_mode = 1;
-#else
+
 static int pulldown_mode;
-#endif
 static int debug_blend_mode = -1;
 
+static unsigned int pldn_dly1 = 1;
+
+static unsigned int pldn_pst_wver = 5;
+module_param(pldn_pst_wver, uint, 0644);
+MODULE_PARM_DESC(pldn_pst_wver, "/n pulldonw post-weaver for test./n");
+
+int set_pulldown_mode(int buffer_keep_count, struct di_buf_s *di_buf)
+{
+	int pulldown_mode_hise = 0;
+	if (cpu_after_eq(MESON_CPU_MAJOR_ID_GXTVBB)) {
+		if (pulldown_enable && !di_pre_stru.cur_prog_flag)
+			di_buf->pulldown_mode =
+				di_buf->di_buf_dup_p[pldn_dly1]->pulldown_mode;
+		else
+			di_buf->pulldown_mode =	PULL_DOWN_NORMAL;
+		if (pldn_pst_wver != 5) {
+			if (pldn_pst_wver > 5)
+				pldn_pst_wver = 5;
+			di_buf->pulldown_mode = pldn_pst_wver;
+		}
+	} else {
+		if (pulldown_mode & 1) {
+			pulldown_mode_hise =
+				pulldown_process(di_buf, buffer_keep_count);
+			if (di_buf->pulldown_mode == -1)
+				di_buf->pulldown_mode = PULL_DOWN_NORMAL;
+			else if (di_buf->pulldown_mode == 0)
+				di_buf->pulldown_mode = PULL_DOWN_BLEND_0;
+			else if (di_buf->pulldown_mode == 1)
+				di_buf->pulldown_mode = PULL_DOWN_BLEND_2;
+		} else {
+			di_buf->pulldown_mode =
+				di_buf->di_buf_dup_p[1]->pulldown_mode;
+		}
+	}
+	return pulldown_mode_hise;
+}
+
+void drop_frame(int check_drop, int throw_flag, struct di_buf_s *di_buf)
+{
+	ulong flags = 0, fiq_flag = 0, irq_flag2 = 0;
+	int i = 0, drop_flag = 0;
+	di_lock_irqfiq_save(irq_flag2, fiq_flag);
+	if ((frame_count == 0) && check_drop)
+		di_post_stru.start_pts = di_buf->vframe->pts;
+	if ((check_drop && (frame_count < start_frame_drop_count))
+	|| throw_flag) {
+		drop_flag = 1;
+	} else {
+		if (check_drop && (frame_count == start_frame_drop_count)) {
+			if ((di_post_stru.start_pts)
+			&& (di_buf->vframe->pts == 0))
+				di_buf->vframe->pts = di_post_stru.start_pts;
+			di_post_stru.start_pts = 0;
+		}
+		for (i = 0; i < 3; i++) {
+			if (di_buf->di_buf_dup_p[i]) {
+				if (di_buf->di_buf_dup_p[i]->vframe->bitdepth !=
+					di_buf->vframe->bitdepth) {
+					pr_info("%s buf[%d] not match bit mode\n",
+						__func__, i);
+					drop_flag = 1;
+					break;
+				}
+			}
+		}
+	}
+	if (drop_flag) {
+		queue_in(di_buf, QUEUE_TMP);
+		recycle_vframe_type_post(di_buf);
+#ifdef DI_DEBUG
+		recycle_vframe_type_post_print(
+				di_buf, __func__,
+				__LINE__);
+#endif
+	} else {
+		if ((post_wr_en && post_wr_surpport))
+			queue_in(di_buf, QUEUE_POST_DOING);
+		else
+			queue_in(di_buf, QUEUE_POST_READY);
+	}
+	di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
+}
+
 static int process_post_vframe(void)
 {
 /*
-   1) get buf from post_free_list, config it according to buf
-		in pre_ready_list, send it to post_ready_list
-		(it will be send to post_free_list in di_vf_put())
-   2) get buf from pre_ready_list, attach it to buf from post_free_list
-		(it will be send to recycle_list in di_vf_put() )
-*/
+ * 1) get buf from post_free_list, config it according to buf
+ * in pre_ready_list, send it to post_ready_list
+ * (it will be send to post_free_list in di_vf_put())
+ * 2) get buf from pre_ready_list, attach it to buf from post_free_list
+ * (it will be send to recycle_list in di_vf_put() )
+ */
 	ulong flags = 0, fiq_flag = 0, irq_flag2 = 0;
-	int i, pulldown_mode_hise = 0;
+	int i = 0;
+	int pulldown_mode_hise = 0;
 	int ret = 0;
 	int buffer_keep_count = 3;
-	di_buf_t *di_buf = NULL;
-	di_buf_t *ready_di_buf;
-	di_buf_t *p = NULL;/* , *ptmp; */
+	struct di_buf_s *di_buf = NULL;
+	struct di_buf_s *ready_di_buf;
+	struct di_buf_s *p = NULL;/* , *ptmp; */
 	int itmp;
 	int ready_count = list_count(QUEUE_PRE_READY);
 	bool check_drop = false;
+
 	if (queue_empty(QUEUE_POST_FREE))
 		return 0;
 
-	if (ready_count > 0) {
-		ready_di_buf = get_di_buf_head(QUEUE_PRE_READY);
-		if ((ready_di_buf == NULL) || (ready_di_buf->vframe == NULL)) {
-#ifdef DI_DEBUG
-			pr_info("%s:Error1\n", __func__);
-#endif
-			if (recovery_flag == 0)
-				recovery_log_reason = 16;
+	if (ready_count == 0)
+		return 0;
 
-			recovery_flag++;
-			return 0;
+	ready_di_buf = get_di_buf_head(QUEUE_PRE_READY);
+	if ((ready_di_buf == NULL) || (ready_di_buf->vframe == NULL)) {
+
+		pr_dbg("%s:Error1\n", __func__);
+
+		if (recovery_flag == 0)
+			recovery_log_reason = 16;
+
+		recovery_flag++;
+		return 0;
+	}
+
+	if ((ready_di_buf->post_proc_flag) &&
+	    (ready_count >= buffer_keep_count)) {
+		i = 0;
+		queue_for_each_entry(p, ptmp, QUEUE_PRE_READY, list) {
+			/* if(p->post_proc_flag == 0){ */
+			if (p->type == VFRAME_TYPE_IN) {
+				ready_di_buf->post_proc_flag = -1;
+				ready_di_buf->new_format_flag = 1;
+			}
+			i++;
+			if (i > 2)
+				break;
 		}
+	}
+	if (ready_di_buf->post_proc_flag > 0) {
+		if (ready_count >= buffer_keep_count) {
+			di_lock_irqfiq_save(irq_flag2, fiq_flag);
+			di_buf = get_di_buf_head(QUEUE_POST_FREE);
+			if (check_di_buf(di_buf, 17))
+				return 0;
+
+			queue_out(di_buf);
+			di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
 
-		if ((ready_di_buf->post_proc_flag) &&
-			(ready_count >= buffer_keep_count)) {
 			i = 0;
-			queue_for_each_entry(p, ptmp, QUEUE_PRE_READY, list) {
-				/* if(p->post_proc_flag == 0){ */
-				if (p->type == VFRAME_TYPE_IN) {
-					ready_di_buf->post_proc_flag = -1;
-					ready_di_buf->new_format_flag = 1;
-				}
-				i++;
-				if (i > 2)
+			queue_for_each_entry(
+				p, ptmp, QUEUE_PRE_READY, list) {
+				di_buf->di_buf_dup_p[i++] = p;
+				if (i >= buffer_keep_count)
 					break;
 			}
+			if (i < buffer_keep_count) {
+
+				pr_dbg("%s:Error3\n", __func__);
+
+				if (recovery_flag == 0)
+					recovery_log_reason = 18;
+				recovery_flag++;
+				return 0;
+			}
+
+			memcpy(di_buf->vframe,
+				di_buf->di_buf_dup_p[1]->vframe,
+				sizeof(vframe_t));
+			di_buf->vframe->private_data = di_buf;
+			if (di_buf->di_buf_dup_p[1]->post_proc_flag == 3) {
+				/* dummy, not for display */
+				inc_post_ref_count(di_buf);
+				di_buf->di_buf[0] = di_buf->di_buf_dup_p[0];
+				di_buf->di_buf[1] = NULL;
+				queue_out(di_buf->di_buf[0]);
+				di_lock_irqfiq_save(irq_flag2, fiq_flag);
+				queue_in(di_buf, QUEUE_TMP);
+				recycle_vframe_type_post(di_buf);
+
+				di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
+
+				di_print("%s <dummy>: ", __func__);
+
+			} else {
+				if (di_buf->di_buf_dup_p[1]->
+				post_proc_flag == 2){
+					reset_pulldown_state();
+					di_buf->pulldown_mode
+						= PULL_DOWN_BLEND_2;
+					/* blend with di_buf->di_buf_dup_p[2] */
+				} else {
+					pulldown_mode_hise = set_pulldown_mode(
+						buffer_keep_count,
+						di_buf);
+				}
+				di_buf->vframe->type =
+					VIDTYPE_PROGRESSIVE |
+					VIDTYPE_VIU_422 |
+					VIDTYPE_VIU_SINGLE_PLANE |
+					VIDTYPE_VIU_FIELD;
+				if (
+					di_buf->di_buf_dup_p[1]->
+					new_format_flag) {
+					/* if (di_buf->di_buf_dup_p[1]
+					 * ->post_proc_flag == 2) { */
+					di_buf->vframe->
+					early_process_fun
+						= de_post_disable_fun;
+				} else {
+					di_buf->vframe->
+					early_process_fun
+						= do_nothing_fun;
+				}
+
+				if (di_buf->di_buf_dup_p[1]->type
+				    == VFRAME_TYPE_IN) {
+					/* next will be bypass */
+					di_buf->vframe->type
+						= VIDTYPE_PROGRESSIVE |
+						  VIDTYPE_VIU_422 |
+						  VIDTYPE_VIU_SINGLE_PLANE
+						  | VIDTYPE_VIU_FIELD;
+					di_buf->vframe->height >>= 1;
+					di_buf->vframe->canvas0Addr =
+						di_buf->di_buf_dup_p[0]
+						->nr_canvas_idx; /* top */
+					di_buf->vframe->canvas1Addr =
+						di_buf->di_buf_dup_p[0]
+						->nr_canvas_idx;
+					di_buf->vframe->process_fun =
+						NULL;
+					di_buf->process_fun_index =
+						PROCESS_FUN_NULL;
+				} else {
+					/*for debug*/
+					if (debug_blend_mode != -1)
+						di_buf->pulldown_mode =
+							debug_blend_mode;
+
+					di_buf->vframe->process_fun =
+((post_wr_en && post_wr_surpport) ? NULL : de_post_process);
+					di_buf->process_fun_index =
+						PROCESS_FUN_DI;
+					inc_post_ref_count(di_buf);
+				}
+				di_buf->di_buf[0]
+					= di_buf->di_buf_dup_p[0];
+				di_buf->di_buf[1] = NULL;
+				queue_out(di_buf->di_buf[0]);
+
+				drop_frame(true,
+					(di_buf->di_buf_dup_p[0]->throw_flag) ||
+					(di_buf->di_buf_dup_p[1]->throw_flag) ||
+					(di_buf->di_buf_dup_p[2]->throw_flag),
+					di_buf);
+
+				frame_count++;
+				di_print("%s <interlace>: ", __func__);
+
+				if (!(post_wr_en && post_wr_surpport))
+					vf_notify_receiver(VFM_NAME,
+VFRAME_EVENT_PROVIDER_VFRAME_READY, NULL);
+			}
+			ret = 1;
 		}
+	} else {
+		if (is_progressive(ready_di_buf->vframe) ||
+		    ready_di_buf->type == VFRAME_TYPE_IN ||
+		    ready_di_buf->post_proc_flag < 0 ||
+		    bypass_post_state
+		    ){
+			int vframe_process_count = 1;
+#ifdef DET3D
+			int dual_vframe_flag = 0;
+			if ((di_pre_stru.vframe_interleave_flag &&
+			     ready_di_buf->left_right) ||
+			    (bypass_post & 0x100)) {
+				dual_vframe_flag = 1;
+				vframe_process_count = 2;
+			}
+#endif
+			if (skip_top_bot &&
+			    (!is_progressive(ready_di_buf->vframe)))
+				vframe_process_count = 2;
 
-		if (ready_di_buf->post_proc_flag > 0) {
-			if (ready_count >= buffer_keep_count) {
+			if (ready_count >= vframe_process_count) {
+				struct di_buf_s *di_buf_i;
 				di_lock_irqfiq_save(irq_flag2, fiq_flag);
 				di_buf = get_di_buf_head(QUEUE_POST_FREE);
-				if (check_di_buf(di_buf, 17))
+				if (check_di_buf(di_buf, 19))
 					return 0;
 
 				queue_out(di_buf);
@@ -5196,699 +7576,408 @@ static int process_post_vframe(void)
 
 				i = 0;
 				queue_for_each_entry(
-p, ptmp, QUEUE_PRE_READY, list) {
+					p, ptmp, QUEUE_PRE_READY, list){
 					di_buf->di_buf_dup_p[i++] = p;
-					if (i >= buffer_keep_count)
+					if (i >= vframe_process_count) {
+						di_buf->di_buf_dup_p[i] = NULL;
+						di_buf->di_buf_dup_p[i+1] =
+							NULL;
 						break;
+					}
 				}
-				if (i < buffer_keep_count) {
-#ifdef DI_DEBUG
-					pr_info("%s:Error3\n", __func__);
-#endif
+				if (i < vframe_process_count) {
+					pr_dbg("%s:Error6\n", __func__);
 					if (recovery_flag == 0)
-						recovery_log_reason = 18;
+						recovery_log_reason = 22;
 
 					recovery_flag++;
 					return 0;
 				}
 
+				di_buf_i = di_buf->di_buf_dup_p[0];
+				if (!is_progressive(ready_di_buf->vframe)
+					&& ((skip_top_bot == 1)
+					|| (skip_top_bot == 2))) {
+					unsigned frame_type =
+						di_buf->di_buf_dup_p[1]->
+						vframe->type & VIDTYPE_TYPEMASK;
+					if (skip_top_bot == 1) {
+						di_buf_i = (frame_type ==
+						VIDTYPE_INTERLACE_TOP)
+						? di_buf->di_buf_dup_p[1]
+						: di_buf->di_buf_dup_p[0];
+					} else if (skip_top_bot == 2) {
+						di_buf_i = (frame_type ==
+						VIDTYPE_INTERLACE_BOTTOM)
+						? di_buf->di_buf_dup_p[1]
+						: di_buf->di_buf_dup_p[0];
+					}
+				}
+
 				memcpy(di_buf->vframe,
-di_buf->di_buf_dup_p[1]->vframe, sizeof(vframe_t));
+					di_buf_i->vframe,
+					sizeof(vframe_t));
 				di_buf->vframe->private_data = di_buf;
-#ifdef D2D3_SUPPORT
-				if (d2d3_enable) {
-					di_buf->dp_buf_adr =
-di_buf->di_buf_dup_p[1]->dp_buf_adr;
-					di_buf->dp_buf_size =
-di_buf->di_buf_dup_p[1]->dp_buf_size;
+
+				if (ready_di_buf->new_format_flag &&
+				(ready_di_buf->type == VFRAME_TYPE_IN)) {
+					di_buf->vframe->early_process_fun
+						= de_post_disable_fun;
 				} else {
-					di_buf->dp_buf_adr = 0;
-					di_buf->dp_buf_size = 0;
-				}
-#endif
-				if (
-di_buf->di_buf_dup_p[1]->post_proc_flag == 3) {
-					/* dummy, not for display */
-					inc_post_ref_count(di_buf);
-					di_buf->di_buf[0]
-= di_buf->di_buf_dup_p[0];
-					di_buf->di_buf[1] = NULL;
-					queue_out(di_buf->di_buf[0]);
-					di_lock_irqfiq_save(
-irq_flag2, fiq_flag);
-					queue_in(di_buf, QUEUE_TMP);
-					recycle_vframe_type_post(di_buf);
-
-					di_unlock_irqfiq_restore(
-irq_flag2, fiq_flag);
-
-#ifdef DI_DEBUG
-					di_print("%s <dummy>: ", __func__);
-#endif
-				} else {
-					if (
-di_buf->di_buf_dup_p[1]->post_proc_flag == 2) {
-						reset_pulldown_state();
-						di_buf->pulldown_mode
-= PULL_DOWN_BLEND_2;
-						/*
-blend with di_buf->di_buf_dup_p[2] */
-					} else {
-						if (pulldown_mode&1) {
-							pulldown_mode_hise =
-pulldown_process(di_buf, buffer_keep_count);
-							if (
-di_buf->pulldown_mode == -1)
-								di_buf->pulldown_mode
-= PULL_DOWN_NORMAL;
-							else if (
-di_buf->pulldown_mode == 0)
-								di_buf->pulldown_mode
-= PULL_DOWN_BLEND_0;
-							else if (
-di_buf->pulldown_mode == 1)
-								di_buf->pulldown_mode
-= PULL_DOWN_BLEND_2;
-						} else {
-							di_buf->pulldown_mode =
-di_buf->di_buf_dup_p[1]->pulldown_mode;
-						}
-					}
-					di_buf->vframe->type =
-VIDTYPE_PROGRESSIVE | VIDTYPE_VIU_422 |
-VIDTYPE_VIU_SINGLE_PLANE | VIDTYPE_VIU_FIELD;
-					if (
-di_buf->di_buf_dup_p[1]->new_format_flag) {
-						/* if (di_buf->di_buf_dup_p[1]
-						->post_proc_flag == 2) { */
-						di_buf->vframe->early_process_fun
-= de_post_disable_fun;
-					} else {
-						di_buf->vframe->early_process_fun
-= do_nothing_fun;
-					}
+					if (ready_di_buf->type ==
+						VFRAME_TYPE_IN)
+						di_buf->vframe->
+						early_process_fun
+						 = do_nothing_fun;
 
-					if (di_buf->di_buf_dup_p[1]->type
-== VFRAME_TYPE_IN) {
-						/* next will be bypass */
-						di_buf->vframe->type
-= VIDTYPE_PROGRESSIVE | VIDTYPE_VIU_422 |
-VIDTYPE_VIU_SINGLE_PLANE | VIDTYPE_VIU_FIELD;
-						di_buf->vframe->height >>= 1;
-						di_buf->vframe->canvas0Addr =
-di_buf->di_buf_dup_p[0]->nr_canvas_idx; /* top */
-						di_buf->vframe->canvas1Addr =
-di_buf->di_buf_dup_p[0]->nr_canvas_idx;
-						di_buf->vframe->process_fun =
-NULL;
-						di_buf->process_fun_index =
-PROCESS_FUN_NULL;
-					} else {
-						/*for debug*/
-						if (debug_blend_mode != -1)
-							di_buf->pulldown_mode =
-							debug_blend_mode;
-						di_buf->vframe->process_fun =
-							de_post_process;
-						di_buf->process_fun_index =
-							PROCESS_FUN_DI;
-						inc_post_ref_count(di_buf);
-					}
-					di_buf->di_buf[0]
-= di_buf->di_buf_dup_p[0];
-					di_buf->di_buf[1] = NULL;
-					queue_out(di_buf->di_buf[0]);
-					if (frame_count == 0)
-						di_post_stru.start_pts
-= di_buf->vframe->pts;
-
-					di_lock_irqfiq_save(
-irq_flag2, fiq_flag);
-					if (
-(frame_count < start_frame_drop_count) ||
-(di_buf->di_buf_dup_p[0]->throw_flag) ||
-(di_buf->di_buf_dup_p[1]->throw_flag) ||
-(di_buf->di_buf_dup_p[2]->throw_flag)) {
-						queue_in(di_buf, QUEUE_TMP);
-						recycle_vframe_type_post(
-di_buf);
-#ifdef DI_DEBUG
-						recycle_vframe_type_post_print(
-						di_buf, __func__, __LINE__);
-#endif
-					} else {
-						if (frame_count ==
-start_frame_drop_count) {
-							if (
-(di_post_stru.start_pts != 0) && (di_buf->vframe->pts == 0))
-								di_buf->vframe->pts
-= di_post_stru.start_pts;
-								di_post_stru.start_pts = 0;
-						}
-						queue_in(
-di_buf, QUEUE_POST_READY);
-					}
-					frame_count++;
-					di_unlock_irqfiq_restore(
-irq_flag2, fiq_flag);
-#ifdef DI_DEBUG
-					di_print("%s <interlace>: ", __func__);
-#endif
-					vf_notify_receiver(VFM_NAME,
-VFRAME_EVENT_PROVIDER_VFRAME_READY, NULL);
+					else
+						di_buf->vframe->
+						early_process_fun
+						 = do_pre_only_fun;
 				}
-				ret = 1;
-			}
-		} else {
-#ifdef DET3D
-			if ((ready_di_buf->vframe->trans_fmt == 0) &&
-					bypass_post_state) {
-				if (det3d_en &&
-					di_pre_stru.det3d_trans_fmt != 0) {
-					ready_di_buf->vframe->trans_fmt =
-						di_pre_stru.det3d_trans_fmt;
-					set3d_view(di_pre_stru.det3d_trans_fmt,
-						ready_di_buf->vframe);
+				if (ready_di_buf->post_proc_flag == -2) {
+					di_buf->vframe->type
+						|= VIDTYPE_VIU_FIELD;
+					di_buf->vframe->type
+						&= ~(VIDTYPE_TYPEMASK);
+					di_buf->vframe->process_fun
+= (post_wr_en && post_wr_surpport)?NULL:de_post_process;
+					di_buf->process_fun_index
+						= PROCESS_FUN_DI;
+					di_buf->pulldown_mode
+						= PULL_DOWN_EI;
+				} else {
+					di_buf->vframe->process_fun =
+						NULL;
+					di_buf->process_fun_index =
+						PROCESS_FUN_NULL;
+					di_buf->pulldown_mode =
+						PULL_DOWN_NORMAL;
 				}
-			}
-#endif
-			if (is_progressive(ready_di_buf->vframe) ||
-				ready_di_buf->type == VFRAME_TYPE_IN ||
-				ready_di_buf->post_proc_flag < 0 ||
-				bypass_post_state
-				) {
-				int vframe_process_count = 1;
+				di_buf->di_buf[0] = ready_di_buf;
+				di_buf->di_buf[1] = NULL;
+				queue_out(ready_di_buf);
+
 #ifdef DET3D
-				int dual_vframe_flag = 0;
-				if ((di_pre_stru.vframe_interleave_flag &&
-					ready_di_buf->left_right) ||
-					(bypass_post&0x100)) {
-					dual_vframe_flag = 1;
-					vframe_process_count = 2;
+				if (dual_vframe_flag) {
+					di_buf->di_buf[1] =
+						di_buf->di_buf_dup_p[1];
+					queue_out(di_buf->di_buf[1]);
 				}
 #endif
-				if (skip_top_bot &&
-					(!is_progressive(ready_di_buf->vframe)))
-					vframe_process_count = 2;
-
-				if (ready_count >= vframe_process_count) {
-					di_buf_t *di_buf_i;
-					di_lock_irqfiq_save(
-irq_flag2, fiq_flag);
-					di_buf =
-					get_di_buf_head(QUEUE_POST_FREE);
-
-					if (check_di_buf(di_buf, 19))
-						return 0;
-
-					queue_out(di_buf);
-					di_unlock_irqfiq_restore(
-irq_flag2, fiq_flag);
-
-					i = 0;
-					queue_for_each_entry(
-p, ptmp, QUEUE_PRE_READY, list) {
-						di_buf->di_buf_dup_p[i++] = p;
-						if (i >= vframe_process_count) {
-							di_buf->di_buf_dup_p[i] = NULL;
-							break;
-						}
-					}
-					if (i < vframe_process_count) {
-#ifdef DI_DEBUG
-						pr_info(
-"%s:Error6\n", __func__);
-#endif
-						if (recovery_flag == 0)
-							recovery_log_reason = 22;
+				if ((check_start_drop_prog &&
+				     is_progressive(ready_di_buf->vframe))
+				    || !is_progressive(ready_di_buf->vframe))
+					check_drop = true;
+				drop_frame(check_drop,
+					di_buf->di_buf[0]->throw_flag, di_buf);
 
-						recovery_flag++;
-						return 0;
-					}
+				frame_count++;
 
-					di_buf_i = di_buf->di_buf_dup_p[0];
-					if (
-!is_progressive(ready_di_buf->vframe)) {
-						if (skip_top_bot == 1) {
-							di_buf_i =
-(di_buf->di_buf_dup_p[1]->vframe->type & VIDTYPE_TYPEMASK) ==
-VIDTYPE_INTERLACE_TOP ? di_buf->di_buf_dup_p[1] : di_buf->di_buf_dup_p[0];
-						} else if (skip_top_bot == 2) {
-							di_buf_i =
-(di_buf->di_buf_dup_p[1]->vframe->type & VIDTYPE_TYPEMASK) ==
-VIDTYPE_INTERLACE_BOTTOM ? di_buf->di_buf_dup_p[1] : di_buf->di_buf_dup_p[0];
-						}
-					}
+				di_print(
+					"%s <prog by frame>: ",
+					__func__);
 
-					memcpy(di_buf->vframe,
-di_buf_i->vframe, sizeof(vframe_t));
-					di_buf->vframe->private_data = di_buf;
-#ifdef D2D3_SUPPORT
-					if (
-(ready_di_buf->type == VFRAME_TYPE_IN) || (d2d3_enable == 0)) {
-						di_buf->dp_buf_adr = 0;
-						di_buf->dp_buf_size = 0;
-					} else {
-						di_buf->dp_buf_adr =
-							ready_di_buf->dp_buf_adr;
-						di_buf->dp_buf_size =
-							ready_di_buf->dp_buf_size;
-					}
-#endif
+				ret = 1;
+				vf_notify_receiver(VFM_NAME,
+					VFRAME_EVENT_PROVIDER_VFRAME_READY,
+					NULL);
+			}
+		} else if (ready_count >= 2) {
+			/*for progressive input,type
+			 * 1:separate tow fields,type
+			 * 2:bypass post as frame*/
+			unsigned char prog_tb_field_proc_type =
+				(prog_proc_config >> 1) & 0x3;
+			di_lock_irqfiq_save(irq_flag2, fiq_flag);
+			di_buf = get_di_buf_head(QUEUE_POST_FREE);
 
-					if (ready_di_buf->new_format_flag &&
-(ready_di_buf->type == VFRAME_TYPE_IN)) {
-						di_buf->vframe->early_process_fun
-= de_post_disable_fun;
-					} else {
-						if (
-ready_di_buf->type == VFRAME_TYPE_IN)
-							di_buf->vframe->early_process_fun
-= do_nothing_fun;
-						else
-							di_buf->vframe->early_process_fun
-= do_pre_only_fun;
-					}
-					if (
-ready_di_buf->post_proc_flag == -2) {
-						di_buf->vframe->type
-|= VIDTYPE_VIU_FIELD;
-						di_buf->vframe->type
-&= ~(VIDTYPE_TYPEMASK);
-						di_buf->vframe->process_fun
-= de_post_process;
-						di_buf->process_fun_index
-= PROCESS_FUN_DI;
-						di_buf->pulldown_mode
-= PULL_DOWN_EI;
-					} else {
-						di_buf->vframe->process_fun = NULL;
-						di_buf->process_fun_index =
-						PROCESS_FUN_NULL;
-						di_buf->pulldown_mode =
-						PULL_DOWN_NORMAL;
-					}
-					di_buf->di_buf[0] = ready_di_buf;
-					di_buf->di_buf[1] = NULL;
-					queue_out(ready_di_buf);
+			if (check_di_buf(di_buf, 20))
+				return 0;
 
-#ifdef DET3D
-					if (dual_vframe_flag) {
-						di_buf->di_buf[1] =
-di_buf->di_buf_dup_p[1];
-						queue_out(di_buf->di_buf[1]);
-					}
-#endif
-					di_lock_irqfiq_save(irq_flag2, fiq_flag);
-					if ((check_start_drop_prog &&
-is_progressive(ready_di_buf->vframe)) || !is_progressive(ready_di_buf->vframe))
-						check_drop = true;
-					if (check_drop && (frame_count == 0))
-						di_post_stru.start_pts =
-di_buf->vframe->pts;
-					if ((check_drop &&
-(frame_count < start_frame_drop_count)) || (di_buf->di_buf[0]->throw_flag)) {
-						queue_in(di_buf, QUEUE_TMP);
-						recycle_vframe_type_post(di_buf);
-#ifdef DI_DEBUG
-						recycle_vframe_type_post_print(
-di_buf, __func__, __LINE__);
-#endif
-					} else {
-						if (check_drop &&
-(frame_count == start_frame_drop_count)) {
-							if (
-(di_post_stru.start_pts != 0) && (di_buf->vframe->pts == 0))
-								di_buf->vframe->pts =
-di_post_stru.start_pts;
-							di_post_stru.start_pts = 0;
-						}
-						queue_in(di_buf,
-							QUEUE_POST_READY);
-					}
-					frame_count++;
-					di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
+			queue_out(di_buf);
+			di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
 
-#ifdef DI_DEBUG
-					di_print(
-"%s <prog by frame>: ", __func__);
-#endif
-					ret = 1;
-					vf_notify_receiver(VFM_NAME,
-VFRAME_EVENT_PROVIDER_VFRAME_READY, NULL);
+			i = 0;
+			queue_for_each_entry(
+				p, ptmp, QUEUE_PRE_READY, list) {
+				di_buf->di_buf_dup_p[i++] = p;
+				if (i >= 2) {
+					di_buf->di_buf_dup_p[i] = NULL;
+					break;
 				}
-			} else if (ready_count >= 2) {
-				/*for progressive input,type
-				1:separate tow fields,type
-				2:bypass post as frame*/
-				unsigned char prog_tb_field_proc_type =
-					(prog_proc_config>>1)&0x3;
-				di_lock_irqfiq_save(irq_flag2, fiq_flag);
-				di_buf = get_di_buf_head(QUEUE_POST_FREE);
-
-				if (check_di_buf(di_buf, 20))
-					return 0;
-
-				queue_out(di_buf);
-				di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
+			}
+			if (i < 2) {
+				pr_dbg("%s:Error6\n", __func__);
 
-				i = 0;
-				queue_for_each_entry(
-p, ptmp, QUEUE_PRE_READY, list) {
-					di_buf->di_buf_dup_p[i++] = p;
-					if (i >= 2) {
-						di_buf->di_buf_dup_p[i] = NULL;
-						break;
-					}
-				}
-				if (i < 2) {
-#ifdef DI_DEBUG
-					pr_info("%s:Error6\n", __func__);
-#endif
-					if (recovery_flag == 0)
-						recovery_log_reason = 21;
+				if (recovery_flag == 0)
+					recovery_log_reason = 21;
 
-					recovery_flag++;
-					return 0;
-				}
+				recovery_flag++;
+				return 0;
+			}
 
-				memcpy(di_buf->vframe,
-di_buf->di_buf_dup_p[0]->vframe, sizeof(vframe_t));
-				di_buf->vframe->private_data = di_buf;
-#ifdef D2D3_SUPPORT
-				if (d2d3_enable) {
-					di_buf->dp_buf_adr =
-di_buf->di_buf_dup_p[0]->dp_buf_adr;
-					di_buf->dp_buf_size =
-di_buf->di_buf_dup_p[0]->dp_buf_size;
-				} else {
-					di_buf->dp_buf_adr = 0;
-					di_buf->dp_buf_size = 0;
-				}
-#endif
-		/*separate one progressive frame as two interlace fields*/
-				if (prog_tb_field_proc_type == 1) {
-					/* do weave by di post */
-					di_buf->vframe->type =
-VIDTYPE_PROGRESSIVE | VIDTYPE_VIU_422 |
-VIDTYPE_VIU_SINGLE_PLANE | VIDTYPE_VIU_FIELD;
-					if (
-di_buf->di_buf_dup_p[0]->new_format_flag)
-						di_buf->vframe->early_process_fun =
-de_post_disable_fun;
-					else
-						di_buf->vframe->early_process_fun =
-do_nothing_fun;
+			memcpy(di_buf->vframe,
+				di_buf->di_buf_dup_p[0]->vframe,
+				sizeof(vframe_t));
+			di_buf->vframe->private_data = di_buf;
 
-					di_buf->pulldown_mode = PULL_DOWN_BUF1;
-					di_buf->vframe->process_fun =
-								de_post_process;
-					di_buf->process_fun_index =
-								PROCESS_FUN_DI;
-				} else if (prog_tb_field_proc_type == 0) {
-					/* to do: need change for
-					DI_USE_FIXED_CANVAS_IDX */
-					/* do weave by vpp */
-					di_buf->vframe->type =
-VIDTYPE_PROGRESSIVE | VIDTYPE_VIU_422 | VIDTYPE_VIU_SINGLE_PLANE;
-					if (
-(di_buf->di_buf_dup_p[0]->new_format_flag) || (Rd(DI_IF1_GEN_REG)&1)) {
-						di_buf->vframe->early_process_fun =
-							de_post_disable_fun;
-					} else {
-						di_buf->vframe->early_process_fun =
-							do_nothing_fun;
-					}
-					di_buf->vframe->process_fun = NULL;
-					di_buf->process_fun_index =
-						PROCESS_FUN_NULL;
+			/*separate one progressive frame
+			 * as two interlace fields */
+			if (prog_tb_field_proc_type == 1) {
+				/* do weave by di post */
+				di_buf->vframe->type =
+					VIDTYPE_PROGRESSIVE |
+					VIDTYPE_VIU_422 |
+					VIDTYPE_VIU_SINGLE_PLANE |
+					VIDTYPE_VIU_FIELD;
+				if (
+					di_buf->di_buf_dup_p[0]->
+					new_format_flag)
+					di_buf->vframe->
+					early_process_fun =
+						de_post_disable_fun;
+				else
+					di_buf->vframe->
+					early_process_fun =
+						do_nothing_fun;
+
+				di_buf->pulldown_mode = PULL_DOWN_BUF1;
+				di_buf->vframe->process_fun =
+(post_wr_en && post_wr_surpport)?NULL:de_post_process;
+				di_buf->process_fun_index =
+					PROCESS_FUN_DI;
+			} else if (prog_tb_field_proc_type == 0) {
+				/* to do: need change for
+				 * DI_USE_FIXED_CANVAS_IDX */
+				/* do weave by vpp */
+				di_buf->vframe->type =
+					VIDTYPE_PROGRESSIVE |
+					VIDTYPE_VIU_422 |
+					VIDTYPE_VIU_SINGLE_PLANE;
+				if (
+					(di_buf->di_buf_dup_p[0]->
+					 new_format_flag) ||
+					(Rd(DI_IF1_GEN_REG) & 1))
+					di_buf->vframe->
+					early_process_fun =
+						de_post_disable_fun;
+				else
+					di_buf->vframe->
+					early_process_fun =
+						do_nothing_fun;
+				di_buf->vframe->process_fun = NULL;
+				di_buf->process_fun_index =
+					PROCESS_FUN_NULL;
+				di_buf->vframe->canvas0Addr =
+					di_buf->di_buf_dup_p[0]->
+					nr_canvas_idx;
+				di_buf->vframe->canvas1Addr =
+					di_buf->di_buf_dup_p[1]->
+					nr_canvas_idx;
+			} else {
+				/* to do: need change for
+				 * DI_USE_FIXED_CANVAS_IDX */
+				di_buf->vframe->type =
+					VIDTYPE_PROGRESSIVE |
+					VIDTYPE_VIU_422 |
+					VIDTYPE_VIU_SINGLE_PLANE |
+					VIDTYPE_VIU_FIELD;
+				di_buf->vframe->height >>= 1;
+				if (
+					(di_buf->di_buf_dup_p[0]->
+					 new_format_flag) ||
+					(Rd(DI_IF1_GEN_REG) & 1))
+					di_buf->vframe->
+					early_process_fun =
+						de_post_disable_fun;
+				else
+					di_buf->vframe->
+					early_process_fun =
+						do_nothing_fun;
+				if (prog_tb_field_proc_type == 2) {
 					di_buf->vframe->canvas0Addr =
-					di_buf->di_buf_dup_p[0]->nr_canvas_idx;
+						di_buf->di_buf_dup_p[0]
+						->nr_canvas_idx;
+/* top */
 					di_buf->vframe->canvas1Addr =
-					di_buf->di_buf_dup_p[1]->nr_canvas_idx;
+						di_buf->di_buf_dup_p[0]
+						->nr_canvas_idx;
 				} else {
-					/* to do: need change for
-					DI_USE_FIXED_CANVAS_IDX */
-					di_buf->vframe->type =
-VIDTYPE_PROGRESSIVE | VIDTYPE_VIU_422 |
-VIDTYPE_VIU_SINGLE_PLANE | VIDTYPE_VIU_FIELD;
-					di_buf->vframe->height >>= 1;
-					if (
-(di_buf->di_buf_dup_p[0]->new_format_flag) || (Rd(DI_IF1_GEN_REG)&1)) {
-						di_buf->vframe->early_process_fun =
-de_post_disable_fun;
-					} else {
-						di_buf->vframe->early_process_fun =
-do_nothing_fun;
-					}
-					if (prog_tb_field_proc_type == 2) {
-						di_buf->vframe->canvas0Addr =
-					di_buf->di_buf_dup_p[0]->nr_canvas_idx;
-							/* top */
-						di_buf->vframe->canvas1Addr =
-					di_buf->di_buf_dup_p[0]->nr_canvas_idx;
-					} else {
-						di_buf->vframe->canvas0Addr =
-di_buf->di_buf_dup_p[1]->nr_canvas_idx; /* top */
-						di_buf->vframe->canvas1Addr =
-di_buf->di_buf_dup_p[1]->nr_canvas_idx;
-					}
+					di_buf->vframe->canvas0Addr =
+						di_buf->di_buf_dup_p[1]
+						->nr_canvas_idx; /* top */
+					di_buf->vframe->canvas1Addr =
+						di_buf->di_buf_dup_p[1]
+						->nr_canvas_idx;
 				}
+			}
 
-				di_buf->di_buf[0] = di_buf->di_buf_dup_p[0];
-				queue_out(di_buf->di_buf[0]);
-				/*check if the field is error,then drop*/
-		if (
-		(di_buf->di_buf_dup_p[0]->vframe->type & VIDTYPE_TYPEMASK) ==
+			di_buf->di_buf[0] = di_buf->di_buf_dup_p[0];
+			queue_out(di_buf->di_buf[0]);
+			/*check if the field is error,then drop*/
+			if (
+				(di_buf->di_buf_dup_p[0]->vframe->type &
+				 VIDTYPE_TYPEMASK) ==
 				VIDTYPE_INTERLACE_BOTTOM) {
-					di_buf->di_buf[1] =
-						di_buf->di_buf_dup_p[1] = NULL;
-					di_lock_irqfiq_save(irq_flag2, fiq_flag);
-					queue_in(di_buf, QUEUE_TMP);
-					recycle_vframe_type_post(di_buf);
-					pr_info("%s drop field %d.\n", __func__,
-di_buf->di_buf_dup_p[0]->seq);
-				} else {
-					di_buf->di_buf[1] =
-di_buf->di_buf_dup_p[1];
-					queue_out(di_buf->di_buf[1]);
-
-					di_lock_irqfiq_save(irq_flag2, fiq_flag);
-					if (
-(frame_count == 0) && check_start_drop_prog)
-						di_post_stru.start_pts
-= di_buf->vframe->pts;
-						if (
-((frame_count < start_frame_drop_count) &&
-check_start_drop_prog) ||
-(di_buf->di_buf_dup_p[0]->throw_flag) ||
-(di_buf->di_buf_dup_p[1]->throw_flag)) {
-							queue_in(
-di_buf, QUEUE_TMP);
-							recycle_vframe_type_post(di_buf);
-#ifdef DI_DEBUG
-						recycle_vframe_type_post_print(di_buf,
-__func__, __LINE__);
-#endif
-					} else {
-						if (
-(frame_count == start_frame_drop_count) &&check_start_drop_prog) {
-							if (
-(di_post_stru.start_pts != 0) && (di_buf->vframe->pts == 0))
-								di_buf->vframe->pts =
-di_post_stru.start_pts;
-							di_post_stru.start_pts = 0;
-						}
-						queue_in(di_buf,
-						QUEUE_POST_READY);
-				   }
-				}
-				frame_count++;
-				di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
-#ifdef DI_DEBUG
-				di_print("%s <prog by field>: ", __func__);
-#endif
-				ret = 1;
-				vf_notify_receiver(VFM_NAME,
-VFRAME_EVENT_PROVIDER_VFRAME_READY, NULL);
+				di_buf->di_buf[1] =
+					di_buf->di_buf_dup_p[1] = NULL;
+				di_lock_irqfiq_save(irq_flag2,
+					fiq_flag);
+				queue_in(di_buf, QUEUE_TMP);
+				recycle_vframe_type_post(di_buf);
+				pr_dbg("%s drop field %d.\n", __func__,
+					di_buf->di_buf_dup_p[0]->seq);
+			} else {
+				di_buf->di_buf[1] =
+					di_buf->di_buf_dup_p[1];
+				queue_out(di_buf->di_buf[1]);
+
+				drop_frame(check_start_drop_prog,
+					(di_buf->di_buf_dup_p[0]->throw_flag) ||
+					(di_buf->di_buf_dup_p[1]->throw_flag),
+					di_buf);
 			}
+			frame_count++;
+
+			di_print("%s <prog by field>: ", __func__);
+
+			ret = 1;
+			vf_notify_receiver(VFM_NAME,
+				VFRAME_EVENT_PROVIDER_VFRAME_READY,
+				NULL);
 		}
-#ifdef DI_DEBUG
-		if (di_buf) {
-			di_print("%s[%d](",
-				vframe_type_name[di_buf->type], di_buf->index);
-			for (i = 0; i < 2; i++) {
-				if (di_buf->di_buf[i])
-					di_print("%s[%d],",
-vframe_type_name[di_buf->di_buf[i]->type], di_buf->di_buf[i]->index);
-			}
-			di_print(")(vframe type %x dur %d)",
-di_buf->vframe->type, di_buf->vframe->duration);
-			if (di_buf->di_buf_dup_p[1] &&
-				(di_buf->di_buf_dup_p[1]->post_proc_flag == 3))
-				di_print("=> recycle_list\n");
-			else
-				di_print("=> post_ready_list\n");
+	}
 
+	if (di_buf) {
+		di_print("%s[%d](",
+			vframe_type_name[di_buf->type], di_buf->index);
+		for (i = 0; i < 2; i++) {
+			if (di_buf->di_buf[i])
+				di_print("%s[%d],",
+				 vframe_type_name[di_buf->di_buf[i]->type],
+				 di_buf->di_buf[i]->index);
 		}
-#endif
+		di_print(")(vframe type %x dur %d)",
+			di_buf->vframe->type, di_buf->vframe->duration);
+		if (di_buf->di_buf_dup_p[1] &&
+		    (di_buf->di_buf_dup_p[1]->post_proc_flag == 3))
+			di_print("=> recycle_list\n");
+		else
+			di_print("=> post_ready_list\n");
 	}
 	return ret;
 }
 
 /*
-di task
-*/
+ * di task
+ */
 static void di_unreg_process(void)
 {
-		if ((di_pre_stru.unreg_req_flag ||
-			di_pre_stru.force_unreg_req_flag ||
-			di_pre_stru.disable_req_flag) &&
-			(di_pre_stru.pre_de_busy == 0)) {
-			/* pr_info("===unreg_req_flag\n"); */
-#ifdef RUN_REG_IN_IRQ
-			if (init_flag) {
-				init_flag = 0;
-				vf_unreg_provider(&di_vf_prov);
-				di_pre_stru.unreg_req_flag2 = 1;
-
-				trigger_pre_di_process('u');
-			} else {
-				di_pre_stru.force_unreg_req_flag = 0;
-				di_pre_stru.disable_req_flag = 0;
-				recovery_flag = 0;
-				di_pre_stru.unreg_req_flag = 0;
-			}
-#else
-/* !RUN_REG_IN_IRQ*/
-
-			ulong flags = 0, fiq_flag = 0, irq_flag2 = 0;
-			if (di_pre_stru.force_unreg_req_flag ||
-				di_pre_stru.disable_req_flag) {
-#ifdef DI_DEBUG
-				di_print("%s: force_unreg\n", __func__);
-#endif
-				pr_info("%s: force_unreg\n", __func__);
-				goto unreg;
-			} else {
-unreg:
-				if (init_flag) {
-					init_flag = 0;
-					di_lock_irqfiq_save(irq_flag2, fiq_flag);
-					vf_unreg_provider(&di_vf_prov);
-					di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
-#if (!(defined RUN_DI_PROCESS_IN_IRQ)) || (defined ENABLE_SPIN_LOCK_ALWAYS)
-					spin_lock_irqsave(&plist_lock, flags);
-#endif
-					di_lock_irqfiq_save(irq_flag2, fiq_flag);
-#ifdef DI_DEBUG
-					di_print(
-"%s: di_uninit_buf\n", __func__);
-#endif
-					di_uninit_buf();
-					di_set_power_control(0, 0);
-					#ifndef NEW_DI_V3
-					Wr(DI_CLKG_CTRL, 0xff0000);
-					/* di enable nr clock gate */
-					#else
-					Wr(DI_CLKG_CTRL, 0xf60000);
-					/* nr/blend0/ei0/mtn0 clock gate */
-					#endif
-					if (get_blackout_policy()) {
-						di_set_power_control(1, 0);
-						disable_post_deinterlace_2();
-						Wr(DI_CLKG_CTRL, 0x2);
-					}
-					di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
-
-#if (!(defined RUN_DI_PROCESS_IN_IRQ)) || (defined ENABLE_SPIN_LOCK_ALWAYS)
-					spin_unlock_irqrestore(&plist_lock, flags);
-#endif
-				}
-				di_pre_stru.force_unreg_req_flag = 0;
-				di_pre_stru.disable_req_flag = 0;
-				recovery_flag = 0;
-			}
-			di_pre_stru.unreg_req_flag = 0;
-			di_pre_stru.unreg_req_flag2 = 0;
-
-#endif
-		}
-
-
+	if (reg_flag) {
+		field_count = 0;
+		vf_unreg_provider(&di_vf_prov);
+		reg_flag = 0;
+		unreg_cnt++;
+		if (unreg_cnt > 0x3fffffff)
+			unreg_cnt = 0;
+		di_print("########%s\n", __func__);
+		di_pre_stru.unreg_req_flag_irq = 1;
+		trigger_pre_di_process(TRIGGER_PRE_BY_UNREG);
+	} else {
+		di_pre_stru.force_unreg_req_flag = 0;
+		di_pre_stru.disable_req_flag = 0;
+		recovery_flag = 0;
+		di_pre_stru.unreg_req_flag = 0;
+	}
 }
 
-#ifdef RUN_REG_IN_IRQ
 static void di_unreg_process_irq(void)
 {
 	ulong flags = 0, fiq_flag = 0, irq_flag2 = 0;
-	if (di_pre_stru.unreg_req_flag2) {
+
 #if (defined ENABLE_SPIN_LOCK_ALWAYS)
-		spin_lock_irqsave(&plist_lock, flags);
-#endif
-		di_lock_irqfiq_save(irq_flag2, fiq_flag);
-#ifdef DI_DEBUG
-		di_print("%s: di_uninit_buf\n", __func__);
+	spin_lock_irqsave(&plist_lock, flags);
 #endif
-		di_uninit_buf();
+	di_lock_irqfiq_save(irq_flag2, fiq_flag);
+	di_print("%s: di_uninit_buf\n", __func__);
+	di_uninit_buf();
+	init_flag = 0;
 #ifdef CONFIG_AML_RDMA
-		/* stop rdma */
-		rdma_clear(de_devp->rdma_handle);
+/* stop rdma */
+	rdma_clear(de_devp->rdma_handle);
 #endif
-		di_set_power_control(0, 0);
-		#ifndef NEW_DI_V3
-		Wr(DI_CLKG_CTRL, 0xff0000);
-		/* di enable nr clock gate */
-		#else
-		Wr(DI_CLKG_CTRL, 0xf60000);
-		/* nr/blend0/ei0/mtn0 clock gate */
-		#endif
-		if (get_blackout_policy()) {
-			di_set_power_control(1, 0);
-			disable_post_deinterlace_2();
-			Wr(DI_CLKG_CTRL, 0x2);
+	if (cpu_after_eq(MESON_CPU_MAJOR_ID_GXTVBB))
+		if (dejaggy_enable) {
+			dejaggy_flag = -1;
+			DI_Wr_reg_bits(SRSHARP0_SHARP_DEJ1_MISC, 0, 3, 1);
 		}
-		di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
 
-#if (defined ENABLE_SPIN_LOCK_ALWAYS)
-		spin_unlock_irqrestore(&plist_lock, flags);
+	di_set_power_control(0, 0);
+#ifndef NEW_DI_V3
+	DI_Wr(DI_CLKG_CTRL, 0xff0000);
+/* di enable nr clock gate */
+#else
+	if (cpu_after_eq(MESON_CPU_MAJOR_ID_GXTVBB))
+		DI_Wr(DI_CLKG_CTRL, 0x80f60000);
+	else
+		DI_Wr(DI_CLKG_CTRL, 0xf60000);
+/* nr/blend0/ei0/mtn0 clock gate */
 #endif
-
-		di_pre_stru.force_unreg_req_flag = 0;
-		di_pre_stru.disable_req_flag = 0;
-		recovery_flag = 0;
-		#ifdef NEW_DI_V3
-		di_pre_stru.cur_prog_flag = 0;
+	if (get_blackout_policy()) {
+		di_set_power_control(1, 0);
+		DI_Wr(DI_CLKG_CTRL, 0x80000000);
+	}
+	if ((post_wr_en && post_wr_surpport)) {
+		diwr_set_power_control(0);
+		#ifdef CONFIG_VSYNC_RDMA
+		enable_rdma(1);
 		#endif
-		di_pre_stru.unreg_req_flag = 0;
-		di_pre_stru.unreg_req_flag2 = 0;
 	}
-}
+	di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
 
+#if (defined ENABLE_SPIN_LOCK_ALWAYS)
+	spin_unlock_irqrestore(&plist_lock, flags);
 #endif
 
+	di_pre_stru.force_unreg_req_flag = 0;
+	di_pre_stru.disable_req_flag = 0;
+	recovery_flag = 0;
+#ifdef NEW_DI_V3
+	di_pre_stru.cur_prog_flag = 0;
+#endif
+	di_pre_stru.unreg_req_flag = 0;
+	di_pre_stru.unreg_req_flag_irq = 0;
+}
 
-static void di_reg_process_2(void)
+static void di_reg_process(void)
 {
-	/*get vout information first time*/
+/*get vout information first time*/
+	if (reg_flag == 1)
+		return;
 	set_output_mode_info();
 	vf_provider_init(&di_vf_prov, VFM_NAME, &deinterlace_vf_provider, NULL);
 	vf_reg_provider(&di_vf_prov);
 	vf_notify_receiver(VFM_NAME, VFRAME_EVENT_PROVIDER_START, NULL);
-	init_flag = 1;
+	reg_flag = 1;
+	reg_cnt++;
+	if (reg_cnt > 0x3fffffff)
+		reg_cnt = 0;
+	di_print("########%s\n", __func__);
 }
 #ifdef CONFIG_AML_RDMA
 /* di pre rdma operation */
 static void di_rdma_irq(void *arg)
 {
 	struct di_dev_s *di_devp = (struct di_dev_s *)arg;
+
 	if (!di_devp || (di_devp->rdma_handle <= 0)) {
 		pr_err("%s rdma handle %d error.\n", __func__,
-				di_devp->rdma_handle);
+			di_devp->rdma_handle);
 		return;
 	}
 	if (di_printk_flag)
-		pr_info("%s...%d.\n", __func__,
+		pr_dbg("%s...%d.\n", __func__,
 			di_pre_stru.field_count_for_cont);
 	return;
 }
@@ -5898,107 +7987,156 @@ static struct rdma_op_s di_rdma_op = {
 	NULL
 };
 #endif
-static void di_reg_process(void)
+static void di_reg_process_irq(void)
 {
 	ulong flags = 0, fiq_flag = 0, irq_flag2 = 0;
 	vframe_t *vframe;
 
-	if (init_flag == 0 && di_pre_stru.reg_flag == 0) {
-		if ((pre_run_flag != DI_RUN_FLAG_RUN) &&
-			(pre_run_flag != DI_RUN_FLAG_STEP))
-			return;
-		if (pre_run_flag == DI_RUN_FLAG_STEP)
-			pre_run_flag = DI_RUN_FLAG_STEP_DONE;
+	if ((pre_run_flag != DI_RUN_FLAG_RUN) &&
+	    (pre_run_flag != DI_RUN_FLAG_STEP))
+		return;
+	if (pre_run_flag == DI_RUN_FLAG_STEP)
+		pre_run_flag = DI_RUN_FLAG_STEP_DONE;
 
-		vframe = vf_peek(VFM_NAME);
+	/*di_pre_stru.reg_req_flag = 1;*/
+	/*trigger_pre_di_process(TRIGGER_PRE_BY_TIMERC);*/
 
-		if (vframe) {
-			di_set_power_control(0, 1);
-			di_set_power_control(1, 1);
-			#ifndef NEW_DI_V3
-			Wr(DI_CLKG_CTRL, 0xfeff0000);
-			/* di enable nr clock gate */
-			#else
-			Wr(DI_CLKG_CTRL, 0xfdf60000);
-			/* nr/blend0/ei0/mtn0 clock gate */
+	vframe = vf_peek(VFM_NAME);
+
+	if (vframe) {
+		/* patch for vdin progressive input */
+		if (((vframe->type & VIDTYPE_VIU_422) &&
+		    ((vframe->type & VIDTYPE_PROGRESSIVE) == 0))
+			#ifdef DET3D
+			|| det3d_en
 			#endif
-/* add for di Reg re-init */
+			|| (use_2_interlace_buff & 0x2)
+			)
+			use_2_interlace_buff = 1;
+		else
+			use_2_interlace_buff = 0;
+
+		di_set_power_control(0, 1);
+		di_set_power_control(1, 1);
+		if ((post_wr_en && post_wr_surpport)) {
+			diwr_set_power_control(1);
+			#ifdef CONFIG_VSYNC_RDMA
+			enable_rdma(rdma_en);
+			#endif
+		}
+#ifndef NEW_DI_V3
+		DI_Wr(DI_CLKG_CTRL, 0xfeff0000);
+		/* di enable nr clock gate */
+#else
+		/* if mcdi enable DI_CLKG_CTRL should be 0xfef60000 */
+		DI_Wr(DI_CLKG_CTRL, 0xfef60000);
+		/* nr/blend0/ei0/mtn0 clock gate */
+#endif
+		/* add for di Reg re-init */
 #ifdef NEW_DI_TV
-di_set_para_by_tvinfo(vframe);
+		di_set_para_by_tvinfo(vframe);
 #endif
-			if (di_printk_flag&2)
-				di_printk_flag = 1;
+		if (di_printk_flag & 2)
+			di_printk_flag = 1;
 
-#ifdef DI_DEBUG
-			di_print("%s: vframe come => di_init_buf\n", __func__);
-#endif
-			if (is_progressive(vframe) && (prog_proc_config&0x10)
-				) {
+		di_print("%s: vframe come => di_init_buf\n", __func__);
+
+		if (is_progressive(vframe) && (prog_proc_config & 0x10)
+		    ) {
 #if (!(defined RUN_DI_PROCESS_IN_IRQ)) || (defined ENABLE_SPIN_LOCK_ALWAYS)
-				spin_lock_irqsave(&plist_lock, flags);
+			spin_lock_irqsave(&plist_lock, flags);
 #endif
-				di_lock_irqfiq_save(irq_flag2, fiq_flag);
-				/* di_init_buf(vframe->width,
-					vframe->height, 1); */
+			di_lock_irqfiq_save(irq_flag2, fiq_flag);
+			/* di_init_buf(vframe->width,
+			 * vframe->height, 1); */
+			 /*
+			 * 10 bit mode need 1.5 times buffer size of
+			 * 8 bit mode, init the buffer size as 10 bit
+			 * mode size, to make sure can switch bit mode
+			 * smoothly.
+			 */
+			if (nr10bit_surpport) {
+				if (full_422_pack)
+					di_init_buf(default_width * 5 / 4,
+						default_height, 1);
+				else
+					di_init_buf(default_width * 3 / 2,
+						default_height, 1);
+			} else
 				di_init_buf(default_width, default_height, 1);
-				di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
+
+			di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
 
 #if (!(defined RUN_DI_PROCESS_IN_IRQ)) || (defined ENABLE_SPIN_LOCK_ALWAYS)
-				spin_unlock_irqrestore(&plist_lock, flags);
+			spin_unlock_irqrestore(&plist_lock, flags);
 #endif
-			} else {
+		} else {
 #if (!(defined RUN_DI_PROCESS_IN_IRQ)) || (defined ENABLE_SPIN_LOCK_ALWAYS)
-				spin_lock_irqsave(&plist_lock, flags);
+			spin_lock_irqsave(&plist_lock, flags);
 #endif
-				di_lock_irqfiq_save(irq_flag2, fiq_flag);
+			di_lock_irqfiq_save(irq_flag2, fiq_flag);
+			/*
+			 * 10 bit mode need 1.5 times buffer size of
+			 * 8 bit mode, init the buffer size as 10 bit
+			 * mode size, to make sure can switch bit mode
+			 * smoothly.
+			 */
+			if (nr10bit_surpport) {
+				if (cpu_after_eq(MESON_CPU_MAJOR_ID_TXL) &&
+					full_422_pack)
+					di_init_buf(
+				default_width * 3 / 2, default_height, 0);
+				else
+					di_init_buf(
+				default_width * 3 / 2, default_height, 0);
+			} else
 				di_init_buf(default_width, default_height, 0);
-				di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
+
+			di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
 
 #if (!(defined RUN_DI_PROCESS_IN_IRQ)) || (defined ENABLE_SPIN_LOCK_ALWAYS)
-				spin_unlock_irqrestore(&plist_lock, flags);
+			spin_unlock_irqrestore(&plist_lock, flags);
 #endif
-			}
-
-			reset_pulldown_state();
+		}
 
-#ifdef RUN_REG_IN_IRQ
-			di_pre_stru.reg_flag = 1;
-			trigger_pre_di_process('u');
-#else
-			di_reg_process_2();
-#endif
+		reset_pulldown_state();
+		combing_threshold_config(vframe->width);
+		if (is_meson_txl_cpu()) {
+			combing_pd22_window_config(vframe->width,
+				(vframe->height>>1));
+			tbff_init();
 		}
+		init_flag = 1;
+		di_pre_stru.reg_req_flag_irq = 1;
 	}
-
 }
 
 
 
 static void dynamic_bypass_process(void)
 {
-		if ((disp_frame_count > 0) && (vdin_source_flag == 0)) {
-			int ready_count = list_count(QUEUE_POST_READY);
-			if (bypass_dynamic_flag == 0) {
-				if (ready_count == 0) {
-					if (post_ready_empty_count < 10) {
-						post_ready_empty_count++;
-					} else {
-						bypass_dynamic_flag =
-							bypass_dynamic;
-						post_ready_empty_count = 30;
-					}
-				} else
-					post_ready_empty_count = 0;
-			} else {
-				if (ready_count >= 4) {
-					post_ready_empty_count--;
-					if (post_ready_empty_count <= 0)
-						bypass_dynamic_flag = 0;
-
-				} else
-					post_ready_empty_count = 60;
-			}
+	if ((disp_frame_count > 0) && (vdin_source_flag == 0)) {
+		int ready_count = list_count(QUEUE_POST_READY);
+		if (bypass_dynamic_flag == 0) {
+			if (ready_count == 0) {
+				if (post_ready_empty_count < 10) {
+					post_ready_empty_count++;
+				} else {
+					bypass_dynamic_flag =
+						bypass_dynamic;
+					post_ready_empty_count = 30;
+				}
+			} else
+				post_ready_empty_count = 0;
+		} else {
+			if (ready_count >= 4) {
+				post_ready_empty_count--;
+				if (post_ready_empty_count <= 0)
+					bypass_dynamic_flag = 0;
+			} else
+				post_ready_empty_count = 60;
 		}
+	}
 }
 
 
@@ -6012,83 +8150,92 @@ static void di_process(void)
 		if (bypass_dynamic != 0)
 			dynamic_bypass_process();
 #if (!(defined RUN_DI_PROCESS_IN_IRQ)) || (defined ENABLE_SPIN_LOCK_ALWAYS)
-			spin_lock_irqsave(&plist_lock, flags);
-#endif
-			if (di_pre_stru.pre_de_busy == 0) {
-				if (di_pre_stru.pre_de_process_done) {
-#ifdef CHECK_DI_DONE
-					/* also for NEW_DI ? 7/15/2013 */
-					unsigned int data32 = Rd(DI_INTR_CTRL);
-					/*DI_INTR_CTRL[bit 0], NRWR_done, set by
-hardware when NRWR is done,clear by write 1 by code;[bit 1]
-MTNWR_done, set by hardware when MTNWR
-is done, clear by write 1 by code;these two bits have nothing to do with
-DI_INTR_CTRL[16](NRW irq mask, 0 to enable irq) and DI_INTR_CTRL[17]
-(MTN irq mask, 0 to enable irq).two interrupts are raised if both
-DI_INTR_CTRL[16] and DI_INTR_CTRL[17] are 0	*/
-					if (
-((data32&0x1) && ((di_pre_stru.enable_mtnwr == 0)
-|| (data32&0x2))) || (di_pre_stru.pre_de_clear_flag == 2)) {
-						RDMA_WR(DI_INTR_CTRL, data32);
+		spin_lock_irqsave(&plist_lock, flags);
 #endif
-						pre_process_time =
-di_pre_stru.pre_de_busy_timer_count;
-						pre_de_done_buf_config();
-
-						di_pre_stru.pre_de_process_done = 0;
-						di_pre_stru.pre_de_clear_flag = 0;
-						/* Wr(DI_PRE_CTRL,
-0x3 << 30|Rd(DI_PRE_CTRL) & 0x14);//disable, and reset */
+		if (di_pre_stru.pre_de_busy == 0) {
+			if (di_pre_stru.pre_de_process_done) {
+#if 0/*def CHECK_DI_DONE*/
+				/* also for NEW_DI ? 7/15/2013 */
+				unsigned int data32 = Rd(DI_INTR_CTRL);
+				/*DI_INTR_CTRL[bit 0], NRWR_done, set by
+				 * hardware when NRWR is done,clear by write 1
+				 * by code;[bit 1]
+				 * MTNWR_done, set by hardware when MTNWR
+				 * is done, clear by write 1 by code;these two
+				 * bits have nothing to do with
+				 * DI_INTR_CTRL[16](NRW irq mask, 0 to enable
+				 * irq) and DI_INTR_CTRL[17]
+				 * (MTN irq mask, 0 to enable irq).two
+				 * interrupts are raised if both
+				 * DI_INTR_CTRL[16] and DI_INTR_CTRL[17] are 0*/
+				if (
+					((data32 & 0x1) &&
+					 ((di_pre_stru.enable_mtnwr == 0)
+					  || (data32 &
+					      0x2))) ||
+					(di_pre_stru.pre_de_clear_flag == 2)) {
+					RDMA_WR(DI_INTR_CTRL, data32);
+#endif
+				pre_process_time =
+					di_pre_stru.pre_de_busy_timer_count;
+				pre_de_done_buf_config();
+
+				di_pre_stru.pre_de_process_done = 0;
+				di_pre_stru.pre_de_clear_flag = 0;
 #ifdef CHECK_DI_DONE
-					}
-#endif
-				} else if (di_pre_stru.pre_de_clear_flag == 1) {
-					di_lock_irqfiq_save(
-						irq_flag2, fiq_flag);
-					pre_de_done_buf_clear();
-					di_unlock_irqfiq_restore(
-						irq_flag2, fiq_flag);
-					di_pre_stru.pre_de_process_done = 0;
-					di_pre_stru.pre_de_clear_flag = 0;
-				}
 			}
+#endif
+			} else if (di_pre_stru.pre_de_clear_flag == 1) {
+				di_lock_irqfiq_save(
+					irq_flag2, fiq_flag);
+				pre_de_done_buf_clear();
+				di_unlock_irqfiq_restore(
+					irq_flag2, fiq_flag);
+				di_pre_stru.pre_de_process_done = 0;
+				di_pre_stru.pre_de_clear_flag = 0;
+			}
+		}
 
-			di_lock_irqfiq_save(irq_flag2, fiq_flag);
-			while (check_recycle_buf()&1)
-				;
-			di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
-			if ((di_pre_stru.pre_de_busy == 0) &&
-				(di_pre_stru.pre_de_process_done == 0)) {
-				if ((pre_run_flag == DI_RUN_FLAG_RUN) ||
-					(pre_run_flag == DI_RUN_FLAG_STEP)) {
-					if (pre_run_flag == DI_RUN_FLAG_STEP)
-						pre_run_flag =
-					DI_RUN_FLAG_STEP_DONE;
-					if (pre_de_buf_config()) {
-#ifdef D2D3_SUPPORT
-						if (d2d3_enable)
-							vf_notify_receiver_by_name("d2d3",
-VFRAME_EVENT_PROVIDER_DPBUF_CONFIG, di_pre_stru.di_wr_buf->vframe);
-
-#endif
-						pre_de_process();
-					}
-				}
+		di_lock_irqfiq_save(irq_flag2, fiq_flag);
+		while (check_recycle_buf() & 1)
+			;
+		di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
+		if ((di_pre_stru.pre_de_busy == 0) &&
+		    (di_pre_stru.pre_de_process_done == 0)) {
+			if ((pre_run_flag == DI_RUN_FLAG_RUN) ||
+			    (pre_run_flag == DI_RUN_FLAG_STEP)) {
+				if (pre_run_flag == DI_RUN_FLAG_STEP)
+					pre_run_flag = DI_RUN_FLAG_STEP_DONE;
+				if (pre_de_buf_config())
+					pre_de_process();
 			}
+		}
+
+		while (process_post_vframe())
+			;
+		if ((post_wr_en && post_wr_surpport)) {
+			if (di_post_stru.post_de_busy == 0 &&
+			di_post_stru.de_post_process_done) {
+				post_de_done_buf_config();
+				di_post_stru.de_post_process_done = 0;
+			}
+			di_post_process();
+		}
 
-	while (process_post_vframe())
-		;
 #if (!(defined RUN_DI_PROCESS_IN_IRQ)) || (defined ENABLE_SPIN_LOCK_ALWAYS)
-			spin_unlock_irqrestore(&plist_lock, flags);
+		spin_unlock_irqrestore(&plist_lock, flags);
 #endif
-		}
+	}
 }
-
+static unsigned int nr_done_check_cnt = 5;
+module_param_named(nr_done_check_cnt, nr_done_check_cnt, uint, 0644);
 void di_timer_handle(struct work_struct *work)
 {
+
 	if (di_pre_stru.pre_de_busy) {
 		di_pre_stru.pre_de_busy_timer_count++;
-		if (di_pre_stru.pre_de_busy_timer_count >= 100) {
+		if (di_pre_stru.pre_de_busy_timer_count >= nr_done_check_cnt) {
+			enable_di_pre_mif(0);
 			di_pre_stru.pre_de_busy_timer_count = 0;
 			di_pre_stru.pre_de_irq_timeout_count++;
 			if (timeout_miss_policy == 0) {
@@ -6099,205 +8246,166 @@ void di_timer_handle(struct work_struct *work)
 				di_pre_stru.pre_de_clear_flag = 1;
 				di_pre_stru.pre_de_busy = 0;
 			} /* else if (timeout_miss_policy == 2) {
-			}*/
+			   * }*/
 			pr_info("***** DI ****** wait %d pre_de_irq timeout\n",
 				di_pre_stru.field_count_for_cont);
 		}
+	} else {
+		di_pre_stru.pre_de_busy_timer_count = 0;
 	}
 
-#ifdef RUN_DI_PROCESS_IN_TIMER
-	{
-		int i;
-
-		di_unreg_process();
-
-		di_reg_process();
-
-		for (i = 0; i < 10; i++) {
-			if (active_flag)
-				di_process();
-		}
-	}
-#endif
-
 	/* if(force_trig){ */
-	   force_trig_cnt++;
-	   trigger_pre_di_process('t');
+	force_trig_cnt++;
+	trigger_pre_di_process(TRIGGER_PRE_BY_TIMER);
 	/* } */
 
 	if (force_recovery) {
-		if (recovery_flag || (force_recovery&0x2)) {
+		if (recovery_flag || (force_recovery & 0x2)) {
 			force_recovery_count++;
 			if (init_flag) {
-				pr_info("===================DI force recovery ==================\n");
+				pr_dbg("====== DI force recovery =========\n");
 				force_recovery &= (~0x2);
 				dis2_di();
 				recovery_flag = 0;
 			}
 		}
 	}
-
 }
 
 static int di_task_handle(void *data)
 {
 	int ret = 0;
+
 	while (1) {
 		ret = down_interruptible(&di_sema);
 		if (active_flag) {
-#ifndef RUN_REG_IN_IRQ
-			di_unreg_process();
-			di_reg_process();
-#else
-			di_unreg_process();
-			if (di_pre_stru.reg_flag) {
-				di_reg_process_2();
-				di_pre_stru.reg_flag = 0;
+			if ((di_pre_stru.unreg_req_flag ||
+				di_pre_stru.force_unreg_req_flag ||
+				di_pre_stru.disable_req_flag) &&
+				(di_pre_stru.pre_de_busy == 0))
+				di_unreg_process();
+			if (di_pre_stru.reg_req_flag_irq ||
+				di_pre_stru.reg_req_flag) {
+				di_reg_process();
+				di_pre_stru.reg_req_flag = 0;
+				di_pre_stru.reg_req_flag_irq = 0;
 			}
-#endif
-
-#if (!(defined RUN_DI_PROCESS_IN_IRQ)) && \
-		 (!(defined RUN_DI_PROCESS_IN_TIMER_IRQ))
-			di_process();
-			log_buffer_state("pro");
-#endif
 		}
 	}
 
 	return 0;
-
 }
-#if (defined RUN_DI_PROCESS_IN_IRQ) || (defined RUN_DI_PROCESS_IN_TIMER_IRQ)
+
 static irqreturn_t timer_irq(int irq, void *dev_instance)
 {
-   /* unsigned int data32; */
+/* unsigned int data32; */
 	int i;
-#ifdef RUN_DI_PROCESS_IN_TIMER_IRQ
-	if (di_pre_stru.pre_de_busy) {
-		di_pre_stru.pre_de_busy_timer_count++;
-
-		if (pre_process_time_force) {
-			if (di_pre_stru.pre_de_busy_timer_count >=
-				pre_process_time_force) {
-				di_pre_stru.pre_de_process_done = 1;
-				di_pre_stru.pre_de_busy = 0;
-			}
-		}
-	}
-#endif
 
-#ifdef RUN_REG_IN_IRQ
 	if (active_flag) {
-		di_unreg_process_irq();
-		di_reg_process();
+		if (di_pre_stru.unreg_req_flag_irq)
+			di_unreg_process_irq();
+		if (init_flag == 0 && di_pre_stru.reg_req_flag_irq == 0)
+			di_reg_process_irq();
 	}
-#endif
 
-	for (i = 0; i < 2; i++) {
+	for (i = 0; i < 2; i++)
 		if (active_flag)
 			di_process();
-	}
 	log_buffer_state("pro");
 	return IRQ_HANDLED;
 }
-#endif
 /*
-provider/receiver interface
-
-*/
+ * provider/receiver interface
+ */
 
 /* unsigned int vf_keep_current(void);*/
 static int di_receiver_event_fun(int type, void *data, void *arg)
 {
 	int i;
 	ulong flags;
+
 	if (type == VFRAME_EVENT_PROVIDER_QUREY_VDIN2NR) {
 		return di_pre_stru.vdin2nr;
 	} else if (type == VFRAME_EVENT_PROVIDER_UNREG) {
-#ifdef DI_DEBUG
-		di_print("%s , is_bypass() %d trick_mode %d bypass_all %d\n",
-				__func__, is_bypass(), trick_mode, bypass_all);
-#endif
-		if ((Rd(DI_IF1_GEN_REG)&0x1) == 0 &&
-				new_keep_last_frame_enable == 0) {
+		pr_dbg("%s , is_bypass() %d trick_mode %d bypass_all %d\n",
+			__func__, is_bypass(NULL), trick_mode, bypass_all);
+
+		if ((Rd(DI_IF1_GEN_REG) & 0x1) && get_blackout_policy())
 			/* disable post di, so can call vf_keep_current()
-			to keep displayed vframe */
-			Wr(DI_IF1_GEN_REG, 0x3 << 30);
-		}
-#ifdef DI_DEBUG
-		di_print("%s: vf_notify_receiver unreg\n", __func__);
-#endif
+			 * to keep displayed vframe */
+				pr_info("DI: disabled, not keep buffer.\n");
+
+		pr_dbg("%s: vf_notify_receiver unreg\n", __func__);
+
 		di_pre_stru.unreg_req_flag = 1;
 		provider_vframe_level = 0;
 		bypass_dynamic_flag = 0;
 		post_ready_empty_count = 0;
 		vdin_source_flag = 0;
-		trigger_pre_di_process('n');
+		trigger_pre_di_process(TRIGGER_PRE_BY_PROVERDER_UNREG);
 		while (di_pre_stru.unreg_req_flag)
 			usleep_range(10000, 10001);
 #ifdef SUPPORT_MPEG_TO_VDIN
-	if (mpeg2vdin_flag) {
-		struct vdin_arg_s vdin_arg;
-		struct vdin_v4l2_ops_s *vdin_ops = get_vdin_v4l2_ops();
-		vdin_arg.cmd = VDIN_CMD_MPEGIN_STOP;
-		if (vdin_ops->tvin_vdin_func)
-			vdin_ops->tvin_vdin_func(0, &vdin_arg);
+		if (mpeg2vdin_flag) {
+			struct vdin_arg_s vdin_arg;
+			struct vdin_v4l2_ops_s *vdin_ops = get_vdin_v4l2_ops();
+			vdin_arg.cmd = VDIN_CMD_MPEGIN_STOP;
+			if (vdin_ops->tvin_vdin_func)
+				vdin_ops->tvin_vdin_func(0, &vdin_arg);
 
-		mpeg2vdin_flag = 0;
-	}
+			mpeg2vdin_flag = 0;
+		}
 #endif
 		bypass_state = 1;
 #ifdef RUN_DI_PROCESS_IN_IRQ
 		if (vdin_source_flag)
-			Wr_reg_bits(VDIN_WR_CTRL, 0x3, 24, 3);
+			DI_Wr_reg_bits(VDIN_WR_CTRL, 0x3, 24, 3);
 
 #endif
 	} else if (type == VFRAME_EVENT_PROVIDER_RESET) {
 		di_blocking = 1;
-#ifdef DI_DEBUG
-		di_print("%s: VFRAME_EVENT_PROVIDER_RESET\n", __func__);
-#endif
+
+		pr_dbg("%s: VFRAME_EVENT_PROVIDER_RESET\n", __func__);
+
 		goto light_unreg;
 	} else if (type == VFRAME_EVENT_PROVIDER_LIGHT_UNREG) {
 		di_blocking = 1;
-#ifdef DI_DEBUG
-		di_print("%s: vf_notify_receiver ligth unreg\n", __func__);
-#endif
+
+		pr_dbg("%s: vf_notify_receiver ligth unreg\n", __func__);
+
 light_unreg:
 		provider_vframe_level = 0;
 		bypass_dynamic_flag = 0;
 		post_ready_empty_count = 0;
 
-	   spin_lock_irqsave(&plist_lock, flags);
+		spin_lock_irqsave(&plist_lock, flags);
 		for (i = 0; i < MAX_IN_BUF_NUM; i++) {
-#ifdef DI_DEBUG
+
 			if (vframe_in[i])
-				pr_info("DI:clear vframe_in[%d]\n", i);
+				pr_dbg("DI:clear vframe_in[%d]\n", i);
 
-#endif
 			vframe_in[i] = NULL;
 		}
 		spin_unlock_irqrestore(&plist_lock, flags);
 		di_blocking = 0;
 	} else if (type == VFRAME_EVENT_PROVIDER_LIGHT_UNREG_RETURN_VFRAME) {
 		unsigned char vf_put_flag = 0;
-#ifdef DI_DEBUG
-		di_print(
-"%s:VFRAME_EVENT_PROVIDER_LIGHT_UNREG_RETURN_VFRAME\n", __func__);
-#endif
+
+		pr_dbg(
+			"%s:VFRAME_EVENT_PROVIDER_LIGHT_UNREG_RETURN_VFRAME\n",
+			__func__);
+
 		provider_vframe_level = 0;
 		bypass_dynamic_flag = 0;
 		post_ready_empty_count = 0;
 
-		/* DisableVideoLayer();
-		do not display garbage when 2d->3d or 3d->2d */
+/* DisableVideoLayer();
+ * do not display garbage when 2d->3d or 3d->2d */
 		spin_lock_irqsave(&plist_lock, flags);
 		for (i = 0; i < MAX_IN_BUF_NUM; i++) {
 			if (vframe_in[i]) {
 				vf_put(vframe_in[i], VFM_NAME);
-#ifdef DI_DEBUG
-				pr_info("DI:clear vframe_in[%d]\n", i);
-#endif
+				pr_dbg("DI:clear vframe_in[%d]\n", i);
 				vf_put_flag = 1;
 			}
 			vframe_in[i] = NULL;
@@ -6306,41 +8414,44 @@ light_unreg:
 			vf_notify_provider(VFM_NAME,
 				VFRAME_EVENT_RECEIVER_PUT, NULL);
 
-	   spin_unlock_irqrestore(&plist_lock, flags);
+		spin_unlock_irqrestore(&plist_lock, flags);
 	} else if (type == VFRAME_EVENT_PROVIDER_VFRAME_READY) {
-#ifdef DI_DEBUG
-		di_print("%s: vframe ready\n", __func__);
-#endif
 		provider_vframe_level++;
-		trigger_pre_di_process('r');
+		trigger_pre_di_process(TRIGGER_PRE_BY_VFRAME_READY);
 
 #ifdef RUN_DI_PROCESS_IN_IRQ
-#define INPUT2PRE_2_BYPASS_SKIP_COUNT	4
+#define INPUT2PRE_2_BYPASS_SKIP_COUNT   4
 		if (active_flag && vdin_source_flag) {
 			if (is_bypass(NULL)) {
 				if (di_pre_stru.pre_de_busy == 0) {
-					Wr_reg_bits(VDIN_WR_CTRL, 0x3, 24, 3);
+					DI_Wr_reg_bits(VDIN_WR_CTRL,
+						0x3, 24, 3);
 					di_pre_stru.vdin2nr = 0;
 				}
 				if (di_pre_stru.bypass_start_count <
-						INPUT2PRE_2_BYPASS_SKIP_COUNT) {
+				    INPUT2PRE_2_BYPASS_SKIP_COUNT) {
 					vframe_t *vframe_tmp = vf_get(VFM_NAME);
-					vf_put(vframe_tmp, VFM_NAME);
-					vf_notify_provider(VFM_NAME,
-VFRAME_EVENT_RECEIVER_PUT, NULL);
+					if (vframe_tmp != NULL) {
+						vf_put(vframe_tmp, VFM_NAME);
+						vf_notify_provider(VFM_NAME,
+						VFRAME_EVENT_RECEIVER_PUT,
+						NULL);
+					}
 					di_pre_stru.bypass_start_count++;
 				}
 			} else if (is_input2pre()) {
 				di_pre_stru.bypass_start_count = 0;
 				if ((di_pre_stru.pre_de_busy != 0) &&
-			(input2pre_miss_policy == 1 && frame_count < 30)) {
+				    (input2pre_miss_policy == 1 &&
+				     frame_count < 30)) {
 					di_pre_stru.pre_de_clear_flag = 1;
 					di_pre_stru.pre_de_busy = 0;
 					input2pre_buf_miss_count++;
 				}
 
 				if (di_pre_stru.pre_de_busy == 0) {
-					Wr_reg_bits(VDIN_WR_CTRL, 0x5, 24, 3);
+					DI_Wr_reg_bits(VDIN_WR_CTRL,
+						0x5, 24, 3);
 					di_pre_stru.vdin2nr = 1;
 					di_process();
 					log_buffer_state("pr_");
@@ -6348,20 +8459,24 @@ VFRAME_EVENT_RECEIVER_PUT, NULL);
 						input2pre_proc_miss_count++;
 				} else {
 					vframe_t *vframe_tmp = vf_get(VFM_NAME);
-					vf_put(vframe_tmp, VFM_NAME);
-					vf_notify_provider(VFM_NAME,
-VFRAME_EVENT_RECEIVER_PUT, NULL);
+					if (vframe_tmp != NULL) {
+						vf_put(vframe_tmp, VFM_NAME);
+						vf_notify_provider(VFM_NAME,
+						VFRAME_EVENT_RECEIVER_PUT,
+						NULL);
+					}
 					input2pre_buf_miss_count++;
 					if ((di_pre_stru.cur_width > 720 &&
-				di_pre_stru.cur_height > 576) ||
-				(input2pre_throw_count&0x10000)) {
+					     di_pre_stru.cur_height > 576) ||
+					    (input2pre_throw_count & 0x10000))
 						di_pre_stru.pre_throw_flag =
-input2pre_throw_count&0xffff;
-					}
+							input2pre_throw_count &
+							0xffff;
 				}
 			} else {
 				if (di_pre_stru.pre_de_busy == 0) {
-					Wr_reg_bits(VDIN_WR_CTRL, 0x3, 24, 3);
+					DI_Wr_reg_bits(VDIN_WR_CTRL,
+						0x3, 24, 3);
 					di_pre_stru.vdin2nr = 0;
 				}
 				di_pre_stru.bypass_start_count =
@@ -6370,14 +8485,27 @@ input2pre_throw_count&0xffff;
 		}
 #endif
 	} else if (type == VFRAME_EVENT_PROVIDER_QUREY_STATE) {
-		int in_buf_num = 0;
+		/*int in_buf_num = 0;*/
+		struct vframe_states states;
 		if (recovery_flag)
 			return RECEIVER_INACTIVE;
-
+#if 1/*fix for ucode reset method be break by di.20151230*/
+		di_vf_states(&states, NULL);
+		if (states.buf_avail_num > 0) {
+			return RECEIVER_ACTIVE;
+		} else {
+			if (vf_notify_receiver(
+				VFM_NAME,
+				VFRAME_EVENT_PROVIDER_QUREY_STATE,
+				NULL)
+			== RECEIVER_ACTIVE)
+				return RECEIVER_ACTIVE;
+			return RECEIVER_INACTIVE;
+		}
+#else
 		for (i = 0; i < MAX_IN_BUF_NUM; i++) {
 			if (vframe_in[i] != NULL)
 				in_buf_num++;
-		}
 		if (bypass_state == 1) {
 			if (in_buf_num > 1)
 				return RECEIVER_ACTIVE;
@@ -6388,17 +8516,22 @@ input2pre_throw_count&0xffff;
 				return RECEIVER_ACTIVE;
 			else
 				return RECEIVER_INACTIVE;
-
 		}
+#endif
 	} else if (type == VFRAME_EVENT_PROVIDER_REG) {
 		char *provider_name = (char *)data;
+		char *receiver_name = NULL;
 		bypass_state = 0;
- #if (defined RUN_DI_PROCESS_IN_IRQ) && (!(defined FIQ_VSYNC))
-	aml_cbus_update_bits(ISA_TIMER_MUX, 1<<14, 0<<14);
-	aml_cbus_update_bits(ISA_TIMER_MUX, 3<<4, 0<<4);
-	aml_cbus_update_bits(ISA_TIMER_MUX, 1<<18, 1<<18);
-	aml_write_cbus(ISA_TIMERC, 1);
-#endif
+		di_pre_stru.reg_req_flag = 1;
+		pr_dbg("%s: vframe provider reg\n", __func__);
+		trigger_pre_di_process(TRIGGER_PRE_BY_PROVERDER_REG);
+		while (di_pre_stru.reg_req_flag)
+			usleep_range(10000, 10001);
+
+		aml_cbus_update_bits(ISA_TIMER_MUX, 1 << 14, 0 << 14);
+		aml_cbus_update_bits(ISA_TIMER_MUX, 3 << 4, 0 << 4);
+		aml_cbus_update_bits(ISA_TIMER_MUX, 1 << 18, 1 << 18);
+		aml_write_cbus(ISA_TIMERC, 1);
 
 		if (strncmp(provider_name, "vdin", 4) == 0) {
 			vdin_source_flag = 1;
@@ -6406,27 +8539,34 @@ input2pre_throw_count&0xffff;
 			vdin_source_flag = 0;
 			pre_urgent = 0;
 		}
-		if (strcmp(vf_get_receiver_name(VFM_NAME), "ppmgr") == 0) {
-			di_post_stru.run_early_proc_fun_flag = 1;
-			receiver_is_amvideo = 0;
-			/* pr_info("set run_early_proc_fun_flag to 1\n"); */
+		receiver_name = vf_get_receiver_name(VFM_NAME);
+		if (receiver_name) {
+			if (strcmp(receiver_name, "amvideo") == 0) {
+				di_post_stru.run_early_proc_fun_flag = 0;
+				receiver_is_amvideo = 1;
+		/* pr_info("set run_early_proc_fun_flag to 1\n"); */
+			} else {
+				di_post_stru.run_early_proc_fun_flag = 1;
+				receiver_is_amvideo = 0;
+		/* pr_dbg("set run_early_proc_fun_flag to 1\n"); */
+			}
 		} else {
-			di_post_stru.run_early_proc_fun_flag = 0;
-			receiver_is_amvideo = 1;
+			pr_info("%s error receiver is null.\n", __func__);
 		}
 	}
 #ifdef DET3D
 	else if (type == VFRAME_EVENT_PROVIDER_SET_3D_VFRAME_INTERLEAVE) {
-		int flag = (int)data;
+		int flag = (long)data;
 		di_pre_stru.vframe_interleave_flag = flag;
 	}
 #endif
-	else if (type == VFRAME_EVENT_PROVIDER_FR_HINT)
+	else if (type == VFRAME_EVENT_PROVIDER_FR_HINT) {
 		vf_notify_receiver(VFM_NAME,
 			VFRAME_EVENT_PROVIDER_FR_HINT, data);
-	else if (type == VFRAME_EVENT_PROVIDER_FR_END_HINT)
+	} else if (type == VFRAME_EVENT_PROVIDER_FR_END_HINT) {
 		vf_notify_receiver(VFM_NAME,
-				VFRAME_EVENT_PROVIDER_FR_END_HINT, data);
+			VFRAME_EVENT_PROVIDER_FR_END_HINT, data);
+	}
 
 	return 0;
 }
@@ -6435,8 +8575,9 @@ static void fast_process(void)
 {
 	int i;
 	ulong flags = 0, fiq_flag = 0, irq_flag2 = 0;
+
 	if (active_flag && is_bypass(NULL) && (bypass_get_buf_threshold <= 1) &&
-		(init_flag) && (recovery_flag == 0) && (dump_state_flag == 0)) {
+	    (init_flag) && (recovery_flag == 0) && (dump_state_flag == 0)) {
 		if (vf_peek(VFM_NAME) == NULL)
 			return;
 
@@ -6444,56 +8585,44 @@ static void fast_process(void)
 			spin_lock_irqsave(&plist_lock, flags);
 			if (di_pre_stru.pre_de_process_done) {
 				pre_de_done_buf_config();
-				/* Wr(DI_PRE_CTRL,
-				0x3 << 30|Rd(DI_PRE_CTRL) & 0x14);
-				//disable, and reset */
 				di_pre_stru.pre_de_process_done = 0;
 			}
 
 			di_lock_irqfiq_save(irq_flag2, fiq_flag);
-			while (check_recycle_buf()&1)
+			while (check_recycle_buf() & 1)
 				;
 			di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
 
 			if ((di_pre_stru.pre_de_busy == 0) &&
-				(di_pre_stru.pre_de_process_done == 0)) {
+			    (di_pre_stru.pre_de_process_done == 0)) {
 				if ((pre_run_flag == DI_RUN_FLAG_RUN) ||
-					(pre_run_flag == DI_RUN_FLAG_STEP)) {
+				    (pre_run_flag == DI_RUN_FLAG_STEP)) {
 					if (pre_run_flag == DI_RUN_FLAG_STEP)
 						pre_run_flag =
 							DI_RUN_FLAG_STEP_DONE;
-					if (pre_de_buf_config()) {
-#ifdef D2D3_SUPPORT
-						if (d2d3_enable) {
-							vf_notify_receiver_by_name(
-							"d2d3",
-VFRAME_EVENT_PROVIDER_DPBUF_CONFIG, di_pre_stru.di_wr_buf->vframe);
-						}
-#endif
+					if (pre_de_buf_config())
 						pre_de_process();
-					}
 				}
 			}
 
 			while (process_post_vframe());
 
 			spin_unlock_irqrestore(&plist_lock, flags);
-
-	   }
-
+		}
 	}
 }
 
 static vframe_t *di_vf_peek(void *arg)
 {
 	vframe_t *vframe_ret = NULL;
-	di_buf_t *di_buf = NULL;
+	struct di_buf_s *di_buf = NULL;
+
 	video_peek_cnt++;
 	if ((init_flag == 0) || recovery_flag || di_blocking ||
-		di_pre_stru.unreg_req_flag || dump_state_flag)
+	    di_pre_stru.unreg_req_flag || dump_state_flag)
 		return NULL;
 	if ((run_flag == DI_RUN_FLAG_PAUSE) ||
-		(run_flag == DI_RUN_FLAG_STEP_DONE))
+	    (run_flag == DI_RUN_FLAG_STEP_DONE))
 		return NULL;
 
 	log_buffer_state("pek");
@@ -6506,7 +8635,6 @@ static vframe_t *di_vf_peek(void *arg)
 			di_buf = get_di_buf_head(QUEUE_POST_READY);
 			if (di_buf)
 				vframe_ret = di_buf->vframe;
-
 		}
 	} else
 #endif
@@ -6515,45 +8643,48 @@ static vframe_t *di_vf_peek(void *arg)
 			di_buf = get_di_buf_head(QUEUE_POST_READY);
 			if (di_buf)
 				vframe_ret = di_buf->vframe;
-
 		}
 	}
-#ifdef DI_DEBUG
+
 	if (vframe_ret)
 		di_print("%s: %s[%d]:%x\n", __func__,
 			vframe_type_name[di_buf->type],
 			di_buf->index, vframe_ret);
 
-#endif
 	if (force_duration_0) {
 		if (vframe_ret)
 			vframe_ret->duration = 0;
-
 	}
 	return vframe_ret;
 }
 /*recycle the buffer for keeping buffer*/
-static void recycle_keep_buffer(void)
+void recycle_keep_buffer(void)
 {
 	ulong flags = 0, fiq_flag = 0, irq_flag2 = 0;
 	int i = 0;
+
 	if ((used_post_buf_index != -1) && (new_keep_last_frame_enable)) {
 		if (di_buf_post[used_post_buf_index].type == VFRAME_TYPE_POST) {
-			pr_info("%s recycle keep cur di_buf %d (",
-						__func__, used_post_buf_index);
+			pr_dbg("%s recycle keep cur di_buf %d (",
+				__func__, used_post_buf_index);
 			di_lock_irqfiq_save(irq_flag2, fiq_flag);
 			for (i = 0; i < USED_LOCAL_BUF_MAX; i++) {
 				if (
-			di_buf_post[used_post_buf_index].di_buf_dup_p[i]) {
+					di_buf_post[used_post_buf_index].
+					di_buf_dup_p[i]) {
 					queue_in(
-di_buf_post[used_post_buf_index].di_buf_dup_p[i], QUEUE_RECYCLE);
-					pr_info(" %d ",
-di_buf_post[used_post_buf_index].di_buf_dup_p[i]->index);
+					di_buf_post[used_post_buf_index].
+					di_buf_dup_p[i],
+					QUEUE_RECYCLE);
+					pr_dbg(" %d ",
+						di_buf_post[used_post_buf_index]
+						.di_buf_dup_p[i]->index);
 				}
 			}
-		queue_in(&di_buf_post[used_post_buf_index], QUEUE_POST_FREE);
-		di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
-		pr_info(")\n");
+			queue_in(&di_buf_post[used_post_buf_index],
+				QUEUE_POST_FREE);
+			di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
+			pr_dbg(")\n");
 		}
 		used_post_buf_index = -1;
 	}
@@ -6561,15 +8692,15 @@ di_buf_post[used_post_buf_index].di_buf_dup_p[i]->index);
 static vframe_t *di_vf_get(void *arg)
 {
 	vframe_t *vframe_ret = NULL;
-	di_buf_t *di_buf = NULL;
+	struct di_buf_s *di_buf = NULL;
 	ulong flags = 0, fiq_flag = 0, irq_flag2 = 0;
 
 	if ((init_flag == 0) || recovery_flag || di_blocking ||
-		di_pre_stru.unreg_req_flag || dump_state_flag)
+	    di_pre_stru.unreg_req_flag || dump_state_flag)
 		return NULL;
 
 	if ((run_flag == DI_RUN_FLAG_PAUSE) ||
-		(run_flag == DI_RUN_FLAG_STEP_DONE))
+	    (run_flag == DI_RUN_FLAG_STEP_DONE))
 		return NULL;
 
 #ifdef SUPPORT_START_FRAME_HOLD
@@ -6577,7 +8708,6 @@ static vframe_t *di_vf_get(void *arg)
 		int ready_count = list_count(QUEUE_POST_READY);
 		if (ready_count > start_frame_hold_count)
 			goto get_vframe;
-
 	} else
 #endif
 	if (!queue_empty(QUEUE_POST_READY)) {
@@ -6593,61 +8723,74 @@ get_vframe:
 
 		di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
 
-		if (di_buf)
+		if (di_buf) {
 			vframe_ret = di_buf->vframe;
 
+			if ((post_wr_en && post_wr_surpport) &&
+			(di_buf->process_fun_index != PROCESS_FUN_NULL)) {
+				config_canvas_idx(di_buf,
+				di_post_idx[di_post_stru.canvas_id][5], -1);
+				vframe_ret->canvas0Addr = di_buf->nr_canvas_idx;
+				vframe_ret->canvas1Addr = di_buf->nr_canvas_idx;
+				vframe_ret->early_process_fun = NULL;
+				vframe_ret->process_fun = NULL;
+			}
+		}
 		disp_frame_count++;
 		if (run_flag == DI_RUN_FLAG_STEP)
 			run_flag = DI_RUN_FLAG_STEP_DONE;
 
 		log_buffer_state("get");
 	}
-#ifdef DI_DEBUG
 	if (vframe_ret)
 		di_print("%s: %s[%d]:%x\n", __func__,
-		vframe_type_name[di_buf->type], di_buf->index, vframe_ret);
+			vframe_type_name[di_buf->type], di_buf->index,
+			vframe_ret);
 
-#endif
 	if (force_duration_0) {
 		if (vframe_ret)
 			vframe_ret->duration = 0;
-
 	}
 
 	if (di_post_stru.run_early_proc_fun_flag && vframe_ret) {
 		if (vframe_ret->early_process_fun == do_pre_only_fun)
 			vframe_ret->early_process_fun(
 				vframe_ret->private_data, vframe_ret);
-
 	}
-	/* if(vframe_ret) */
-	   /* recycle_keep_buffer(); */
-
+	/*if (vframe_ret)
+		recycle_keep_buffer();*/
+	atomic_set(&di_buf->di_cnt, 1);
 	return vframe_ret;
 }
 
 static void di_vf_put(vframe_t *vf, void *arg)
 {
-	di_buf_t *di_buf = (di_buf_t *)vf->private_data;
+	struct di_buf_s *di_buf = (struct di_buf_s *)vf->private_data;
 	ulong flags = 0, fiq_flag = 0, irq_flag2 = 0;
-	/* di_buf_t *p = NULL; */
-	/* int itmp = 0; */
+
+/* struct di_buf_s *p = NULL; */
+/* int itmp = 0; */
 	if ((init_flag == 0) || recovery_flag) {
-#ifdef DI_DEBUG
-		di_print("%s: %x\n", __func__, vf);
-#endif
+		di_print("%s: 0x%p\n", __func__, vf);
 		return;
 	}
 	if (di_blocking)
 		return;
 	log_buffer_state("pu_");
-	recycle_keep_buffer();
+	if (used_post_buf_index != -1) {
+			recycle_keep_buffer();
+	}
 	if (di_buf->type == VFRAME_TYPE_POST) {
 		di_lock_irqfiq_save(irq_flag2, fiq_flag);
 
-		if (is_in_queue(di_buf, QUEUE_DISPLAY))
+		if (is_in_queue(di_buf, QUEUE_DISPLAY)) {
+			if (!atomic_dec_and_test(&di_buf->di_cnt))
+				di_print("%s,di_cnt > 0\n", __func__);
 			recycle_vframe_type_post(di_buf);
-
+	} else {
+			di_print("%s: %s[%d] not in display list\n", __func__,
+			vframe_type_name[di_buf->type], di_buf->index);
+	}
 		di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
 #ifdef DI_DEBUG
 		recycle_vframe_type_post_print(di_buf, __func__, __LINE__);
@@ -6656,30 +8799,26 @@ static void di_vf_put(vframe_t *vf, void *arg)
 		di_lock_irqfiq_save(irq_flag2, fiq_flag);
 		queue_in(di_buf, QUEUE_RECYCLE);
 		di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
-#ifdef DI_DEBUG
+
 		di_print("%s: %s[%d] =>recycle_list\n", __func__,
 			vframe_type_name[di_buf->type], di_buf->index);
-#endif
 	}
 
-	trigger_pre_di_process('p');
+	trigger_pre_di_process(TRIGGER_PRE_BY_PUT);
 }
 
 static int di_event_cb(int type, void *data, void *private_data)
 {
 	if (type == VFRAME_EVENT_RECEIVER_FORCE_UNREG) {
-#ifdef DI_DEBUG
 		di_print("%s: VFRAME_EVENT_RECEIVER_FORCE_UNREG\n", __func__);
-#endif
 		di_pre_stru.force_unreg_req_flag = 1;
 		provider_vframe_level = 0;
 		bypass_dynamic_flag = 0;
 		post_ready_empty_count = 0;
 
-		trigger_pre_di_process('f');
+		trigger_pre_di_process(TRIGGER_PRE_BY_FORCE_UNREG);
 		while (di_pre_stru.force_unreg_req_flag)
 			usleep_range(1000, 1001);
-
 	}
 	return 0;
 }
@@ -6696,48 +8835,50 @@ static int di_vf_states(struct vframe_states *states, void *arg)
 }
 
 /*****************************
-*	 di driver file_operations
-*
-******************************/
+ *	 di driver file_operations
+ *
+ ******************************/
 static int di_open(struct inode *node, struct file *file)
 {
 	di_dev_t *di_in_devp;
 
-	/* Get the per-device structure that contains this cdev */
+/* Get the per-device structure that contains this cdev */
 	di_in_devp = container_of(node->i_cdev, di_dev_t, cdev);
 	file->private_data = di_in_devp;
 
 	return 0;
-
 }
 
 
 static int di_release(struct inode *node, struct file *file)
 {
-	/* di_dev_t *di_in_devp = file->private_data; */
+/* di_dev_t *di_in_devp = file->private_data; */
 
-	/* Reset file pointer */
+/* Reset file pointer */
 
-	/* Release some other fields */
-	/* ... */
+/* Release some other fields */
+/* ... */
 	return 0;
 }
 
 static const struct file_operations di_fops = {
-	.owner	  = THIS_MODULE,
-	.open	  = di_open,
-	.release  = di_release,
-	/* .ioctl	 = di_ioctl, */
+	.owner		= THIS_MODULE,
+	.open		= di_open,
+	.release	= di_release,
+/* .ioctl	 = di_ioctl, */
 };
 
 static ssize_t
 show_frame_format(struct device *dev,
-				struct device_attribute *attr, char *buf)
+		  struct device_attribute *attr, char *buf)
 {
 	int ret = 0;
+
 	if (init_flag)
 		ret += sprintf(buf + ret, "%s\n",
-			di_pre_stru.cur_prog_flag?"progressive":"interlace");
+			di_pre_stru.cur_prog_flag
+			? "progressive" : "interlace");
+
 	else
 		ret += sprintf(buf + ret, "%s\n", "null");
 
@@ -6747,50 +8888,54 @@ static DEVICE_ATTR(frame_format, 0444, show_frame_format, NULL);
 
 static int rmem_di_device_init(struct reserved_mem *rmem, struct device *dev)
 {
-		di_dev_t *di_devp = dev_get_drvdata(dev);
+	di_dev_t *di_devp = dev_get_drvdata(dev);
+
 	if (di_devp) {
 		di_devp->mem_start = rmem->base;
 		di_devp->mem_size = rmem->size;
-		pr_info("di reveser memory 0x%lx, size %uMB.\n",
-				di_devp->mem_start, (di_devp->mem_size>>20));
+		pr_dbg("di reveser memory 0x%lx, size %uMB.\n",
+			di_devp->mem_start, (di_devp->mem_size >> 20));
 		return 0;
 	}
-	/* pr_info("di reveser memory 0x%x, size %u B.\n",
-				rmem->base, rmem->size); */
+/* pr_dbg("di reveser memory 0x%x, size %u B.\n",
+ * rmem->base, rmem->size); */
 	return 1;
 }
 
 static void rmem_di_device_release(struct reserved_mem *rmem,
-					struct device *dev)
+				   struct device *dev)
 {
 	di_dev_t *di_devp = dev_get_drvdata(dev);
+
 	if (di_devp) {
 		di_devp->mem_start = 0;
 		di_devp->mem_size = 0;
 	}
-
 }
 #ifdef CONFIG_AML_RDMA
 unsigned int RDMA_RD_BITS(unsigned int adr, unsigned int start,
-		unsigned int len)
+			  unsigned int len)
 {
 	if (de_devp->rdma_handle)
 		return rdma_read_reg(de_devp->rdma_handle, adr) &
-			(((1<<len)-1)<<start);
+		       (((1 << len) - 1) << start);
 	else
 		return Rd_reg_bits(adr, start, len);
 }
 
 unsigned int RDMA_WR(unsigned int adr, unsigned int val)
 {
+	if (is_need_stop_reg(adr))
+		return 0;
+
 	if (de_devp->rdma_handle > 0 && di_pre_rdma_enable) {
 		if (di_pre_stru.field_count_for_cont < 1)
-			Wr(adr, val);
+			DI_Wr(adr, val);
 		else
 			rdma_write_reg(de_devp->rdma_handle, adr, val);
 		return 0;
 	} else {
-		Wr(adr, val);
+		DI_Wr(adr, val);
 		return 1;
 	}
 }
@@ -6804,46 +8949,89 @@ unsigned int RDMA_RD(unsigned int adr)
 }
 
 unsigned int RDMA_WR_BITS(unsigned int adr, unsigned int val,
-		unsigned int start, unsigned int len)
+			  unsigned int start, unsigned int len)
 {
+	if (is_need_stop_reg(adr))
+		return 0;
+
 	if (de_devp->rdma_handle > 0 && di_pre_rdma_enable) {
 		if (di_pre_stru.field_count_for_cont < 1)
-			Wr_reg_bits(adr, val, start, len);
+			DI_Wr_reg_bits(adr, val, start, len);
 		else
 			rdma_write_reg_bits(de_devp->rdma_handle,
 				adr, val, start, len);
 		return 0;
 	} else {
-		Wr_reg_bits(adr, val, start, len);
+		DI_Wr_reg_bits(adr, val, start, len);
 		return 1;
 	}
 }
 #else
 unsigned int RDMA_RD_BITS(unsigned int adr, unsigned int start,
-		unsigned int len)
+			  unsigned int len)
 {
 	return Rd_reg_bits(adr, start, len);
 }
 unsigned int RDMA_WR(unsigned int adr, unsigned int val)
 {
-		Wr(adr, val);
-		return 1;
+	DI_Wr(adr, val);
+	return 1;
 }
 
 unsigned int RDMA_RD(unsigned int adr)
 {
-		return Rd(adr);
+	return Rd(adr);
 }
 
 unsigned int RDMA_WR_BITS(unsigned int adr, unsigned int val,
-		unsigned int start, unsigned int len)
+			  unsigned int start, unsigned int len)
 {
-		Wr_reg_bits(adr, val, start, len);
-		return 1;
+	DI_Wr_reg_bits(adr, val, start, len);
+	return 1;
 }
 #endif
 
+static void set_di_flag(void)
+{
+	if (is_meson_gxtvbb_cpu() || is_meson_txl_cpu()) {
+		mcpre_en = true;
+		pulldown_mode = 1;
+		pulldown_enable = 1;
+		di_pre_rdma_enable = false;
+		di_vscale_skip_enable = 4;
+		use_2_interlace_buff = 1;
+		pre_hold_line = 12;
+		if (nr10bit_surpport)
+			di_force_bit_mode = 10;
+		else
+			di_force_bit_mode = 8;
+		if (is_meson_txl_cpu()) {
+			full_422_pack = true;
+			tff_bff_enable = true;
+			dejaggy_enable = 0;
+		}
+	} else {
+		mcpre_en = false;
+		pulldown_mode = 0;
+		pulldown_enable = 0;
+		di_pre_rdma_enable = false;
+		di_vscale_skip_enable = 4;
+		use_2_interlace_buff = 0;
+		di_force_bit_mode = 8;
+	}
+
+	if (di_pre_rdma_enable) {
+		pldn_dly = 1;
+		pldn_dly1 = 1;
+		tbbtff_dly = 1;
+	} else {
+		pldn_dly = 2;
+		pldn_dly1 = 2;
+		tbbtff_dly = 0;
+	}
 
+	return;
+}
 
 static const struct reserved_mem_ops rmem_di_ops = {
 	.device_init	= rmem_di_device_init,
@@ -6852,20 +9040,21 @@ static const struct reserved_mem_ops rmem_di_ops = {
 
 static int __init rmem_di_setup(struct reserved_mem *rmem)
 {
-	/*
-	struct cma *cma;
-	int err;
-	pr_info("%s setup.\n",__func__);
-	err = cma_init_reserved_mem(rmem->base, rmem->size, 0, &cma);
-	if (err) {
-		pr_err("Reserved memory: unable to setup CMA region\n");
-		return err;
-	}
-*/
+/*
+ * struct cma *cma;
+ * int err;
+ * pr_dbg("%s setup.\n",__func__);
+ * err = cma_init_reserved_mem(rmem->base, rmem->size, 0, &cma);
+ * if (err) {
+ * pr_err("Reserved memory: unable to setup CMA region\n");
+ * return err;
+ * }
+ */
 	rmem->ops = &rmem_di_ops;
-	/* rmem->priv = cma; */
+/* rmem->priv = cma; */
 
-	pr_info("DI reserved memory: created CMA memory pool at %pa, size %ld MiB\n",
+	di_pr_info(
+	"DI reserved memory: created CMA memory pool at %pa, size %ld MiB\n",
 		&rmem->base, (unsigned long)rmem->size / SZ_1M);
 
 	return 0;
@@ -6874,11 +9063,12 @@ RESERVEDMEM_OF_DECLARE(di, "amlogic, di-mem", rmem_di_setup);
 static int di_probe(struct platform_device *pdev)
 {
 	int ret = 0, i = 0;/* , offset = 0, size = 0; */
-	/* struct resource *res_irq = NULL; */
+/* struct resource *res_irq = NULL; */
 	int buf_num_avail = 0;
 	struct di_dev_s *di_devp = NULL;
-	/* const void *name = NULL; */
-	pr_info("di_probe\n");
+
+/* const void *name = NULL; */
+	di_pr_info("di_probe\n");
 	di_devp = kmalloc(sizeof(struct di_dev_s), GFP_KERNEL);
 	if (!di_devp) {
 		pr_err("%s fail to allocate memory.\n", __func__);
@@ -6891,7 +9081,7 @@ static int di_probe(struct platform_device *pdev)
 	cdev_add(&(di_devp->cdev), di_devno, DI_COUNT);
 	di_devp->devt = MKDEV(MAJOR(di_devno), 0);
 	di_devp->dev = device_create(di_clsp, &pdev->dev,
-					di_devp->devt, di_devp, "di%d", 0);
+		di_devp->devt, di_devp, "di%d", 0);
 
 	if (di_devp->dev == NULL) {
 		pr_error("device_create create error\n");
@@ -6903,37 +9093,56 @@ static int di_probe(struct platform_device *pdev)
 	of_reserved_mem_device_init(&pdev->dev);
 	di_devp->di_irq = irq_of_parse_and_map(pdev->dev.of_node, 0);
 	di_devp->timerc_irq = irq_of_parse_and_map(pdev->dev.of_node, 1);
+	pr_info("di_irq:%d,timerc_irq:%d\n",
+		di_devp->di_irq, di_devp->timerc_irq);
 #ifdef CONFIG_AML_RDMA
-	/* rdma handle */
+/* rdma handle */
 	di_rdma_op.arg = di_devp;
 	di_devp->rdma_handle = rdma_register(&di_rdma_op,
-			di_devp, RDMA_TABLE_SIZE);
+		di_devp, RDMA_TABLE_SIZE);
 #endif
-	pr_info("%s allocate rdma channel %d.\n", __func__,
-			di_devp->rdma_handle);
+	di_pr_info("%s allocate rdma channel %d.\n", __func__,
+		di_devp->rdma_handle);
 
 	ret = of_property_read_u32(pdev->dev.of_node,
-				"buffer-size", &(di_devp->buffer_size));
+		"buffer-size", &(di_devp->buffer_size));
 	if (ret)
 		pr_err("DI-%s: get buffer size error.\n", __func__);
 
 	ret = of_property_read_u32(pdev->dev.of_node,
-				"hw-version", &(di_devp->hw_version));
+		"hw-version", &(di_devp->hw_version));
 	if (ret)
 		pr_err("DI-%s: get hw version error.\n", __func__);
-	pr_info("DI hw version %u.\n", di_devp->hw_version);
+	di_pr_info("DI hw version %u.\n", di_devp->hw_version);
 	vout_register_client(&display_mode_notifier_nb_v);
 
+	/* set flag to indicate that post_wr is surpportted */
+	ret = of_property_read_u32(pdev->dev.of_node,
+				"post-wr-surpport",
+				&(di_devp->post_wr_surpport));
+	if (ret)
+		post_wr_surpport = 0;
+	else
+		post_wr_surpport = di_devp->post_wr_surpport;
+
+	ret = of_property_read_u32(pdev->dev.of_node,
+		"nr10bit-surpport",
+		&(di_devp->nr10bit_surpport));
+	if (ret)
+		nr10bit_surpport = 0;
+	else
+		nr10bit_surpport = di_devp->nr10bit_surpport;
+
 	memset(&di_post_stru, 0, sizeof(di_post_stru));
 	di_post_stru.next_canvas_id = 1;
 #ifdef DI_USE_FIXED_CANVAS_IDX
 	if (di_get_canvas()) {
-		pr_info("DI get canvas error.\n");
+		pr_dbg("DI get canvas error.\n");
 		ret = -EEXIST;
 		return ret;
 	}
 #endif
-	/* call di_add_reg_cfg() */
+/* call di_add_reg_cfg() */
 #ifdef NEW_DI_V1
 	di_add_reg_cfg(&di_default_pre);
 	di_add_reg_cfg(&di_default_post);
@@ -6947,82 +9156,70 @@ static int di_probe(struct platform_device *pdev)
 	device_create_file(di_devp->dev, &dev_attr_status);
 	device_create_file(di_devp->dev, &dev_attr_provider_vframe_status);
 	device_create_file(di_devp->dev, &dev_attr_frame_format);
-	#ifdef NEW_DI_V4
+	device_create_file(di_devp->dev, &dev_attr_pd_param);
+	device_create_file(di_devp->dev, &dev_attr_tvp_region);
+
+#ifdef NEW_DI_V4
 	dnr_init(di_devp->dev);
-	#endif
-	/* get resource as memory,irq...*/
-	/* mem = &memobj; */
+#endif
+/* get resource as memory,irq...*/
+/* mem = &memobj; */
 	for (i = 0; i < USED_LOCAL_BUF_MAX; i++)
 		used_local_buf_index[i] = -1;
 
 	used_post_buf_index = -1;
 	init_flag = 0;
+	reg_flag = 0;
+	field_count = 0;
 
-	/* set start_frame_hold_count base on buffer size */
-	di_devp->buf_num_avail = di_devp->mem_size/di_devp->buffer_size;
+/* set start_frame_hold_count base on buffer size */
+	di_devp->buf_num_avail = di_devp->mem_size / di_devp->buffer_size;
 	if (di_devp->buf_num_avail > MAX_LOCAL_BUF_NUM)
 		di_devp->buf_num_avail = MAX_LOCAL_BUF_NUM;
 
 	buf_num_avail = di_devp->buf_num_avail;
-	/**/
+/**/
 
 	vf_receiver_init(&di_vf_recv, VFM_NAME, &di_vf_receiver, NULL);
 	vf_reg_receiver(&di_vf_recv);
 	active_flag = 1;
-	 /* data32 = (*P_A9_0_IRQ_IN1_INTR_STAT_CLR); */
+/* data32 = (*P_A9_0_IRQ_IN1_INTR_STAT_CLR); */
 	ret = request_irq(di_devp->di_irq, &de_irq, IRQF_SHARED,
-"deinterlace", (void *)"deinterlace");
-#ifdef DET3D
-	ret = request_irq(INT_DET3D, &det3d_irq,
-				   IRQF_SHARED, "det3d",
-				   (void *)"det3d");
-#endif
+		"deinterlace", (void *)"deinterlace");
+
 	sema_init(&di_sema, 1);
 	di_sema_init_flag = 1;
-#ifdef FIQ_VSYNC
-	fiq_handle_item.handle = di_vf_put_isr;
-	fiq_handle_item.key = (u32)di_vf_put_isr;
-	fiq_handle_item.name = "di_vf_put_isr";
-	if (register_fiq_bridge_handle(&fiq_handle_item))
-		pr_dbg("%s: register_fiq_bridge_handle fail\n", __func__);
 
-#endif
 	init_pd_para();
 	di_hw_init();
 
-	/* timer */
+	if (pulldown_enable)
+		FlmVOFSftInt(&pd_param);
+
+	set_di_flag();
+
+/* Disable MCDI when code does not surpport MCDI */
+	if (!mcpre_en)
+		DI_VSYNC_WR_MPEG_REG_BITS(MCDI_MC_CRTL, 0, 0, 1);
+
+/* timer */
 	INIT_WORK(&di_pre_work, di_timer_handle);
 	init_timer(&di_pre_timer);
 	di_pre_timer.data = (ulong) &di_pre_timer;
 	di_pre_timer.function = di_pre_timer_cb;
 	di_pre_timer.expires = jiffies + DI_PRE_INTERVAL;
 	add_timer(&di_pre_timer);
-	/**/
-#if (!(defined RUN_DI_PROCESS_IN_TIMER))
+/**/
 	di_devp->task = kthread_run(di_task_handle, di_devp, "kthread_di");
-#endif
-pr_info("%s here.\n", __func__);
-#if (defined RUN_DI_PROCESS_IN_IRQ) && (!(defined FIQ_VSYNC))
-
-	aml_cbus_update_bits(ISA_TIMER_MUX, 1<<14, 0<<14);
-	aml_cbus_update_bits(ISA_TIMER_MUX, 3<<4, 0<<4);
-	aml_cbus_update_bits(ISA_TIMER_MUX, 1<<18, 1<<18);
+	di_pr_info("%s here.\n", __func__);
 
-	ret = request_irq(di_devp->timerc_irq, &timer_irq,
-					IRQF_SHARED, "timerC",
-					(void *)"timerC");
-#endif
-#ifdef RUN_DI_PROCESS_IN_TIMER_IRQ
-	aml_write_cbus(ISA_TIMERC, 100);/* timerc starting count value */
-	aml_cbus_update_bits(ISA_TIMER_MUX, 1<<14, 1<<14);
-	aml_cbus_update_bits(ISA_TIMER_MUX, 3<<4, 0<<4);
-	aml_cbus_update_bits(ISA_TIMER_MUX, 1<<18, 1<<18);
+	aml_cbus_update_bits(ISA_TIMER_MUX, 1 << 14, 0 << 14);
+	aml_cbus_update_bits(ISA_TIMER_MUX, 3 << 4, 0 << 4);
+	aml_cbus_update_bits(ISA_TIMER_MUX, 1 << 18, 1 << 18);
 
 	ret = request_irq(di_devp->timerc_irq, &timer_irq,
-					IRQF_SHARED, "timerC",
-					(void *)"timerC");
-#endif
-
+		IRQF_SHARED, "timerC",
+		(void *)"timerC");
 	di_set_power_control(0, 0);
 	di_set_power_control(1, 0);
 fail_kmalloc_dev:
@@ -7032,30 +9229,29 @@ fail_kmalloc_dev:
 static int di_remove(struct platform_device *pdev)
 {
 	struct di_dev_s *di_devp = NULL;
+
 	di_devp = platform_get_drvdata(pdev);
 
 	di_hw_uninit();
 	di_devp->di_event = 0xff;
 	kthread_stop(di_devp->task);
 #ifdef CONFIG_AML_RDMA
-	/* rdma handle */
+/* rdma handle */
 	if (di_devp->rdma_handle > 0)
 		rdma_unregister(di_devp->rdma_handle);
 #endif
-#ifdef FIQ_VSYNC
-	unregister_fiq_bridge_handle(&fiq_handle_item);
-#endif
+
 	vf_unreg_provider(&di_vf_prov);
 	vf_unreg_receiver(&di_vf_recv);
 
 	di_uninit_buf();
 	di_set_power_control(0, 0);
 	di_set_power_control(1, 0);
-	/* Remove the cdev */
+/* Remove the cdev */
 	device_remove_file(di_devp->dev, &dev_attr_config);
 	device_remove_file(di_devp->dev, &dev_attr_debug);
 	device_remove_file(di_devp->dev, &dev_attr_log);
-	  device_remove_file(di_devp->dev, &dev_attr_dump_pic);
+	device_remove_file(di_devp->dev, &dev_attr_dump_pic);
 	device_remove_file(di_devp->dev, &dev_attr_parameters);
 	device_remove_file(di_devp->dev, &dev_attr_status);
 
@@ -7063,7 +9259,7 @@ static int di_remove(struct platform_device *pdev)
 
 	device_destroy(di_clsp, di_devno);
 	kfree(di_devp);
-	/* free drvdata */
+/* free drvdata */
 	dev_set_drvdata(&pdev->dev, NULL);
 	platform_set_drvdata(pdev, NULL);
 
@@ -7074,27 +9270,27 @@ static int di_remove(struct platform_device *pdev)
 static int save_init_flag;
 static int di_suspend(struct platform_device *pdev, pm_message_t state)
 {
-#if (defined RUN_DI_PROCESS_IN_IRQ) && (!(defined FIQ_VSYNC))
-	aml_cbus_update_bits(ISA_TIMER_MUX, 1<<18, 0<<18);
-#endif
-#if 1
+	aml_cbus_update_bits(ISA_TIMER_MUX, 1 << 18, 0 << 18);
+
+
 /* fix suspend/resume crash problem */
 	save_init_flag = init_flag;
 	init_flag = 0;
+	field_count = 0;
 	if (di_pre_stru.di_inp_buf) {
 		if (vframe_in[di_pre_stru.di_inp_buf->index]) {
 			vf_put(vframe_in[di_pre_stru.di_inp_buf->index],
-					VFM_NAME);
+				VFM_NAME);
 			vframe_in[di_pre_stru.di_inp_buf->index] = NULL;
 			vf_notify_provider(VFM_NAME,
-VFRAME_EVENT_RECEIVER_PUT, NULL);
+				VFRAME_EVENT_RECEIVER_PUT, NULL);
 		}
 	}
-#endif
+
 
 	di_set_power_control(0, 0);
 	di_set_power_control(1, 0);
-	pr_info("di: di_suspend\n");
+	di_pr_info("di: di_suspend\n");
 	return 0;
 }
 
@@ -7105,21 +9301,19 @@ static int di_resume(struct platform_device *pdev)
 		di_set_power_control(0, 1);
 		di_set_power_control(1, 1);
 	}
-#if (defined RUN_DI_PROCESS_IN_IRQ) && (!(defined FIQ_VSYNC))
-	aml_cbus_update_bits(ISA_TIMER_MUX, 1<<14, 0<<14);
-	aml_cbus_update_bits(ISA_TIMER_MUX, 3<<4, 0<<4);
-	aml_cbus_update_bits(ISA_TIMER_MUX, 1<<18, 1<<18);
+
+	aml_cbus_update_bits(ISA_TIMER_MUX, 1 << 14, 0 << 14);
+	aml_cbus_update_bits(ISA_TIMER_MUX, 3 << 4, 0 << 4);
+	aml_cbus_update_bits(ISA_TIMER_MUX, 1 << 18, 1 << 18);
 	aml_write_cbus(ISA_TIMERC, 1);
-#endif
-	pr_info("di_hdmirx: resume module\n");
+	di_pr_info("di_hdmirx: resume module\n");
 	return 0;
 }
 #endif
 
 /* #ifdef CONFIG_USE_OF */
 static const struct of_device_id amlogic_deinterlace_dt_match[] = {
-	{	.compatible = "amlogic, deinterlace",
-	},
+	{ .compatible = "amlogic, deinterlace", },
 	{},
 };
 /* #else */
@@ -7127,32 +9321,33 @@ static const struct of_device_id amlogic_deinterlace_dt_match[] = {
 /* #endif */
 
 static struct platform_driver di_driver = {
-	.probe		= di_probe,
-	.remove		= di_remove,
+	.probe			= di_probe,
+	.remove			= di_remove,
 #ifdef CONFIG_PM
-	.suspend	= di_suspend,
-	.resume		= di_resume,
+	.suspend		= di_suspend,
+	.resume			= di_resume,
 #endif
-	.driver		= {
-		.name	= DEVICE_NAME,
-			.owner	= THIS_MODULE,
+	.driver			= {
+		.name		= DEVICE_NAME,
+		.owner		= THIS_MODULE,
 		.of_match_table = amlogic_deinterlace_dt_match,
 	}
 };
 
-static int	__init di_module_init(void)
+static int __init di_module_init(void)
 {
-		int ret = 0;
-		pr_info("%s ok.\n", __func__);
-	if (boot_init_flag&INIT_FLAG_NOT_LOAD)
+	int ret = 0;
+
+	di_pr_info("%s ok.\n", __func__);
+	if (boot_init_flag & INIT_FLAG_NOT_LOAD)
 		return 0;
 
-	   ret = alloc_chrdev_region(&di_devno, 0, DI_COUNT, DEVICE_NAME);
+	ret = alloc_chrdev_region(&di_devno, 0, DI_COUNT, DEVICE_NAME);
 	if (ret < 0) {
 		pr_err("%s: failed to allocate major number\n", __func__);
 		goto fail_alloc_cdev_region;
 	}
-	pr_info("%s: major %d\n", __func__, MAJOR(di_devno));
+	di_pr_info("%s: major %d\n", __func__, MAJOR(di_devno));
 	di_clsp = class_create(THIS_MODULE, CLASS_NAME);
 	if (IS_ERR(di_clsp)) {
 		ret = PTR_ERR(di_clsp);
@@ -7255,7 +9450,8 @@ module_param(start_frame_hold_count, int, 0664);
 module_init(di_module_init);
 module_exit(di_module_exit);
 
-MODULE_PARM_DESC(same_w_r_canvas_count, "\n canvas of write and read are same\n");
+MODULE_PARM_DESC(same_w_r_canvas_count,
+	"\n canvas of write and read are same\n");
 module_param(same_w_r_canvas_count, long, 0664);
 
 MODULE_PARM_DESC(same_field_top_count, "\n same top field\n");
@@ -7295,16 +9491,12 @@ MODULE_PARM_DESC(di_vscale_skip_enable, "\n di_vscale_skip_enable\n");
 module_param(di_vscale_skip_enable, uint, 0664);
 
 MODULE_PARM_DESC(di_vscale_skip_count, "\n di_vscale_skip_count\n");
-module_param(di_vscale_skip_count, uint, 0664);
+module_param(di_vscale_skip_count, int, 0664);
 
 MODULE_PARM_DESC(di_vscale_skip_count_real, "\n di_vscale_skip_count_real\n");
-module_param(di_vscale_skip_count_real, uint, 0664);
-
-#ifdef D2D3_SUPPORT
-MODULE_PARM_DESC(d2d3_enable, "\n d2d3_enable\n");
-module_param(d2d3_enable, uint, 0664);
-#endif
+module_param(di_vscale_skip_count_real, int, 0664);
 
+module_param_named(vpp_3d_mode, vpp_3d_mode, int, 0664);
 #ifdef DET3D
 MODULE_PARM_DESC(det3d_en, "\n det3d_enable\n");
 module_param(det3d_en, bool, 0664);
@@ -7368,6 +9560,12 @@ module_param(timeout_miss_policy, uint, 0664);
 MODULE_PARM_DESC(bypass_post, "\n bypass_post\n");
 module_param(bypass_post, uint, 0664);
 
+MODULE_PARM_DESC(post_wr_en, "\n post write enable\n");
+module_param(post_wr_en, bool, 0664);
+
+MODULE_PARM_DESC(post_wr_surpport, "\n post write enable\n");
+module_param(post_wr_surpport, uint, 0664);
+
 MODULE_PARM_DESC(bypass_post_state, "\n bypass_post_state\n");
 module_param(bypass_post_state, uint, 0664);
 
@@ -7377,15 +9575,31 @@ module_param(force_update_post_reg, uint, 0664);
 MODULE_PARM_DESC(update_post_reg_count, "\n update_post_reg_count\n");
 module_param(update_post_reg_count, uint, 0664);
 
-module_param(use_2_interlace_buff, bool, 0664);
-MODULE_PARM_DESC(use_2_interlace_buff, "/n debug for progress interlace mixed source /n");
+module_param(use_2_interlace_buff, int, 0664);
+MODULE_PARM_DESC(use_2_interlace_buff,
+	"/n debug for progress interlace mixed source /n");
 
 module_param(pulldown_mode, int, 0664);
 MODULE_PARM_DESC(pulldown_mode, "\n option for pulldown\n");
 
+module_param(reg_cnt, uint, 0664);
+MODULE_PARM_DESC(reg_cnt, "\n cnt for reg\n");
+
+module_param(unreg_cnt, uint, 0664);
+MODULE_PARM_DESC(unreg_cnt, "\n cnt for unreg\n");
+
 module_param(debug_blend_mode, int, 0664);
 MODULE_PARM_DESC(debug_blend_mode, "\n force post blend mode\n");
 
+module_param(nr10bit_surpport, uint, 0664);
+MODULE_PARM_DESC(nr10bit_surpport, "\n nr10bit surpport flag\n");
+
+module_param(di_stop_reg_flag, uint, 0664);
+MODULE_PARM_DESC(di_stop_reg_flag, "\n di_stop_reg_flag\n");
+
+module_param_array(di_stop_reg_addr, uint, &num_di_stop_reg_addr,
+	0664);
+
 module_param(static_pic_threshold, int, 0664);
 MODULE_PARM_DESC(static_pic_threshold, "/n threshold for static pic /n");
 MODULE_DESCRIPTION("AMLOGIC DEINTERLACE driver");
@@ -7394,12 +9608,14 @@ MODULE_VERSION("1.0.0");
 
 
 static char *next_token_ex(char *seperator, char *buf, unsigned size,
-	unsigned offset, unsigned *token_len, unsigned *token_offset)
-{ /* besides characters defined in seperator, '\"' are used as
-	seperator; and any characters in '\"' will not act as seperator */
+			   unsigned offset, unsigned *token_len,
+			   unsigned *token_offset)
+{       /* besides characters defined in seperator, '\"' are used as
+	 * seperator; and any characters in '\"' will not act as seperator */
 	char *pToken = NULL;
 	char last_seperator = 0;
 	char trans_char_flag = 0;
+
 	if (buf) {
 		for (; offset < size; offset++) {
 			int ii = 0;
@@ -7407,16 +9623,16 @@ static char *next_token_ex(char *seperator, char *buf, unsigned size,
 			if (buf[offset] == '\\') {
 				trans_char_flag = 1;
 				continue;
-			} while (
-				((ch = seperator[ii++]) != buf[offset]) && (ch)
-				);
+			}
+			while (((ch = seperator[ii]) != buf[offset]) && (ch))
+				ii++;
 			if (ch) {
-				if (!pToken)
+				if (!pToken) {
 					continue;
-				else {
+				} else {
 					if (last_seperator != '"') {
-						*token_len =
-(unsigned)(buf + offset - pToken);
+						*token_len = (unsigned)
+						(buf + offset - pToken);
 						*token_offset = offset;
 						return pToken;
 					}
@@ -7443,18 +9659,19 @@ static char *next_token_ex(char *seperator, char *buf, unsigned size,
 	return pToken;
 }
 
-static	int __init di_boot_para_setup(char *s)
+static int __init di_boot_para_setup(char *s)
 {
-	char separator[] = {' ', ',', ';', 0x0};
+	char separator[] = { ' ', ',', ';', 0x0 };
 	char *token;
 	unsigned token_len, token_offset, offset = 0;
 	int size = strlen(s);
+
 	do {
 		token = next_token_ex(separator, s, size,
-					offset, &token_len, &token_offset);
+			offset, &token_len, &token_offset);
 		if (token) {
 			if ((token_len == 3) &&
-				(strncmp(token, "off", token_len) == 0))
+			    (strncmp(token, "off", token_len) == 0))
 				boot_init_flag |= INIT_FLAG_NOT_LOAD;
 		}
 		offset = token_offset;
@@ -7468,7 +9685,24 @@ __setup("di=", di_boot_para_setup);
 vframe_t *get_di_inp_vframe(void)
 {
 	vframe_t *vframe = NULL;
+
 	if (di_pre_stru.di_inp_buf)
 		vframe = di_pre_stru.di_inp_buf->vframe;
 	return vframe;
 }
+
+module_param_named(full_422_pack, full_422_pack, bool, 0644);
+#ifdef DEBUG_SUPPORT
+module_param_named(di_pre_rdma_enable, di_pre_rdma_enable, uint, 0664);
+module_param_named(pldn_dly, pldn_dly, uint, 0644);
+module_param_named(tbbtff_dly, tbbtff_dly, uint, 0644);
+
+module_param(pldn_dly1, uint, 0644);
+MODULE_PARM_DESC(pldn_dly1, "/n pulldonw field delay result./n");
+
+module_param(flm22_sure_num, uint, 0644);
+MODULE_PARM_DESC(flm22_sure_num, "ture film-22/n");
+
+module_param(flm22_glbpxlnum_rat, uint, 0644);
+MODULE_PARM_DESC(flm22_glbpxlnum_rat, "flm22_glbpxlnum_rat/n");
+#endif
-- 
1.9.1

From 1e989942636489eb5a8ae45ac961744c35fed278 Mon Sep 17 00:00:00 2001
From: Jamie Coldhill <wrxtasy@amnet.net.au>
Date: Sun, 2 Oct 2016 19:36:24 +0800
Subject: [PATCH 13/13] Update: codec_mm

---
 drivers/amlogic/codec_mm/codec_mm.c | 43 +++++++++++++++++++++++++------------
 1 file changed, 29 insertions(+), 14 deletions(-)

diff --git a/drivers/amlogic/codec_mm/codec_mm.c b/drivers/amlogic/codec_mm/codec_mm.c
index 6fc6958..372cad1 100644
--- a/drivers/amlogic/codec_mm/codec_mm.c
+++ b/drivers/amlogic/codec_mm/codec_mm.c
@@ -57,6 +57,7 @@
 
 
 #define RES_MEM_FLAGS_HAVE_MAPED 0x4
+static int dump_mem_infos(void *buf, int size);
 
 /*
 debug_mode:
@@ -67,6 +68,8 @@ disable sys memory:4
 disable half memory:8,
 	only used half memory,for debug.
 	return nomem,if alloced > total/2;
+dump memory info on failed:0x10,
+trace memory alloc/free info:0x20,
 
 */
 static u32 debug_mode;
@@ -184,7 +187,7 @@ static int codec_mm_alloc_pre_check_in(
 	if (flags & 1) {
 		have_space = have_space & 8;
 	}
-	if (debug_mode) {
+	if (debug_mode & 0xf) {
 		pr_info("codec mm is enabled debug_mode:%d\n", debug_mode);
 		have_space = have_space & (~(debug_mode & 1));
 		have_space = have_space & (~(debug_mode & 2));
@@ -244,8 +247,12 @@ static int codec_mm_alloc_in(
 		can_from_sys = can_from_sys && (have_space & 4);
 		can_from_tvp = can_from_tvp && (have_space & 8);
 		if (!can_from_res && !can_from_cma &&
-			!can_from_sys && !can_from_tvp)
+			!can_from_sys && !can_from_tvp) {
+			if (debug_mode & 0x10)
+				pr_info("error, codec mm have space:%x\n",
+					have_space);
 			return -10002;
+		}
 	}
 
 	do {
@@ -429,6 +436,8 @@ static struct codec_mm_s *codec_mm_alloc(const char *owner, int size,
 		pr_err("not enough mem for %s size %d, ret=%d\n",
 				owner, size, ret);
 		kfree(mem);
+		if (debug_mode & 0x10)
+			dump_mem_infos(NULL, 0);
 		return NULL;
 	}
 
@@ -459,11 +468,10 @@ static struct codec_mm_s *codec_mm_alloc(const char *owner, int size,
 			mgt->max_used_mem_size = mgt->total_alloced_size;
 	}
 	spin_unlock_irqrestore(&mgt->lock, flags);
-	/*
-	pr_err("%s alloc mem size %d at %lx from %d\n",
+	if (debug_mode & 0x20)
+		pr_err("%s alloc mem size %d at %lx from %d\n",
 			owner, size, mem->phy_addr,
 			mem->from_flags);
-	*/
 	return mem;
 }
 
@@ -485,6 +493,10 @@ static void codec_mm_release(struct codec_mm_s *mem, const char *owner)
 		if (mem->owner[i] && strcmp(owner, mem->owner[i]) == 0)
 			mem->owner[i] = max_owner;
 	}
+	if (debug_mode & 0x20)
+		pr_err("%s free mem size %d at %lx from %d,index =%d\n",
+			owner, mem->buffer_size, mem->phy_addr,
+			mem->from_flags, index);
 	mem->owner[index] = NULL;
 	if (index == 0) {
 		spin_unlock_irqrestore(&mem->lock, flags);
@@ -776,7 +788,7 @@ unsigned long codec_mm_virt_to_phys(void *vaddr)
 	return page_to_phys((struct page *)vaddr);
 }
 
-int dump_mem_infos(void *buf, int size)
+static int dump_mem_infos(void *buf, int size)
 {
 	struct codec_mm_mgt_s *mgt = get_mem_mgt();
 	struct codec_mm_s *mem;
@@ -900,8 +912,11 @@ int codec_mm_enough_for_size(int size)
 {
 	struct codec_mm_mgt_s *mgt = get_mem_mgt();
 	int have_mem = codec_mm_alloc_pre_check_in(mgt, size, 0);
-	if (!have_mem)
+	if (!have_mem) {
+		if (debug_mode & 0x20)
+			dump_mem_infos(NULL, 0);
 		return 0;
+	}
 	return 1;
 }
 
@@ -929,7 +944,7 @@ int codec_mm_mgt_init(struct device *dev)
 			(int)(aligned_addr - (unsigned long)mgt->rmem.base);
 		gen_pool_add(mgt->res_pool,
 			aligned_addr, aligned_size, -1);
-		pr_info("add reserve memory %p(aligned %p) size=%x(aligned %x)\n",
+		pr_debug("add reserve memory %p(aligned %p) size=%x(aligned %x)\n",
 			(void *)mgt->rmem.base, (void *)aligned_addr,
 			(int)mgt->rmem.size, (int)aligned_size);
 		mgt->total_reserved_size = aligned_size;
@@ -1148,19 +1163,19 @@ static int codec_mm_probe(struct platform_device *pdev)
 	pdev->dev.platform_data = get_mem_mgt();
 	r = of_reserved_mem_device_init(&pdev->dev);
 	if (r == 0)
-		pr_info("codec_mm_probe mem init done\n");
+		pr_debug("codec_mm_probe mem init done\n");
 
 	codec_mm_mgt_init(&pdev->dev);
 	r = class_register(&codec_mm_class);
 	if (r) {
-		pr_info("vdec class create fail.\n");
+		pr_err("vdec class create fail.\n");
 		return r;
 	}
 	r = of_reserved_mem_device_init(&pdev->dev);
 	if (r == 0)
-		pr_info("codec_mm reserved memory probed done\n");
+		pr_debug("codec_mm reserved memory probed done\n");
 
-	pr_info("codec_mm_probe ok\n");
+	pr_debug("codec_mm_probe ok\n");
 	amstream_test_init();
 
 	return 0;
@@ -1234,7 +1249,7 @@ static int codec_mm_reserved_init(struct reserved_mem *rmem, struct device *dev)
 	struct codec_mm_mgt_s *mgt = get_mem_mgt();
 
 	mgt->rmem = *rmem;
-	pr_info("codec_mm_reserved_init %p->%p\n",
+	pr_debug("codec_mm_reserved_init %p->%p\n",
 		(void *)mgt->rmem.base,
 		(void *)mgt->rmem.base + mgt->rmem.size);
 	return 0;
@@ -1247,7 +1262,7 @@ static const struct reserved_mem_ops codec_mm_rmem_vdec_ops = {
 static int __init codec_mm_res_setup(struct reserved_mem *rmem)
 {
 	rmem->ops = &codec_mm_rmem_vdec_ops;
-	pr_info("vdec: reserved mem setup\n");
+	pr_debug("vdec: reserved mem setup\n");
 
 	return 0;
 }
-- 
1.9.1

