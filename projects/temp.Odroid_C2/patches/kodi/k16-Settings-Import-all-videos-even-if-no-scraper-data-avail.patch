From dade41e9969cc23e47b35f05cbe15fca0b872510 Mon Sep 17 00:00:00 2001
From: Jamie Coldhill <wrxtasy@amnet.net.au>
Date: Tue, 26 Jul 2016 22:14:16 +0800
Subject: [PATCH] Settings: Import all videos even if no scraper data avail

---
 .../resource.language.en_gb/resources/strings.po   |  10 +-
 system/settings/settings.xml                       |   5 +
 xbmc/settings/Settings.cpp                         |   2 +
 xbmc/settings/Settings.h                           |   1 +
 xbmc/video/VideoDatabase.cpp                       |   2 +-
 xbmc/video/VideoInfoScanner.cpp                    | 124 ++++++++++++++++++---
 6 files changed, 127 insertions(+), 17 deletions(-)

diff --git a/addons/resource.language.en_gb/resources/strings.po b/addons/resource.language.en_gb/resources/strings.po
index a697a61..0a6e5b2 100644
--- a/addons/resource.language.en_gb/resources/strings.po
+++ b/addons/resource.language.en_gb/resources/strings.po
@@ -11986,7 +11986,15 @@ msgctxt "#20471"
 msgid "Show empty TV shows"
 msgstr ""
 
-#empty strings from id 20472 to 21329
+msgctxt "#20472"
+msgid "Import all videos"
+msgstr ""
+
+msgctxt "#20473"
+msgid "Import all videos, even if no metadata scraper data is available"
+msgstr ""
+
+#empty strings from id 20474 to 21329
 #up to 21329 is reserved for the video db !! !
 
 #: system/settings/settings.xml
diff --git a/system/settings/settings.xml b/system/settings/settings.xml
index 76c9a33..576c629 100644
--- a/system/settings/settings.xml
+++ b/system/settings/settings.xml
@@ -486,6 +486,11 @@
           <default>false</default>
           <control type="toggle" />
         </setting>
+        <setting id="videolibrary.importall" type="boolean" label="20472" help="20473">
+          <level>1</level>
+          <default>false</default>
+          <control type="toggle" />
+        </setting>
       </group>
       <group id="2">
         <setting id="videolibrary.updateonstartup" type="boolean" label="22000" help="36146">
diff --git a/xbmc/settings/Settings.cpp b/xbmc/settings/Settings.cpp
index f50355b..3538718 100644
--- a/xbmc/settings/Settings.cpp
+++ b/xbmc/settings/Settings.cpp
@@ -140,6 +140,7 @@ const std::string CSettings::SETTING_VIDEOLIBRARY_GROUPMOVIESETS = "videolibrary
 const std::string CSettings::SETTING_VIDEOLIBRARY_GROUPSINGLEITEMSETS = "videolibrary.groupsingleitemsets";
 const std::string CSettings::SETTING_VIDEOLIBRARY_UPDATEONSTARTUP = "videolibrary.updateonstartup";
 const std::string CSettings::SETTING_VIDEOLIBRARY_BACKGROUNDUPDATE = "videolibrary.backgroundupdate";
+const std::string CSettings::SETTING_VIDEOLIBRARY_IMPORTALL = "videolibrary.importall";
 const std::string CSettings::SETTING_VIDEOLIBRARY_CLEANUP = "videolibrary.cleanup";
 const std::string CSettings::SETTING_VIDEOLIBRARY_EXPORT = "videolibrary.export";
 const std::string CSettings::SETTING_VIDEOLIBRARY_IMPORT = "videolibrary.import";
@@ -1021,6 +1022,7 @@ void CSettings::InitializeISettingCallbacks()
   settingSet.insert(CSettings::SETTING_VIDEOLIBRARY_FLATTENTVSHOWS);
   settingSet.insert(CSettings::SETTING_VIDEOLIBRARY_REMOVE_DUPLICATES);
   settingSet.insert(CSettings::SETTING_VIDEOLIBRARY_GROUPMOVIESETS);
+  settingSet.insert(CSettings::SETTING_VIDEOLIBRARY_IMPORTALL);
   settingSet.insert(CSettings::SETTING_VIDEOLIBRARY_CLEANUP);
   settingSet.insert(CSettings::SETTING_VIDEOLIBRARY_IMPORT);
   settingSet.insert(CSettings::SETTING_VIDEOLIBRARY_EXPORT);
diff --git a/xbmc/settings/Settings.h b/xbmc/settings/Settings.h
index 55e150d..4068254 100644
--- a/xbmc/settings/Settings.h
+++ b/xbmc/settings/Settings.h
@@ -96,6 +96,7 @@ public:
   static const std::string SETTING_VIDEOLIBRARY_GROUPSINGLEITEMSETS;
   static const std::string SETTING_VIDEOLIBRARY_UPDATEONSTARTUP;
   static const std::string SETTING_VIDEOLIBRARY_BACKGROUNDUPDATE;
+  static const std::string SETTING_VIDEOLIBRARY_IMPORTALL;
   static const std::string SETTING_VIDEOLIBRARY_CLEANUP;
   static const std::string SETTING_VIDEOLIBRARY_EXPORT;
   static const std::string SETTING_VIDEOLIBRARY_IMPORT;
diff --git a/xbmc/video/VideoDatabase.cpp b/xbmc/video/VideoDatabase.cpp
index b56e2e8..e1df12b 100644
--- a/xbmc/video/VideoDatabase.cpp
+++ b/xbmc/video/VideoDatabase.cpp
@@ -2462,7 +2462,7 @@ int CVideoDatabase::SetDetailsForEpisode(const std::string& strFilenameAndPath,
 
     SetArtForItem(idEpisode, MediaTypeEpisode, artwork);
 
-    if (details.m_iEpisode != -1 && details.m_iSeason != -1)
+    if (!(details.m_iSeason == 0 && details.m_iEpisode == 0)) // Special episodes
     { // query DB for any episodes matching idShow, Season and Episode
       std::string strSQL = PrepareSQL("SELECT files.playCount, files.lastPlayed "
                                       "FROM episode INNER JOIN files ON files.idFile=episode.idFile "
diff --git a/xbmc/video/VideoInfoScanner.cpp b/xbmc/video/VideoInfoScanner.cpp
index 5f8d3f8..9af708c 100644
--- a/xbmc/video/VideoInfoScanner.cpp
+++ b/xbmc/video/VideoInfoScanner.cpp
@@ -622,14 +622,28 @@ namespace VIDEO
     if (pURL)
       url = *pURL;
     else if ((retVal = FindVideo(pItem->GetMovieName(bDirNames), info2, url, pDlgProgress)) <= 0)
-      return retVal < 0 ? INFO_CANCELLED : INFO_NOT_FOUND;
+    {
+      if (retVal < 0) 
+        return INFO_CANCELLED;
+      else if (retVal == 0 && CSettings::GetInstance().GetBool(CSettings::SETTING_VIDEOLIBRARY_IMPORTALL))
+      {
+        pItem->GetVideoInfoTag()->m_strTitle = CURL(pItem->GetPath()).GetFileNameWithoutPath();
+        CURL::Decode(pItem->GetVideoInfoTag()->m_strTitle);
+        if (AddVideo(pItem, CONTENT_MOVIES, bDirNames, useLocal) < 0)
+          return INFO_ERROR;
+        return INFO_ADDED;
+      }
+      else
+        return INFO_NOT_FOUND;
+    }
 
-    if (GetDetails(pItem, url, info2, result == CNfoFile::COMBINED_NFO ? &m_nfoReader : NULL, pDlgProgress))
+    if (GetDetails(pItem, url, info2, result == CNfoFile::COMBINED_NFO ? &m_nfoReader : NULL, pDlgProgress) || CSettings::GetInstance().GetBool(CSettings::SETTING_VIDEOLIBRARY_IMPORTALL))
     {
       if (AddVideo(pItem, info2->Content(), bDirNames, useLocal) < 0)
         return INFO_ERROR;
       return INFO_ADDED;
     }
+
     // TODO: This is not strictly correct as we could fail to download information here or error, or be cancelled
     return INFO_NOT_FOUND;
   }
@@ -1092,6 +1106,20 @@ namespace VIDEO
       }
       return true;
     }
+
+    if (CSettings::GetInstance().GetBool(CSettings::SETTING_VIDEOLIBRARY_IMPORTALL))
+    {
+      EPISODE episode;
+      episode.strPath = item->GetPath();
+      episode.iSeason = 0;
+      episode.iEpisode = 0;
+      episode.cDate.SetValid(false);
+      episode.isFolder = false;
+      episodeList.push_back(episode);
+
+      return true;
+    }
+
     return false;
   }
 
@@ -1476,20 +1504,20 @@ namespace VIDEO
       CNfoFile::NFOResult result=CNfoFile::NO_NFO;
       CScraperUrl scrUrl;
       ScraperPtr info(scraper);
-      item.GetVideoInfoTag()->m_iEpisode = file->iEpisode;
       if (useLocal)
         result = CheckForNFOFile(&item, false, info,scrUrl);
       if (result == CNfoFile::FULL_NFO)
       {
         m_nfoReader.GetDetails(*item.GetVideoInfoTag());
         // override with episode and season number from file if available
-        if (file->iEpisode > -1)
+        if (item.GetVideoInfoTag()->m_iEpisode == -1 && file->iEpisode > -1)
         {
           item.GetVideoInfoTag()->m_iEpisode = file->iEpisode;
           item.GetVideoInfoTag()->m_iSeason = file->iSeason;
         }
-        if (AddVideo(&item, CONTENT_TVSHOWS, file->isFolder, true, &showInfo) < 0)
-          return INFO_ERROR;
+        if (m_database.GetEpisodeId(file->strPath, item.GetVideoInfoTag()->m_iEpisode, item.GetVideoInfoTag()->m_iSeason) < 0)
+          if (AddVideo(&item, CONTENT_TVSHOWS, file->isFolder, true, &showInfo) < 0)
+            return INFO_ERROR;
         continue;
       }
 
@@ -1517,10 +1545,26 @@ namespace VIDEO
 
       if (episodes.empty())
       {
-        CLog::Log(LOGERROR, "VideoInfoScanner: Asked to lookup episode %s"
-                            " online, but we have no episode guide. Check your tvshow.nfo and make"
-                            " sure the <episodeguide> tag is in place.", CURL::GetRedacted(file->strPath).c_str());
-        continue;
+        if (!CSettings::GetInstance().GetBool(CSettings::SETTING_VIDEOLIBRARY_IMPORTALL))
+        {
+          CLog::Log(LOGERROR, "VideoInfoScanner: Asked to lookup episode %s"
+                              " online, but we have no episode guide. Check your tvshow.nfo and make"
+                              " sure the <episodeguide> tag is in place.", CURL::GetRedacted(file->strPath).c_str());
+          continue;
+        }
+        else
+        {
+          // Never add the same file twice
+          if (m_database.GetEpisodeId(file->strPath, -1, -1) >= 0)
+          {
+            if (m_handle)
+              m_handle->SetText(g_localizeStrings.Get(20415));
+            continue;
+          }
+
+          file->iEpisode = 0;
+          file->iSeason = 0;
+        }
       }
 
       EPISODE key(file->iSeason, file->iEpisode, file->iSubepisode);
@@ -1610,21 +1654,71 @@ namespace VIDEO
         item.SetPath(file->strPath);
         if (!imdb.GetEpisodeDetails(guide->cScraperUrl, *item.GetVideoInfoTag(), pDlgProgress))
           return INFO_NOT_FOUND; // TODO: should we just skip to the next episode?
-          
+
         // Only set season/epnum from filename when it is not already set by a scraper
         if (item.GetVideoInfoTag()->m_iSeason == -1)
           item.GetVideoInfoTag()->m_iSeason = guide->iSeason;
         if (item.GetVideoInfoTag()->m_iEpisode == -1)
           item.GetVideoInfoTag()->m_iEpisode = guide->iEpisode;
-          
+
         if (AddVideo(&item, CONTENT_TVSHOWS, file->isFolder, useLocal, &showInfo) < 0)
           return INFO_ERROR;
       }
       else
       {
-        CLog::Log(LOGDEBUG,"%s - no match for show: '%s', season: %d, episode: %d.%d, airdate: '%s', title: '%s'",
-                  __FUNCTION__, showInfo.m_strTitle.c_str(), file->iSeason, file->iEpisode, file->iSubepisode,
-                  file->cDate.GetAsLocalizedDate().c_str(), file->strTitle.c_str());
+        if (!episodes.empty() || !CSettings::GetInstance().GetBool(CSettings::SETTING_VIDEOLIBRARY_IMPORTALL))
+        {
+          CLog::Log(LOGDEBUG,"%s - no match for show: '%s', season: %d, episode: %d.%d, airdate: '%s', title: '%s'",
+                    __FUNCTION__, showInfo.m_strTitle.c_str(), file->iSeason, file->iEpisode, file->iSubepisode,
+                    file->cDate.GetAsLocalizedDate().c_str(), file->strTitle.c_str());
+        }
+        else
+        {
+          CFileItem item;
+          item.SetPath(file->strPath);
+          item.GetVideoInfoTag()->m_strTitle = CURL(file->strPath).GetFileNameWithoutPath();
+          CURL::Decode(item.GetVideoInfoTag()->m_strTitle);
+          item.GetVideoInfoTag()->m_strSortTitle = item.GetVideoInfoTag()->m_strTitle;
+          item.GetVideoInfoTag()->m_iSeason = file->iSeason;
+          item.GetVideoInfoTag()->m_iEpisode = file->iEpisode;
+
+          // Let's try to get the modification datetime
+          CDateTime dateAdded;
+          struct __stat64 buffer;
+          if (CFile::Stat(file->strPath, &buffer) == 0 && (buffer.st_mtime != 0 || buffer.st_ctime !=0))
+          {
+            time_t now = time(NULL);
+            time_t addedTime;
+            // Prefer the modification time if it's valid
+            if (g_advancedSettings.m_iVideoLibraryDateAdded == 1)
+            {
+              if (buffer.st_mtime != 0 && (time_t)buffer.st_mtime <= now)
+                addedTime = (time_t)buffer.st_mtime;
+              else
+                addedTime = (time_t)buffer.st_ctime;
+            }
+            // Use the newer of the creation and modification time
+            else
+            {
+              addedTime = std::max((time_t)buffer.st_ctime, (time_t)buffer.st_mtime);
+              // if the newer of the two dates is in the future, we try it with the older one
+              if (addedTime > now)
+                addedTime = std::min((time_t)buffer.st_ctime, (time_t)buffer.st_mtime);
+            }
+
+            // make sure the datetime does is not in the future
+            if (addedTime <= now)
+            {
+              struct tm *time = localtime(&addedTime);
+              if (time)
+                dateAdded = *time;
+            }
+          }
+
+          item.GetVideoInfoTag()->m_firstAired = dateAdded;
+          if (AddVideo(&item, CONTENT_TVSHOWS, file->isFolder, useLocal, &showInfo) < 0)
+            return INFO_ERROR;
+        }
       }
     }
     return INFO_ADDED;
-- 
1.9.1

