From 6ea119023b402186cc8a5f75db89f4d1d22d261e Mon Sep 17 00:00:00 2001
From: "S. Davilla" <davilla@4pi.com>
Date: Wed, 10 Feb 2016 11:22:26 -0500
Subject: [PATCH] fixed, plug some http exploits with a zebra list check

---
 xbmc/network/WebServer.cpp                         |  6 +++
 .../httprequesthandler/HTTPWebinterfaceHandler.cpp |  5 +++
 xbmc/utils/FileUtils.cpp                           | 48 ++++++++++++++++++++++
 xbmc/utils/FileUtils.h                             |  1 +
 4 files changed, 60 insertions(+)

diff --git a/xbmc/network/WebServer.cpp b/xbmc/network/WebServer.cpp
index b28b09d..e42fc59 100644
--- a/xbmc/network/WebServer.cpp
+++ b/xbmc/network/WebServer.cpp
@@ -41,6 +41,7 @@
 #include "URL.h"
 #include "Util.h"
 #include "utils/Base64.h"
+#include "utils/FileUtils.h"
 #include "utils/log.h"
 #include "utils/Mime.h"
 #include "utils/StringUtils.h"
@@ -771,6 +772,10 @@ int CWebServer::CreateFileDownloadResponse(IHTTPRequestHandler *handler, struct
   std::shared_ptr<XFILE::CFile> file = std::make_shared<XFILE::CFile>();
   std::string filePath = handler->GetResponseFile();
 
+  // white/black list access check
+  if (!CFileUtils::ZebraListAccessCheck(filePath))
+    return SendErrorResponse(request.connection, MHD_HTTP_NOT_FOUND, request.method);
+
   if (!file->Open(filePath, READ_NO_CACHE))
   {
     CLog::Log(LOGERROR, "WebServer: Failed to open %s", filePath.c_str());
@@ -1367,4 +1372,5 @@ bool CWebServer::GetLastModifiedDateTime(XFILE::CFile *file, CDateTime &lastModi
   lastModified = *time;
   return true;
 }
+
 #endif
diff --git a/xbmc/network/httprequesthandler/HTTPWebinterfaceHandler.cpp b/xbmc/network/httprequesthandler/HTTPWebinterfaceHandler.cpp
index 652cd96..886fbdd 100644
--- a/xbmc/network/httprequesthandler/HTTPWebinterfaceHandler.cpp
+++ b/xbmc/network/httprequesthandler/HTTPWebinterfaceHandler.cpp
@@ -23,6 +23,7 @@
 #include "addons/Webinterface.h"
 #include "filesystem/Directory.h"
 #include "filesystem/File.h"
+#include "utils/FileUtils.h"
 #include "utils/StringUtils.h"
 #include "utils/URIUtils.h"
 
@@ -74,6 +75,10 @@ int CHTTPWebinterfaceHandler::ResolveUrl(const std::string &url, std::string &pa
   if (!XFILE::CFile::Exists(path))
     return MHD_HTTP_NOT_FOUND;
 
+  // white/black list access check
+  if (!CFileUtils::ZebraListAccessCheck(path))
+    return MHD_HTTP_NOT_FOUND;
+
   return MHD_HTTP_OK;
 }
 
diff --git a/xbmc/utils/FileUtils.cpp b/xbmc/utils/FileUtils.cpp
index 818fc8a..e13db0e 100644
--- a/xbmc/utils/FileUtils.cpp
+++ b/xbmc/utils/FileUtils.cpp
@@ -35,6 +35,9 @@
 #include "URL.h"
 #include "settings/Settings.h"
 #include "utils/Variant.h"
+#if defined(TARGET_DARWIN)
+  #include "platform/darwin/DarwinUtils.h"
+#endif
 
 using namespace XFILE;
 
@@ -164,6 +167,51 @@ bool CFileUtils::RemoteAccessAllowed(const std::string &strPath)
   return false;
 }
 
+bool CFileUtils::ZebraListAccessCheck(const std::string &filePath)
+{
+  // white/black list access checks, disallow exploits
+
+  // no access to the passwords.xml file,
+  // this can expose user/pass of remote servers
+  if (filePath.find("passwords.xml") != std::string::npos)
+  {
+    CLog::Log(LOGDEBUG,"http access denied");
+    return false;
+  }
+
+  // no access to the sources.xml file,
+  // this can expose user/pass of remote servers
+  if (filePath.find("sources.xml") != std::string::npos)
+  {
+    CLog::Log(LOGDEBUG,"http access denied");
+    return false;
+  }
+
+#if defined(TARGET_DARWIN)
+  char *fullpath = realpath(filePath.c_str(), nullptr);
+  if (fullpath)
+  {
+    const std::string testpath = fullpath;
+    free(fullpath);
+
+    // if this is a real path and accesses into user home, allow.
+    std::string userHome = CDarwinUtils::GetUserHomeDirectory();
+    if (testpath.find(userHome) != std::string::npos)
+      return true;
+
+    // if this is a real path and accesses outside app, deny.
+    std::string appRoot = CDarwinUtils::GetOSAppRootFolder();
+    if (testpath.find(appRoot) == std::string::npos)
+    {
+      CLog::Log(LOGDEBUG,"http access denied");
+      return false;
+    }
+  }
+#endif
+
+  return true;
+}
+
 CDateTime CFileUtils::GetModificationDate(const std::string& strFileNameAndPath, const bool& bUseLatestDate)
 {
   CDateTime dateAdded;
diff --git a/xbmc/utils/FileUtils.h b/xbmc/utils/FileUtils.h
index 2064695..c379240 100644
--- a/xbmc/utils/FileUtils.h
+++ b/xbmc/utils/FileUtils.h
@@ -29,6 +29,7 @@ class CFileUtils
   static bool RenameFile(const std::string &strFile);
   static bool RemoteAccessAllowed(const std::string &strPath);
   static unsigned int LoadFile(const std::string &filename, void* &outputBuffer);
+  static bool ZebraListAccessCheck(const std::string &filePath);
   /*! \brief Get the modified date of a file if its invalid it returns the creation date - this behavior changes when you set bUseLatestDate
   \param strFileNameAndPath path to the file
   \param bUseLatestDate use the newer datetime of the files mtime and ctime
